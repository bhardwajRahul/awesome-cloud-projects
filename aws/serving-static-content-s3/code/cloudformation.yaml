AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Static Website Hosting with Amazon S3 and CloudFront
  
  This template creates a complete static website hosting solution using:
  - S3 bucket for website content storage
  - CloudFront distribution for global content delivery
  - Optional custom domain with SSL certificate via ACM
  - Origin Access Control for secure S3 access
  - Route 53 DNS configuration (optional)
  
  Based on the recipe: Serving Static Content with S3 and CloudFront

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Website Configuration"
        Parameters:
          - WebsiteName
          - EnableCustomDomain
          - DomainName
          - CreateRoute53Record
      - Label:
          default: "CloudFront Configuration"
        Parameters:
          - CloudFrontPriceClass
          - EnableLogging
          - DefaultCacheTTL
          - MaxCacheTTL
      - Label:
          default: "Security Configuration"
        Parameters:
          - MinimumProtocolVersion
          - EnableIPv6
    ParameterLabels:
      WebsiteName:
        default: "Website Name"
      EnableCustomDomain:
        default: "Enable Custom Domain"
      DomainName:
        default: "Domain Name"
      CreateRoute53Record:
        default: "Create Route 53 Record"
      CloudFrontPriceClass:
        default: "CloudFront Price Class"
      EnableLogging:
        default: "Enable Access Logging"
      DefaultCacheTTL:
        default: "Default Cache TTL (seconds)"
      MaxCacheTTL:
        default: "Maximum Cache TTL (seconds)"
      MinimumProtocolVersion:
        default: "Minimum TLS Protocol Version"
      EnableIPv6:
        default: "Enable IPv6"

Parameters:
  WebsiteName:
    Type: String
    Description: Name for the website (used in resource naming)
    Default: my-static-website
    AllowedPattern: ^[a-z0-9-]+$
    ConstraintDescription: Must contain only lowercase letters, numbers, and hyphens
    MinLength: 3
    MaxLength: 63

  EnableCustomDomain:
    Type: String
    Description: Whether to configure a custom domain for the website
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

  DomainName:
    Type: String
    Description: Custom domain name (e.g., example.com). Required if EnableCustomDomain is true.
    Default: ''
    AllowedPattern: ^$|^[a-z0-9.-]+\.[a-z]{2,}$
    ConstraintDescription: Must be a valid domain name or empty

  CreateRoute53Record:
    Type: String
    Description: Whether to create Route 53 DNS record (domain must be hosted in Route 53)
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

  CloudFrontPriceClass:
    Type: String
    Description: CloudFront price class determines which edge locations to use
    Default: PriceClass_100
    AllowedValues:
      - PriceClass_All
      - PriceClass_200
      - PriceClass_100
    ConstraintDescription: Must be a valid CloudFront price class

  EnableLogging:
    Type: String
    Description: Whether to enable CloudFront access logging
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  DefaultCacheTTL:
    Type: Number
    Description: Default cache TTL in seconds
    Default: 86400
    MinValue: 0
    MaxValue: 31536000

  MaxCacheTTL:
    Type: Number
    Description: Maximum cache TTL in seconds
    Default: 31536000
    MinValue: 0
    MaxValue: 31536000

  MinimumProtocolVersion:
    Type: String
    Description: Minimum TLS protocol version for HTTPS connections
    Default: TLSv1.2_2021
    AllowedValues:
      - TLSv1.2_2021
      - TLSv1.2_2019
      - TLSv1.1_2016
      - TLSv1_2016

  EnableIPv6:
    Type: String
    Description: Whether to enable IPv6 for CloudFront distribution
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

Conditions:
  # Domain-related conditions
  HasCustomDomain: !Equals [!Ref EnableCustomDomain, 'true']
  HasDomainName: !Not [!Equals [!Ref DomainName, '']]
  CreateDNSRecord: !And
    - !Condition HasCustomDomain
    - !Condition HasDomainName
    - !Equals [!Ref CreateRoute53Record, 'true']
  
  # Logging condition
  LoggingEnabled: !Equals [!Ref EnableLogging, 'true']
  
  # IPv6 condition
  IPv6Enabled: !Equals [!Ref EnableIPv6, 'true']
  
  # Certificate condition - only create if custom domain is enabled and domain name is provided
  CreateCertificate: !And
    - !Condition HasCustomDomain
    - !Condition HasDomainName

Resources:
  # S3 Bucket for website content
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${WebsiteName}-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref S3LogGroup
      Tags:
        - Key: Name
          Value: !Sub '${WebsiteName}-content-bucket'
        - Key: Purpose
          Value: Static Website Hosting
        - Key: Environment
          Value: Production

  # S3 Bucket for CloudFront access logs (conditional)
  LogsBucket:
    Type: AWS::S3::Bucket
    Condition: LoggingEnabled
    Properties:
      BucketName: !Sub '${WebsiteName}-logs-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteLogsAfter90Days
            Status: Enabled
            ExpirationInDays: 90
          - Id: TransitionToIA
            Status: Enabled
            TransitionInDays: 30
            StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${WebsiteName}-logs-bucket'
        - Key: Purpose
          Value: CloudFront Access Logs
        - Key: Environment
          Value: Production

  # CloudWatch Log Group for S3 notifications
  S3LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/s3/${WebsiteName}'
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub '${WebsiteName}-s3-logs'
        - Key: Purpose
          Value: S3 Event Logging

  # Origin Access Control for secure CloudFront to S3 access
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${WebsiteName}-OAC'
        Description: !Sub 'Origin Access Control for ${WebsiteName} static website'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # SSL Certificate for custom domain (conditional)
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: CreateCertificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !If
            - CreateDNSRecord
            - !Ref HostedZone
            - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub '${WebsiteName}-ssl-certificate'
        - Key: Domain
          Value: !Ref DomainName

  # Route 53 Hosted Zone lookup (conditional)
  HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: CreateDNSRecord
    Properties:
      Name: !Ref DomainName
      HostedZoneConfig:
        Comment: !Sub 'Hosted zone for ${DomainName}'
      HostedZoneTags:
        - Key: Name
          Value: !Sub '${DomainName}-hosted-zone'
        - Key: Purpose
          Value: Static Website DNS

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub 'CloudFront distribution for ${WebsiteName}'
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2and3
        IPV6Enabled: !Condition IPv6Enabled
        PriceClass: !Ref CloudFrontPriceClass
        
        # Origins configuration
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref OriginAccessControl
            
        # Default cache behavior
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # Managed-CORS-S3Origin
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03  # Managed-SecurityHeadersPolicy
          Compress: true
          DefaultTTL: !Ref DefaultCacheTTL
          MaxTTL: !Ref MaxCacheTTL

        # Custom error responses
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /error.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /error.html
            ErrorCachingMinTTL: 300

        # Aliases for custom domain (conditional)
        Aliases: !If
          - HasCustomDomain
          - [!Ref DomainName]
          - !Ref AWS::NoValue

        # SSL Certificate configuration (conditional)
        ViewerCertificate: !If
          - CreateCertificate
          - AcmCertificateArn: !Ref SSLCertificate
            SslSupportMethod: sni-only
            MinimumProtocolVersion: !Ref MinimumProtocolVersion
          - CloudFrontDefaultCertificate: true

        # Logging configuration (conditional)
        Logging: !If
          - LoggingEnabled
          - Bucket: !GetAtt LogsBucket.DomainName
            Prefix: cloudfront-logs/
            IncludeCookies: false
          - !Ref AWS::NoValue

        # Web ACL (optional - can be enabled for additional security)
        WebACLId: !Ref AWS::NoValue

      Tags:
        - Key: Name
          Value: !Sub '${WebsiteName}-cloudfront-distribution'
        - Key: Purpose
          Value: Static Website CDN
        - Key: Environment
          Value: Production

  # S3 Bucket Policy for CloudFront access
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${WebsiteBucket}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  # Route 53 DNS Record (conditional)
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNSRecord
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID
        EvaluateTargetHealth: false

  # Route 53 AAAA Record for IPv6 (conditional)
  DNSRecordIPv6:
    Type: AWS::Route53::RecordSet
    Condition: !And
      - !Condition CreateDNSRecord
      - !Condition IPv6Enabled
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Ref DomainName
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID
        EvaluateTargetHealth: false

Outputs:
  # S3 Bucket Information
  WebsiteBucketName:
    Description: Name of the S3 bucket storing website content
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteBucket'

  WebsiteBucketArn:
    Description: ARN of the S3 bucket storing website content
    Value: !GetAtt WebsiteBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteBucketArn'

  # CloudFront Distribution Information
  CloudFrontDistributionId:
    Description: CloudFront distribution ID
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  CloudFrontDistributionDomainName:
    Description: CloudFront distribution domain name
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDomain'

  CloudFrontURL:
    Description: CloudFront distribution URL
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontURL'

  # Custom Domain Information (conditional)
  CustomDomainURL:
    Condition: HasCustomDomain
    Description: Custom domain URL for the website
    Value: !Sub 'https://${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-CustomDomainURL'

  # SSL Certificate Information (conditional)
  SSLCertificateArn:
    Condition: CreateCertificate
    Description: ARN of the SSL certificate
    Value: !Ref SSLCertificate
    Export:
      Name: !Sub '${AWS::StackName}-SSLCertificateArn'

  # Logging Bucket Information (conditional)
  LogsBucketName:
    Condition: LoggingEnabled
    Description: Name of the S3 bucket storing CloudFront access logs
    Value: !Ref LogsBucket
    Export:
      Name: !Sub '${AWS::StackName}-LogsBucket'

  # Route 53 Information (conditional)
  HostedZoneId:
    Condition: CreateDNSRecord
    Description: Route 53 hosted zone ID
    Value: !Ref HostedZone
    Export:
      Name: !Sub '${AWS::StackName}-HostedZoneId'

  # Upload Instructions
  UploadInstructions:
    Description: Instructions for uploading website content
    Value: !Sub |
      To upload your website content to S3:
      
      1. Using AWS CLI:
         aws s3 sync /path/to/your/website/ s3://${WebsiteBucket}/
      
      2. Using AWS Console:
         Navigate to S3 > ${WebsiteBucket} > Upload files
      
      3. After upload, CloudFront will serve your content globally.
         It may take 5-15 minutes for changes to propagate to all edge locations.

  # Cost Optimization Tips
  CostOptimizationTips:
    Description: Tips for optimizing costs
    Value: |
      Cost Optimization Tips:
      
      1. Use appropriate Cache-Control headers on S3 objects to maximize CloudFront cache hits
      2. Enable CloudFront compression to reduce data transfer costs
      3. Consider using S3 Intelligent-Tiering for infrequently accessed content
      4. Monitor CloudFront usage with AWS Cost Explorer
      5. Use CloudFront price class that matches your audience geography
      6. Set appropriate TTL values to balance freshness and cache efficiency

  # Security Recommendations
  SecurityRecommendations:
    Description: Security recommendations for your static website
    Value: |
      Security Recommendations:
      
      1. Enable AWS WAF on CloudFront for additional protection
      2. Use CloudFront security headers policy (already applied)
      3. Regularly review S3 bucket policies and permissions
      4. Enable CloudTrail for API logging
      5. Use AWS Config for compliance monitoring
      6. Consider enabling AWS Shield Advanced for DDoS protection
      7. Implement Content Security Policy (CSP) headers in your website