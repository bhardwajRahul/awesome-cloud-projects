AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for EC2 Hibernation Cost Optimization - Creates hibernation-enabled EC2 instance with monitoring and alerting'

Parameters:
  InstanceType:
    Type: String
    Default: m5.large
    Description: EC2 instance type that supports hibernation
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5a.16xlarge
      - m5a.24xlarge
      - m5ad.large
      - m5ad.xlarge
      - m5ad.2xlarge
      - m5ad.4xlarge
      - m5ad.8xlarge
      - m5ad.12xlarge
      - m5ad.16xlarge
      - m5ad.24xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.8xlarge
      - m5d.12xlarge
      - m5d.16xlarge
      - m5d.24xlarge
      - m5dn.large
      - m5dn.xlarge
      - m5dn.2xlarge
      - m5dn.4xlarge
      - m5dn.8xlarge
      - m5dn.12xlarge
      - m5dn.16xlarge
      - m5dn.24xlarge
      - m5n.large
      - m5n.xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m5n.8xlarge
      - m5n.12xlarge
      - m5n.16xlarge
      - m5n.24xlarge
      - m5zn.large
      - m5zn.xlarge
      - m5zn.2xlarge
      - m5zn.3xlarge
      - m5zn.6xlarge
      - m5zn.12xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - c5d.large
      - c5d.xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.9xlarge
      - c5d.12xlarge
      - c5d.18xlarge
      - c5d.24xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.12xlarge
      - r5.16xlarge
      - r5.24xlarge
      - r5a.large
      - r5a.xlarge
      - r5a.2xlarge
      - r5a.4xlarge
      - r5a.8xlarge
      - r5a.12xlarge
      - r5a.16xlarge
      - r5a.24xlarge
      - r5ad.large
      - r5ad.xlarge
      - r5ad.2xlarge
      - r5ad.4xlarge
      - r5ad.8xlarge
      - r5ad.12xlarge
      - r5ad.16xlarge
      - r5ad.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.8xlarge
      - r5d.12xlarge
      - r5d.16xlarge
      - r5d.24xlarge
      - r5dn.large
      - r5dn.xlarge
      - r5dn.2xlarge
      - r5dn.4xlarge
      - r5dn.8xlarge
      - r5dn.12xlarge
      - r5dn.16xlarge
      - r5dn.24xlarge
      - r5n.large
      - r5n.xlarge
      - r5n.2xlarge
      - r5n.4xlarge
      - r5n.8xlarge
      - r5n.12xlarge
      - r5n.16xlarge
      - r5n.24xlarge

  VolumeSize:
    Type: Number
    Default: 30
    MinValue: 20
    MaxValue: 100
    Description: Size of the EBS root volume in GB (must be large enough to store hibernation data)

  KeyPairName:
    Type: String
    Description: Name of existing EC2 KeyPair for SSH access
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  NotificationEmail:
    Type: String
    Description: Email address to receive CloudWatch alarm notifications
    AllowedPattern: ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$
    ConstraintDescription: Must be a valid email address

  CPUThreshold:
    Type: Number
    Default: 10
    MinValue: 5
    MaxValue: 50
    Description: CPU utilization threshold for low usage alarm (percentage)

  EvaluationPeriods:
    Type: Number
    Default: 6
    MinValue: 2
    MaxValue: 12
    Description: Number of periods for CloudWatch alarm evaluation

  ProjectName:
    Type: String
    Default: hibernation-demo
    Description: Name of the project for resource tagging
    AllowedPattern: ^[a-zA-Z0-9-]+$
    ConstraintDescription: Must contain only alphanumeric characters and hyphens

  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
    Description: Environment type for resource tagging

  EnableDetailedMonitoring:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable detailed CloudWatch monitoring for the EC2 instance

Conditions:
  IsDetailedMonitoringEnabled: !Equals [!Ref EnableDetailedMonitoring, 'true']
  IsProductionEnvironment: !Equals [!Ref Environment, 'production']

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type
    us-east-2:
      AMI: ami-0f924dc71d44d23e2  # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type
    us-west-1:
      AMI: ami-0d382e80be7ffdae5  # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type
    us-west-2:
      AMI: ami-0c2d3e23ef0b8e8a8  # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type
    eu-west-1:
      AMI: ami-0a8e758f5e873d1c1  # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type
    eu-west-2:
      AMI: ami-0194c3e07668a7e36  # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type
    eu-west-3:
      AMI: ami-0f7cd40eac2214b37  # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type
    eu-central-1:
      AMI: ami-0ec7f9846da6b0f61  # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type
    ap-southeast-1:
      AMI: ami-0c802847a7dd848c0  # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type
    ap-southeast-2:
      AMI: ami-0b2045146eb00b617  # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type
    ap-northeast-1:
      AMI: ami-0ca38c7440de1749a  # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type
    ap-northeast-2:
      AMI: ami-0a93a08544874b3b7  # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type
    ap-south-1:
      AMI: ami-0937dcc711d38ef3f  # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type
    sa-east-1:
      AMI: ami-0c9cf4dcf5c5be4a8  # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type
    ca-central-1:
      AMI: ami-0bae7412735610274  # Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type

Resources:
  # VPC and Networking Resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-igw'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-rt'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security Group
  HibernationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for hibernation-enabled EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access from anywhere
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access from anywhere
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access from anywhere
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # IAM Role for EC2 Instance
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-ec2-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: HibernationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-ec2-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${ProjectName}-ec2-instance-profile'
      Roles:
        - !Ref EC2Role

  # EC2 Instance with Hibernation Enabled
  HibernationInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref HibernationSecurityGroup
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref EC2InstanceProfile
      HibernationOptions:
        Configured: true
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: !Ref VolumeSize
            Encrypted: true
            DeleteOnTermination: true
      Monitoring: !If [IsDetailedMonitoringEnabled, true, false]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y amazon-cloudwatch-agent
          
          # Create test file to demonstrate hibernation state preservation
          echo "Instance hibernation test file created at $(date)" > /home/ec2-user/hibernation-test.txt
          chown ec2-user:ec2-user /home/ec2-user/hibernation-test.txt
          
          # Install CloudWatch agent configuration
          cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'
          {
            "metrics": {
              "namespace": "AWS/EC2",
              "metrics_collected": {
                "cpu": {
                  "measurement": [
                    "cpu_usage_idle",
                    "cpu_usage_iowait",
                    "cpu_usage_user",
                    "cpu_usage_system"
                  ],
                  "metrics_collection_interval": 60
                },
                "disk": {
                  "measurement": [
                    "used_percent"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                    "*"
                  ]
                },
                "mem": {
                  "measurement": [
                    "mem_used_percent"
                  ],
                  "metrics_collection_interval": 60
                }
              }
            }
          }
          EOF
          
          # Start CloudWatch agent
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
          
          # Create hibernation test script
          cat > /home/ec2-user/test-hibernation.sh << 'EOF'
          #!/bin/bash
          echo "Testing hibernation state preservation..."
          echo "Current date: $(date)"
          echo "Test file content:"
          cat /home/ec2-user/hibernation-test.txt
          echo "Process list:"
          ps aux | head -10
          echo "Memory usage:"
          free -h
          echo "Disk usage:"
          df -h
          EOF
          
          chmod +x /home/ec2-user/test-hibernation.sh
          chown ec2-user:ec2-user /home/ec2-user/test-hibernation.sh
          
          # Signal CloudFormation that the instance is ready
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource HibernationInstance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-hibernation-instance'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: HibernationDemo
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: 1

  # SNS Topic for Notifications
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-hibernation-notifications'
      DisplayName: !Sub '${ProjectName} Hibernation Notifications'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-notifications'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  NotificationTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref NotificationTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # CloudWatch Alarms
  LowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-low-cpu-utilization'
      AlarmDescription: 'Alarm when CPU utilization is consistently low, indicating hibernation opportunity'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: !Ref EvaluationPeriods
      Threshold: !Ref CPUThreshold
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref NotificationTopic
      Dimensions:
        - Name: InstanceId
          Value: !Ref HibernationInstance
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-low-cpu-alarm'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-high-cpu-utilization'
      AlarmDescription: 'Alarm when CPU utilization is high, indicating active usage'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationTopic
      Dimensions:
        - Name: InstanceId
          Value: !Ref HibernationInstance
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-high-cpu-alarm'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # CloudWatch Dashboard
  HibernationDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-hibernation-dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", "InstanceId", "${HibernationInstance}" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "EC2 CPU Utilization",
                "yAxis": {
                  "left": {
                    "min": 0,
                    "max": 100
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "NetworkIn", "InstanceId", "${HibernationInstance}" ],
                  [ ".", "NetworkOut", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Network Traffic"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "StatusCheckFailed", "InstanceId", "${HibernationInstance}" ],
                  [ ".", "StatusCheckFailed_Instance", ".", "." ],
                  [ ".", "StatusCheckFailed_System", ".", "." ]
                ],
                "period": 300,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Instance Status Checks"
              }
            }
          ]
        }

  # Custom Resource for Hibernation Validation
  HibernationValidationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-hibernation-validator'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt HibernationValidationRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          
          def lambda_handler(event, context):
              try:
                  if event['RequestType'] == 'Delete':
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  
                  ec2 = boto3.client('ec2')
                  instance_id = event['ResourceProperties']['InstanceId']
                  
                  # Verify hibernation is enabled
                  response = ec2.describe_instances(InstanceIds=[instance_id])
                  instance = response['Reservations'][0]['Instances'][0]
                  
                  hibernation_enabled = instance['HibernationOptions']['Configured']
                  root_device_encrypted = instance['BlockDeviceMappings'][0]['Ebs']['Encrypted']
                  
                  if hibernation_enabled and root_device_encrypted:
                      result = {
                          'HibernationEnabled': hibernation_enabled,
                          'RootDeviceEncrypted': root_device_encrypted,
                          'ValidationStatus': 'SUCCESS'
                      }
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, result)
                  else:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {
                          'Error': 'Hibernation validation failed'
                      })
                      
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Error': str(e)
                  })
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-hibernation-validator'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  HibernationValidationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EC2DescribePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource: '*'

  HibernationValidation:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt HibernationValidationFunction.Arn
      InstanceId: !Ref HibernationInstance
    DependsOn: HibernationInstance

Outputs:
  InstanceId:
    Description: ID of the hibernation-enabled EC2 instance
    Value: !Ref HibernationInstance
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'

  InstancePublicIp:
    Description: Public IP address of the hibernation-enabled EC2 instance
    Value: !GetAtt HibernationInstance.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-InstancePublicIp'

  InstancePrivateIp:
    Description: Private IP address of the hibernation-enabled EC2 instance
    Value: !GetAtt HibernationInstance.PrivateIp
    Export:
      Name: !Sub '${AWS::StackName}-InstancePrivateIp'

  VPCId:
    Description: ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCId'

  SubnetId:
    Description: ID of the public subnet
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub '${AWS::StackName}-SubnetId'

  SecurityGroupId:
    Description: ID of the security group
    Value: !Ref HibernationSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'

  SNSTopicArn:
    Description: ARN of the SNS topic for notifications
    Value: !Ref NotificationTopic
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopicArn'

  DashboardURL:
    Description: URL to the CloudWatch dashboard
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-hibernation-dashboard'

  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub 'ssh -i ${KeyPairName}.pem ec2-user@${HibernationInstance.PublicIp}'

  HibernateCommand:
    Description: AWS CLI command to hibernate the instance
    Value: !Sub 'aws ec2 stop-instances --instance-ids ${HibernationInstance} --hibernate --region ${AWS::Region}'

  StartCommand:
    Description: AWS CLI command to start the hibernated instance
    Value: !Sub 'aws ec2 start-instances --instance-ids ${HibernationInstance} --region ${AWS::Region}'

  HibernationValidationStatus:
    Description: Status of hibernation validation
    Value: !GetAtt HibernationValidation.ValidationStatus
    Export:
      Name: !Sub '${AWS::StackName}-HibernationValidationStatus'

  EstimatedMonthlyCost:
    Description: Estimated monthly cost for running instance 24/7 vs hibernation schedule
    Value: !Sub |
      Running 24/7: ~$${InstanceType} cost per hour * 730 hours
      Hibernation (8hrs/day): ~$${InstanceType} cost per hour * 240 hours + EBS storage cost
      Potential savings: ~67% reduction in compute costs