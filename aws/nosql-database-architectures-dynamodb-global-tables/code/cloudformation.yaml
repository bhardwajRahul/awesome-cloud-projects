AWSTemplateFormatVersion: '2010-09-09'
Description: 'Architecting NoSQL Databases with DynamoDB Global Tables - A comprehensive CloudFormation template that deploys a globally distributed DynamoDB Global Tables architecture with multi-region replication, security, monitoring, and operational excellence'

# Template metadata for documentation and governance
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Global Table Configuration"
        Parameters:
          - TableName
          - TableClass
          - BillingMode
          - ReadCapacityUnits
          - WriteCapacityUnits
      - Label:
          default: "Global Secondary Index Configuration"
        Parameters:
          - GSIReadCapacityUnits
          - GSIWriteCapacityUnits
      - Label:
          default: "Security Configuration"
        Parameters:
          - EnableEncryption
          - EnablePointInTimeRecovery
          - EnableDeletionProtection
          - EnableBackupRetention
      - Label:
          default: "Monitoring and Alerting"
        Parameters:
          - EnableCloudWatchAlarms
          - ReadThrottleThreshold
          - WriteThrottleThreshold
          - ReplicationLagThreshold
          - SNSTopicArn
      - Label:
          default: "Lambda Testing Function"
        Parameters:
          - DeployLambdaFunction
          - LambdaFunctionName
      - Label:
          default: "Tagging and Governance"
        Parameters:
          - Environment
          - Application
          - Owner
          - CostCenter
    ParameterLabels:
      TableName:
        default: "DynamoDB Table Name"
      TableClass:
        default: "DynamoDB Table Class"
      BillingMode:
        default: "Billing Mode"
      ReadCapacityUnits:
        default: "Read Capacity Units"
      WriteCapacityUnits:
        default: "Write Capacity Units"
      GSIReadCapacityUnits:
        default: "GSI Read Capacity Units"
      GSIWriteCapacityUnits:
        default: "GSI Write Capacity Units"
      EnableEncryption:
        default: "Enable Server-Side Encryption"
      EnablePointInTimeRecovery:
        default: "Enable Point-in-Time Recovery"
      EnableDeletionProtection:
        default: "Enable Deletion Protection"
      EnableBackupRetention:
        default: "Enable Backup Retention"
      EnableCloudWatchAlarms:
        default: "Enable CloudWatch Alarms"
      ReadThrottleThreshold:
        default: "Read Throttle Alarm Threshold"
      WriteThrottleThreshold:
        default: "Write Throttle Alarm Threshold"
      ReplicationLagThreshold:
        default: "Replication Lag Threshold (ms)"
      SNSTopicArn:
        default: "SNS Topic ARN for Alarms"
      DeployLambdaFunction:
        default: "Deploy Lambda Test Function"
      LambdaFunctionName:
        default: "Lambda Function Name"
      Environment:
        default: "Environment"
      Application:
        default: "Application Name"
      Owner:
        default: "Owner"
      CostCenter:
        default: "Cost Center"

# Input parameters for customization
Parameters:
  # Global Table Configuration
  TableName:
    Type: String
    Default: global-app-data
    Description: 'Name of the DynamoDB Global Table (will be suffixed with random string)'
    AllowedPattern: '[a-zA-Z0-9_.-]+'
    ConstraintDescription: 'Must contain only alphanumeric characters, underscores, dots, and hyphens'
    MinLength: 3
    MaxLength: 255

  TableClass:
    Type: String
    Default: STANDARD
    AllowedValues:
      - STANDARD
      - STANDARD_INFREQUENT_ACCESS
    Description: 'DynamoDB table class for cost optimization'

  BillingMode:
    Type: String
    Default: PROVISIONED
    AllowedValues:
      - PROVISIONED
      - PAY_PER_REQUEST
    Description: 'Billing mode for the DynamoDB table'

  ReadCapacityUnits:
    Type: Number
    Default: 10
    MinValue: 1
    MaxValue: 40000
    Description: 'Provisioned read capacity units (ignored if PAY_PER_REQUEST)'

  WriteCapacityUnits:
    Type: Number
    Default: 10
    MinValue: 1
    MaxValue: 40000
    Description: 'Provisioned write capacity units (ignored if PAY_PER_REQUEST)'

  # Global Secondary Index Configuration
  GSIReadCapacityUnits:
    Type: Number
    Default: 5
    MinValue: 1
    MaxValue: 40000
    Description: 'GSI provisioned read capacity units (ignored if PAY_PER_REQUEST)'

  GSIWriteCapacityUnits:
    Type: Number
    Default: 5
    MinValue: 1
    MaxValue: 40000
    Description: 'GSI provisioned write capacity units (ignored if PAY_PER_REQUEST)'

  # Security Configuration
  EnableEncryption:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable server-side encryption with customer-managed KMS key'

  EnablePointInTimeRecovery:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable point-in-time recovery for data protection'

  EnableDeletionProtection:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable deletion protection to prevent accidental table deletion'

  EnableBackupRetention:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable AWS Backup for additional data protection'

  # Monitoring and Alerting Configuration
  EnableCloudWatchAlarms:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable CloudWatch alarms for monitoring table health'

  ReadThrottleThreshold:
    Type: Number
    Default: 5
    MinValue: 1
    MaxValue: 100
    Description: 'Threshold for read throttle events before triggering alarm'

  WriteThrottleThreshold:
    Type: Number
    Default: 5
    MinValue: 1
    MaxValue: 100
    Description: 'Threshold for write throttle events before triggering alarm'

  ReplicationLagThreshold:
    Type: Number
    Default: 1000
    MinValue: 100
    MaxValue: 10000
    Description: 'Replication lag threshold in milliseconds before triggering alarm'

  SNSTopicArn:
    Type: String
    Default: ''
    Description: 'SNS Topic ARN for alarm notifications (leave empty to skip notifications)'

  # Lambda Function Configuration
  DeployLambdaFunction:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Deploy Lambda function for testing Global Tables functionality'

  LambdaFunctionName:
    Type: String
    Default: global-table-test
    Description: 'Name for the Lambda test function'
    AllowedPattern: '[a-zA-Z0-9_-]+'
    ConstraintDescription: 'Must contain only alphanumeric characters, underscores, and hyphens'
    MinLength: 1
    MaxLength: 64

  # Tagging and Governance
  Environment:
    Type: String
    Default: Production
    AllowedValues:
      - Development
      - Staging
      - Production
    Description: 'Environment designation for resource tagging'

  Application:
    Type: String
    Default: GlobalApp
    Description: 'Application name for resource tagging'
    MinLength: 1
    MaxLength: 255

  Owner:
    Type: String
    Default: Engineering
    Description: 'Owner or team responsible for the resources'
    MinLength: 1
    MaxLength: 255

  CostCenter:
    Type: String
    Default: '1000'
    Description: 'Cost center for billing and chargeback'
    MinLength: 1
    MaxLength: 255

# Conditional resource creation based on parameters
Conditions:
  # Billing mode conditions
  IsProvisionedBilling: !Equals [!Ref BillingMode, 'PROVISIONED']
  IsPayPerRequest: !Equals [!Ref BillingMode, 'PAY_PER_REQUEST']
  
  # Feature enablement conditions
  IsEncryptionEnabled: !Equals [!Ref EnableEncryption, 'true']
  IsPointInTimeRecoveryEnabled: !Equals [!Ref EnablePointInTimeRecovery, 'true']
  IsDeletionProtectionEnabled: !Equals [!Ref EnableDeletionProtection, 'true']
  IsBackupRetentionEnabled: !Equals [!Ref EnableBackupRetention, 'true']
  IsCloudWatchAlarmsEnabled: !Equals [!Ref EnableCloudWatchAlarms, 'true']
  IsLambdaFunctionDeployed: !Equals [!Ref DeployLambdaFunction, 'true']
  
  # SNS notification condition
  HasSNSTopicArn: !Not [!Equals [!Ref SNSTopicArn, '']]
  
  # Combined conditions for alarms with SNS
  EnableAlarmsWithSNS: !And [!Condition IsCloudWatchAlarmsEnabled, !Condition HasSNSTopicArn]
  EnableAlarmsWithoutSNS: !And [!Condition IsCloudWatchAlarmsEnabled, !Not [!Condition HasSNSTopicArn]]

Resources:
  # ========================================
  # SECURITY: KMS Key for DynamoDB Encryption
  # ========================================
  
  # Customer-managed KMS key for DynamoDB encryption
  DynamoDBEncryptionKey:
    Type: AWS::KMS::Key
    Condition: IsEncryptionEnabled
    Properties:
      Description: 'KMS key for DynamoDB Global Tables encryption'
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow DynamoDB Service
            Effect: Allow
            Principal:
              Service: dynamodb.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
              - kms:DescribeKey
            Resource: '*'
          - Sid: Allow Lambda Function Access
            Effect: Allow
            Principal:
              AWS: !If 
                - IsLambdaFunctionDeployed
                - !GetAtt LambdaExecutionRole.Arn
                - !Ref AWS::NoValue
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
              - kms:DescribeKey
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService': !Sub 'dynamodb.${AWS::Region}.amazonaws.com'
      KeyRotationEnabled: true
      Tags:
        - Key: Name
          Value: !Sub '${TableName}-encryption-key'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref Application
        - Key: Owner
          Value: !Ref Owner
        - Key: CostCenter
          Value: !Ref CostCenter

  # KMS key alias for easier reference
  DynamoDBEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Condition: IsEncryptionEnabled
    Properties:
      AliasName: !Sub 'alias/dynamodb-global-${TableName}'
      TargetKeyId: !Ref DynamoDBEncryptionKey

  # ========================================
  # IAM: Roles and Policies
  # ========================================
  
  # IAM role for Lambda function to access DynamoDB
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: IsLambdaFunctionDeployed
    Properties:
      RoleName: !Sub '${TableName}-lambda-execution-role-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBGlobalTableAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:ConditionCheckItem
                Resource:
                  - !Sub 'arn:aws:dynamodb:*:${AWS::AccountId}:table/${TableName}'
                  - !Sub 'arn:aws:dynamodb:*:${AWS::AccountId}:table/${TableName}/index/*'
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                Resource: '*'
              - !If
                - IsEncryptionEnabled
                - Effect: Allow
                  Action:
                    - kms:Decrypt
                    - kms:GenerateDataKey
                    - kms:DescribeKey
                  Resource: !GetAtt DynamoDBEncryptionKey.Arn
                  Condition:
                    StringEquals:
                      'kms:ViaService': !Sub 'dynamodb.${AWS::Region}.amazonaws.com'
                - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub '${TableName}-lambda-execution-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref Application
        - Key: Owner
          Value: !Ref Owner
        - Key: CostCenter
          Value: !Ref CostCenter

  # IAM role for AWS Backup service
  BackupRole:
    Type: AWS::IAM::Role
    Condition: IsBackupRetentionEnabled
    Properties:
      RoleName: !Sub '${TableName}-backup-role-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: backup.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores
      Tags:
        - Key: Name
          Value: !Sub '${TableName}-backup-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref Application
        - Key: Owner
          Value: !Ref Owner
        - Key: CostCenter
          Value: !Ref CostCenter

  # ========================================
  # DYNAMODB: Global Table
  # ========================================
  
  # Primary DynamoDB table that will be converted to Global Tables
  DynamoDBGlobalTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      TableClass: !Ref TableClass
      BillingMode: !Ref BillingMode
      
      # Table schema with primary key and GSI
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      
      # Global Secondary Index for flexible querying
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput: !If
            - IsProvisionedBilling
            - ReadCapacityUnits: !Ref GSIReadCapacityUnits
              WriteCapacityUnits: !Ref GSIWriteCapacityUnits
            - !Ref AWS::NoValue
      
      # Provisioned throughput (only for PROVISIONED billing mode)
      ProvisionedThroughput: !If
        - IsProvisionedBilling
        - ReadCapacityUnits: !Ref ReadCapacityUnits
          WriteCapacityUnits: !Ref WriteCapacityUnits
        - !Ref AWS::NoValue
      
      # Enable DynamoDB Streams for Global Tables replication
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      
      # Server-side encryption configuration
      SSESpecification: !If
        - IsEncryptionEnabled
        - SSEEnabled: true
          KMSMasterKeyId: !Ref DynamoDBEncryptionKey
        - SSEEnabled: false
      
      # Point-in-time recovery configuration
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !Ref EnablePointInTimeRecovery
      
      # Deletion protection
      DeletionProtectionEnabled: !Ref EnableDeletionProtection
      
      # Resource tags
      Tags:
        - Key: Name
          Value: !Ref TableName
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref Application
        - Key: Owner
          Value: !Ref Owner
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: BackupRequired
          Value: !If [IsBackupRetentionEnabled, 'true', 'false']

  # ========================================
  # BACKUP: AWS Backup Configuration
  # ========================================
  
  # Backup vault for DynamoDB table backups
  BackupVault:
    Type: AWS::Backup::BackupVault
    Condition: IsBackupRetentionEnabled
    Properties:
      BackupVaultName: !Sub '${TableName}-backup-vault'
      EncryptionKeyArn: !If
        - IsEncryptionEnabled
        - !GetAtt DynamoDBEncryptionKey.Arn
        - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/backup'
      BackupVaultTags:
        Name: !Sub '${TableName}-backup-vault'
        Environment: !Ref Environment
        Application: !Ref Application
        Owner: !Ref Owner
        CostCenter: !Ref CostCenter

  # Backup plan with daily backups and 30-day retention
  BackupPlan:
    Type: AWS::Backup::BackupPlan
    Condition: IsBackupRetentionEnabled
    Properties:
      BackupPlan:
        BackupPlanName: !Sub '${TableName}-backup-plan'
        BackupPlanRule:
          - RuleName: DailyBackups
            TargetBackupVault: !Ref BackupVault
            ScheduleExpression: 'cron(0 2 ? * * *)'
            StartWindowMinutes: 60
            CompletionWindowMinutes: 120
            Lifecycle:
              DeleteAfterDays: 30
            RecoveryPointTags:
              Environment: !Ref Environment
              Application: !Ref Application
              BackupType: 'Automated'
      BackupPlanTags:
        Name: !Sub '${TableName}-backup-plan'
        Environment: !Ref Environment
        Application: !Ref Application
        Owner: !Ref Owner
        CostCenter: !Ref CostCenter

  # Backup selection to specify which resources to backup
  BackupSelection:
    Type: AWS::Backup::BackupSelection
    Condition: IsBackupRetentionEnabled
    Properties:
      BackupPlanId: !Ref BackupPlan
      BackupSelection:
        SelectionName: !Sub '${TableName}-backup-selection'
        IamRoleArn: !GetAtt BackupRole.Arn
        Resources:
          - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}'
        Conditions:
          StringEquals:
            'aws:ResourceTag/BackupRequired': ['true']

  # ========================================
  # MONITORING: CloudWatch Alarms
  # ========================================
  
  # CloudWatch alarm for read throttling events
  ReadThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsCloudWatchAlarmsEnabled
    Properties:
      AlarmName: !Sub '${TableName}-ReadThrottles-${AWS::Region}'
      AlarmDescription: !Sub 'High read throttling detected on ${TableName} in ${AWS::Region}'
      MetricName: ReadThrottledEvents
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ReadThrottleThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: TableName
          Value: !Ref TableName
      AlarmActions: !If
        - HasSNSTopicArn
        - [!Ref SNSTopicArn]
        - !Ref AWS::NoValue
      OKActions: !If
        - HasSNSTopicArn
        - [!Ref SNSTopicArn]
        - !Ref AWS::NoValue
      TreatMissingData: notBreaching

  # CloudWatch alarm for write throttling events
  WriteThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsCloudWatchAlarmsEnabled
    Properties:
      AlarmName: !Sub '${TableName}-WriteThrottles-${AWS::Region}'
      AlarmDescription: !Sub 'High write throttling detected on ${TableName} in ${AWS::Region}'
      MetricName: WriteThrottledEvents
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref WriteThrottleThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: TableName
          Value: !Ref TableName
      AlarmActions: !If
        - HasSNSTopicArn
        - [!Ref SNSTopicArn]
        - !Ref AWS::NoValue
      OKActions: !If
        - HasSNSTopicArn
        - [!Ref SNSTopicArn]
        - !Ref AWS::NoValue
      TreatMissingData: notBreaching

  # CloudWatch alarm for replication lag (Global Tables specific)
  ReplicationLagAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsCloudWatchAlarmsEnabled
    Properties:
      AlarmName: !Sub '${TableName}-ReplicationLag-${AWS::Region}'
      AlarmDescription: !Sub 'High replication lag detected on ${TableName} in ${AWS::Region}'
      MetricName: ReplicationDelay
      Namespace: AWS/DynamoDB
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ReplicationLagThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: TableName
          Value: !Ref TableName
        - Name: ReceivingRegion
          Value: !Ref AWS::Region
      AlarmActions: !If
        - HasSNSTopicArn
        - [!Ref SNSTopicArn]
        - !Ref AWS::NoValue
      OKActions: !If
        - HasSNSTopicArn
        - [!Ref SNSTopicArn]
        - !Ref AWS::NoValue
      TreatMissingData: notBreaching

  # ========================================
  # LAMBDA: Test Function for Global Tables
  # ========================================
  
  # Lambda function for testing Global Tables functionality
  GlobalTableTestFunction:
    Type: AWS::Lambda::Function
    Condition: IsLambdaFunctionDeployed
    Properties:
      FunctionName: !Sub '${LambdaFunctionName}-${AWS::Region}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          REGION: !Ref AWS::Region
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime, timezone
          import uuid
          
          def lambda_handler(event, context):
              table_name = os.environ['TABLE_NAME']
              region = os.environ['REGION']
              
              try:
                  dynamodb = boto3.resource('dynamodb', region_name=region)
                  table = dynamodb.Table(table_name)
                  
                  # Test write operation
                  test_item = {
                      'PK': f'TEST#{uuid.uuid4()}',
                      'SK': 'LAMBDA_TEST',
                      'timestamp': datetime.now(timezone.utc).isoformat(),
                      'region': region,
                      'test_data': f'Test from Lambda in {region}',
                      'function_name': context.function_name
                  }
                  
                  table.put_item(Item=test_item)
                  
                  # Test read operation to verify data accessibility
                  response = table.scan(
                      FilterExpression='attribute_exists(#r)',
                      ExpressionAttributeNames={'#r': 'region'},
                      Limit=5
                  )
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'Global Tables test completed successfully',
                          'region': region,
                          'write_success': True,
                          'items_count': response['Count'],
                          'sample_items': response['Items'][:2],
                          'test_item_id': test_item['PK']
                      }, default=str)
                  }
                  
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'message': 'Global Tables test failed',
                          'region': region,
                          'error': str(e),
                          'write_success': False
                      })
                  }
      
      Tags:
        - Key: Name
          Value: !Sub '${LambdaFunctionName}-${AWS::Region}'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref Application
        - Key: Owner
          Value: !Ref Owner
        - Key: CostCenter
          Value: !Ref CostCenter

  # Lambda function log group with retention
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: IsLambdaFunctionDeployed
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunctionName}-${AWS::Region}'
      RetentionInDays: 14

# ========================================
# OUTPUTS: Important resource information
# ========================================

Outputs:
  # Table Information
  TableName:
    Description: 'Name of the DynamoDB Global Table'
    Value: !Ref DynamoDBGlobalTable
    Export:
      Name: !Sub '${AWS::StackName}-TableName'

  TableArn:
    Description: 'ARN of the DynamoDB Global Table'
    Value: !GetAtt DynamoDBGlobalTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TableArn'

  TableStreamArn:
    Description: 'ARN of the DynamoDB table stream'
    Value: !GetAtt DynamoDBGlobalTable.StreamArn
    Export:
      Name: !Sub '${AWS::StackName}-TableStreamArn'

  # Security Information
  EncryptionKeyId:
    Condition: IsEncryptionEnabled
    Description: 'KMS Key ID used for DynamoDB encryption'
    Value: !Ref DynamoDBEncryptionKey
    Export:
      Name: !Sub '${AWS::StackName}-EncryptionKeyId'

  EncryptionKeyArn:
    Condition: IsEncryptionEnabled
    Description: 'KMS Key ARN used for DynamoDB encryption'
    Value: !GetAtt DynamoDBEncryptionKey.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EncryptionKeyArn'

  EncryptionKeyAlias:
    Condition: IsEncryptionEnabled
    Description: 'KMS Key alias for DynamoDB encryption'
    Value: !Ref DynamoDBEncryptionKeyAlias
    Export:
      Name: !Sub '${AWS::StackName}-EncryptionKeyAlias'

  # IAM Role Information
  LambdaExecutionRoleArn:
    Condition: IsLambdaFunctionDeployed
    Description: 'ARN of the Lambda execution role'
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaExecutionRoleArn'

  # Lambda Function Information
  LambdaFunctionArn:
    Condition: IsLambdaFunctionDeployed
    Description: 'ARN of the Lambda test function'
    Value: !GetAtt GlobalTableTestFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'

  LambdaFunctionName:
    Condition: IsLambdaFunctionDeployed
    Description: 'Name of the Lambda test function'
    Value: !Ref GlobalTableTestFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'

  # Backup Information
  BackupVaultName:
    Condition: IsBackupRetentionEnabled
    Description: 'Name of the backup vault'
    Value: !Ref BackupVault
    Export:
      Name: !Sub '${AWS::StackName}-BackupVaultName'

  BackupPlanId:
    Condition: IsBackupRetentionEnabled
    Description: 'ID of the backup plan'
    Value: !Ref BackupPlan
    Export:
      Name: !Sub '${AWS::StackName}-BackupPlanId'

  # Monitoring Information
  ReadThrottleAlarmName:
    Condition: IsCloudWatchAlarmsEnabled
    Description: 'Name of the read throttle CloudWatch alarm'
    Value: !Ref ReadThrottleAlarm
    Export:
      Name: !Sub '${AWS::StackName}-ReadThrottleAlarmName'

  WriteThrottleAlarmName:
    Condition: IsCloudWatchAlarmsEnabled
    Description: 'Name of the write throttle CloudWatch alarm'
    Value: !Ref WriteThrottleAlarm
    Export:
      Name: !Sub '${AWS::StackName}-WriteThrottleAlarmName'

  ReplicationLagAlarmName:
    Condition: IsCloudWatchAlarmsEnabled
    Description: 'Name of the replication lag CloudWatch alarm'
    Value: !Ref ReplicationLagAlarm
    Export:
      Name: !Sub '${AWS::StackName}-ReplicationLagAlarmName'

  # Configuration Information
  BillingMode:
    Description: 'Billing mode configured for the table'
    Value: !Ref BillingMode
    Export:
      Name: !Sub '${AWS::StackName}-BillingMode'

  TableClass:
    Description: 'Table class configured for the table'
    Value: !Ref TableClass
    Export:
      Name: !Sub '${AWS::StackName}-TableClass'

  Region:
    Description: 'AWS region where the table is deployed'
    Value: !Ref AWS::Region
    Export:
      Name: !Sub '${AWS::StackName}-Region'

  # Deployment Information
  Environment:
    Description: 'Environment tag applied to resources'
    Value: !Ref Environment
    Export:
      Name: !Sub '${AWS::StackName}-Environment'

  Application:
    Description: 'Application tag applied to resources'
    Value: !Ref Application
    Export:
      Name: !Sub '${AWS::StackName}-Application'

  # Next Steps Information
  NextSteps:
    Description: 'Next steps for setting up Global Tables'
    Value: !Sub |
      To complete the Global Tables setup:
      1. Deploy this template in additional regions (e.g., us-west-2, eu-west-1)
      2. Use AWS CLI to create Global Tables: aws dynamodb create-global-table --global-table-name ${TableName} --replication-group RegionName=us-east-1 RegionName=us-west-2
      3. Monitor replication status in CloudWatch
      4. Test cross-region functionality using the Lambda function
      5. Review CloudWatch alarms for ongoing monitoring