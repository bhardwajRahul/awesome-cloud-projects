# Global Load Balancing Terraform Variables Example
# Copy this file to terraform.tfvars and customize the values

# =====================================================
# PROJECT CONFIGURATION
# =====================================================

# Name of the project (used for resource naming)
project_name = "global-lb"

# Environment name (dev, staging, prod, demo)
environment = "demo"

# =====================================================
# REGIONAL CONFIGURATION
# =====================================================

# Primary AWS region for deployment (North America)
primary_region = "us-east-1"

# Secondary AWS region for deployment (Europe)
secondary_region = "eu-west-1"

# Tertiary AWS region for deployment (Asia Pacific)
tertiary_region = "ap-southeast-1"

# =====================================================
# DOMAIN CONFIGURATION
# =====================================================

# Domain name for the hosted zone
# Leave empty to auto-generate a demo domain
# Example: "example.com" or "myapp.example.com"
domain_name = ""

# Whether to create a new Route53 hosted zone
# Set to false if you have an existing hosted zone
create_hosted_zone = true

# Existing hosted zone ID (required if create_hosted_zone is false)
# Example: "Z1D633PJN98FT9"
hosted_zone_id = ""

# =====================================================
# COMPUTE CONFIGURATION
# =====================================================

# EC2 instance type for web servers
# Options: t3.micro (free tier), t3.small, t3.medium, t3.large
instance_type = "t3.micro"

# Auto Scaling Group capacity settings
min_capacity     = 1  # Minimum instances per region
max_capacity     = 3  # Maximum instances per region
desired_capacity = 2  # Desired instances per region

# =====================================================
# NETWORKING CONFIGURATION
# =====================================================

# Number of availability zones to use per region (2-4)
availability_zones_count = 2

# =====================================================
# HEALTH CHECK CONFIGURATION
# =====================================================

# Route53 health check settings
health_check_interval         = 30    # Check interval in seconds (10 or 30)
health_check_failure_threshold = 3     # Failures before marking unhealthy (1-10)
health_check_path            = "/health"  # Health check endpoint path

# ALB target group health check settings
target_group_health_check_interval    = 30  # Interval in seconds (5-300)
target_group_health_check_timeout     = 5   # Timeout in seconds (2-120)
target_group_healthy_threshold        = 2   # Successes to mark healthy (2-10)
target_group_unhealthy_threshold      = 3   # Failures to mark unhealthy (2-10)

# ALB idle timeout
alb_idle_timeout = 60  # Seconds (1-4000)

# =====================================================
# ROUTE53 ROUTING CONFIGURATION
# =====================================================

# Weighted routing weights for traffic distribution testing
primary_weight   = 100  # Weight for primary region (0-255)
secondary_weight = 50   # Weight for secondary region (0-255)
tertiary_weight  = 25   # Weight for tertiary region (0-255)

# =====================================================
# CLOUDFRONT CONFIGURATION
# =====================================================

# CloudFront price class for global distribution
# Options:
#   - "PriceClass_All" = Global (most expensive, best performance)
#   - "PriceClass_200" = US, Canada, Europe, Asia, Middle East, Africa
#   - "PriceClass_100" = US, Canada, Europe (cheapest)
cloudfront_price_class = "PriceClass_100"

# Minimum SSL/TLS protocol version
cloudfront_minimum_protocol_version = "TLSv1.2_2021"

# =====================================================
# MONITORING AND ALERTING
# =====================================================

# Enable CloudWatch alarms and monitoring
enable_cloudwatch_alarms = true

# SNS email endpoint for alerts (optional)
# Example: "devops@company.com"
sns_email_endpoint = ""

# =====================================================
# S3 FALLBACK CONFIGURATION
# =====================================================

# Create S3 bucket for fallback content
create_fallback_bucket = true

# Force destroy S3 bucket even if not empty (use with caution)
fallback_bucket_force_destroy = false

# =====================================================
# ADDITIONAL TAGS
# =====================================================

# Additional tags to apply to all resources
additional_tags = {
  Owner       = "DevOps Team"
  CostCenter  = "Engineering"
  Application = "Global Load Balancer Demo"
  # Add any additional tags your organization requires
}

# =====================================================
# EXAMPLE CONFIGURATIONS FOR DIFFERENT ENVIRONMENTS
# =====================================================

# DEVELOPMENT ENVIRONMENT EXAMPLE:
# project_name = "global-lb-dev"
# environment = "dev"
# instance_type = "t3.micro"
# desired_capacity = 1
# min_capacity = 1
# max_capacity = 2
# cloudfront_price_class = "PriceClass_100"
# enable_cloudwatch_alarms = false

# STAGING ENVIRONMENT EXAMPLE:
# project_name = "global-lb-staging"
# environment = "staging"
# instance_type = "t3.small"
# desired_capacity = 2
# min_capacity = 1
# max_capacity = 4
# cloudfront_price_class = "PriceClass_200"
# enable_cloudwatch_alarms = true

# PRODUCTION ENVIRONMENT EXAMPLE:
# project_name = "global-lb-prod"
# environment = "prod"
# instance_type = "t3.medium"
# desired_capacity = 3
# min_capacity = 2
# max_capacity = 10
# cloudfront_price_class = "PriceClass_All"
# enable_cloudwatch_alarms = true
# health_check_interval = 10  # More frequent checks for production

# =====================================================
# COST OPTIMIZATION TIPS
# =====================================================

# For cost optimization:
# 1. Use t3.micro instances (eligible for free tier)
# 2. Set desired_capacity to 1 for testing
# 3. Use PriceClass_100 for CloudFront
# 4. Set health_check_interval to 30 seconds
# 5. Disable CloudWatch alarms for testing environments

# For production use:
# 1. Use larger instance types based on load requirements
# 2. Increase desired_capacity for redundancy
# 3. Consider PriceClass_All for global performance
# 4. Use 10-second health check intervals for faster failover
# 5. Enable comprehensive monitoring and alerting