AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Sustainable Data Archiving Solution with S3 Intelligent-Tiering
  This CloudFormation template creates a comprehensive data archiving solution 
  that automatically optimizes storage costs and environmental impact using 
  S3 Intelligent-Tiering, Storage Lens analytics, and Lambda-based sustainability monitoring.

# =============================================================================
# METADATA
# =============================================================================
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Basic Configuration"
        Parameters:
          - ProjectName
          - Environment
          - ArchiveBucketPrefix
          - AnalyticsBucketPrefix
      - Label:
          default: "S3 Configuration"
        Parameters:
          - EnableVersioning
          - EnableIntelligentTiering
          - EnableAdvancedTiering
      - Label:
          default: "Lifecycle Management"
        Parameters:
          - NonCurrentVersionRetentionDays
          - IncompleteMultipartUploadDays
      - Label:
          default: "Monitoring Configuration"
        Parameters:
          - EnableStorageLens
          - EnableSustainabilityMonitoring
          - MonitoringScheduleExpression
      - Label:
          default: "Sustainability Settings"
        Parameters:
          - SustainabilityGoal
          - CarbonReductionTarget

    ParameterLabels:
      ProjectName:
        default: "Project Name"
      Environment:
        default: "Environment"
      ArchiveBucketPrefix:
        default: "Archive Bucket Prefix"
      AnalyticsBucketPrefix:
        default: "Analytics Bucket Prefix"
      EnableVersioning:
        default: "Enable S3 Versioning"
      EnableIntelligentTiering:
        default: "Enable Intelligent-Tiering"
      EnableAdvancedTiering:
        default: "Enable Advanced Archive Tiers"
      NonCurrentVersionRetentionDays:
        default: "Non-Current Version Retention (Days)"
      IncompleteMultipartUploadDays:
        default: "Incomplete Upload Cleanup (Days)"
      EnableStorageLens:
        default: "Enable S3 Storage Lens"
      EnableSustainabilityMonitoring:
        default: "Enable Sustainability Monitoring"
      MonitoringScheduleExpression:
        default: "Monitoring Schedule Expression"
      SustainabilityGoal:
        default: "Sustainability Goal"
      CarbonReductionTarget:
        default: "Carbon Reduction Target (%)"

# =============================================================================
# PARAMETERS
# =============================================================================
Parameters:
  ProjectName:
    Type: String
    Default: "sustainable-archive"
    Description: "Name of the project (used for resource naming)"
    MinLength: 3
    MaxLength: 25
    AllowedPattern: "^[a-z0-9-]+$"
    ConstraintDescription: "Must contain only lowercase letters, numbers, and hyphens"

  Environment:
    Type: String
    Default: "production"
    AllowedValues:
      - "development"
      - "staging"
      - "production"
    Description: "Environment name for resource tagging and identification"

  ArchiveBucketPrefix:
    Type: String
    Default: "archive"
    Description: "Prefix for the main archive bucket name"
    MinLength: 3
    MaxLength: 20
    AllowedPattern: "^[a-z0-9-]+$"

  AnalyticsBucketPrefix:
    Type: String
    Default: "analytics"
    Description: "Prefix for the analytics bucket name"
    MinLength: 3
    MaxLength: 20
    AllowedPattern: "^[a-z0-9-]+$"

  EnableVersioning:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: "Enable S3 versioning for data protection"

  EnableIntelligentTiering:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: "Enable S3 Intelligent-Tiering for automatic cost optimization"

  EnableAdvancedTiering:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: "Enable advanced archive tiers (Archive Access and Deep Archive Access)"

  NonCurrentVersionRetentionDays:
    Type: Number
    Default: 365
    MinValue: 30
    MaxValue: 3650
    Description: "Number of days to retain non-current object versions"

  IncompleteMultipartUploadDays:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 7
    Description: "Number of days before cleaning up incomplete multipart uploads"

  EnableStorageLens:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: "Enable S3 Storage Lens for comprehensive analytics"

  EnableSustainabilityMonitoring:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: "Enable automated sustainability monitoring with Lambda"

  MonitoringScheduleExpression:
    Type: String
    Default: "rate(1 day)"
    Description: "EventBridge schedule expression for sustainability monitoring"
    AllowedPattern: "^(rate\\([0-9]+ (minute|minutes|hour|hours|day|days)\\)|cron\\(.+\\))$"

  SustainabilityGoal:
    Type: String
    Default: "CarbonNeutral"
    AllowedValues:
      - "CarbonNeutral"
      - "CarbonNegative"
      - "CostOptimized"
      - "Efficiency"
    Description: "Primary sustainability goal for the archiving solution"

  CarbonReductionTarget:
    Type: Number
    Default: 50
    MinValue: 10
    MaxValue: 90
    Description: "Target carbon footprint reduction percentage"

# =============================================================================
# CONDITIONS
# =============================================================================
Conditions:
  EnableVersioningCondition: !Equals [!Ref EnableVersioning, "true"]
  EnableIntelligentTieringCondition: !Equals [!Ref EnableIntelligentTiering, "true"]
  EnableAdvancedTieringCondition: !And
    - !Equals [!Ref EnableIntelligentTiering, "true"]
    - !Equals [!Ref EnableAdvancedTiering, "true"]
  EnableStorageLensCondition: !Equals [!Ref EnableStorageLens, "true"]
  EnableSustainabilityMonitoringCondition: !Equals [!Ref EnableSustainabilityMonitoring, "true"]
  IsProductionEnvironment: !Equals [!Ref Environment, "production"]

# =============================================================================
# RESOURCES
# =============================================================================
Resources:

  # ---------------------------------------------------------------------------
  # S3 Archive Bucket - Main storage with intelligent tiering
  # ---------------------------------------------------------------------------
  ArchiveBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ArchiveBucketPrefix}-${ProjectName}-${AWS::AccountId}-${AWS::Region}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      VersioningConfiguration: !If
        - EnableVersioningCondition
        - Status: Enabled
        - !Ref AWS::NoValue
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: "s3:ObjectCreated:*"
            CloudWatchConfiguration:
              LogGroupName: !Ref S3AccessLogGroup
      LifecycleConfiguration:
        Rules:
          - Id: SustainabilityOptimization
            Status: Enabled
            Transitions:
              - TransitionInDays: 0
                StorageClass: INTELLIGENT_TIERING
            NoncurrentVersionTransitions:
              - NoncurrentDays: 30
                StorageClass: GLACIER
              - NoncurrentDays: 90
                StorageClass: DEEP_ARCHIVE
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: !Ref IncompleteMultipartUploadDays
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: !Ref NonCurrentVersionRetentionDays
      Tags:
        - Key: Purpose
          Value: SustainableArchive
        - Key: Environment
          Value: !Ref Environment
        - Key: CostOptimization
          Value: Enabled
        - Key: SustainabilityGoal
          Value: !Ref SustainabilityGoal
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: CloudFormation

  # ---------------------------------------------------------------------------
  # S3 Intelligent-Tiering Configuration
  # ---------------------------------------------------------------------------
  IntelligentTieringConfig:
    Type: AWS::S3::Bucket
    Condition: EnableIntelligentTieringCondition
    Properties:
      BucketName: !Ref ArchiveBucket
      IntelligentTieringConfigurations:
        - Id: SustainableArchiveConfig
          Status: Enabled
          OptionalFields:
            - BucketKeyEnabled
          Tiering:
            AccessTier: InfrequentAccess
            Days: 30

  # Advanced Intelligent-Tiering for long-term data
  AdvancedIntelligentTieringConfig:
    Type: AWS::S3::Bucket
    Condition: EnableAdvancedTieringCondition
    Properties:
      BucketName: !Ref ArchiveBucket
      IntelligentTieringConfigurations:
        - Id: AdvancedSustainableConfig
          Status: Enabled
          Prefix: "long-term/"
          OptionalFields:
            - BucketKeyEnabled
          Tiering:
            AccessTier: ArchiveAccess
            Days: 90

  # ---------------------------------------------------------------------------
  # S3 Analytics Bucket for Storage Lens reports
  # ---------------------------------------------------------------------------
  AnalyticsBucket:
    Type: AWS::S3::Bucket
    Condition: EnableStorageLensCondition
    Properties:
      BucketName: !Sub "${AnalyticsBucketPrefix}-${ProjectName}-${AWS::AccountId}-${AWS::Region}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: AnalyticsDataRetention
            Status: Enabled
            ExpirationInDays: 90  # Keep analytics data for 90 days
      Tags:
        - Key: Purpose
          Value: SustainabilityAnalytics
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: CloudFormation

  # ---------------------------------------------------------------------------
  # S3 Storage Lens Configuration
  # ---------------------------------------------------------------------------
  StorageLensConfiguration:
    Type: AWS::S3::StorageLens
    Condition: EnableStorageLensCondition
    Properties:
      StorageLensConfiguration:
        Id: SustainabilityMetrics
        AccountLevel:
          ActivityMetrics:
            IsEnabled: true
          BucketLevel:
            ActivityMetrics:
              IsEnabled: true
            PrefixLevel:
              StorageMetrics:
                IsEnabled: true
        Include:
          Buckets:
            - !Sub "${ArchiveBucket}"
        DataExport:
          S3BucketDestination:
            OutputSchemaVersion: V_1
            AccountId: !Ref AWS::AccountId
            Arn: !GetAtt AnalyticsBucket.Arn
            Format: CSV
            Prefix: "storage-lens-reports/"
        IsEnabled: true
      Tags:
        - Key: Purpose
          Value: SustainabilityTracking
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # ---------------------------------------------------------------------------
  # IAM Role for Sustainability Monitoring Lambda
  # ---------------------------------------------------------------------------
  SustainabilityMonitorRole:
    Type: AWS::IAM::Role
    Condition: EnableSustainabilityMonitoringCondition
    Properties:
      RoleName: !Sub "${ProjectName}-sustainability-monitor-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SustainabilityMonitoringPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketTagging
                  - s3:GetBucketLocation
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:GetStorageLensConfiguration
                  - s3:ListStorageLensConfigurations
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - cloudwatch:PutMetricData
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
      Tags:
        - Key: Purpose
          Value: SustainabilityMonitoring
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # ---------------------------------------------------------------------------
  # CloudWatch Log Group for S3 access logs
  # ---------------------------------------------------------------------------
  S3AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/s3/${ProjectName}-access-logs"
      RetentionInDays: !If [IsProductionEnvironment, 365, 30]
      Tags:
        - Key: Purpose
          Value: S3AccessLogging
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # ---------------------------------------------------------------------------
  # Lambda Function for Sustainability Monitoring
  # ---------------------------------------------------------------------------
  SustainabilityMonitorFunction:
    Type: AWS::Lambda::Function
    Condition: EnableSustainabilityMonitoringCondition
    Properties:
      FunctionName: !Sub "${ProjectName}-sustainability-monitor"
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt SustainabilityMonitorRole.Arn
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          ARCHIVE_BUCKET: !Ref ArchiveBucket
          ANALYTICS_BUCKET: !If [EnableStorageLensCondition, !Ref AnalyticsBucket, ""]
          SUSTAINABILITY_GOAL: !Ref SustainabilityGoal
          CARBON_REDUCTION_TARGET: !Ref CarbonReductionTarget
          PROJECT_NAME: !Ref ProjectName
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime, timedelta
          from decimal import Decimal

          def lambda_handler(event, context):
              s3 = boto3.client('s3')
              cloudwatch = boto3.client('cloudwatch')
              
              bucket_name = os.environ['ARCHIVE_BUCKET']
              sustainability_goal = os.environ.get('SUSTAINABILITY_GOAL', 'CarbonNeutral')
              carbon_target = float(os.environ.get('CARBON_REDUCTION_TARGET', '50'))
              
              try:
                  # Get bucket tagging to identify sustainability goals
                  try:
                      tags_response = s3.get_bucket_tagging(Bucket=bucket_name)
                      tags = {tag['Key']: tag['Value'] for tag in tags_response['TagSet']}
                  except s3.exceptions.NoSuchTagging:
                      tags = {}
                  
                  # Calculate storage metrics
                  storage_metrics = calculate_storage_efficiency(s3, bucket_name)
                  
                  # Estimate carbon footprint reduction
                  carbon_metrics = calculate_carbon_impact(storage_metrics, carbon_target)
                  
                  # Publish custom CloudWatch metrics
                  publish_sustainability_metrics(cloudwatch, storage_metrics, carbon_metrics)
                  
                  # Generate sustainability report
                  report = generate_sustainability_report(storage_metrics, carbon_metrics, tags, sustainability_goal)
                  
                  print(f"Sustainability analysis completed for bucket: {bucket_name}")
                  print(f"Storage efficiency: {storage_metrics}")
                  print(f"Carbon metrics: {carbon_metrics}")
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'Sustainability analysis completed',
                          'report': report
                      }, default=decimal_default)
                  }
                  
              except Exception as e:
                  print(f"Error in sustainability monitoring: {str(e)}")
                  import traceback
                  traceback.print_exc()
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)})
                  }

          def calculate_storage_efficiency(s3, bucket_name):
              """Calculate storage efficiency metrics"""
              try:
                  total_objects = 0
                  total_size = 0
                  
                  # Use paginator to handle large buckets
                  paginator = s3.get_paginator('list_objects_v2')
                  
                  for page in paginator.paginate(Bucket=bucket_name, MaxKeys=1000):
                      if 'Contents' in page:
                          for obj in page['Contents']:
                              total_objects += 1
                              total_size += obj['Size']
                  
                  return {
                      'total_objects': total_objects,
                      'total_size_gb': round(total_size / (1024**3), 2),
                      'average_object_size_mb': round((total_size / total_objects) / (1024**2), 2) if total_objects > 0 else 0
                  }
              except Exception as e:
                  print(f"Error calculating storage metrics: {str(e)}")
                  return {'total_objects': 0, 'total_size_gb': 0, 'average_object_size_mb': 0}

          def calculate_carbon_impact(storage_metrics, target_reduction):
              """Estimate carbon footprint reduction through intelligent tiering"""
              # AWS estimates for carbon impact (simplified model)
              # Standard storage: ~0.000385 kg CO2/GB/month
              # IA storage: ~0.000308 kg CO2/GB/month (20% reduction)
              # Archive tiers: ~0.000077 kg CO2/GB/month (80% reduction)
              
              total_size_gb = storage_metrics['total_size_gb']
              
              if total_size_gb == 0:
                  return {
                      'estimated_monthly_carbon_kg': 0,
                      'estimated_monthly_savings_kg': 0,
                      'carbon_reduction_percentage': 0,
                      'target_met': True
                  }
              
              # Estimate tier distribution based on intelligent tiering patterns
              estimated_standard = total_size_gb * 0.3  # 30% in standard
              estimated_ia = total_size_gb * 0.4        # 40% in IA
              estimated_archive = total_size_gb * 0.3   # 30% in archive tiers
              
              carbon_standard = estimated_standard * 0.000385
              carbon_ia = estimated_ia * 0.000308
              carbon_archive = estimated_archive * 0.000077
              
              total_carbon = carbon_standard + carbon_ia + carbon_archive
              baseline_carbon = total_size_gb * 0.000385  # All in standard
              carbon_saved = baseline_carbon - total_carbon
              
              reduction_percentage = (carbon_saved / baseline_carbon) * 100 if baseline_carbon > 0 else 0
              target_met = reduction_percentage >= target_reduction
              
              return {
                  'estimated_monthly_carbon_kg': round(total_carbon, 4),
                  'estimated_monthly_savings_kg': round(carbon_saved, 4),
                  'carbon_reduction_percentage': round(reduction_percentage, 1),
                  'target_met': target_met
              }

          def publish_sustainability_metrics(cloudwatch, storage_metrics, carbon_metrics):
              """Publish custom metrics to CloudWatch"""
              namespace = f"SustainableArchive/{os.environ.get('PROJECT_NAME', 'default')}"
              
              metrics = [
                  {
                      'MetricName': 'TotalStorageGB',
                      'Value': storage_metrics['total_size_gb'],
                      'Unit': 'Count',
                      'Dimensions': [
                          {'Name': 'Environment', 'Value': os.environ.get('ENVIRONMENT', 'production')}
                      ]
                  },
                  {
                      'MetricName': 'EstimatedMonthlyCarbonKg',
                      'Value': carbon_metrics['estimated_monthly_carbon_kg'],
                      'Unit': 'Count',
                      'Dimensions': [
                          {'Name': 'Environment', 'Value': os.environ.get('ENVIRONMENT', 'production')}
                      ]
                  },
                  {
                      'MetricName': 'CarbonReductionPercentage',
                      'Value': carbon_metrics['carbon_reduction_percentage'],
                      'Unit': 'Percent',
                      'Dimensions': [
                          {'Name': 'Environment', 'Value': os.environ.get('ENVIRONMENT', 'production')}
                      ]
                  },
                  {
                      'MetricName': 'SustainabilityTargetMet',
                      'Value': 1 if carbon_metrics['target_met'] else 0,
                      'Unit': 'Count',
                      'Dimensions': [
                          {'Name': 'Environment', 'Value': os.environ.get('ENVIRONMENT', 'production')}
                      ]
                  }
              ]
              
              for metric in metrics:
                  try:
                      cloudwatch.put_metric_data(
                          Namespace=namespace,
                          MetricData=[{
                              'MetricName': metric['MetricName'],
                              'Value': metric['Value'],
                              'Unit': metric['Unit'],
                              'Dimensions': metric['Dimensions'],
                              'Timestamp': datetime.utcnow()
                          }]
                      )
                  except Exception as e:
                      print(f"Error publishing metric {metric['MetricName']}: {str(e)}")

          def generate_sustainability_report(storage_metrics, carbon_metrics, tags, sustainability_goal):
              """Generate comprehensive sustainability report"""
              recommendations = generate_recommendations(storage_metrics, carbon_metrics)
              
              return {
                  'timestamp': datetime.utcnow().isoformat(),
                  'sustainability_goal': sustainability_goal,
                  'storage_efficiency': {
                      'total_objects': storage_metrics['total_objects'],
                      'total_storage_gb': storage_metrics['total_size_gb'],
                      'average_object_size_mb': storage_metrics['average_object_size_mb']
                  },
                  'environmental_impact': {
                      'estimated_monthly_carbon_kg': carbon_metrics['estimated_monthly_carbon_kg'],
                      'monthly_carbon_savings_kg': carbon_metrics['estimated_monthly_savings_kg'],
                      'carbon_reduction_percentage': carbon_metrics['carbon_reduction_percentage'],
                      'sustainability_target_met': carbon_metrics['target_met']
                  },
                  'recommendations': recommendations,
                  'compliance_status': {
                      'goal_alignment': sustainability_goal,
                      'target_achievement': carbon_metrics['target_met'],
                      'optimization_opportunities': len([r for r in recommendations if 'optimization' in r.lower()])
                  }
              }

          def generate_recommendations(storage_metrics, carbon_metrics):
              """Generate optimization recommendations"""
              recommendations = []
              
              if storage_metrics['average_object_size_mb'] < 1:
                  recommendations.append("Consider using S3 Object Lambda to aggregate small objects for better cost efficiency")
              
              if carbon_metrics['carbon_reduction_percentage'] < 30:
                  recommendations.append("Enable Deep Archive Access tier for longer retention periods to increase carbon savings")
              
              if storage_metrics['total_objects'] > 10000:
                  recommendations.append("Consider implementing S3 Batch Operations for bulk optimization tasks")
              
              if carbon_metrics['carbon_reduction_percentage'] < 20:
                  recommendations.append("Review object access patterns and consider more aggressive lifecycle policies")
              
              recommendations.append("Monitor Storage Lens reports monthly to identify additional optimization opportunities")
              
              if not carbon_metrics['target_met']:
                  recommendations.append(f"Current carbon reduction is below target. Consider additional optimization strategies.")
              
              return recommendations

          def decimal_default(obj):
              """JSON serializer for Decimal objects"""
              if isinstance(obj, Decimal):
                  return float(obj)
              raise TypeError(f"Object of type {type(obj)} is not JSON serializable")

      Tags:
        - Key: Purpose
          Value: SustainabilityMonitoring
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # ---------------------------------------------------------------------------
  # EventBridge Rule for Scheduled Monitoring
  # ---------------------------------------------------------------------------
  SustainabilityMonitoringRule:
    Type: AWS::Events::Rule
    Condition: EnableSustainabilityMonitoringCondition
    Properties:
      Name: !Sub "${ProjectName}-sustainability-monitoring"
      Description: "Scheduled execution of sustainability monitoring Lambda"
      ScheduleExpression: !Ref MonitoringScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt SustainabilityMonitorFunction.Arn
          Id: "SustainabilityMonitoringTarget"

  # Lambda permission for EventBridge
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: EnableSustainabilityMonitoringCondition
    Properties:
      FunctionName: !Ref SustainabilityMonitorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SustainabilityMonitoringRule.Arn

  # ---------------------------------------------------------------------------
  # CloudWatch Dashboard for Sustainability Metrics
  # ---------------------------------------------------------------------------
  SustainabilityDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: EnableSustainabilityMonitoringCondition
    Properties:
      DashboardName: !Sub "${ProjectName}-sustainability-dashboard"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["SustainableArchive/${ProjectName}", "TotalStorageGB", "Environment", "${Environment}"],
                  [".", "EstimatedMonthlyCarbonKg", "Environment", "${Environment}"]
                ],
                "period": 3600,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Storage Usage & Carbon Footprint",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["SustainableArchive/${ProjectName}", "CarbonReductionPercentage", "Environment", "${Environment}"]
                ],
                "period": 3600,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Carbon Footprint Reduction %",
                "yAxis": {
                  "left": {
                    "min": 0,
                    "max": 100
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  ["SustainableArchive/${ProjectName}", "SustainabilityTargetMet", "Environment", "${Environment}"]
                ],
                "period": 3600,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Sustainability Target Achievement",
                "yAxis": {
                  "left": {
                    "min": 0,
                    "max": 1
                  }
                }
              }
            }
          ]
        }

  # ---------------------------------------------------------------------------
  # CloudWatch Alarms for Sustainability Monitoring
  # ---------------------------------------------------------------------------
  CarbonReductionAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableSustainabilityMonitoringCondition
    Properties:
      AlarmName: !Sub "${ProjectName}-carbon-reduction-below-target"
      AlarmDescription: "Alarm when carbon reduction falls below target percentage"
      MetricName: CarbonReductionPercentage
      Namespace: !Sub "SustainableArchive/${ProjectName}"
      Statistic: Average
      Period: 3600
      EvaluationPeriods: 1
      Threshold: !Ref CarbonReductionTarget
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: Environment
          Value: !Ref Environment
      TreatMissingData: breaching

  StorageGrowthAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableSustainabilityMonitoringCondition
    Properties:
      AlarmName: !Sub "${ProjectName}-storage-growth-alert"
      AlarmDescription: "Alarm for rapid storage growth that may impact sustainability goals"
      MetricName: TotalStorageGB
      Namespace: !Sub "SustainableArchive/${ProjectName}"
      Statistic: Average
      Period: 86400  # 24 hours
      EvaluationPeriods: 2
      Threshold: 50  # Alert if growth exceeds 50GB per day for 2 consecutive days
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Environment
          Value: !Ref Environment
      TreatMissingData: notBreaching

# =============================================================================
# OUTPUTS
# =============================================================================
Outputs:
  ArchiveBucketName:
    Description: "Name of the S3 archive bucket with intelligent tiering"
    Value: !Ref ArchiveBucket
    Export:
      Name: !Sub "${AWS::StackName}-ArchiveBucket"

  ArchiveBucketArn:
    Description: "ARN of the S3 archive bucket"
    Value: !GetAtt ArchiveBucket.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ArchiveBucketArn"

  AnalyticsBucketName:
    Condition: EnableStorageLensCondition
    Description: "Name of the S3 analytics bucket for Storage Lens reports"
    Value: !Ref AnalyticsBucket
    Export:
      Name: !Sub "${AWS::StackName}-AnalyticsBucket"

  SustainabilityMonitorFunctionArn:
    Condition: EnableSustainabilityMonitoringCondition
    Description: "ARN of the sustainability monitoring Lambda function"
    Value: !GetAtt SustainabilityMonitorFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SustainabilityMonitorFunction"

  DashboardURL:
    Condition: EnableSustainabilityMonitoringCondition
    Description: "URL to the CloudWatch sustainability dashboard"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-sustainability-dashboard"

  StorageLensConfigurationId:
    Condition: EnableStorageLensCondition
    Description: "ID of the S3 Storage Lens configuration"
    Value: !Ref StorageLensConfiguration
    Export:
      Name: !Sub "${AWS::StackName}-StorageLensConfig"

  SustainabilityGoal:
    Description: "The sustainability goal configured for this archive solution"
    Value: !Ref SustainabilityGoal

  CarbonReductionTarget:
    Description: "The target carbon reduction percentage"
    Value: !Sub "${CarbonReductionTarget}%"

  DeploymentSummary:
    Description: "Summary of deployed sustainability features"
    Value: !Sub |
      Archive Bucket: ${ArchiveBucket}
      Intelligent Tiering: ${EnableIntelligentTiering}
      Advanced Tiering: ${EnableAdvancedTiering}
      Storage Lens: ${EnableStorageLens}
      Sustainability Monitoring: ${EnableSustainabilityMonitoring}
      Goal: ${SustainabilityGoal}
      Target Reduction: ${CarbonReductionTarget}%

  EstimatedMonthlyCosts:
    Description: "Estimated monthly costs for the sustainability monitoring features"
    Value: !Sub |
      S3 Intelligent-Tiering monitoring: $0.0025 per 1,000 objects
      Lambda execution: ~$0.10-1.00 per month (depending on bucket size)
      CloudWatch metrics and logs: ~$0.50-2.00 per month
      Storage Lens: Free for organization-level metrics
      Note: Actual costs depend on data volume and access patterns

  QuickStartCommands:
    Description: "Commands to quickly test the deployed solution"
    Value: !Sub |
      # Upload test data to trigger intelligent tiering:
      aws s3 cp test-file.txt s3://${ArchiveBucket}/active/
      aws s3 cp archive-data.zip s3://${ArchiveBucket}/long-term/
      
      # Invoke sustainability monitoring manually:
      aws lambda invoke --function-name ${SustainabilityMonitorFunction} response.json
      
      # View sustainability metrics:
      aws cloudwatch get-metric-statistics --namespace "SustainableArchive/${ProjectName}" --metric-name CarbonReductionPercentage --start-time $(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%S) --end-time $(date -u +%Y-%m-%dT%H:%M:%S) --period 3600 --statistics Average