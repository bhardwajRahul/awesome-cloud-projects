AWSTemplateFormatVersion: '2010-09-09'
Description: |
  DNS-Based Load Balancing with Route 53
  
  This CloudFormation template creates a comprehensive DNS-based load balancing solution using Amazon Route 53.
  It deploys infrastructure across multiple AWS regions with Application Load Balancers, health checks,
  and various routing policies (weighted, latency-based, geolocation, failover, and multivalue).
  
  The solution provides intelligent traffic distribution, automatic failover, and geographic optimization
  for global applications requiring high availability and performance.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Domain Configuration"
        Parameters:
          - DomainName
          - CreateHostedZone
          - HostedZoneId
      - Label:
          default: "Regional Configuration"
        Parameters:
          - PrimaryRegion
          - SecondaryRegion
          - TertiaryRegion
      - Label:
          default: "Load Balancer Configuration"
        Parameters:
          - LoadBalancerScheme
          - HealthCheckPath
          - HealthCheckInterval
          - FailureThreshold
      - Label:
          default: "Routing Policy Configuration"
        Parameters:
          - PrimaryWeight
          - SecondaryWeight
          - TertiaryWeight
          - TTLValue
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCidr
          - PublicSubnet1Cidr
          - PublicSubnet2Cidr
      - Label:
          default: "Notification Configuration"
        Parameters:
          - EnableNotifications
          - NotificationEmail
      - Label:
          default: "Resource Tagging"
        Parameters:
          - Environment
          - Project
          - Owner

    ParameterLabels:
      DomainName:
        default: "Domain Name"
      CreateHostedZone:
        default: "Create New Hosted Zone"
      HostedZoneId:
        default: "Existing Hosted Zone ID"
      PrimaryRegion:
        default: "Primary Region"
      SecondaryRegion:
        default: "Secondary Region"
      TertiaryRegion:
        default: "Tertiary Region"
      LoadBalancerScheme:
        default: "Load Balancer Scheme"
      HealthCheckPath:
        default: "Health Check Path"
      HealthCheckInterval:
        default: "Health Check Interval"
      FailureThreshold:
        default: "Failure Threshold"
      PrimaryWeight:
        default: "Primary Region Weight"
      SecondaryWeight:
        default: "Secondary Region Weight"
      TertiaryWeight:
        default: "Tertiary Region Weight"
      TTLValue:
        default: "DNS Record TTL"
      VpcCidr:
        default: "VPC CIDR Block"
      PublicSubnet1Cidr:
        default: "Public Subnet 1 CIDR"
      PublicSubnet2Cidr:
        default: "Public Subnet 2 CIDR"
      EnableNotifications:
        default: "Enable Health Check Notifications"
      NotificationEmail:
        default: "Notification Email Address"
      Environment:
        default: "Environment"
      Project:
        default: "Project Name"
      Owner:
        default: "Owner"

Parameters:
  # Domain Configuration
  DomainName:
    Type: String
    Description: The domain name for the Route 53 hosted zone and DNS records
    AllowedPattern: ^[a-z0-9.-]+$
    ConstraintDescription: Must be a valid domain name in lowercase
    MinLength: 3
    MaxLength: 253

  CreateHostedZone:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Whether to create a new hosted zone or use an existing one

  HostedZoneId:
    Type: String
    Default: ''
    Description: Existing hosted zone ID (required if CreateHostedZone is false)

  # Regional Configuration
  PrimaryRegion:
    Type: String
    Default: 'us-east-1'
    AllowedValues:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - eu-west-1
      - eu-west-2
      - eu-central-1
      - ap-southeast-1
      - ap-southeast-2
      - ap-northeast-1
    Description: Primary AWS region for deployment

  SecondaryRegion:
    Type: String
    Default: 'eu-west-1'
    AllowedValues:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - eu-west-1
      - eu-west-2
      - eu-central-1
      - ap-southeast-1
      - ap-southeast-2
      - ap-northeast-1
    Description: Secondary AWS region for deployment

  TertiaryRegion:
    Type: String
    Default: 'ap-southeast-1'
    AllowedValues:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - eu-west-1
      - eu-west-2
      - eu-central-1
      - ap-southeast-1
      - ap-southeast-2
      - ap-northeast-1
    Description: Tertiary AWS region for deployment

  # Load Balancer Configuration
  LoadBalancerScheme:
    Type: String
    Default: 'internet-facing'
    AllowedValues: ['internet-facing', 'internal']
    Description: Load balancer scheme (internet-facing for public access)

  HealthCheckPath:
    Type: String
    Default: '/health'
    Description: Health check path for Route 53 health checks
    AllowedPattern: ^/.*$
    ConstraintDescription: Must start with /

  HealthCheckInterval:
    Type: Number
    Default: 30
    AllowedValues: [10, 30]
    Description: Health check interval in seconds (10 for fast interval, 30 for standard)

  FailureThreshold:
    Type: Number
    Default: 3
    MinValue: 1
    MaxValue: 10
    Description: Number of consecutive failures before marking endpoint as unhealthy

  # Routing Policy Configuration
  PrimaryWeight:
    Type: Number
    Default: 50
    MinValue: 0
    MaxValue: 255
    Description: Weight for primary region in weighted routing policy

  SecondaryWeight:
    Type: Number
    Default: 30
    MinValue: 0
    MaxValue: 255
    Description: Weight for secondary region in weighted routing policy

  TertiaryWeight:
    Type: Number
    Default: 20
    MinValue: 0
    MaxValue: 255
    Description: Weight for tertiary region in weighted routing policy

  TTLValue:
    Type: Number
    Default: 60
    MinValue: 1
    MaxValue: 86400
    Description: TTL (Time To Live) for DNS records in seconds

  # Network Configuration
  VpcCidr:
    Type: String
    Default: '10.0.0.0/16'
    AllowedPattern: ^10\.(0|[1-9]\d?|1\d{2}|2[0-4]\d|25[0-5])\.(0|[1-9]\d?|1\d{2}|2[0-4]\d|25[0-5])\.(0|[1-9]\d?|1\d{2}|2[0-4]\d|25[0-5])\/16$
    ConstraintDescription: Must be a valid /16 CIDR block in the 10.x.x.x range
    Description: CIDR block for the VPC

  PublicSubnet1Cidr:
    Type: String
    Default: '10.0.1.0/24'
    AllowedPattern: ^10\.(0|[1-9]\d?|1\d{2}|2[0-4]\d|25[0-5])\.(0|[1-9]\d?|1\d{2}|2[0-4]\d|25[0-5])\.(0|[1-9]\d?|1\d{2}|2[0-4]\d|25[0-5])\/24$
    ConstraintDescription: Must be a valid /24 CIDR block
    Description: CIDR block for public subnet 1

  PublicSubnet2Cidr:
    Type: String
    Default: '10.0.2.0/24'
    AllowedPattern: ^10\.(0|[1-9]\d?|1\d{2}|2[0-4]\d|25[0-5])\.(0|[1-9]\d?|1\d{2}|2[0-4]\d|25[0-5])\.(0|[1-9]\d?|1\d{2}|2[0-4]\d|25[0-5])\/24$
    ConstraintDescription: Must be a valid /24 CIDR block
    Description: CIDR block for public subnet 2

  # Notification Configuration
  EnableNotifications:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable SNS notifications for health check failures

  NotificationEmail:
    Type: String
    Default: ''
    Description: Email address for health check notifications (required if EnableNotifications is true)
    AllowedPattern: ^$|^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
    ConstraintDescription: Must be a valid email address or empty

  # Resource Tagging
  Environment:
    Type: String
    Default: 'Production'
    AllowedValues: ['Development', 'Testing', 'Staging', 'Production']
    Description: Environment name for resource tagging

  Project:
    Type: String
    Default: 'DNS-Load-Balancing'
    Description: Project name for resource tagging
    MinLength: 1
    MaxLength: 50

  Owner:
    Type: String
    Default: 'DevOps-Team'
    Description: Owner name for resource tagging
    MinLength: 1
    MaxLength: 50

Conditions:
  # Hosted Zone Conditions
  ShouldCreateHostedZone: !Equals [!Ref CreateHostedZone, 'true']
  ShouldUseExistingHostedZone: !Equals [!Ref CreateHostedZone, 'false']
  
  # Notification Conditions
  ShouldEnableNotifications: !Equals [!Ref EnableNotifications, 'true']
  HasNotificationEmail: !And
    - !Equals [!Ref EnableNotifications, 'true']
    - !Not [!Equals [!Ref NotificationEmail, '']]
  
  # Region Conditions
  IsPrimaryRegionUSEast1: !Equals [!Ref PrimaryRegion, 'us-east-1']
  IsSecondaryRegionEUWest1: !Equals [!Ref SecondaryRegion, 'eu-west-1']
  IsTertiaryRegionAPSoutheast1: !Equals [!Ref TertiaryRegion, 'ap-southeast-1']
  
  # Fast health check condition
  IsFastHealthCheck: !Equals [!Ref HealthCheckInterval, 10]

Mappings:
  # Region to continent mapping for geolocation routing
  RegionToContinentMap:
    us-east-1:
      Continent: 'NA'
      Location: 'North America'
    us-east-2:
      Continent: 'NA'
      Location: 'North America'
    us-west-1:
      Continent: 'NA'
      Location: 'North America'
    us-west-2:
      Continent: 'NA'
      Location: 'North America'
    eu-west-1:
      Continent: 'EU'
      Location: 'Europe'
    eu-west-2:
      Continent: 'EU'
      Location: 'Europe'
    eu-central-1:
      Continent: 'EU'
      Location: 'Europe'
    ap-southeast-1:
      Continent: 'AS'
      Location: 'Asia Pacific'
    ap-southeast-2:
      Continent: 'AS'
      Location: 'Asia Pacific'
    ap-northeast-1:
      Continent: 'AS'
      Location: 'Asia Pacific'

Resources:
  # ============================================================================
  # Route 53 Hosted Zone
  # ============================================================================
  
  HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: ShouldCreateHostedZone
    Properties:
      Name: !Ref DomainName
      HostedZoneConfig:
        Comment: !Sub 'Hosted zone for ${DomainName} - DNS Load Balancing Solution'
      HostedZoneTags:
        - Key: Name
          Value: !Sub '${DomainName}-hosted-zone'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Purpose
          Value: 'DNS Load Balancing'

  # ============================================================================
  # VPC Infrastructure
  # ============================================================================
  
  # Primary VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${Project}-vpc'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${Project}-igw'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Project}-public-subnet-1'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Type
          Value: 'Public'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Project}-public-subnet-2'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Type
          Value: 'Public'

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Project}-public-route-table'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # ============================================================================
  # Security Groups
  # ============================================================================
  
  # Application Load Balancer Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Project}-alb-sg'
      GroupDescription: 'Security group for Application Load Balancer'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: 'Allow HTTP traffic from anywhere'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
          Description: 'Allow HTTPS traffic from anywhere'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
          Description: 'Allow all outbound traffic'
      Tags:
        - Key: Name
          Value: !Sub '${Project}-alb-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # EC2 Instance Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Project}-ec2-sg'
      GroupDescription: 'Security group for EC2 instances behind ALB'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: 'Allow HTTP traffic from ALB'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '10.0.0.0/16'
          Description: 'Allow SSH access from VPC'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
          Description: 'Allow all outbound traffic'
      Tags:
        - Key: Name
          Value: !Sub '${Project}-ec2-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # ============================================================================
  # Application Load Balancer
  # ============================================================================
  
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${Project}-alb'
      Scheme: !Ref LoadBalancerScheme
      Type: 'application'
      IpAddressType: 'ipv4'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: 'deletion_protection.enabled'
          Value: 'false'
        - Key: 'idle_timeout.timeout_seconds'
          Value: '60'
        - Key: 'routing.http2.enabled'
          Value: 'true'
        - Key: 'access_logs.s3.enabled'
          Value: 'false'
      Tags:
        - Key: Name
          Value: !Sub '${Project}-alb'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Region
          Value: !Ref 'AWS::Region'

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Project}-tg'
      Protocol: HTTP
      Port: 80
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: !Ref HealthCheckInterval
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: !Ref FailureThreshold
      Matcher:
        HttpCode: '200'
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: '30'
        - Key: 'stickiness.enabled'
          Value: 'false'
      Tags:
        - Key: Name
          Value: !Sub '${Project}-tg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ============================================================================
  # SNS Topic for Health Check Notifications
  # ============================================================================
  
  HealthCheckNotificationTopic:
    Type: AWS::SNS::Topic
    Condition: ShouldEnableNotifications
    Properties:
      TopicName: !Sub '${Project}-health-check-alerts'
      DisplayName: 'Route 53 Health Check Alerts'
      KmsMasterKeyId: 'alias/aws/sns'
      Tags:
        - Key: Name
          Value: !Sub '${Project}-health-check-alerts'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # Email Subscription
  HealthCheckEmailSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasNotificationEmail
    Properties:
      TopicArn: !Ref HealthCheckNotificationTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # ============================================================================
  # Route 53 Health Checks
  # ============================================================================
  
  # Primary Region Health Check
  PrimaryHealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      Type: HTTP
      ResourcePath: !Ref HealthCheckPath
      FullyQualifiedDomainName: !GetAtt ApplicationLoadBalancer.DNSName
      Port: 80
      RequestInterval: !Ref HealthCheckInterval
      FailureThreshold: !Ref FailureThreshold
      MeasureLatency: true
      EnableSNI: false
      Tags:
        - Key: Name
          Value: !Sub '${Project}-primary-health-check'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Region
          Value: !Ref PrimaryRegion
        - Key: Application
          Value: 'API'

  # ============================================================================
  # Route 53 DNS Records
  # ============================================================================
  
  # Weighted Routing Records
  WeightedRecordPrimary:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !If
        - ShouldCreateHostedZone
        - !Ref HostedZone
        - !Ref HostedZoneId
      Name: !Sub 'api.${DomainName}'
      Type: A
      SetIdentifier: 'Primary-Weighted'
      Weight: !Ref PrimaryWeight
      TTL: !Ref TTLValue
      ResourceRecords:
        - '1.2.3.4'  # Placeholder IP - replace with actual ALB IP in production
      HealthCheckId: !Ref PrimaryHealthCheck
      Comment: 'Weighted routing record for primary region'

  # Latency-Based Routing Records
  LatencyRecordPrimary:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !If
        - ShouldCreateHostedZone
        - !Ref HostedZone
        - !Ref HostedZoneId
      Name: !Sub 'latency.api.${DomainName}'
      Type: A
      SetIdentifier: 'Primary-Latency'
      Region: !Ref PrimaryRegion
      TTL: !Ref TTLValue
      ResourceRecords:
        - '1.2.3.4'  # Placeholder IP - replace with actual ALB IP in production
      HealthCheckId: !Ref PrimaryHealthCheck
      Comment: 'Latency-based routing record for primary region'

  # Geolocation Routing Records
  GeolocationRecordPrimary:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !If
        - ShouldCreateHostedZone
        - !Ref HostedZone
        - !Ref HostedZoneId
      Name: !Sub 'geo.api.${DomainName}'
      Type: A
      SetIdentifier: !Sub 
        - '${Location}-Geo'
        - Location: !FindInMap [RegionToContinentMap, !Ref PrimaryRegion, Location]
      GeoLocation:
        ContinentCode: !FindInMap [RegionToContinentMap, !Ref PrimaryRegion, Continent]
      TTL: !Ref TTLValue
      ResourceRecords:
        - '1.2.3.4'  # Placeholder IP - replace with actual ALB IP in production
      HealthCheckId: !Ref PrimaryHealthCheck
      Comment: !Sub
        - 'Geolocation routing record for ${Location}'
        - Location: !FindInMap [RegionToContinentMap, !Ref PrimaryRegion, Location]

  # Default Geolocation Record (Fallback)
  GeolocationRecordDefault:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !If
        - ShouldCreateHostedZone
        - !Ref HostedZone
        - !Ref HostedZoneId
      Name: !Sub 'geo.api.${DomainName}'
      Type: A
      SetIdentifier: 'Default-Geo'
      GeoLocation:
        CountryCode: '*'
      TTL: !Ref TTLValue
      ResourceRecords:
        - '1.2.3.4'  # Placeholder IP - replace with actual ALB IP in production
      HealthCheckId: !Ref PrimaryHealthCheck
      Comment: 'Default geolocation routing record (fallback)'

  # Failover Routing Records
  FailoverRecordPrimary:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !If
        - ShouldCreateHostedZone
        - !Ref HostedZone
        - !Ref HostedZoneId
      Name: !Sub 'failover.api.${DomainName}'
      Type: A
      SetIdentifier: 'Primary-Failover'
      Failover: PRIMARY
      TTL: !Ref TTLValue
      ResourceRecords:
        - '1.2.3.4'  # Placeholder IP - replace with actual ALB IP in production
      HealthCheckId: !Ref PrimaryHealthCheck
      Comment: 'Primary failover routing record'

  # Multivalue Answer Routing Records
  MultiValueRecordPrimary:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !If
        - ShouldCreateHostedZone
        - !Ref HostedZone
        - !Ref HostedZoneId
      Name: !Sub 'multivalue.api.${DomainName}'
      Type: A
      SetIdentifier: 'Primary-Multivalue'
      TTL: !Ref TTLValue
      ResourceRecords:
        - '1.2.3.4'  # Placeholder IP - replace with actual ALB IP in production
      HealthCheckId: !Ref PrimaryHealthCheck
      Comment: 'Multivalue answer routing record for primary region'

  # ============================================================================
  # CloudWatch Alarms for Health Checks
  # ============================================================================
  
  HealthCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ShouldEnableNotifications
    Properties:
      AlarmName: !Sub '${Project}-primary-health-check-alarm'
      AlarmDescription: 'Alarm when primary region health check fails'
      MetricName: HealthCheckStatus
      Namespace: AWS/Route53
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: HealthCheckId
          Value: !Ref PrimaryHealthCheck
      AlarmActions:
        - !Ref HealthCheckNotificationTopic
      OKActions:
        - !Ref HealthCheckNotificationTopic
      TreatMissingData: breaching
      Tags:
        - Key: Name
          Value: !Sub '${Project}-primary-health-check-alarm'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

Outputs:
  # Hosted Zone Information
  HostedZoneId:
    Description: 'Route 53 Hosted Zone ID'
    Value: !If
      - ShouldCreateHostedZone
      - !Ref HostedZone
      - !Ref HostedZoneId
    Export:
      Name: !Sub '${AWS::StackName}-HostedZoneId'

  HostedZoneNameServers:
    Description: 'Name servers for the hosted zone'
    Condition: ShouldCreateHostedZone
    Value: !Join [', ', !GetAtt HostedZone.NameServers]
    Export:
      Name: !Sub '${AWS::StackName}-NameServers'

  # Domain Information
  DomainName:
    Description: 'Domain name for the solution'
    Value: !Ref DomainName
    Export:
      Name: !Sub '${AWS::StackName}-DomainName'

  ApiEndpoint:
    Description: 'API endpoint for the solution'
    Value: !Sub 'api.${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  # Load Balancer Information
  LoadBalancerDNSName:
    Description: 'DNS name of the Application Load Balancer'
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNSName'

  LoadBalancerHostedZoneId:
    Description: 'Hosted Zone ID of the Application Load Balancer'
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerHostedZoneId'

  LoadBalancerArn:
    Description: 'ARN of the Application Load Balancer'
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerArn'

  # Health Check Information
  PrimaryHealthCheckId:
    Description: 'ID of the primary region health check'
    Value: !Ref PrimaryHealthCheck
    Export:
      Name: !Sub '${AWS::StackName}-PrimaryHealthCheckId'

  # Network Information
  VpcId:
    Description: 'ID of the VPC'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'

  PublicSubnet1Id:
    Description: 'ID of public subnet 1'
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1Id'

  PublicSubnet2Id:
    Description: 'ID of public subnet 2'
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2Id'

  # Security Group Information
  ALBSecurityGroupId:
    Description: 'ID of the ALB security group'
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ALBSecurityGroupId'

  EC2SecurityGroupId:
    Description: 'ID of the EC2 security group'
    Value: !Ref EC2SecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-EC2SecurityGroupId'

  # Target Group Information
  TargetGroupArn:
    Description: 'ARN of the target group'
    Value: !Ref TargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-TargetGroupArn'

  # Notification Information
  SNSTopicArn:
    Description: 'ARN of the SNS topic for health check notifications'
    Condition: ShouldEnableNotifications
    Value: !Ref HealthCheckNotificationTopic
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopicArn'

  # DNS Endpoints for Testing
  WeightedEndpoint:
    Description: 'Weighted routing endpoint for testing'
    Value: !Sub 'api.${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WeightedEndpoint'

  LatencyEndpoint:
    Description: 'Latency-based routing endpoint for testing'
    Value: !Sub 'latency.api.${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-LatencyEndpoint'

  GeolocationEndpoint:
    Description: 'Geolocation routing endpoint for testing'
    Value: !Sub 'geo.api.${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-GeolocationEndpoint'

  FailoverEndpoint:
    Description: 'Failover routing endpoint for testing'
    Value: !Sub 'failover.api.${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-FailoverEndpoint'

  MultiValueEndpoint:
    Description: 'Multivalue answer routing endpoint for testing'
    Value: !Sub 'multivalue.api.${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-MultiValueEndpoint'

  # Configuration Summary
  ConfigurationSummary:
    Description: 'Summary of the DNS load balancing configuration'
    Value: !Sub |
      DNS Load Balancing Solution Deployed:
      - Domain: ${DomainName}
      - Primary Region: ${PrimaryRegion} (Weight: ${PrimaryWeight})
      - Health Check Path: ${HealthCheckPath}
      - Health Check Interval: ${HealthCheckInterval}s
      - TTL: ${TTLValue}s
      - Notifications: ${EnableNotifications}
      - Environment: ${Environment}
    Export:
      Name: !Sub '${AWS::StackName}-ConfigurationSummary'

  # Cost Estimation
  EstimatedMonthlyCost:
    Description: 'Estimated monthly cost for this solution (USD)'
    Value: !Sub |
      Estimated Monthly Cost Breakdown:
      - Route 53 Hosted Zone: $0.50
      - Health Checks (1): $0.50
      - Application Load Balancer: $16.20
      - SNS Topic: $0.00 (first 1M notifications free)
      - Total Estimated: ~$17.20/month
      Note: Actual costs may vary based on usage and additional resources.
    Export:
      Name: !Sub '${AWS::StackName}-EstimatedMonthlyCost'