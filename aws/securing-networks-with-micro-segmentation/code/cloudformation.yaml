AWSTemplateFormatVersion: '2010-09-09'
Description: 'Network Micro-Segmentation with NACLs and Advanced Security Groups - Complete infrastructure for implementing zero-trust network architecture with layered security controls'

Parameters:
  Environment:
    Type: String
    Default: 'production'
    AllowedValues: ['production', 'staging', 'development']
    Description: 'Environment name for resource tagging and naming'
  
  VpcCidr:
    Type: String
    Default: '10.0.0.0/16'
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Description: 'CIDR block for the VPC'
  
  DmzSubnetCidr:
    Type: String
    Default: '10.0.1.0/24'
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Description: 'CIDR block for DMZ subnet (internet-facing)'
  
  WebSubnetCidr:
    Type: String
    Default: '10.0.2.0/24'
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Description: 'CIDR block for Web Tier subnet'
  
  AppSubnetCidr:
    Type: String
    Default: '10.0.3.0/24'
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Description: 'CIDR block for Application Tier subnet'
  
  DatabaseSubnetCidr:
    Type: String
    Default: '10.0.4.0/24'
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Description: 'CIDR block for Database Tier subnet'
  
  ManagementSubnetCidr:
    Type: String
    Default: '10.0.5.0/24'
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Description: 'CIDR block for Management subnet'
  
  MonitoringSubnetCidr:
    Type: String
    Default: '10.0.6.0/24'
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Description: 'CIDR block for Monitoring subnet'
  
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: 'Availability Zone for subnet deployment'
  
  EnableFlowLogs:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable VPC Flow Logs for traffic monitoring'
  
  FlowLogRetentionDays:
    Type: Number
    Default: 30
    MinValue: 1
    MaxValue: 365
    Description: 'Number of days to retain VPC Flow Logs'

Conditions:
  EnableFlowLogsCondition: !Equals [!Ref EnableFlowLogs, 'true']

Resources:
  # VPC Infrastructure
  MicroSegmentationVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-microsegmentation-vpc'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Network Micro-Segmentation'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-microsegmentation-igw'
        - Key: Environment
          Value: !Ref Environment

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MicroSegmentationVPC

  # Subnets for Each Security Zone
  DmzSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MicroSegmentationVPC
      CidrBlock: !Ref DmzSubnetCidr
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dmz-subnet'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'dmz'
        - Key: Tier
          Value: 'public'

  WebSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MicroSegmentationVPC
      CidrBlock: !Ref WebSubnetCidr
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-web-subnet'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'web'
        - Key: Tier
          Value: 'private'

  AppSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MicroSegmentationVPC
      CidrBlock: !Ref AppSubnetCidr
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-app-subnet'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'app'
        - Key: Tier
          Value: 'private'

  DatabaseSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MicroSegmentationVPC
      CidrBlock: !Ref DatabaseSubnetCidr
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-database-subnet'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'database'
        - Key: Tier
          Value: 'private'

  ManagementSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MicroSegmentationVPC
      CidrBlock: !Ref ManagementSubnetCidr
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-management-subnet'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'management'
        - Key: Tier
          Value: 'private'

  MonitoringSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MicroSegmentationVPC
      CidrBlock: !Ref MonitoringSubnetCidr
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-monitoring-subnet'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'monitoring'
        - Key: Tier
          Value: 'private'

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MicroSegmentationVPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-public-route-table'
        - Key: Environment
          Value: !Ref Environment

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MicroSegmentationVPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-private-route-table'
        - Key: Environment
          Value: !Ref Environment

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Route Table Associations
  DmzSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DmzSubnet
      RouteTableId: !Ref PublicRouteTable

  WebSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnet
      RouteTableId: !Ref PrivateRouteTable

  AppSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppSubnet
      RouteTableId: !Ref PrivateRouteTable

  DatabaseSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DatabaseSubnet
      RouteTableId: !Ref PrivateRouteTable

  ManagementSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ManagementSubnet
      RouteTableId: !Ref PrivateRouteTable

  MonitoringSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MonitoringSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Custom Network ACLs for Subnet-Level Security
  DmzNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MicroSegmentationVPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dmz-nacl'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'dmz'

  WebNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MicroSegmentationVPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-web-nacl'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'web'

  AppNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MicroSegmentationVPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-app-nacl'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'app'

  DatabaseNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MicroSegmentationVPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-database-nacl'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'database'

  ManagementNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MicroSegmentationVPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-management-nacl'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'management'

  MonitoringNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MicroSegmentationVPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-monitoring-nacl'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'monitoring'

  # DMZ NACL Rules (Internet-facing)
  DmzNaclInboundHttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DmzNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 80
        To: 80

  DmzNaclInboundHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DmzNetworkAcl
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 443
        To: 443

  DmzNaclInboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DmzNetworkAcl
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 1024
        To: 65535

  DmzNaclOutboundWebHttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DmzNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: !Ref WebSubnetCidr
      PortRange:
        From: 80
        To: 80

  DmzNaclOutboundWebHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DmzNetworkAcl
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: !Ref WebSubnetCidr
      PortRange:
        From: 443
        To: 443

  DmzNaclOutboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DmzNetworkAcl
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 1024
        To: 65535

  # Web Tier NACL Rules
  WebNaclInboundHttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref WebNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref DmzSubnetCidr
      PortRange:
        From: 80
        To: 80

  WebNaclInboundHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref WebNetworkAcl
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref DmzSubnetCidr
      PortRange:
        From: 443
        To: 443

  WebNaclInboundSsh:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref WebNetworkAcl
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref ManagementSubnetCidr
      PortRange:
        From: 22
        To: 22

  WebNaclInboundMonitoring:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref WebNetworkAcl
      RuleNumber: 130
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref MonitoringSubnetCidr
      PortRange:
        From: 161
        To: 161

  WebNaclOutboundApp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref WebNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: !Ref AppSubnetCidr
      PortRange:
        From: 8080
        To: 8080

  WebNaclOutboundDmz:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref WebNetworkAcl
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: !Ref DmzSubnetCidr
      PortRange:
        From: 1024
        To: 65535

  WebNaclOutboundHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref WebNetworkAcl
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 443
        To: 443

  # App Tier NACL Rules
  AppNaclInboundWeb:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AppNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref WebSubnetCidr
      PortRange:
        From: 8080
        To: 8080

  AppNaclInboundSsh:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AppNetworkAcl
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref ManagementSubnetCidr
      PortRange:
        From: 22
        To: 22

  AppNaclInboundMonitoring:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AppNetworkAcl
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref MonitoringSubnetCidr
      PortRange:
        From: 161
        To: 161

  AppNaclOutboundDatabase:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AppNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: !Ref DatabaseSubnetCidr
      PortRange:
        From: 3306
        To: 3306

  AppNaclOutboundWeb:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AppNetworkAcl
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: !Ref WebSubnetCidr
      PortRange:
        From: 1024
        To: 65535

  AppNaclOutboundHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AppNetworkAcl
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 443
        To: 443

  # Database Tier NACL Rules (Most Restrictive)
  DatabaseNaclInboundApp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DatabaseNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref AppSubnetCidr
      PortRange:
        From: 3306
        To: 3306

  DatabaseNaclInboundSsh:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DatabaseNetworkAcl
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref ManagementSubnetCidr
      PortRange:
        From: 22
        To: 22

  DatabaseNaclInboundMonitoring:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DatabaseNetworkAcl
      RuleNumber: 120
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref MonitoringSubnetCidr
      PortRange:
        From: 161
        To: 161

  DatabaseNaclOutboundApp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DatabaseNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: !Ref AppSubnetCidr
      PortRange:
        From: 1024
        To: 65535

  DatabaseNaclOutboundHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DatabaseNetworkAcl
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 443
        To: 443

  # Management Tier NACL Rules
  ManagementNaclInboundVpn:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref ManagementNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: '10.0.0.0/8'
      PortRange:
        From: 22
        To: 22

  ManagementNaclInboundEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref ManagementNetworkAcl
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 1024
        To: 65535

  ManagementNaclOutboundSsh:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref ManagementNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: !Ref VpcCidr
      PortRange:
        From: 22
        To: 22

  ManagementNaclOutboundHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref ManagementNetworkAcl
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 443
        To: 443

  # Monitoring Tier NACL Rules
  MonitoringNaclInboundAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MonitoringNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: !Ref VpcCidr
      PortRange:
        From: 1024
        To: 65535

  MonitoringNaclOutboundAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MonitoringNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: !Ref VpcCidr
      PortRange:
        From: 161
        To: 161

  MonitoringNaclOutboundHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MonitoringNetworkAcl
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 443
        To: 443

  # NACL Subnet Associations
  DmzSubnetNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DmzSubnet
      NetworkAclId: !Ref DmzNetworkAcl

  WebSubnetNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref WebSubnet
      NetworkAclId: !Ref WebNetworkAcl

  AppSubnetNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref AppSubnet
      NetworkAclId: !Ref AppNetworkAcl

  DatabaseSubnetNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DatabaseSubnet
      NetworkAclId: !Ref DatabaseNetworkAcl

  ManagementSubnetNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref ManagementSubnet
      NetworkAclId: !Ref ManagementNetworkAcl

  MonitoringSubnetNaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref MonitoringSubnet
      NetworkAclId: !Ref MonitoringNetworkAcl

  # Advanced Security Groups with Layered Rules
  DmzSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-dmz-alb-sg'
      GroupDescription: 'Security group for Application Load Balancer in DMZ'
      VpcId: !Ref MicroSegmentationVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: 'HTTP from Internet'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
          Description: 'HTTPS from Internet'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-dmz-alb-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'dmz'

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-web-tier-sg'
      GroupDescription: 'Security group for Web Tier instances'
      VpcId: !Ref MicroSegmentationVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref DmzSecurityGroup
          Description: 'HTTP from DMZ Load Balancer'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref DmzSecurityGroup
          Description: 'HTTPS from DMZ Load Balancer'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref ManagementSecurityGroup
          Description: 'SSH from Management'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-web-tier-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'web'

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-app-tier-sg'
      GroupDescription: 'Security group for Application Tier instances'
      VpcId: !Ref MicroSegmentationVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref WebSecurityGroup
          Description: 'Application port from Web Tier'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref ManagementSecurityGroup
          Description: 'SSH from Management'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-app-tier-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'app'

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-db-tier-sg'
      GroupDescription: 'Security group for Database Tier (most restrictive)'
      VpcId: !Ref MicroSegmentationVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref AppSecurityGroup
          Description: 'MySQL from Application Tier'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref ManagementSecurityGroup
          Description: 'SSH from Management'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-db-tier-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'database'

  ManagementSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-mgmt-sg'
      GroupDescription: 'Security group for Management resources'
      VpcId: !Ref MicroSegmentationVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '10.0.0.0/8'
          Description: 'SSH from corporate network'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-mgmt-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Zone
          Value: 'management'

  # VPC Flow Logs Infrastructure
  VpcFlowLogsRole:
    Type: AWS::IAM::Role
    Condition: EnableFlowLogsCondition
    Properties:
      RoleName: !Sub '${Environment}-VPCFlowLogsRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/VPCFlowLogsDeliveryRolePolicy
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-VPCFlowLogsRole'
        - Key: Environment
          Value: !Ref Environment

  VpcFlowLogsGroup:
    Type: AWS::Logs::LogGroup
    Condition: EnableFlowLogsCondition
    Properties:
      LogGroupName: !Sub '/aws/vpc/${Environment}/microsegmentation/flowlogs'
      RetentionInDays: !Ref FlowLogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-flowlogs-group'
        - Key: Environment
          Value: !Ref Environment

  VpcFlowLogs:
    Type: AWS::EC2::FlowLog
    Condition: EnableFlowLogsCondition
    Properties:
      DeliverLogsPermissionArn: !GetAtt VpcFlowLogsRole.Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref VpcFlowLogsGroup
      ResourceId: !Ref MicroSegmentationVPC
      ResourceType: VPC
      TrafficType: ALL
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-vpc-flowlogs'
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Alarms for Security Monitoring
  RejectedTrafficAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableFlowLogsCondition
    Properties:
      AlarmName: !Sub '${Environment}-VPC-Rejected-Traffic-High'
      AlarmDescription: 'High number of rejected packets in VPC'
      MetricName: 'PacketsDropped'
      Namespace: 'AWS/VPC'
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: VpcId
          Value: !Ref MicroSegmentationVPC
      TreatMissingData: notBreaching

  # S3 Bucket for Flow Logs (Alternative to CloudWatch)
  FlowLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Environment}-microsegmentation-flowlogs-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldFlowLogs
            Status: Enabled
            ExpirationInDays: 90
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-flowlogs-bucket'
        - Key: Environment
          Value: !Ref Environment

Outputs:
  VpcId:
    Description: 'VPC ID for the micro-segmentation architecture'
    Value: !Ref MicroSegmentationVPC
    Export:
      Name: !Sub '${Environment}-MicroSegmentationVPC-ID'

  VpcCidr:
    Description: 'CIDR block of the VPC'
    Value: !Ref VpcCidr
    Export:
      Name: !Sub '${Environment}-MicroSegmentationVPC-CIDR'

  InternetGatewayId:
    Description: 'Internet Gateway ID'
    Value: !Ref InternetGateway
    Export:
      Name: !Sub '${Environment}-InternetGateway-ID'

  # Subnet IDs
  DmzSubnetId:
    Description: 'DMZ Subnet ID (Internet-facing)'
    Value: !Ref DmzSubnet
    Export:
      Name: !Sub '${Environment}-DmzSubnet-ID'

  WebSubnetId:
    Description: 'Web Tier Subnet ID'
    Value: !Ref WebSubnet
    Export:
      Name: !Sub '${Environment}-WebSubnet-ID'

  AppSubnetId:
    Description: 'Application Tier Subnet ID'
    Value: !Ref AppSubnet
    Export:
      Name: !Sub '${Environment}-AppSubnet-ID'

  DatabaseSubnetId:
    Description: 'Database Tier Subnet ID'
    Value: !Ref DatabaseSubnet
    Export:
      Name: !Sub '${Environment}-DatabaseSubnet-ID'

  ManagementSubnetId:
    Description: 'Management Subnet ID'
    Value: !Ref ManagementSubnet
    Export:
      Name: !Sub '${Environment}-ManagementSubnet-ID'

  MonitoringSubnetId:
    Description: 'Monitoring Subnet ID'
    Value: !Ref MonitoringSubnet
    Export:
      Name: !Sub '${Environment}-MonitoringSubnet-ID'

  # Security Group IDs
  DmzSecurityGroupId:
    Description: 'DMZ Security Group ID (Load Balancer)'
    Value: !Ref DmzSecurityGroup
    Export:
      Name: !Sub '${Environment}-DmzSecurityGroup-ID'

  WebSecurityGroupId:
    Description: 'Web Tier Security Group ID'
    Value: !Ref WebSecurityGroup
    Export:
      Name: !Sub '${Environment}-WebSecurityGroup-ID'

  AppSecurityGroupId:
    Description: 'Application Tier Security Group ID'
    Value: !Ref AppSecurityGroup
    Export:
      Name: !Sub '${Environment}-AppSecurityGroup-ID'

  DatabaseSecurityGroupId:
    Description: 'Database Tier Security Group ID'
    Value: !Ref DatabaseSecurityGroup
    Export:
      Name: !Sub '${Environment}-DatabaseSecurityGroup-ID'

  ManagementSecurityGroupId:
    Description: 'Management Security Group ID'
    Value: !Ref ManagementSecurityGroup
    Export:
      Name: !Sub '${Environment}-ManagementSecurityGroup-ID'

  # Network ACL IDs
  DmzNetworkAclId:
    Description: 'DMZ Network ACL ID'
    Value: !Ref DmzNetworkAcl
    Export:
      Name: !Sub '${Environment}-DmzNetworkAcl-ID'

  WebNetworkAclId:
    Description: 'Web Tier Network ACL ID'
    Value: !Ref WebNetworkAcl
    Export:
      Name: !Sub '${Environment}-WebNetworkAcl-ID'

  AppNetworkAclId:
    Description: 'Application Tier Network ACL ID'
    Value: !Ref AppNetworkAcl
    Export:
      Name: !Sub '${Environment}-AppNetworkAcl-ID'

  DatabaseNetworkAclId:
    Description: 'Database Tier Network ACL ID'
    Value: !Ref DatabaseNetworkAcl
    Export:
      Name: !Sub '${Environment}-DatabaseNetworkAcl-ID'

  ManagementNetworkAclId:
    Description: 'Management Network ACL ID'
    Value: !Ref ManagementNetworkAcl
    Export:
      Name: !Sub '${Environment}-ManagementNetworkAcl-ID'

  MonitoringNetworkAclId:
    Description: 'Monitoring Network ACL ID'
    Value: !Ref MonitoringNetworkAcl
    Export:
      Name: !Sub '${Environment}-MonitoringNetworkAcl-ID'

  # Monitoring Resources
  FlowLogsBucketName:
    Description: 'S3 Bucket for Flow Logs storage'
    Value: !Ref FlowLogsBucket
    Export:
      Name: !Sub '${Environment}-FlowLogsBucket-Name'

  FlowLogsGroupName:
    Condition: EnableFlowLogsCondition
    Description: 'CloudWatch Log Group for VPC Flow Logs'
    Value: !Ref VpcFlowLogsGroup
    Export:
      Name: !Sub '${Environment}-FlowLogsGroup-Name'

  # Deployment Information
  StackName:
    Description: 'CloudFormation Stack Name'
    Value: !Ref AWS::StackName

  Region:
    Description: 'AWS Region'
    Value: !Ref AWS::Region

  AccountId:
    Description: 'AWS Account ID'
    Value: !Ref AWS::AccountId

  DeploymentTimestamp:
    Description: 'Deployment timestamp'
    Value: !Sub '${AWS::StackName}-${AWS::Region}-${AWS::AccountId}'