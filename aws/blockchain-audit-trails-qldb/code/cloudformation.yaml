AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template for creating blockchain audit trails for compliance
  using Amazon QLDB, CloudTrail, EventBridge, Lambda, and supporting services.
  This template implements immutable audit logging for regulatory compliance
  requirements including SOX, PCI-DSS, and other financial regulations.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "General Configuration"
        Parameters:
          - ProjectName
          - Environment
          - ComplianceNotificationEmail
      - Label:
          default: "QLDB Configuration"
        Parameters:
          - LedgerName
          - LedgerDeletionProtection
      - Label:
          default: "CloudTrail Configuration"
        Parameters:
          - CloudTrailName
          - CloudTrailS3KeyPrefix
          - IncludeGlobalServiceEvents
          - IsMultiRegionTrail
      - Label:
          default: "Lambda Configuration"
        Parameters:
          - LambdaMemorySize
          - LambdaTimeout
      - Label:
          default: "Data Retention Configuration"
        Parameters:
          - S3LogRetentionDays
          - CloudWatchLogRetentionDays

Parameters:
  ProjectName:
    Type: String
    Default: "compliance-audit"
    Description: "Project name used for resource naming and tagging"
    AllowedPattern: "^[a-z0-9-]+$"
    ConstraintDescription: "Must contain only lowercase letters, numbers, and hyphens"
    MinLength: 3
    MaxLength: 30

  Environment:
    Type: String
    Default: "dev"
    AllowedValues:
      - "dev"
      - "test"
      - "staging"
      - "prod"
    Description: "Environment designation for resource tagging and configuration"

  ComplianceNotificationEmail:
    Type: String
    Description: "Email address for compliance notifications and alerts"
    AllowedPattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
    ConstraintDescription: "Must be a valid email address"

  LedgerName:
    Type: String
    Default: "compliance-audit-ledger"
    Description: "Name for the Amazon QLDB ledger"
    AllowedPattern: "^[a-zA-Z0-9-]+$"
    ConstraintDescription: "Must contain only letters, numbers, and hyphens"
    MinLength: 1
    MaxLength: 32

  LedgerDeletionProtection:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "Enable deletion protection for QLDB ledger"

  CloudTrailName:
    Type: String
    Default: "compliance-audit-trail"
    Description: "Name for the CloudTrail trail"
    AllowedPattern: "^[a-zA-Z0-9-_\\.]+$"
    ConstraintDescription: "Must contain only letters, numbers, hyphens, underscores, and periods"
    MinLength: 3
    MaxLength: 128

  CloudTrailS3KeyPrefix:
    Type: String
    Default: "cloudtrail-logs"
    Description: "S3 key prefix for CloudTrail logs"
    AllowedPattern: "^[a-zA-Z0-9-_/]+$"
    ConstraintDescription: "Must contain only letters, numbers, hyphens, underscores, and forward slashes"

  IncludeGlobalServiceEvents:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "Include global service events in CloudTrail"

  IsMultiRegionTrail:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "Enable multi-region trail for CloudTrail"

  LambdaMemorySize:
    Type: Number
    Default: 256
    MinValue: 128
    MaxValue: 10240
    Description: "Memory size for Lambda function in MB"

  LambdaTimeout:
    Type: Number
    Default: 60
    MinValue: 3
    MaxValue: 900
    Description: "Timeout for Lambda function in seconds"

  S3LogRetentionDays:
    Type: Number
    Default: 2555
    MinValue: 1
    MaxValue: 3653
    Description: "Number of days to retain S3 logs (default 7 years for compliance)"

  CloudWatchLogRetentionDays:
    Type: Number
    Default: 365
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: "Number of days to retain CloudWatch logs"

Conditions:
  EnableDeletionProtection: !Equals [!Ref LedgerDeletionProtection, "true"]
  EnableGlobalServiceEvents: !Equals [!Ref IncludeGlobalServiceEvents, "true"]
  EnableMultiRegionTrail: !Equals [!Ref IsMultiRegionTrail, "true"]
  IsProduction: !Equals [!Ref Environment, "prod"]

Resources:
  # S3 Bucket for storing audit reports and CloudTrail logs
  ComplianceAuditBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "${ProjectName}-audit-bucket-${AWS::AccountId}-${AWS::Region}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: ComplianceRetentionRule
            Status: Enabled
            ExpirationInDays: !Ref S3LogRetentionDays
            NoncurrentVersionExpirationInDays: 30
          - Id: IncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref ComplianceAuditLogGroup
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-audit-bucket"
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "Compliance audit storage"
        - Key: DataClassification
          Value: "Sensitive"

  # S3 Bucket Policy for CloudTrail
  ComplianceAuditBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ComplianceAuditBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub "${ComplianceAuditBucket}"
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${CloudTrailName}"
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub "${ComplianceAuditBucket}/${CloudTrailS3KeyPrefix}/*"
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
                'AWS:SourceArn': !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${CloudTrailName}"
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "${ComplianceAuditBucket}"
              - !Sub "${ComplianceAuditBucket}/*"
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  # KMS Key for enhanced encryption
  ComplianceAuditKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "KMS key for compliance audit encryption"
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow CloudTrail to encrypt logs
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action:
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:EncryptionContext:aws:cloudtrail:arn': !Sub "arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${CloudTrailName}"
          - Sid: Allow CloudWatch Logs
            Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-compliance-kms-key"
        - Key: Environment
          Value: !Ref Environment

  ComplianceAuditKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${ProjectName}-compliance-audit"
      TargetKeyId: !Ref ComplianceAuditKMSKey

  # Amazon QLDB Ledger for immutable audit records
  ComplianceAuditLedger:
    Type: AWS::QLDB::Ledger
    Properties:
      Name: !Sub "${LedgerName}-${AWS::AccountId}"
      PermissionsMode: STANDARD
      DeletionProtection: !If [EnableDeletionProtection, true, false]
      KmsKey: !Ref ComplianceAuditKMSKey
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-audit-ledger"
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "Immutable compliance audit records"
        - Key: DataClassification
          Value: "Sensitive"

  # CloudWatch Log Group for Lambda function
  ComplianceAuditLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProjectName}-audit-processor-${Environment}"
      RetentionInDays: !Ref CloudWatchLogRetentionDays
      KmsKeyId: !GetAtt ComplianceAuditKMSKey.Arn
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-audit-processor-logs"
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for Lambda function
  AuditProcessorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-audit-processor-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:RequestedRegion': !Ref AWS::Region
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ComplianceAuditPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - qldb:SendCommand
                  - qldb:GetDigest
                  - qldb:GetBlock
                  - qldb:GetRevision
                Resource: !GetAtt ComplianceAuditLedger.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:PutObjectAcl
                Resource: !Sub "${ComplianceAuditBucket}/*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref ComplianceNotificationTopic
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: !GetAtt ComplianceAuditKMSKey.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}-audit-processor-${Environment}:*"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-audit-processor-role"
        - Key: Environment
          Value: !Ref Environment

  # Lambda function for audit processing
  AuditProcessorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-audit-processor-${Environment}"
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt AuditProcessorLambdaRole.Arn
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemorySize
      Environment:
        Variables:
          LEDGER_NAME: !Ref ComplianceAuditLedger
          S3_BUCKET: !Ref ComplianceAuditBucket
          SNS_TOPIC_ARN: !Ref ComplianceNotificationTopic
          KMS_KEY_ID: !Ref ComplianceAuditKMSKey
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          import json
          import boto3
          import hashlib
          import datetime
          import os
          from botocore.exceptions import ClientError
          
          # Initialize AWS clients
          qldb_client = boto3.client('qldb')
          s3_client = boto3.client('s3')
          cloudwatch = boto3.client('cloudwatch')
          sns_client = boto3.client('sns')
          
          def lambda_handler(event, context):
              """
              Process CloudTrail events and store audit records in QLDB
              """
              try:
                  print(f"Processing event: {json.dumps(event, default=str)}")
                  
                  # Extract environment variables
                  ledger_name = os.environ['LEDGER_NAME']
                  s3_bucket = os.environ['S3_BUCKET']
                  sns_topic_arn = os.environ['SNS_TOPIC_ARN']
                  environment = os.environ['ENVIRONMENT']
                  
                  # Process the audit event
                  audit_record = create_audit_record(event)
                  
                  # Store audit record (simplified for CloudFormation deployment)
                  store_audit_record_metadata(ledger_name, audit_record, s3_bucket)
                  
                  # Generate compliance metrics
                  generate_compliance_metrics(audit_record)
                  
                  # Log successful processing
                  print(f"Successfully processed audit record: {audit_record['auditId']}")
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'Audit record processed successfully',
                          'auditId': audit_record['auditId'],
                          'timestamp': audit_record['timestamp']
                      })
                  }
                  
              except Exception as e:
                  error_message = f"Error processing audit record: {str(e)}"
                  print(error_message)
                  
                  # Send notification for processing failures
                  try:
                      sns_client.publish(
                          TopicArn=sns_topic_arn,
                          Subject="Compliance Audit Processing Failure",
                          Message=error_message
                      )
                  except Exception as sns_error:
                      print(f"Failed to send SNS notification: {str(sns_error)}")
                  
                  raise
          
          def create_audit_record(event):
              """
              Create structured audit record from CloudTrail event
              """
              timestamp = datetime.datetime.utcnow().isoformat()
              
              # Extract CloudTrail event details
              detail = event.get('detail', {})
              
              audit_record = {
                  'auditId': hashlib.sha256(str(event).encode()).hexdigest()[:16],
                  'timestamp': timestamp,
                  'eventName': detail.get('eventName', 'Unknown'),
                  'eventSource': detail.get('eventSource', ''),
                  'awsRegion': detail.get('awsRegion', ''),
                  'sourceIPAddress': detail.get('sourceIPAddress', ''),
                  'userAgent': detail.get('userAgent', ''),
                  'userIdentity': detail.get('userIdentity', {}),
                  'requestParameters': detail.get('requestParameters', {}),
                  'responseElements': detail.get('responseElements', {}),
                  'resources': detail.get('resources', []),
                  'errorCode': detail.get('errorCode', ''),
                  'errorMessage': detail.get('errorMessage', ''),
                  'eventTime': detail.get('eventTime', timestamp),
                  'recipientAccountId': detail.get('recipientAccountId', ''),
                  'vpcEndpointId': detail.get('vpcEndpointId', ''),
                  'recordHash': ''
              }
              
              # Create integrity hash for the record
              record_string = json.dumps(audit_record, sort_keys=True, default=str)
              audit_record['recordHash'] = hashlib.sha256(record_string.encode()).hexdigest()
              
              return audit_record
          
          def store_audit_record_metadata(ledger_name, audit_record, s3_bucket):
              """
              Store audit record metadata and get QLDB digest for verification
              """
              try:
                  # Get current QLDB digest for integrity verification
                  digest_response = qldb_client.get_digest(Name=ledger_name)
                  
                  # Create audit metadata with QLDB digest
                  audit_metadata = {
                      'auditRecord': audit_record,
                      'qldbDigest': {
                          'digest': digest_response['Digest'],
                          'digestTipAddress': digest_response['DigestTipAddress']
                      },
                      'verificationTimestamp': datetime.datetime.utcnow().isoformat()
                  }
                  
                  # Store in S3 for additional backup and analysis
                  s3_key = f"audit-records/year={datetime.datetime.utcnow().year}/month={datetime.datetime.utcnow().month:02d}/day={datetime.datetime.utcnow().day:02d}/{audit_record['auditId']}.json"
                  
                  s3_client.put_object(
                      Bucket=s3_bucket,
                      Key=s3_key,
                      Body=json.dumps(audit_metadata, default=str, indent=2),
                      ContentType='application/json',
                      ServerSideEncryption='AES256'
                  )
                  
                  print(f"Stored audit metadata in S3: {s3_key}")
                  
              except ClientError as e:
                  print(f"Error storing audit record metadata: {e}")
                  raise
          
          def generate_compliance_metrics(audit_record):
              """
              Send custom compliance metrics to CloudWatch
              """
              try:
                  # Send metrics for monitoring and alerting
                  cloudwatch.put_metric_data(
                      Namespace='ComplianceAudit',
                      MetricData=[
                          {
                              'MetricName': 'AuditRecordsProcessed',
                              'Value': 1,
                              'Unit': 'Count',
                              'Dimensions': [
                                  {
                                      'Name': 'EventSource',
                                      'Value': audit_record['eventSource']
                                  },
                                  {
                                      'Name': 'EventName',
                                      'Value': audit_record['eventName']
                                  }
                              ]
                          },
                          {
                              'MetricName': 'ProcessingLatency',
                              'Value': 1,
                              'Unit': 'Count',
                              'Dimensions': [
                                  {
                                      'Name': 'Function',
                                      'Value': 'AuditProcessor'
                                  }
                              ]
                          }
                      ]
                  )
                  
              except Exception as e:
                  print(f"Error sending CloudWatch metrics: {e}")
                  # Don't raise exception for metrics failures
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-audit-processor"
        - Key: Environment
          Value: !Ref Environment

  # CloudTrail for API activity logging
  ComplianceAuditCloudTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn: ComplianceAuditBucketPolicy
    Properties:
      TrailName: !Sub "${CloudTrailName}-${Environment}"
      S3BucketName: !Ref ComplianceAuditBucket
      S3KeyPrefix: !Ref CloudTrailS3KeyPrefix
      IncludeGlobalServiceEvents: !If [EnableGlobalServiceEvents, true, false]
      IsMultiRegionTrail: !If [EnableMultiRegionTrail, true, false]
      EnableLogFileValidation: true
      KMSKeyId: !Ref ComplianceAuditKMSKey
      EventSelectors:
        - ReadWriteType: All
          IncludeManagementEvents: true
          DataResources:
            - Type: "AWS::S3::Object"
              Values:
                - !Sub "${ComplianceAuditBucket}/*"
            - Type: "AWS::QLDB::Ledger"
              Values:
                - !GetAtt ComplianceAuditLedger.Arn
      InsightSelectors:
        - InsightType: ApiCallRateInsight
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-audit-trail"
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "Compliance audit trail"

  # SNS Topic for compliance notifications
  ComplianceNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ProjectName}-compliance-alerts-${Environment}"
      DisplayName: "Compliance Audit Alerts"
      KmsMasterKeyId: !Ref ComplianceAuditKMSKey
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-compliance-alerts"
        - Key: Environment
          Value: !Ref Environment

  ComplianceNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref ComplianceNotificationTopic
      Protocol: email
      Endpoint: !Ref ComplianceNotificationEmail

  # EventBridge Rule for real-time audit processing
  ComplianceAuditEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectName}-compliance-audit-rule-${Environment}"
      Description: "Process critical API calls for compliance audit"
      State: ENABLED
      EventPattern:
        source:
          - "aws.cloudtrail"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "qldb.amazonaws.com"
            - "s3.amazonaws.com"
            - "iam.amazonaws.com"
            - "kms.amazonaws.com"
          eventName:
            - "SendCommand"
            - "PutObject"
            - "CreateRole"
            - "DeleteRole"
            - "PutBucketPolicy"
            - "CreateKey"
            - "DeleteKey"
      Targets:
        - Arn: !GetAtt AuditProcessorLambda.Arn
          Id: "ComplianceAuditLambdaTarget"
          RetryPolicy:
            MaximumRetryAttempts: 3
          DeadLetterConfig:
            Arn: !GetAtt ComplianceDeadLetterQueue.Arn

  # Lambda permission for EventBridge
  EventBridgeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuditProcessorLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ComplianceAuditEventRule.Arn

  # SQS Dead Letter Queue for failed events
  ComplianceDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${ProjectName}-compliance-dlq-${Environment}"
      KmsMasterKeyId: !Ref ComplianceAuditKMSKey
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-compliance-dlq"
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for Kinesis Data Firehose
  FirehoseDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-firehose-delivery-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref AWS::AccountId
      Policies:
        - PolicyName: FirehoseDeliveryPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutObject
                Resource:
                  - !Sub "${ComplianceAuditBucket}"
                  - !Sub "${ComplianceAuditBucket}/*"
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey*
                Resource: !GetAtt ComplianceAuditKMSKey.Arn
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/${ProjectName}-compliance-stream-${Environment}:*"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-firehose-delivery-role"
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Log Group for Kinesis Data Firehose
  FirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/kinesisfirehose/${ProjectName}-compliance-stream-${Environment}"
      RetentionInDays: !Ref CloudWatchLogRetentionDays
      KmsKeyId: !GetAtt ComplianceAuditKMSKey.Arn

  FirehoseLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref FirehoseLogGroup
      LogStreamName: "S3Delivery"

  # Kinesis Data Firehose for compliance reporting
  ComplianceDataFirehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub "${ProjectName}-compliance-stream-${Environment}"
      DeliveryStreamType: DirectPut
      S3DestinationConfiguration:
        BucketARN: !GetAtt ComplianceAuditBucket.Arn
        Prefix: "compliance-reports/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/"
        ErrorOutputPrefix: "errors/"
        BufferingHints:
          SizeInMBs: 5
          IntervalInSeconds: 300
        CompressionFormat: GZIP
        EncryptionConfiguration:
          KMSEncryptionConfig:
            AWSKMSKeyARN: !GetAtt ComplianceAuditKMSKey.Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref FirehoseLogGroup
          LogStreamName: !Ref FirehoseLogStream
        RoleARN: !GetAtt FirehoseDeliveryRole.Arn
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-compliance-stream"
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Alarms for monitoring
  AuditProcessingErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-audit-processing-errors-${Environment}"
      AlarmDescription: "Alert when audit processing fails"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ComplianceNotificationTopic
      Dimensions:
        - Name: FunctionName
          Value: !Ref AuditProcessorLambda
      TreatMissingData: notBreaching

  AuditProcessingLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-audit-processing-latency-${Environment}"
      AlarmDescription: "Alert when audit processing takes too long"
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref LambdaTimeout
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ComplianceNotificationTopic
      Dimensions:
        - Name: FunctionName
          Value: !Ref AuditProcessorLambda
      TreatMissingData: notBreaching

  # CloudWatch Dashboard for compliance monitoring
  ComplianceDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${ProjectName}-compliance-dashboard-${Environment}"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "ComplianceAudit", "AuditRecordsProcessed" ],
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${AuditProcessorLambda}" ],
                  [ "AWS/Lambda", "Errors", "FunctionName", "${AuditProcessorLambda}" ],
                  [ "AWS/Lambda", "Duration", "FunctionName", "${AuditProcessorLambda}" ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Compliance Audit Metrics",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/CloudTrail", "DataEvents", "TrailName", "${ComplianceAuditCloudTrail}" ],
                  [ "AWS/CloudTrail", "ManagementEvents", "TrailName", "${ComplianceAuditCloudTrail}" ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "CloudTrail Event Volume"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/lambda/${AuditProcessorLambda}'\n| fields @timestamp, @message\n| filter @message like /Successfully processed/\n| sort @timestamp desc\n| limit 100",
                "region": "${AWS::Region}",
                "title": "Recent Successful Audit Processing"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 12,
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/KinesisFirehose", "DeliveryToS3.Success", "DeliveryStreamName", "${ComplianceDataFirehose}" ],
                  [ "AWS/KinesisFirehose", "DeliveryToS3.DataFreshness", "DeliveryStreamName", "${ComplianceDataFirehose}" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Data Pipeline Health"
              }
            }
          ]
        }

Outputs:
  QLDBLedgerName:
    Description: "Name of the QLDB ledger for audit records"
    Value: !Ref ComplianceAuditLedger
    Export:
      Name: !Sub "${AWS::StackName}-QLDBLedgerName"

  QLDBLedgerArn:
    Description: "ARN of the QLDB ledger"
    Value: !GetAtt ComplianceAuditLedger.Arn
    Export:
      Name: !Sub "${AWS::StackName}-QLDBLedgerArn"

  S3BucketName:
    Description: "Name of the S3 bucket for audit storage"
    Value: !Ref ComplianceAuditBucket
    Export:
      Name: !Sub "${AWS::StackName}-S3BucketName"

  S3BucketArn:
    Description: "ARN of the S3 bucket for audit storage"
    Value: !GetAtt ComplianceAuditBucket.Arn
    Export:
      Name: !Sub "${AWS::StackName}-S3BucketArn"

  CloudTrailName:
    Description: "Name of the CloudTrail trail"
    Value: !Ref ComplianceAuditCloudTrail
    Export:
      Name: !Sub "${AWS::StackName}-CloudTrailName"

  CloudTrailArn:
    Description: "ARN of the CloudTrail trail"
    Value: !GetAtt ComplianceAuditCloudTrail.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CloudTrailArn"

  LambdaFunctionName:
    Description: "Name of the audit processor Lambda function"
    Value: !Ref AuditProcessorLambda
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionName"

  LambdaFunctionArn:
    Description: "ARN of the audit processor Lambda function"
    Value: !GetAtt AuditProcessorLambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LambdaFunctionArn"

  SNSTopicArn:
    Description: "ARN of the SNS topic for compliance notifications"
    Value: !Ref ComplianceNotificationTopic
    Export:
      Name: !Sub "${AWS::StackName}-SNSTopicArn"

  KMSKeyId:
    Description: "ID of the KMS key for encryption"
    Value: !Ref ComplianceAuditKMSKey
    Export:
      Name: !Sub "${AWS::StackName}-KMSKeyId"

  KMSKeyArn:
    Description: "ARN of the KMS key for encryption"
    Value: !GetAtt ComplianceAuditKMSKey.Arn
    Export:
      Name: !Sub "${AWS::StackName}-KMSKeyArn"

  FirehoseDeliveryStreamName:
    Description: "Name of the Kinesis Data Firehose delivery stream"
    Value: !Ref ComplianceDataFirehose
    Export:
      Name: !Sub "${AWS::StackName}-FirehoseDeliveryStreamName"

  EventBridgeRuleName:
    Description: "Name of the EventBridge rule for audit processing"
    Value: !Ref ComplianceAuditEventRule
    Export:
      Name: !Sub "${AWS::StackName}-EventBridgeRuleName"

  DashboardURL:
    Description: "URL to the CloudWatch dashboard for compliance monitoring"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-compliance-dashboard-${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-DashboardURL"

  ComplianceInstructions:
    Description: "Instructions for using the compliance audit system"
    Value: !Sub |
      1. Access the CloudWatch dashboard at: https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-compliance-dashboard-${Environment}
      2. Monitor audit processing metrics and alerts
      3. Review QLDB ledger ${ComplianceAuditLedger} for immutable audit records
      4. Check S3 bucket ${ComplianceAuditBucket} for archived audit data
      5. Use CloudTrail ${ComplianceAuditCloudTrail} for API activity logging
      6. Subscribe to SNS topic ${ComplianceNotificationTopic} for compliance alerts