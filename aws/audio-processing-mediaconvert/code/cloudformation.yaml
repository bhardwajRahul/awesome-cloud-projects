AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete audio processing pipeline using AWS Elemental MediaConvert, S3, Lambda, and SNS for automated media format conversion and distribution'

# Template Metadata
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Project Configuration"
        Parameters:
          - ProjectName
          - Environment
      - Label:
          default: "S3 Configuration"
        Parameters:
          - InputBucketName
          - OutputBucketName
          - S3StorageClass
      - Label:
          default: "Lambda Configuration"
        Parameters:
          - LambdaRuntime
          - LambdaTimeout
          - LambdaMemorySize
      - Label:
          default: "Audio Processing Configuration"
        Parameters:
          - AudioBitrate
          - AudioSampleRate
          - AudioChannels
          - EnableAudioNormalization
      - Label:
          default: "Monitoring and Notifications"
        Parameters:
          - NotificationEmail
          - EnableCloudWatchDashboard
          - LogRetentionDays
    ParameterLabels:
      ProjectName:
        default: "Project Name"
      Environment:
        default: "Environment"
      InputBucketName:
        default: "Input Bucket Name"
      OutputBucketName:
        default: "Output Bucket Name"
      S3StorageClass:
        default: "S3 Storage Class"
      LambdaRuntime:
        default: "Lambda Runtime"
      LambdaTimeout:
        default: "Lambda Timeout (seconds)"
      LambdaMemorySize:
        default: "Lambda Memory Size (MB)"
      AudioBitrate:
        default: "Audio Bitrate (bps)"
      AudioSampleRate:
        default: "Audio Sample Rate (Hz)"
      AudioChannels:
        default: "Audio Channels"
      EnableAudioNormalization:
        default: "Enable Audio Normalization"
      NotificationEmail:
        default: "Notification Email"
      EnableCloudWatchDashboard:
        default: "Enable CloudWatch Dashboard"
      LogRetentionDays:
        default: "Log Retention Days"

# Parameters for customization
Parameters:
  ProjectName:
    Type: String
    Description: 'Name of the project for resource naming and tagging'
    Default: 'audio-processing-pipeline'
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    ConstraintDescription: 'Must start with a letter and contain only letters, numbers, and hyphens'
    MinLength: 3
    MaxLength: 50

  Environment:
    Type: String
    Description: 'Environment name for resource tagging and configuration'
    Default: 'dev'
    AllowedValues:
      - 'dev'
      - 'staging'
      - 'prod'
    ConstraintDescription: 'Must be dev, staging, or prod'

  InputBucketName:
    Type: String
    Description: 'Name for the S3 input bucket (leave empty for auto-generated name)'
    Default: ''
    AllowedPattern: '^[a-z0-9][a-z0-9-]*[a-z0-9]$|^$'
    ConstraintDescription: 'Must be a valid S3 bucket name or empty for auto-generation'

  OutputBucketName:
    Type: String
    Description: 'Name for the S3 output bucket (leave empty for auto-generated name)'
    Default: ''
    AllowedPattern: '^[a-z0-9][a-z0-9-]*[a-z0-9]$|^$'
    ConstraintDescription: 'Must be a valid S3 bucket name or empty for auto-generation'

  S3StorageClass:
    Type: String
    Description: 'S3 storage class for processed audio files'
    Default: 'STANDARD'
    AllowedValues:
      - 'STANDARD'
      - 'STANDARD_IA'
      - 'ONEZONE_IA'
      - 'INTELLIGENT_TIERING'
    ConstraintDescription: 'Must be a valid S3 storage class'

  LambdaRuntime:
    Type: String
    Description: 'Lambda runtime version'
    Default: 'python3.9'
    AllowedValues:
      - 'python3.9'
      - 'python3.10'
      - 'python3.11'
      - 'python3.12'
    ConstraintDescription: 'Must be a supported Python runtime'

  LambdaTimeout:
    Type: Number
    Description: 'Lambda function timeout in seconds'
    Default: 300
    MinValue: 30
    MaxValue: 900
    ConstraintDescription: 'Must be between 30 and 900 seconds'

  LambdaMemorySize:
    Type: Number
    Description: 'Lambda function memory allocation in MB'
    Default: 256
    MinValue: 128
    MaxValue: 3008
    ConstraintDescription: 'Must be between 128 and 3008 MB'

  AudioBitrate:
    Type: Number
    Description: 'Default audio bitrate in bits per second'
    Default: 128000
    MinValue: 64000
    MaxValue: 320000
    ConstraintDescription: 'Must be between 64000 and 320000 bps'

  AudioSampleRate:
    Type: Number
    Description: 'Audio sample rate in Hz'
    Default: 44100
    AllowedValues:
      - 22050
      - 44100
      - 48000
      - 96000
    ConstraintDescription: 'Must be a valid audio sample rate'

  AudioChannels:
    Type: Number
    Description: 'Number of audio channels'
    Default: 2
    MinValue: 1
    MaxValue: 8
    ConstraintDescription: 'Must be between 1 and 8 channels'

  EnableAudioNormalization:
    Type: String
    Description: 'Enable audio normalization using ITU-R BS.1770-2 standard'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: 'Must be true or false'

  NotificationEmail:
    Type: String
    Description: 'Email address for job completion notifications (optional)'
    Default: ''
    AllowedPattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$|^$'
    ConstraintDescription: 'Must be a valid email address or empty'

  EnableCloudWatchDashboard:
    Type: String
    Description: 'Create CloudWatch dashboard for monitoring'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: 'Must be true or false'

  LogRetentionDays:
    Type: Number
    Description: 'CloudWatch log retention period in days'
    Default: 30
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: 'Must be a valid CloudWatch log retention period'

# Conditions for conditional resource creation
Conditions:
  CreateInputBucket: !Equals [!Ref InputBucketName, '']
  CreateOutputBucket: !Equals [!Ref OutputBucketName, '']
  CreateNotificationTopic: !Not [!Equals [!Ref NotificationEmail, '']]
  CreateCloudWatchDashboard: !Equals [!Ref EnableCloudWatchDashboard, 'true']
  EnableNormalization: !Equals [!Ref EnableAudioNormalization, 'true']
  IsProduction: !Equals [!Ref Environment, 'prod']

# Resources
Resources:
  # S3 Bucket for Input Audio Files
  InputBucket:
    Type: AWS::S3::Bucket
    Condition: CreateInputBucket
    Properties:
      BucketName: !Sub '${ProjectName}-input-${Environment}-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt AudioProcessingLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .mp3
          - Event: s3:ObjectCreated:*
            Function: !GetAtt AudioProcessingLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .wav
          - Event: s3:ObjectCreated:*
            Function: !GetAtt AudioProcessingLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .flac
          - Event: s3:ObjectCreated:*
            Function: !GetAtt AudioProcessingLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .m4a
          - Event: s3:ObjectCreated:*
            Function: !GetAtt AudioProcessingLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .aac
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-input-bucket'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: 'Audio processing input storage'

  # S3 Bucket for Output Audio Files
  OutputBucket:
    Type: AWS::S3::Bucket
    Condition: CreateOutputBucket
    Properties:
      BucketName: !Sub '${ProjectName}-output-${Environment}-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: !Ref S3StorageClass
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-output-bucket'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: 'Audio processing output storage'

  # SNS Topic for Notifications
  NotificationTopic:
    Type: AWS::SNS::Topic
    Condition: CreateNotificationTopic
    Properties:
      TopicName: !Sub '${ProjectName}-notifications-${Environment}'
      DisplayName: !Sub '${ProjectName} Audio Processing Notifications'
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-notifications'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: 'Audio processing notifications'

  # SNS Topic Subscription
  NotificationSubscription:
    Type: AWS::SNS::Subscription
    Condition: CreateNotificationTopic
    Properties:
      Protocol: email
      TopicArn: !Ref NotificationTopic
      Endpoint: !Ref NotificationEmail

  # IAM Role for MediaConvert
  MediaConvertRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-mediaconvert-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: mediaconvert.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSElementalMediaConvertRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub 
                    - '${BucketArn}'
                    - BucketArn: !If 
                        - CreateInputBucket
                        - !GetAtt InputBucket.Arn
                        - !Sub 'arn:aws:s3:::${InputBucketName}'
                  - !Sub 
                    - '${BucketArn}/*'
                    - BucketArn: !If 
                        - CreateInputBucket
                        - !GetAtt InputBucket.Arn
                        - !Sub 'arn:aws:s3:::${InputBucketName}'
                  - !Sub 
                    - '${BucketArn}'
                    - BucketArn: !If 
                        - CreateOutputBucket
                        - !GetAtt OutputBucket.Arn
                        - !Sub 'arn:aws:s3:::${OutputBucketName}'
                  - !Sub 
                    - '${BucketArn}/*'
                    - BucketArn: !If 
                        - CreateOutputBucket
                        - !GetAtt OutputBucket.Arn
                        - !Sub 'arn:aws:s3:::${OutputBucketName}'
              - !If
                - CreateNotificationTopic
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource: !Ref NotificationTopic
                - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-mediaconvert-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: 'MediaConvert service role'

  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: MediaConvertAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - mediaconvert:CreateJob
                  - mediaconvert:GetJob
                  - mediaconvert:ListJobs
                  - mediaconvert:DescribeEndpoints
                  - mediaconvert:GetJobTemplate
                  - mediaconvert:ListJobTemplates
                  - mediaconvert:GetPreset
                  - mediaconvert:ListPresets
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt MediaConvertRole.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub 
                    - '${BucketArn}'
                    - BucketArn: !If 
                        - CreateInputBucket
                        - !GetAtt InputBucket.Arn
                        - !Sub 'arn:aws:s3:::${InputBucketName}'
                  - !Sub 
                    - '${BucketArn}/*'
                    - BucketArn: !If 
                        - CreateInputBucket
                        - !GetAtt InputBucket.Arn
                        - !Sub 'arn:aws:s3:::${InputBucketName}'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-lambda-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: 'Lambda execution role'

  # Lambda Function for Processing Trigger
  AudioProcessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-audio-processing-${Environment}'
      Runtime: !Ref LambdaRuntime
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemorySize
      Environment:
        Variables:
          MEDIACONVERT_ROLE_ARN: !GetAtt MediaConvertRole.Arn
          JOB_TEMPLATE_NAME: !Ref AudioJobTemplate
          ENHANCED_PRESET_NAME: !Ref EnhancedAudioPreset
          OUTPUT_BUCKET: !If 
            - CreateOutputBucket
            - !Ref OutputBucket
            - !Ref OutputBucketName
          NOTIFICATION_TOPIC_ARN: !If 
            - CreateNotificationTopic
            - !Ref NotificationTopic
            - ''
          AUDIO_BITRATE: !Ref AudioBitrate
          AUDIO_SAMPLE_RATE: !Ref AudioSampleRate
          AUDIO_CHANNELS: !Ref AudioChannels
          ENABLE_NORMALIZATION: !Ref EnableAudioNormalization
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging
          from urllib.parse import unquote_plus
          
          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              """
              Lambda function to process S3 audio upload events and trigger MediaConvert jobs
              """
              try:
                  # Get MediaConvert endpoint
                  mediaconvert_client = boto3.client('mediaconvert')
                  endpoints = mediaconvert_client.describe_endpoints()
                  mediaconvert_endpoint = endpoints['Endpoints'][0]['Url']
                  
                  # Initialize MediaConvert client with endpoint
                  mediaconvert = boto3.client('mediaconvert', endpoint_url=mediaconvert_endpoint)
                  
                  # Process each S3 event record
                  for record in event['Records']:
                      bucket = record['s3']['bucket']['name']
                      key = unquote_plus(record['s3']['object']['key'])
                      
                      logger.info(f"Processing file: {key} from bucket: {bucket}")
                      
                      # Only process audio files
                      if not key.lower().endswith(('.mp3', '.wav', '.flac', '.m4a', '.aac')):
                          logger.warning(f"Skipping non-audio file: {key}")
                          continue
                      
                      # Get file name without extension for output naming
                      file_name = key.split('/')[-1]
                      base_name = file_name.rsplit('.', 1)[0]
                      
                      # Create MediaConvert job settings
                      job_settings = {
                          "Role": os.environ['MEDIACONVERT_ROLE_ARN'],
                          "Settings": {
                              "OutputGroups": [
                                  {
                                      "Name": "MP3_Output",
                                      "OutputGroupSettings": {
                                          "Type": "FILE_GROUP_SETTINGS",
                                          "FileGroupSettings": {
                                              "Destination": f"s3://{os.environ['OUTPUT_BUCKET']}/mp3/"
                                          }
                                      },
                                      "Outputs": [
                                          {
                                              "NameModifier": "_mp3",
                                              "ContainerSettings": {
                                                  "Container": "MP3"
                                              },
                                              "AudioDescriptions": [
                                                  {
                                                      "AudioTypeControl": "FOLLOW_INPUT",
                                                      "CodecSettings": {
                                                          "Codec": "MP3",
                                                          "Mp3Settings": {
                                                              "Bitrate": int(os.environ['AUDIO_BITRATE']),
                                                              "Channels": int(os.environ['AUDIO_CHANNELS']),
                                                              "RateControlMode": "CBR",
                                                              "SampleRate": int(os.environ['AUDIO_SAMPLE_RATE'])
                                                          }
                                                      }
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      "Name": "AAC_Output",
                                      "OutputGroupSettings": {
                                          "Type": "FILE_GROUP_SETTINGS",
                                          "FileGroupSettings": {
                                              "Destination": f"s3://{os.environ['OUTPUT_BUCKET']}/aac/"
                                          }
                                      },
                                      "Outputs": [
                                          {
                                              "NameModifier": "_aac",
                                              "ContainerSettings": {
                                                  "Container": "MP4"
                                              },
                                              "AudioDescriptions": [
                                                  {
                                                      "AudioTypeControl": "FOLLOW_INPUT",
                                                      "CodecSettings": {
                                                          "Codec": "AAC",
                                                          "AacSettings": {
                                                              "Bitrate": int(os.environ['AUDIO_BITRATE']),
                                                              "CodingMode": "CODING_MODE_2_0",
                                                              "SampleRate": int(os.environ['AUDIO_SAMPLE_RATE'])
                                                          }
                                                      }
                                                  }
                                              ]
                                          }
                                      ]
                                  },
                                  {
                                      "Name": "FLAC_Output",
                                      "OutputGroupSettings": {
                                          "Type": "FILE_GROUP_SETTINGS",
                                          "FileGroupSettings": {
                                              "Destination": f"s3://{os.environ['OUTPUT_BUCKET']}/flac/"
                                          }
                                      },
                                      "Outputs": [
                                          {
                                              "NameModifier": "_flac",
                                              "ContainerSettings": {
                                                  "Container": "FLAC"
                                              },
                                              "AudioDescriptions": [
                                                  {
                                                      "AudioTypeControl": "FOLLOW_INPUT",
                                                      "CodecSettings": {
                                                          "Codec": "FLAC",
                                                          "FlacSettings": {
                                                              "Channels": int(os.environ['AUDIO_CHANNELS']),
                                                              "SampleRate": int(os.environ['AUDIO_SAMPLE_RATE'])
                                                          }
                                                      }
                                                  }
                                              ]
                                          }
                                      ]
                                  }
                              ],
                              "Inputs": [
                                  {
                                      "FileInput": f"s3://{bucket}/{key}",
                                      "AudioSelectors": {
                                          "Audio Selector 1": {
                                              "Tracks": [1],
                                              "DefaultSelection": "DEFAULT"
                                          }
                                      }
                                  }
                              ]
                          },
                          "StatusUpdateInterval": "SECONDS_60"
                      }
                      
                      # Add audio normalization if enabled
                      if os.environ['ENABLE_NORMALIZATION'] == 'true':
                          for output_group in job_settings['Settings']['OutputGroups']:
                              for output in output_group['Outputs']:
                                  for audio_desc in output['AudioDescriptions']:
                                      audio_desc['AudioNormalizationSettings'] = {
                                          "Algorithm": "ITU_BS_1770_2",
                                          "AlgorithmControl": "CORRECT_AUDIO",
                                          "LoudnessLogging": "LOG",
                                          "PeakCalculation": "TRUE_PEAK",
                                          "TargetLkfs": -23.0
                                      }
                      
                      # Create the MediaConvert job
                      response = mediaconvert.create_job(**job_settings)
                      job_id = response['Job']['Id']
                      
                      logger.info(f"Created MediaConvert job {job_id} for file {key}")
                      
                      # Send notification if SNS topic is configured
                      if os.environ.get('NOTIFICATION_TOPIC_ARN'):
                          sns = boto3.client('sns')
                          sns.publish(
                              TopicArn=os.environ['NOTIFICATION_TOPIC_ARN'],
                              Subject=f"Audio Processing Job Started",
                              Message=f"Started processing job {job_id} for file {key} from bucket {bucket}"
                          )
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'Successfully processed audio processing events',
                          'processedFiles': len(event['Records'])
                      })
                  }
                  
              except Exception as e:
                  logger.error(f"Error processing audio files: {str(e)}")
                  
                  # Send error notification if SNS topic is configured
                  if os.environ.get('NOTIFICATION_TOPIC_ARN'):
                      sns = boto3.client('sns')
                      sns.publish(
                          TopicArn=os.environ['NOTIFICATION_TOPIC_ARN'],
                          Subject=f"Audio Processing Job Failed",
                          Message=f"Failed to process audio files: {str(e)}"
                      )
                  
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'error': str(e)
                      })
                  }
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-audio-processing-lambda'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: 'Audio processing trigger function'

  # Lambda Permission for S3 to invoke the function
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AudioProcessingLambda
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 
        - '${BucketArn}'
        - BucketArn: !If 
            - CreateInputBucket
            - !GetAtt InputBucket.Arn
            - !Sub 'arn:aws:s3:::${InputBucketName}'

  # CloudWatch Log Group for Lambda
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AudioProcessingLambda}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-lambda-logs'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: 'Lambda function logs'

  # MediaConvert Job Template
  AudioJobTemplate:
    Type: AWS::MediaConvert::JobTemplate
    Properties:
      Name: !Sub '${ProjectName}-audio-template-${Environment}'
      Description: 'Template for processing audio files with multiple output formats'
      SettingsJson:
        OutputGroups:
          - Name: MP3_Output
            OutputGroupSettings:
              Type: FILE_GROUP_SETTINGS
              FileGroupSettings:
                Destination: !Sub 
                  - 's3://${OutputBucket}/mp3/'
                  - OutputBucket: !If 
                      - CreateOutputBucket
                      - !Ref OutputBucket
                      - !Ref OutputBucketName
            Outputs:
              - NameModifier: '_mp3'
                ContainerSettings:
                  Container: MP3
                AudioDescriptions:
                  - AudioTypeControl: FOLLOW_INPUT
                    CodecSettings:
                      Codec: MP3
                      Mp3Settings:
                        Bitrate: !Ref AudioBitrate
                        Channels: !Ref AudioChannels
                        RateControlMode: CBR
                        SampleRate: !Ref AudioSampleRate
          - Name: AAC_Output
            OutputGroupSettings:
              Type: FILE_GROUP_SETTINGS
              FileGroupSettings:
                Destination: !Sub 
                  - 's3://${OutputBucket}/aac/'
                  - OutputBucket: !If 
                      - CreateOutputBucket
                      - !Ref OutputBucket
                      - !Ref OutputBucketName
            Outputs:
              - NameModifier: '_aac'
                ContainerSettings:
                  Container: MP4
                AudioDescriptions:
                  - AudioTypeControl: FOLLOW_INPUT
                    CodecSettings:
                      Codec: AAC
                      AacSettings:
                        Bitrate: !Ref AudioBitrate
                        CodingMode: CODING_MODE_2_0
                        SampleRate: !Ref AudioSampleRate
          - Name: FLAC_Output
            OutputGroupSettings:
              Type: FILE_GROUP_SETTINGS
              FileGroupSettings:
                Destination: !Sub 
                  - 's3://${OutputBucket}/flac/'
                  - OutputBucket: !If 
                      - CreateOutputBucket
                      - !Ref OutputBucket
                      - !Ref OutputBucketName
            Outputs:
              - NameModifier: '_flac'
                ContainerSettings:
                  Container: FLAC
                AudioDescriptions:
                  - AudioTypeControl: FOLLOW_INPUT
                    CodecSettings:
                      Codec: FLAC
                      FlacSettings:
                        Channels: !Ref AudioChannels
                        SampleRate: !Ref AudioSampleRate
        Inputs:
          - FileInput: !Sub 
              - 's3://${InputBucket}/'
              - InputBucket: !If 
                  - CreateInputBucket
                  - !Ref InputBucket
                  - !Ref InputBucketName
            AudioSelectors:
              Audio Selector 1:
                Tracks: [1]
                DefaultSelection: DEFAULT
      Tags:
        Name: !Sub '${ProjectName}-audio-template'
        Environment: !Ref Environment
        Project: !Ref ProjectName
        Purpose: 'Audio processing job template'

  # MediaConvert Enhanced Audio Preset
  EnhancedAudioPreset:
    Type: AWS::MediaConvert::Preset
    Properties:
      Name: !Sub '${ProjectName}-enhanced-preset-${Environment}'
      Description: 'Enhanced audio preset with normalization and quality improvements'
      SettingsJson:
        ContainerSettings:
          Container: MP4
        AudioDescriptions:
          - AudioTypeControl: FOLLOW_INPUT
            CodecSettings:
              Codec: AAC
              AacSettings:
                Bitrate: 192000
                CodingMode: CODING_MODE_2_0
                SampleRate: 48000
                Specification: MPEG4
            AudioNormalizationSettings: !If
              - EnableNormalization
              - Algorithm: ITU_BS_1770_2
                AlgorithmControl: CORRECT_AUDIO
                LoudnessLogging: LOG
                PeakCalculation: TRUE_PEAK
                TargetLkfs: -23.0
              - !Ref AWS::NoValue
      Tags:
        Name: !Sub '${ProjectName}-enhanced-preset'
        Environment: !Ref Environment
        Project: !Ref ProjectName
        Purpose: 'Enhanced audio processing preset'

  # CloudWatch Dashboard
  AudioProcessingDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: CreateCloudWatchDashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-audio-processing-${Environment}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/MediaConvert", "JobsCompleted" ],
                  [ ".", "JobsErrored" ],
                  [ ".", "JobsSubmitted" ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "MediaConvert Jobs",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${AudioProcessingLambda}" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Duration", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Function Metrics",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/S3", "BucketSizeBytes", "BucketName", "${InputBucket}", "StorageType", "StandardStorage" ],
                  [ ".", "NumberOfObjects", ".", ".", ".", "AllStorageTypes" ]
                ],
                "period": 86400,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "S3 Input Bucket Metrics",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/S3", "BucketSizeBytes", "BucketName", "${OutputBucket}", "StorageType", "StandardStorage" ],
                  [ ".", "NumberOfObjects", ".", ".", ".", "AllStorageTypes" ]
                ],
                "period": 86400,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "S3 Output Bucket Metrics",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            }
          ]
        }

# Outputs
Outputs:
  InputBucketName:
    Description: 'Name of the S3 input bucket'
    Value: !If 
      - CreateInputBucket
      - !Ref InputBucket
      - !Ref InputBucketName
    Export:
      Name: !Sub '${AWS::StackName}-InputBucket'

  OutputBucketName:
    Description: 'Name of the S3 output bucket'
    Value: !If 
      - CreateOutputBucket
      - !Ref OutputBucket
      - !Ref OutputBucketName
    Export:
      Name: !Sub '${AWS::StackName}-OutputBucket'

  InputBucketArn:
    Description: 'ARN of the S3 input bucket'
    Value: !If 
      - CreateInputBucket
      - !GetAtt InputBucket.Arn
      - !Sub 'arn:aws:s3:::${InputBucketName}'
    Export:
      Name: !Sub '${AWS::StackName}-InputBucketArn'

  OutputBucketArn:
    Description: 'ARN of the S3 output bucket'
    Value: !If 
      - CreateOutputBucket
      - !GetAtt OutputBucket.Arn
      - !Sub 'arn:aws:s3:::${OutputBucketName}'
    Export:
      Name: !Sub '${AWS::StackName}-OutputBucketArn'

  LambdaFunctionName:
    Description: 'Name of the Lambda function'
    Value: !Ref AudioProcessingLambda
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'

  LambdaFunctionArn:
    Description: 'ARN of the Lambda function'
    Value: !GetAtt AudioProcessingLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'

  MediaConvertRoleArn:
    Description: 'ARN of the MediaConvert service role'
    Value: !GetAtt MediaConvertRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-MediaConvertRole'

  AudioJobTemplateName:
    Description: 'Name of the MediaConvert job template'
    Value: !Ref AudioJobTemplate
    Export:
      Name: !Sub '${AWS::StackName}-JobTemplate'

  EnhancedAudioPresetName:
    Description: 'Name of the enhanced audio preset'
    Value: !Ref EnhancedAudioPreset
    Export:
      Name: !Sub '${AWS::StackName}-EnhancedPreset'

  NotificationTopicArn:
    Description: 'ARN of the SNS notification topic'
    Value: !If 
      - CreateNotificationTopic
      - !Ref NotificationTopic
      - 'Not created'
    Export:
      Name: !Sub '${AWS::StackName}-NotificationTopic'

  CloudWatchDashboardName:
    Description: 'Name of the CloudWatch dashboard'
    Value: !If 
      - CreateCloudWatchDashboard
      - !Ref AudioProcessingDashboard
      - 'Not created'
    Export:
      Name: !Sub '${AWS::StackName}-Dashboard'

  DeploymentInstructions:
    Description: 'Instructions for deploying and using the audio processing pipeline'
    Value: !Sub |
      1. Upload audio files (MP3, WAV, FLAC, M4A, AAC) to: ${InputBucketName}
      2. Processing will start automatically via Lambda trigger
      3. Processed files will be available in: ${OutputBucketName}
      4. Monitor progress in CloudWatch dashboard: ${AudioProcessingDashboard}
      5. Notifications will be sent to: ${NotificationEmail}

  EstimatedMonthlyCost:
    Description: 'Estimated monthly cost for typical usage'
    Value: !Sub |
      Based on processing 1000 minutes of audio monthly:
      - MediaConvert: ~$15-30 (depends on complexity)
      - Lambda: ~$1-5 (depends on frequency)
      - S3: ~$5-15 (depends on storage and transfer)
      - SNS: ~$0.50-2 (depends on notifications)
      - Total: ~$21.50-52/month
      
      Note: Costs vary by region and actual usage patterns.
      Use AWS Cost Calculator for precise estimates.

  SecurityConsiderations:
    Description: 'Security features implemented in this template'
    Value: !Sub |
      - S3 buckets have public access blocked
      - All data encrypted at rest with AES-256
      - IAM roles follow least privilege principle
      - SNS topic encrypted with KMS
      - CloudWatch logs retained for ${LogRetentionDays} days
      - Lambda function has minimal required permissions
      - MediaConvert role restricted to specific S3 buckets