AWSTemplateFormatVersion: '2010-09-09'
Description: 'Multi-Region VPC Peering with Complex Routing Scenarios - Global Hub and Spoke Architecture'

Parameters:
  ProjectName:
    Type: String
    Default: 'global-peering'
    Description: 'Base name for all resources'
    AllowedPattern: '^[a-zA-Z0-9-]*$'
    ConstraintDescription: 'Must contain only alphanumeric characters and hyphens'
    
  DeploymentRegion:
    Type: String
    Default: 'us-east-1'
    Description: 'Primary deployment region for this stack'
    AllowedValues:
      - 'us-east-1'
      - 'us-west-2'
      - 'eu-west-1'
      - 'ap-southeast-1'
      
  SecondaryRegion:
    Type: String
    Default: 'us-west-2'
    Description: 'Secondary region for DR hub'
    AllowedValues:
      - 'us-east-1'
      - 'us-west-2'
      - 'eu-west-1'
      - 'ap-southeast-1'
      
  EuRegion:
    Type: String
    Default: 'eu-west-1'
    Description: 'European region for EU hub'
    AllowedValues:
      - 'eu-west-1'
      - 'eu-central-1'
      - 'eu-north-1'
      
  ApacRegion:
    Type: String
    Default: 'ap-southeast-1'
    Description: 'APAC region for regional spoke'
    AllowedValues:
      - 'ap-southeast-1'
      - 'ap-northeast-1'
      - 'ap-south-1'
      
  EnableDnsResolution:
    Type: String
    Default: 'true'
    Description: 'Enable DNS resolution for VPC peering connections'
    AllowedValues:
      - 'true'
      - 'false'
      
  EnableDnsHostnames:
    Type: String
    Default: 'true'
    Description: 'Enable DNS hostnames for VPCs'
    AllowedValues:
      - 'true'
      - 'false'
      
  CreateTestInstances:
    Type: String
    Default: 'false'
    Description: 'Create test EC2 instances for connectivity validation'
    AllowedValues:
      - 'true'
      - 'false'
      
  InstanceType:
    Type: String
    Default: 't3.micro'
    Description: 'EC2 instance type for test instances'
    AllowedValues:
      - 't3.micro'
      - 't3.small'
      - 't3.medium'

Conditions:
  IsPrimaryRegion: !Equals [!Ref DeploymentRegion, 'us-east-1']
  IsSecondaryRegion: !Equals [!Ref DeploymentRegion, 'us-west-2']
  IsEuRegion: !Equals [!Ref DeploymentRegion, 'eu-west-1']
  IsApacRegion: !Equals [!Ref DeploymentRegion, 'ap-southeast-1']
  CreateInstances: !Equals [!Ref CreateTestInstances, 'true']
  EnableDns: !Equals [!Ref EnableDnsResolution, 'true']

Mappings:
  # Regional CIDR blocks for each VPC type
  RegionalCidrs:
    us-east-1:
      HubVpc: '10.0.0.0/16'
      ProdVpc: '10.1.0.0/16'
      DevVpc: '10.2.0.0/16'
      HubSubnet: '10.0.1.0/24'
      ProdSubnet: '10.1.1.0/24'
      DevSubnet: '10.2.1.0/24'
    us-west-2:
      HubVpc: '10.10.0.0/16'
      ProdVpc: '10.11.0.0/16'
      HubSubnet: '10.10.1.0/24'
      ProdSubnet: '10.11.1.0/24'
    eu-west-1:
      HubVpc: '10.20.0.0/16'
      ProdVpc: '10.21.0.0/16'
      HubSubnet: '10.20.1.0/24'
      ProdSubnet: '10.21.1.0/24'
    ap-southeast-1:
      VpcCidr: '10.30.0.0/16'
      SubnetCidr: '10.30.1.0/24'
      
  # Latest Amazon Linux 2 AMI IDs by region
  RegionMap:
    us-east-1:
      AMI: ami-0c94855ba95b798c7
    us-west-2:
      AMI: ami-0c2d3e23eb9b4eb69
    eu-west-1:
      AMI: ami-0c9c942bd7bf113a2
    ap-southeast-1:
      AMI: ami-0c802847a7dd848c0

Resources:
  # ================================================================================
  # PRIMARY REGION (US-EAST-1) RESOURCES
  # ================================================================================
  
  # Hub VPC - Primary transit center for global connectivity
  HubVpc:
    Type: AWS::EC2::VPC
    Condition: IsPrimaryRegion
    Properties:
      CidrBlock: !FindInMap [RegionalCidrs, !Ref DeploymentRegion, HubVpc]
      EnableDnsHostnames: !Ref EnableDnsHostnames
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-hub-vpc'
        - Key: Region
          Value: !Ref DeploymentRegion
        - Key: Role
          Value: 'hub'
        - Key: Environment
          Value: 'global'
          
  # Production VPC - Isolated production workloads
  ProductionVpc:
    Type: AWS::EC2::VPC
    Condition: IsPrimaryRegion
    Properties:
      CidrBlock: !FindInMap [RegionalCidrs, !Ref DeploymentRegion, ProdVpc]
      EnableDnsHostnames: !Ref EnableDnsHostnames
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-prod-vpc'
        - Key: Region
          Value: !Ref DeploymentRegion
        - Key: Role
          Value: 'spoke'
        - Key: Environment
          Value: 'production'
          
  # Development VPC - Isolated development workloads
  DevelopmentVpc:
    Type: AWS::EC2::VPC
    Condition: IsPrimaryRegion
    Properties:
      CidrBlock: !FindInMap [RegionalCidrs, !Ref DeploymentRegion, DevVpc]
      EnableDnsHostnames: !Ref EnableDnsHostnames
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dev-vpc'
        - Key: Region
          Value: !Ref DeploymentRegion
        - Key: Role
          Value: 'spoke'
        - Key: Environment
          Value: 'development'

  # ================================================================================
  # SECONDARY REGION (US-WEST-2) RESOURCES
  # ================================================================================
  
  # DR Hub VPC - Disaster recovery transit center
  DrHubVpc:
    Type: AWS::EC2::VPC
    Condition: IsSecondaryRegion
    Properties:
      CidrBlock: !FindInMap [RegionalCidrs, !Ref DeploymentRegion, HubVpc]
      EnableDnsHostnames: !Ref EnableDnsHostnames
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dr-hub-vpc'
        - Key: Region
          Value: !Ref DeploymentRegion
        - Key: Role
          Value: 'hub'
        - Key: Environment
          Value: 'disaster-recovery'
          
  # DR Production VPC - Disaster recovery production workloads
  DrProductionVpc:
    Type: AWS::EC2::VPC
    Condition: IsSecondaryRegion
    Properties:
      CidrBlock: !FindInMap [RegionalCidrs, !Ref DeploymentRegion, ProdVpc]
      EnableDnsHostnames: !Ref EnableDnsHostnames
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dr-prod-vpc'
        - Key: Region
          Value: !Ref DeploymentRegion
        - Key: Role
          Value: 'spoke'
        - Key: Environment
          Value: 'disaster-recovery'

  # ================================================================================
  # EU REGION (EU-WEST-1) RESOURCES
  # ================================================================================
  
  # EU Hub VPC - European regional hub for GDPR compliance
  EuHubVpc:
    Type: AWS::EC2::VPC
    Condition: IsEuRegion
    Properties:
      CidrBlock: !FindInMap [RegionalCidrs, !Ref DeploymentRegion, HubVpc]
      EnableDnsHostnames: !Ref EnableDnsHostnames
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-eu-hub-vpc'
        - Key: Region
          Value: !Ref DeploymentRegion
        - Key: Role
          Value: 'hub'
        - Key: Environment
          Value: 'europe'
        - Key: Compliance
          Value: 'GDPR'
          
  # EU Production VPC - European production workloads
  EuProductionVpc:
    Type: AWS::EC2::VPC
    Condition: IsEuRegion
    Properties:
      CidrBlock: !FindInMap [RegionalCidrs, !Ref DeploymentRegion, ProdVpc]
      EnableDnsHostnames: !Ref EnableDnsHostnames
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-eu-prod-vpc'
        - Key: Region
          Value: !Ref DeploymentRegion
        - Key: Role
          Value: 'spoke'
        - Key: Environment
          Value: 'europe-production'
        - Key: Compliance
          Value: 'GDPR'

  # ================================================================================
  # APAC REGION (AP-SOUTHEAST-1) RESOURCES
  # ================================================================================
  
  # APAC VPC - Asia-Pacific regional spoke
  ApacVpc:
    Type: AWS::EC2::VPC
    Condition: IsApacRegion
    Properties:
      CidrBlock: !FindInMap [RegionalCidrs, !Ref DeploymentRegion, VpcCidr]
      EnableDnsHostnames: !Ref EnableDnsHostnames
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-apac-vpc'
        - Key: Region
          Value: !Ref DeploymentRegion
        - Key: Role
          Value: 'spoke'
        - Key: Environment
          Value: 'asia-pacific'

  # ================================================================================
  # INTERNET GATEWAYS FOR PUBLIC CONNECTIVITY
  # ================================================================================
  
  # Internet Gateway for Hub VPC (Primary Region)
  HubInternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: IsPrimaryRegion
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-hub-igw'
          
  HubInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: IsPrimaryRegion
    Properties:
      VpcId: !Ref HubVpc
      InternetGatewayId: !Ref HubInternetGateway
      
  # Internet Gateway for DR Hub VPC (Secondary Region)
  DrHubInternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: IsSecondaryRegion
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dr-hub-igw'
          
  DrHubInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: IsSecondaryRegion
    Properties:
      VpcId: !Ref DrHubVpc
      InternetGatewayId: !Ref DrHubInternetGateway
      
  # Internet Gateway for EU Hub VPC
  EuHubInternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: IsEuRegion
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-eu-hub-igw'
          
  EuHubInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: IsEuRegion
    Properties:
      VpcId: !Ref EuHubVpc
      InternetGatewayId: !Ref EuHubInternetGateway

  # ================================================================================
  # SUBNETS FOR APPLICATION DEPLOYMENT
  # ================================================================================
  
  # PRIMARY REGION SUBNETS
  HubSubnet:
    Type: AWS::EC2::Subnet
    Condition: IsPrimaryRegion
    Properties:
      VpcId: !Ref HubVpc
      CidrBlock: !FindInMap [RegionalCidrs, !Ref DeploymentRegion, HubSubnet]
      AvailabilityZone: !Sub '${DeploymentRegion}a'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-hub-subnet-a'
        - Key: Type
          Value: 'public'
          
  ProductionSubnet:
    Type: AWS::EC2::Subnet
    Condition: IsPrimaryRegion
    Properties:
      VpcId: !Ref ProductionVpc
      CidrBlock: !FindInMap [RegionalCidrs, !Ref DeploymentRegion, ProdSubnet]
      AvailabilityZone: !Sub '${DeploymentRegion}a'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-prod-subnet-a'
        - Key: Type
          Value: 'private'
          
  DevelopmentSubnet:
    Type: AWS::EC2::Subnet
    Condition: IsPrimaryRegion
    Properties:
      VpcId: !Ref DevelopmentVpc
      CidrBlock: !FindInMap [RegionalCidrs, !Ref DeploymentRegion, DevSubnet]
      AvailabilityZone: !Sub '${DeploymentRegion}a'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dev-subnet-a'
        - Key: Type
          Value: 'private'
          
  # SECONDARY REGION SUBNETS
  DrHubSubnet:
    Type: AWS::EC2::Subnet
    Condition: IsSecondaryRegion
    Properties:
      VpcId: !Ref DrHubVpc
      CidrBlock: !FindInMap [RegionalCidrs, !Ref DeploymentRegion, HubSubnet]
      AvailabilityZone: !Sub '${DeploymentRegion}a'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dr-hub-subnet-a'
        - Key: Type
          Value: 'public'
          
  DrProductionSubnet:
    Type: AWS::EC2::Subnet
    Condition: IsSecondaryRegion
    Properties:
      VpcId: !Ref DrProductionVpc
      CidrBlock: !FindInMap [RegionalCidrs, !Ref DeploymentRegion, ProdSubnet]
      AvailabilityZone: !Sub '${DeploymentRegion}a'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dr-prod-subnet-a'
        - Key: Type
          Value: 'private'
          
  # EU REGION SUBNETS
  EuHubSubnet:
    Type: AWS::EC2::Subnet
    Condition: IsEuRegion
    Properties:
      VpcId: !Ref EuHubVpc
      CidrBlock: !FindInMap [RegionalCidrs, !Ref DeploymentRegion, HubSubnet]
      AvailabilityZone: !Sub '${DeploymentRegion}a'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-eu-hub-subnet-a'
        - Key: Type
          Value: 'public'
          
  EuProductionSubnet:
    Type: AWS::EC2::Subnet
    Condition: IsEuRegion
    Properties:
      VpcId: !Ref EuProductionVpc
      CidrBlock: !FindInMap [RegionalCidrs, !Ref DeploymentRegion, ProdSubnet]
      AvailabilityZone: !Sub '${DeploymentRegion}a'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-eu-prod-subnet-a'
        - Key: Type
          Value: 'private'
          
  # APAC REGION SUBNET
  ApacSubnet:
    Type: AWS::EC2::Subnet
    Condition: IsApacRegion
    Properties:
      VpcId: !Ref ApacVpc
      CidrBlock: !FindInMap [RegionalCidrs, !Ref DeploymentRegion, SubnetCidr]
      AvailabilityZone: !Sub '${DeploymentRegion}a'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-apac-subnet-a'
        - Key: Type
          Value: 'private'

  # ================================================================================
  # SECURITY GROUPS FOR NETWORK ACCESS CONTROL
  # ================================================================================
  
  # Hub VPC Security Group
  HubSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: IsPrimaryRegion
    Properties:
      GroupDescription: 'Security group for Hub VPC resources'
      VpcId: !Ref HubVpc
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: '10.0.0.0/8'
          Description: 'ICMP from all internal networks'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '10.0.0.0/8'
          Description: 'SSH from internal networks'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: 'HTTP from anywhere'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
          Description: 'HTTPS from anywhere'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
          Description: 'All outbound traffic'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-hub-sg'
          
  # Production VPC Security Group
  ProductionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: IsPrimaryRegion
    Properties:
      GroupDescription: 'Security group for Production VPC resources'
      VpcId: !Ref ProductionVpc
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: '10.0.0.0/8'
          Description: 'ICMP from all internal networks'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '10.0.0.0/16'
          Description: 'SSH from Hub VPC only'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '10.0.0.0/8'
          Description: 'HTTP from internal networks'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '10.0.0.0/8'
          Description: 'HTTPS from internal networks'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
          Description: 'All outbound traffic'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-prod-sg'
          
  # Development VPC Security Group
  DevelopmentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: IsPrimaryRegion
    Properties:
      GroupDescription: 'Security group for Development VPC resources'
      VpcId: !Ref DevelopmentVpc
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: '10.0.0.0/8'
          Description: 'ICMP from all internal networks'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '10.0.0.0/8'
          Description: 'SSH from all internal networks'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '10.0.0.0/8'
          Description: 'HTTP from internal networks'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '10.0.0.0/8'
          Description: 'HTTPS from internal networks'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
          Description: 'All outbound traffic'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dev-sg'

  # ================================================================================
  # ROUTE TABLES FOR TRAFFIC CONTROL
  # ================================================================================
  
  # Hub VPC Route Table (Primary Region)
  HubRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: IsPrimaryRegion
    Properties:
      VpcId: !Ref HubVpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-hub-rt'
        - Key: Type
          Value: 'hub-transit'
          
  HubSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: IsPrimaryRegion
    Properties:
      SubnetId: !Ref HubSubnet
      RouteTableId: !Ref HubRouteTable
      
  # Hub VPC Internet Route
  HubInternetRoute:
    Type: AWS::EC2::Route
    Condition: IsPrimaryRegion
    DependsOn: HubInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref HubRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref HubInternetGateway
      
  # Production VPC Route Table
  ProductionRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: IsPrimaryRegion
    Properties:
      VpcId: !Ref ProductionVpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-prod-rt'
        - Key: Type
          Value: 'spoke'
          
  ProductionSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: IsPrimaryRegion
    Properties:
      SubnetId: !Ref ProductionSubnet
      RouteTableId: !Ref ProductionRouteTable
      
  # Development VPC Route Table
  DevelopmentRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: IsPrimaryRegion
    Properties:
      VpcId: !Ref DevelopmentVpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dev-rt'
        - Key: Type
          Value: 'spoke'
          
  DevelopmentSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: IsPrimaryRegion
    Properties:
      SubnetId: !Ref DevelopmentSubnet
      RouteTableId: !Ref DevelopmentRouteTable

  # DR Hub VPC Route Table (Secondary Region)
  DrHubRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: IsSecondaryRegion
    Properties:
      VpcId: !Ref DrHubVpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dr-hub-rt'
        - Key: Type
          Value: 'hub-transit'
          
  DrHubSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: IsSecondaryRegion
    Properties:
      SubnetId: !Ref DrHubSubnet
      RouteTableId: !Ref DrHubRouteTable
      
  # DR Hub VPC Internet Route
  DrHubInternetRoute:
    Type: AWS::EC2::Route
    Condition: IsSecondaryRegion
    DependsOn: DrHubInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref DrHubRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref DrHubInternetGateway
      
  # DR Production VPC Route Table
  DrProductionRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: IsSecondaryRegion
    Properties:
      VpcId: !Ref DrProductionVpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-dr-prod-rt'
        - Key: Type
          Value: 'spoke'
          
  DrProductionSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: IsSecondaryRegion
    Properties:
      SubnetId: !Ref DrProductionSubnet
      RouteTableId: !Ref DrProductionRouteTable

  # EU Hub VPC Route Table
  EuHubRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: IsEuRegion
    Properties:
      VpcId: !Ref EuHubVpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-eu-hub-rt'
        - Key: Type
          Value: 'hub-transit'
          
  EuHubSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: IsEuRegion
    Properties:
      SubnetId: !Ref EuHubSubnet
      RouteTableId: !Ref EuHubRouteTable
      
  # EU Hub VPC Internet Route
  EuHubInternetRoute:
    Type: AWS::EC2::Route
    Condition: IsEuRegion
    DependsOn: EuHubInternetGatewayAttachment
    Properties:
      RouteTableId: !Ref EuHubRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref EuHubInternetGateway
      
  # EU Production VPC Route Table
  EuProductionRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: IsEuRegion
    Properties:
      VpcId: !Ref EuProductionVpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-eu-prod-rt'
        - Key: Type
          Value: 'spoke'
          
  EuProductionSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: IsEuRegion
    Properties:
      SubnetId: !Ref EuProductionSubnet
      RouteTableId: !Ref EuProductionRouteTable

  # APAC VPC Route Table
  ApacRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: IsApacRegion
    Properties:
      VpcId: !Ref ApacVpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-apac-rt'
        - Key: Type
          Value: 'spoke'
          
  ApacSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: IsApacRegion
    Properties:
      SubnetId: !Ref ApacSubnet
      RouteTableId: !Ref ApacRouteTable

  # ================================================================================
  # TEST INSTANCES FOR CONNECTIVITY VALIDATION (OPTIONAL)
  # ================================================================================
  
  # Test Instance in Hub VPC
  HubTestInstance:
    Type: AWS::EC2::Instance
    Condition: CreateInstances
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref DeploymentRegion, AMI]
      InstanceType: !Ref InstanceType
      SubnetId: !If [IsPrimaryRegion, !Ref HubSubnet, !Ref 'AWS::NoValue']
      SecurityGroupIds: 
        - !If [IsPrimaryRegion, !Ref HubSecurityGroup, !Ref 'AWS::NoValue']
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y amazon-cloudwatch-agent
          echo "Hub Test Instance in ${DeploymentRegion}" > /var/log/instance-info.log
          # Install network debugging tools
          yum install -y tcpdump wireshark-cli nmap-ncat
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-hub-test-instance'
        - Key: Role
          Value: 'test'

  # ================================================================================
  # CLOUDWATCH MONITORING AND ALARMS
  # ================================================================================
  
  # CloudWatch Log Group for VPC Flow Logs
  VpcFlowLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/vpc/flowlogs/${ProjectName}'
      RetentionInDays: 14
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc-flow-logs'
        - Key: Purpose
          Value: 'network-monitoring'

  # IAM Role for VPC Flow Logs
  VpcFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc-flow-logs-role'

  # VPC Flow Logs for Hub VPC (Primary Region)
  HubVpcFlowLogs:
    Type: AWS::EC2::FlowLog
    Condition: IsPrimaryRegion
    Properties:
      ResourceId: !Ref HubVpc
      ResourceType: VPC
      TrafficType: ALL
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref VpcFlowLogsGroup
      DeliverLogsPermissionArn: !GetAtt VpcFlowLogsRole.Arn
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-hub-vpc-flow-logs'

  # CloudWatch Dashboard for Network Monitoring
  NetworkMonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-network-monitoring'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "NetworkIn", "InstanceId", "${HubTestInstance}" ],
                  [ ".", "NetworkOut", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Network Traffic - Hub Instance"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/vpc/flowlogs/${ProjectName}'\n| fields @timestamp, srcaddr, dstaddr, action\n| filter action = \"REJECT\"\n| stats count() by srcaddr\n| sort count desc",
                "region": "${AWS::Region}",
                "title": "Rejected Traffic by Source"
              }
            }
          ]
        }

Outputs:
  # VPC Information
  VpcId:
    Description: 'ID of the primary VPC created in this region'
    Value: !If 
      - IsPrimaryRegion
      - !Ref HubVpc
      - !If 
        - IsSecondaryRegion
        - !Ref DrHubVpc
        - !If
          - IsEuRegion
          - !Ref EuHubVpc
          - !Ref ApacVpc
    Export:
      Name: !Sub '${ProjectName}-vpc-id-${DeploymentRegion}'
      
  VpcCidr:
    Description: 'CIDR block of the primary VPC'
    Value: !If
      - IsPrimaryRegion
      - !GetAtt HubVpc.CidrBlock
      - !If
        - IsSecondaryRegion
        - !GetAtt DrHubVpc.CidrBlock
        - !If
          - IsEuRegion
          - !GetAtt EuHubVpc.CidrBlock
          - !GetAtt ApacVpc.CidrBlock
    Export:
      Name: !Sub '${ProjectName}-vpc-cidr-${DeploymentRegion}'
      
  # Subnet Information
  SubnetId:
    Description: 'ID of the primary subnet created in this region'
    Value: !If
      - IsPrimaryRegion
      - !Ref HubSubnet
      - !If
        - IsSecondaryRegion
        - !Ref DrHubSubnet
        - !If
          - IsEuRegion
          - !Ref EuHubSubnet
          - !Ref ApacSubnet
    Export:
      Name: !Sub '${ProjectName}-subnet-id-${DeploymentRegion}'
      
  # Security Group Information
  SecurityGroupId:
    Description: 'ID of the primary security group'
    Value: !If
      - IsPrimaryRegion
      - !Ref HubSecurityGroup
      - 'N/A'
    Export:
      Name: !Sub '${ProjectName}-sg-id-${DeploymentRegion}'
      
  # Route Table Information
  RouteTableId:
    Description: 'ID of the primary route table'
    Value: !If
      - IsPrimaryRegion
      - !Ref HubRouteTable
      - !If
        - IsSecondaryRegion
        - !Ref DrHubRouteTable
        - !If
          - IsEuRegion
          - !Ref EuHubRouteTable
          - !Ref ApacRouteTable
    Export:
      Name: !Sub '${ProjectName}-rt-id-${DeploymentRegion}'
      
  # Test Instance Information
  TestInstanceId:
    Description: 'ID of the test instance (if created)'
    Value: !If [CreateInstances, !Ref HubTestInstance, 'Not Created']
    Export:
      Name: !Sub '${ProjectName}-test-instance-id-${DeploymentRegion}'
      
  # Monitoring Information
  FlowLogsGroup:
    Description: 'CloudWatch Log Group for VPC Flow Logs'
    Value: !Ref VpcFlowLogsGroup
    Export:
      Name: !Sub '${ProjectName}-flow-logs-group'
      
  DashboardUrl:
    Description: 'URL to the CloudWatch Dashboard'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-network-monitoring'
    
  # Cross-Region Connection Information
  PeeringConnectionPlaceholder:
    Description: 'Placeholder for VPC Peering Connection IDs - must be created manually or via separate stack'
    Value: 'VPC Peering connections must be established between regions using separate CloudFormation stacks or AWS CLI'
    
  # Deployment Instructions
  NextSteps:
    Description: 'Instructions for completing the multi-region setup'
    Value: !Sub |
      1. Deploy this template in each target region (${DeploymentRegion})
      2. Create VPC peering connections between regions using AWS CLI or separate stacks
      3. Update route tables with peering connection routes
      4. Configure Route 53 Resolver for cross-region DNS resolution
      5. Test connectivity between regions using provided test instances
      
  # Cost Estimation
  EstimatedMonthlyCost:
    Description: 'Estimated monthly cost for this deployment'
    Value: 'VPC Peering: $0.01/hour per connection + data transfer charges. NAT Gateway: $45/month. EC2: $8.76/month per t3.micro instance. Total: ~$100-400/month depending on data transfer.'