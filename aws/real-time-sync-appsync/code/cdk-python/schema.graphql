# GraphQL Schema for Real-time Task Management with AppSync
# This schema defines a complete collaborative task management system with real-time subscriptions

# Main Task type representing a collaborative task
type Task {
    id: ID!
    title: String!
    description: String
    status: TaskStatus!
    priority: Priority!
    assignedTo: String
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
    version: Int!
}

# Enumeration for task status values
enum TaskStatus {
    TODO
    IN_PROGRESS
    COMPLETED
    ARCHIVED
}

# Enumeration for task priority levels
enum Priority {
    LOW
    MEDIUM
    HIGH
    URGENT
}

# Input type for creating new tasks
input CreateTaskInput {
    title: String!
    description: String
    priority: Priority!
    assignedTo: String
}

# Input type for updating existing tasks with version control
input UpdateTaskInput {
    id: ID!
    title: String
    description: String
    status: TaskStatus
    priority: Priority
    assignedTo: String
    version: Int!
}

# Connection type for paginated task lists
type TaskConnection {
    items: [Task]
    nextToken: String
}

# Query operations for reading task data
type Query {
    # Get a single task by ID
    getTask(id: ID!): Task
    
    # List all tasks with optional pagination
    listTasks(status: TaskStatus, limit: Int, nextToken: String): TaskConnection
    
    # List tasks filtered by status with pagination
    listTasksByStatus(status: TaskStatus!, limit: Int, nextToken: String): TaskConnection
}

# Mutation operations for modifying task data
type Mutation {
    # Create a new task
    createTask(input: CreateTaskInput!): Task
    
    # Update an existing task with optimistic locking
    updateTask(input: UpdateTaskInput!): Task
    
    # Delete a task with version checking
    deleteTask(id: ID!, version: Int!): Task
}

# Subscription operations for real-time updates
type Subscription {
    # Subscribe to new task creation events
    onTaskCreated: Task
        @aws_subscribe(mutations: ["createTask"])
    
    # Subscribe to task update events
    onTaskUpdated: Task
        @aws_subscribe(mutations: ["updateTask"])
    
    # Subscribe to task deletion events
    onTaskDeleted: Task
        @aws_subscribe(mutations: ["deleteTask"])
}

# Schema definition linking query, mutation, and subscription types
schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}