# Real-time Chat Application GraphQL Schema
# This schema defines the complete data model for a real-time chat application
# supporting messages, conversations, users, and real-time subscriptions

# Custom scalar types
scalar AWSDateTime
scalar AWSEmail

# Core Types
type Message {
    messageId: ID!
    conversationId: ID!
    userId: ID!
    content: String!
    messageType: MessageType!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime
    author: User
}

type Conversation {
    conversationId: ID!
    name: String
    participants: [ID!]!
    lastMessageAt: AWSDateTime
    lastMessage: String
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime
    createdBy: ID!
    messageCount: Int
    isGroup: Boolean
}

type User {
    userId: ID!
    username: String!
    email: AWSEmail!
    displayName: String
    avatarUrl: String
    lastSeen: AWSDateTime
    isOnline: Boolean
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime
    status: UserStatus
}

# Enums
enum MessageType {
    TEXT
    IMAGE
    FILE
    SYSTEM
    EMOJI
}

enum UserStatus {
    ONLINE
    AWAY
    BUSY
    OFFLINE
}

# Connection types for pagination
type MessageConnection {
    items: [Message]
    nextToken: String
    hasMore: Boolean
}

type ConversationConnection {
    items: [Conversation]
    nextToken: String
    hasMore: Boolean
}

type UserConnection {
    items: [User]
    nextToken: String
    hasMore: Boolean
}

# Input Types
input SendMessageInput {
    conversationId: ID!
    content: String!
    messageType: MessageType = TEXT
    replyToMessageId: ID
}

input CreateConversationInput {
    name: String
    participants: [ID!]!
    isGroup: Boolean = false
}

input UpdateConversationInput {
    conversationId: ID!
    name: String
    participants: [ID!]
}

input UpdateUserProfileInput {
    userId: ID!
    displayName: String
    avatarUrl: String
    status: UserStatus
}

input UpdateUserPresenceInput {
    userId: ID!
    isOnline: Boolean!
    status: UserStatus
}

# Query Operations
type Query {
    # Message Queries
    getMessage(conversationId: ID!, messageId: ID!): Message
    listMessages(
        conversationId: ID!
        limit: Int = 50
        nextToken: String
        sortDirection: SortDirection = DESC
    ): MessageConnection
    
    searchMessages(
        conversationId: ID!
        searchTerm: String!
        limit: Int = 20
    ): [Message]
    
    # Conversation Queries
    getConversation(conversationId: ID!): Conversation
    listConversations(
        userId: ID!
        limit: Int = 20
        nextToken: String
    ): ConversationConnection
    
    # User Queries
    getUser(userId: ID!): User
    listUsers(
        limit: Int = 50
        nextToken: String
    ): UserConnection
    
    searchUsers(
        searchTerm: String!
        limit: Int = 10
    ): [User]
    
    # System Queries
    whoami: User
}

# Mutation Operations
type Mutation {
    # Message Mutations
    sendMessage(input: SendMessageInput!): Message
    deleteMessage(conversationId: ID!, messageId: ID!): Message
    editMessage(conversationId: ID!, messageId: ID!, content: String!): Message
    
    # Conversation Mutations
    createConversation(input: CreateConversationInput!): Conversation
    updateConversation(input: UpdateConversationInput!): Conversation
    deleteConversation(conversationId: ID!): Conversation
    leaveConversation(conversationId: ID!): Conversation
    addParticipant(conversationId: ID!, userId: ID!): Conversation
    removeParticipant(conversationId: ID!, userId: ID!): Conversation
    
    # User Mutations
    updateUserProfile(input: UpdateUserProfileInput!): User
    updateUserPresence(input: UpdateUserPresenceInput!): User
    
    # System Mutations
    registerUser(username: String!, email: AWSEmail!, displayName: String): User
}

# Subscription Operations - Real-time Updates
type Subscription {
    # Message Subscriptions
    onMessageSent(conversationId: ID!): Message
        @aws_subscribe(mutations: ["sendMessage"])
    
    onMessageDeleted(conversationId: ID!): Message
        @aws_subscribe(mutations: ["deleteMessage"])
    
    onMessageEdited(conversationId: ID!): Message
        @aws_subscribe(mutations: ["editMessage"])
    
    # Conversation Subscriptions
    onConversationCreated(userId: ID!): Conversation
        @aws_subscribe(mutations: ["createConversation"])
    
    onConversationUpdated(conversationId: ID!): Conversation
        @aws_subscribe(mutations: ["updateConversation", "addParticipant", "removeParticipant"])
    
    onConversationDeleted(userId: ID!): Conversation
        @aws_subscribe(mutations: ["deleteConversation"])
    
    # User Presence Subscriptions
    onUserPresenceUpdated(conversationId: ID!): User
        @aws_subscribe(mutations: ["updateUserPresence"])
    
    # System Subscriptions
    onUserJoined: User
        @aws_subscribe(mutations: ["registerUser"])
}

# Utility Enums
enum SortDirection {
    ASC
    DESC
}

# Schema Definition
schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}