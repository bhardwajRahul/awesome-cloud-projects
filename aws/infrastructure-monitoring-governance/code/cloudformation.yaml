AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Infrastructure monitoring solution using AWS CloudTrail, Config, and Systems Manager.
  This template creates a comprehensive monitoring and compliance solution with automated
  alerting, compliance reporting, and operational insights. Implements the complete
  architecture from the Infrastructure Monitoring recipe.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "General Configuration"
        Parameters:
          - Environment
          - ProjectName
      - Label:
          default: "Storage Configuration"
        Parameters:
          - MonitoringBucketName
          - EnableBucketVersioning
          - BucketRetentionDays
      - Label:
          default: "Notification Configuration"
        Parameters:
          - NotificationEmail
          - EnableSNSNotifications
      - Label:
          default: "CloudTrail Configuration"
        Parameters:
          - EnableCloudTrail
          - EnableMultiRegionTrail
          - EnableLogFileValidation
          - EnableInsightSelectors
      - Label:
          default: "Config Configuration"
        Parameters:
          - EnableConfig
          - EnableAllResourceTypes
          - EnableGlobalResources
          - ConfigDeliveryFrequency
      - Label:
          default: "Systems Manager Configuration"
        Parameters:
          - EnableSystemsManager
          - MaintenanceWindowSchedule
          - MaintenanceWindowDuration
      - Label:
          default: "Compliance Rules"
        Parameters:
          - EnableS3PublicAccessRule
          - EnableEncryptedVolumesRule
          - EnableRootAccessKeyRule
          - EnablePasswordPolicyRule
      - Label:
          default: "Monitoring & Dashboards"
        Parameters:
          - EnableCloudWatchDashboard
          - EnableAutomatedRemediation

Parameters:
  Environment:
    Type: String
    Default: 'production'
    AllowedValues: ['development', 'staging', 'production']
    Description: 'Environment designation for resource tagging and configuration'

  ProjectName:
    Type: String
    Default: 'infrastructure-monitoring'
    Description: 'Project name used for resource naming and tagging'
    MinLength: 3
    MaxLength: 50
    AllowedPattern: '^[a-z0-9\-]+$'

  MonitoringBucketName:
    Type: String
    Default: ''
    Description: 'S3 bucket name for storing logs (leave empty for auto-generated name)'
    AllowedPattern: '^$|^[a-z0-9\-\.]+$'

  EnableBucketVersioning:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable S3 bucket versioning for audit trail integrity'

  BucketRetentionDays:
    Type: Number
    Default: 90
    MinValue: 30
    MaxValue: 2555
    Description: 'Number of days to retain logs in S3 before transitioning to IA storage'

  NotificationEmail:
    Type: String
    Default: ''
    Description: 'Email address for compliance and security notifications'
    AllowedPattern: '^$|^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'

  EnableSNSNotifications:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable SNS notifications for Config rule compliance changes'

  EnableCloudTrail:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable CloudTrail logging for API audit trail'

  EnableMultiRegionTrail:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable multi-region CloudTrail for comprehensive coverage'

  EnableLogFileValidation:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable CloudTrail log file validation for integrity verification'

  EnableInsightSelectors:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable CloudTrail Insights for unusual activity patterns'

  EnableConfig:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable AWS Config for configuration monitoring'

  EnableAllResourceTypes:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Monitor all supported AWS resource types with Config'

  EnableGlobalResources:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Include global resources (IAM, CloudFront) in Config monitoring'

  ConfigDeliveryFrequency:
    Type: String
    Default: 'TwentyFour_Hours'
    AllowedValues: ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']
    Description: 'Frequency for Config snapshot delivery to S3'

  EnableSystemsManager:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable Systems Manager operational management features'

  MaintenanceWindowSchedule:
    Type: String
    Default: 'cron(0 02 ? * SUN *)'
    Description: 'Cron expression for Systems Manager maintenance window (default: Sundays at 2 AM)'

  MaintenanceWindowDuration:
    Type: Number
    Default: 4
    MinValue: 1
    MaxValue: 24
    Description: 'Duration in hours for maintenance window'

  EnableS3PublicAccessRule:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable Config rule to monitor S3 bucket public access'

  EnableEncryptedVolumesRule:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable Config rule to monitor EBS volume encryption'

  EnableRootAccessKeyRule:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable Config rule to monitor root access key usage'

  EnablePasswordPolicyRule:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable Config rule to monitor IAM password policy compliance'

  EnableCloudWatchDashboard:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Create CloudWatch dashboard for monitoring visualization'

  EnableAutomatedRemediation:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: 'Enable automated remediation for compliance violations (advanced feature)'

Conditions:
  # General conditions
  HasNotificationEmail: !Not [!Equals [!Ref NotificationEmail, '']]
  HasCustomBucketName: !Not [!Equals [!Ref MonitoringBucketName, '']]
  
  # Service conditions
  CreateCloudTrail: !Equals [!Ref EnableCloudTrail, 'true']
  CreateConfig: !Equals [!Ref EnableConfig, 'true']
  CreateSystemsManager: !Equals [!Ref EnableSystemsManager, 'true']
  
  # Feature conditions
  CreateSNSNotifications: !And 
    - !Equals [!Ref EnableSNSNotifications, 'true']
    - !Condition HasNotificationEmail
  
  EnableVersioning: !Equals [!Ref EnableBucketVersioning, 'true']
  EnableMultiRegion: !Equals [!Ref EnableMultiRegionTrail, 'true']
  EnableLogValidation: !Equals [!Ref EnableLogFileValidation, 'true']
  EnableInsights: !Equals [!Ref EnableInsightSelectors, 'true']
  
  # Config rule conditions
  CreateS3PublicAccessRule: !And
    - !Condition CreateConfig
    - !Equals [!Ref EnableS3PublicAccessRule, 'true']
  
  CreateEncryptedVolumesRule: !And
    - !Condition CreateConfig
    - !Equals [!Ref EnableEncryptedVolumesRule, 'true']
  
  CreateRootAccessKeyRule: !And
    - !Condition CreateConfig
    - !Equals [!Ref EnableRootAccessKeyRule, 'true']
  
  CreatePasswordPolicyRule: !And
    - !Condition CreateConfig
    - !Equals [!Ref EnablePasswordPolicyRule, 'true']
  
  # Dashboard and automation conditions
  CreateDashboard: !Equals [!Ref EnableCloudWatchDashboard, 'true']
  CreateRemediation: !Equals [!Ref EnableAutomatedRemediation, 'true']

Resources:
  # ============================================================================
  # S3 BUCKET FOR LOG STORAGE
  # ============================================================================
  
  MonitoringLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If
        - HasCustomBucketName
        - !Ref MonitoringBucketName
        - !Sub '${ProjectName}-monitoring-logs-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      VersioningConfiguration: !If
        - EnableVersioning
        - Status: Enabled
        - !Ref AWS::NoValue
      LifecycleConfiguration:
        Rules:
          - Id: LogRetentionRule
            Status: Enabled
            Transitions:
              - TransitionInDays: !Ref BucketRetentionDays
                StorageClass: STANDARD_IA
              - TransitionInDays: 365
                StorageClass: GLACIER
            ExpirationInDays: 2555 # 7 years retention
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration: !If
        - CreateSNSNotifications
        - TopicConfigurations:
            - Topic: !Ref ComplianceNotificationTopic
              Event: s3:ObjectCreated:*
              Filter:
                S3Key:
                  Rules:
                    - Name: prefix
                      Value: AWSLogs/
        - !Ref AWS::NoValue
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: 'Infrastructure monitoring logs storage'

  # S3 Bucket Policy for CloudTrail and Config
  MonitoringLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MonitoringLogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # CloudTrail permissions
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub '${MonitoringLogsBucket}'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:${AWS::Partition}:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/*'
          
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub '${MonitoringLogsBucket}/AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
                AWS:SourceArn: !Sub 'arn:${AWS::Partition}:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/*'
          
          # Config permissions
          - Sid: AWSConfigBucketPermissionsCheck
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub '${MonitoringLogsBucket}'
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref AWS::AccountId
          
          - Sid: AWSConfigBucketExistenceCheck
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: s3:ListBucket
            Resource: !Sub '${MonitoringLogsBucket}'
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref AWS::AccountId
          
          - Sid: AWSConfigBucketDelivery
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub '${MonitoringLogsBucket}/AWSLogs/${AWS::AccountId}/Config/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
                AWS:SourceAccount: !Ref AWS::AccountId

  # ============================================================================
  # KMS KEY FOR ENCRYPTION
  # ============================================================================
  
  MonitoringKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub 'KMS key for ${ProjectName} infrastructure monitoring encryption'
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow CloudTrail to encrypt logs
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action:
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
            Condition:
              StringEquals:
                'kms:EncryptionContext:aws:cloudtrail:arn': !Sub 'arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${ProjectName}-infrastructure-trail'
          - Sid: Allow SNS to use the key
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  MonitoringKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${ProjectName}-monitoring-key'
      TargetKeyId: !Ref MonitoringKMSKey

  # ============================================================================
  # SNS TOPIC FOR NOTIFICATIONS
  # ============================================================================
  
  ComplianceNotificationTopic:
    Type: AWS::SNS::Topic
    Condition: CreateSNSNotifications
    Properties:
      TopicName: !Sub '${ProjectName}-compliance-notifications'
      DisplayName: 'Infrastructure Monitoring Compliance Notifications'
      KmsMasterKeyId: !Ref MonitoringKMSKey
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: 'Compliance and security notifications'

  ComplianceNotificationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Condition: CreateSNSNotifications
    Properties:
      Topics:
        - !Ref ComplianceNotificationTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowConfigPublish
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action:
              - SNS:Publish
            Resource: !Ref ComplianceNotificationTopic
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref AWS::AccountId

  EmailSubscription:
    Type: AWS::SNS::Subscription
    Condition: CreateSNSNotifications
    Properties:
      Protocol: email
      TopicArn: !Ref ComplianceNotificationTopic
      Endpoint: !Ref NotificationEmail

  # ============================================================================
  # IAM ROLES AND POLICIES
  # ============================================================================
  
  # Config Service Role
  ConfigServiceRole:
    Type: AWS::IAM::Role
    Condition: CreateConfig
    Properties:
      RoleName: !Sub '${ProjectName}-ConfigServiceRole-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/ConfigRole
      Policies:
        - PolicyName: ConfigS3DeliveryPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:ListBucket
                Resource: !Sub '${MonitoringLogsBucket}'
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub '${MonitoringLogsBucket}/AWSLogs/${AWS::AccountId}/Config/*'
                Condition:
                  StringEquals:
                    's3:x-amz-acl': bucket-owner-full-control
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Lambda Execution Role for Remediation
  RemediationLambdaRole:
    Type: AWS::IAM::Role
    Condition: CreateRemediation
    Properties:
      RoleName: !Sub '${ProjectName}-RemediationLambdaRole-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: RemediationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutPublicAccessBlock
                  - s3:GetPublicAccessBlock
                  - ec2:ModifySnapshotAttribute
                  - ec2:DescribeSnapshots
                  - config:PutEvaluations
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # ============================================================================
  # CLOUDTRAIL CONFIGURATION
  # ============================================================================
  
  InfrastructureCloudTrail:
    Type: AWS::CloudTrail::Trail
    Condition: CreateCloudTrail
    DependsOn: MonitoringLogsBucketPolicy
    Properties:
      TrailName: !Sub '${ProjectName}-infrastructure-trail'
      S3BucketName: !Ref MonitoringLogsBucket
      S3KeyPrefix: 'AWSLogs'
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: !Condition EnableMultiRegion
      EnableLogFileValidation: !Condition EnableLogValidation
      EventSelectors: !If
        - EnableInsights
        - - ReadWriteType: All
            IncludeManagementEvents: true
            DataResources:
              - Type: 'AWS::S3::Object'
                Values: 
                  - 'arn:aws:s3:::*/*'
        - !Ref AWS::NoValue
      InsightSelectors: !If
        - EnableInsights
        - - InsightType: ApiCallRateInsight
        - !Ref AWS::NoValue
      KMSKeyId: !Ref MonitoringKMSKey
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: 'Infrastructure API audit logging'

  # ============================================================================
  # AWS CONFIG CONFIGURATION
  # ============================================================================
  
  ConfigurationRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Condition: CreateConfig
    Properties:
      Name: !Sub '${ProjectName}-configuration-recorder'
      RoleARN: !GetAtt ConfigServiceRole.Arn
      RecordingGroup:
        AllSupported: !Equals [!Ref EnableAllResourceTypes, 'true']
        IncludeGlobalResourceTypes: !Equals [!Ref EnableGlobalResources, 'true']
        ResourceTypes: !If
          - EnableAllResourceTypes
          - !Ref AWS::NoValue
          - - 'AWS::EC2::Instance'
            - 'AWS::EC2::SecurityGroup'
            - 'AWS::EC2::Volume'
            - 'AWS::S3::Bucket'
            - 'AWS::IAM::Role'
            - 'AWS::IAM::Policy'

  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Condition: CreateConfig
    Properties:
      Name: !Sub '${ProjectName}-delivery-channel'
      S3BucketName: !Ref MonitoringLogsBucket
      S3KeyPrefix: 'AWSLogs'
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: !Ref ConfigDeliveryFrequency
      SnsTopicARN: !If
        - CreateSNSNotifications
        - !Ref ComplianceNotificationTopic
        - !Ref AWS::NoValue

  # ============================================================================
  # CONFIG RULES FOR COMPLIANCE MONITORING
  # ============================================================================
  
  # S3 Bucket Public Access Prohibited Rule
  S3BucketPublicAccessProhibitedRule:
    Type: AWS::Config::ConfigRule
    Condition: CreateS3PublicAccessRule
    DependsOn: ConfigurationRecorder
    Properties:
      ConfigRuleName: s3-bucket-public-access-prohibited
      Description: 'Checks that S3 buckets do not allow public access'
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_PUBLIC_ACCESS_PROHIBITED

  # Encrypted Volumes Rule
  EncryptedVolumesRule:
    Type: AWS::Config::ConfigRule
    Condition: CreateEncryptedVolumesRule
    DependsOn: ConfigurationRecorder
    Properties:
      ConfigRuleName: encrypted-volumes
      Description: 'Checks whether EBS volumes are encrypted'
      Source:
        Owner: AWS
        SourceIdentifier: ENCRYPTED_VOLUMES

  # Root Access Key Check Rule
  RootAccessKeyRule:
    Type: AWS::Config::ConfigRule
    Condition: CreateRootAccessKeyRule
    DependsOn: ConfigurationRecorder
    Properties:
      ConfigRuleName: root-access-key-check
      Description: 'Checks whether root access key is available'
      Source:
        Owner: AWS
        SourceIdentifier: ROOT_ACCESS_KEY_CHECK

  # IAM Password Policy Rule
  IAMPasswordPolicyRule:
    Type: AWS::Config::ConfigRule
    Condition: CreatePasswordPolicyRule
    DependsOn: ConfigurationRecorder
    Properties:
      ConfigRuleName: iam-password-policy
      Description: 'Checks whether the IAM password policy meets specified requirements'
      Source:
        Owner: AWS
        SourceIdentifier: IAM_PASSWORD_POLICY
      InputParameters: |
        {
          "RequireUppercaseCharacters": "true",
          "RequireLowercaseCharacters": "true",
          "RequireNumbers": "true",
          "RequireSymbols": "true",
          "MinimumPasswordLength": "8",
          "MaxPasswordAge": "90"
        }

  # ============================================================================
  # SYSTEMS MANAGER CONFIGURATION
  # ============================================================================
  
  # Maintenance Window
  InfrastructureMaintenanceWindow:
    Type: AWS::SSM::MaintenanceWindow
    Condition: CreateSystemsManager
    Properties:
      Name: !Sub '${ProjectName}-maintenance-window'
      Description: 'Automated infrastructure monitoring and maintenance tasks'
      Duration: !Ref MaintenanceWindowDuration
      Cutoff: 1
      Schedule: !Ref MaintenanceWindowSchedule
      AllowUnassociatedTargets: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # OpsCenter OpsItem for setup completion
  MonitoringSetupOpsItem:
    Type: AWS::SSM::OpsItem
    Condition: CreateSystemsManager
    Properties:
      Title: !Sub 'Infrastructure Monitoring Setup Complete - ${ProjectName}'
      Description: !Sub |
        Infrastructure monitoring has been successfully configured with:
        - CloudTrail: ${EnableCloudTrail}
        - Config: ${EnableConfig}
        - Systems Manager: ${EnableSystemsManager}
        
        Environment: ${Environment}
        Region: ${AWS::Region}
        
        Resources created:
        - S3 Bucket: ${MonitoringLogsBucket}
        - SNS Topic: ${EnableSNSNotifications}
        - Config Rules: Multiple compliance rules enabled
        
        Next steps:
        1. Verify email subscription for notifications
        2. Review CloudWatch dashboard
        3. Test compliance rule evaluations
        4. Configure additional monitoring as needed
      Priority: 3
      Source: 'CloudFormation'
      OperationalData:
        Environment:
          Value: !Ref Environment
          Type: 'SearchableString'
        Project:
          Value: !Ref ProjectName
          Type: 'SearchableString'
        Region:
          Value: !Ref AWS::Region
          Type: 'SearchableString'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # ============================================================================
  # AUTOMATED REMEDIATION LAMBDA
  # ============================================================================
  
  RemediationLambdaFunction:
    Type: AWS::Lambda::Function
    Condition: CreateRemediation
    Properties:
      FunctionName: !Sub '${ProjectName}-infrastructure-remediation'
      Description: 'Automated remediation for infrastructure compliance violations'
      Runtime: python3.9
      Handler: index.lambda_handler
      Timeout: 300
      MemorySize: 256
      Role: !GetAtt RemediationLambdaRole.Arn
      Environment:
        Variables:
          PROJECT_NAME: !Ref ProjectName
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import os
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              """
              Automated remediation for Config rule compliance violations
              Handles S3 public access, EBS encryption, and other security issues
              """
              try:
                  logger.info(f"Processing event: {json.dumps(event, default=str)}")
                  
                  # Extract Config event information
                  config_item = event.get('configurationItem', {})
                  rule_name = event.get('configRuleName', '')
                  compliance_type = event.get('newEvaluationResult', {}).get('complianceType', '')
                  resource_type = config_item.get('resourceType', '')
                  resource_id = config_item.get('resourceId', '')
                  
                  logger.info(f"Rule: {rule_name}, Resource: {resource_id}, Compliance: {compliance_type}")
                  
                  if compliance_type != 'NON_COMPLIANT':
                      logger.info("Resource is compliant or not evaluated, no remediation needed")
                      return {'statusCode': 200, 'body': 'No remediation needed'}
                  
                  # Remediate S3 bucket public access
                  if rule_name == 's3-bucket-public-access-prohibited' and resource_type == 'AWS::S3::Bucket':
                      remediate_s3_public_access(resource_id)
                  
                  # Remediate unencrypted EBS volumes (example - requires more complex logic)
                  elif rule_name == 'encrypted-volumes' and resource_type == 'AWS::EC2::Volume':
                      logger.warning(f"EBS volume {resource_id} is unencrypted - manual intervention required")
                      # Note: EBS volume encryption cannot be enabled post-creation
                      # This would require creating encrypted snapshot and replacing volume
                  
                  else:
                      logger.info(f"No automated remediation available for rule: {rule_name}")
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Remediation processing complete')
                  }
                  
              except Exception as e:
                  logger.error(f"Error in remediation: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Remediation failed: {str(e)}')
                  }
          
          def remediate_s3_public_access(bucket_name):
              """Remediate S3 bucket public access by enabling public access block"""
              try:
                  s3_client = boto3.client('s3')
                  
                  # Enable public access block
                  s3_client.put_public_access_block(
                      Bucket=bucket_name,
                      PublicAccessBlockConfiguration={
                          'BlockPublicAcls': True,
                          'IgnorePublicAcls': True,
                          'BlockPublicPolicy': True,
                          'RestrictPublicBuckets': True
                      }
                  )
                  
                  logger.info(f"Successfully remediated S3 bucket public access for: {bucket_name}")
                  
                  # Create SSM OpsItem for tracking
                  ssm_client = boto3.client('ssm')
                  ssm_client.create_ops_item(
                      Title=f'Automated Remediation: S3 Public Access - {bucket_name}',
                      Description=f'Automatically enabled public access block for S3 bucket {bucket_name}',
                      Priority=2,
                      Source='AutomatedRemediation',
                      Tags=[
                          {'Key': 'Project', 'Value': os.environ.get('PROJECT_NAME', 'infrastructure-monitoring')},
                          {'Key': 'Environment', 'Value': os.environ.get('ENVIRONMENT', 'production')},
                          {'Key': 'RemediationType', 'Value': 'S3PublicAccess'}
                      ]
                  )
                  
              except Exception as e:
                  logger.error(f"Failed to remediate S3 bucket {bucket_name}: {str(e)}")
                  raise
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # EventBridge Rule for Config Compliance Changes
  ConfigComplianceChangeRule:
    Type: AWS::Events::Rule
    Condition: CreateRemediation
    Properties:
      Name: !Sub '${ProjectName}-config-compliance-change'
      Description: 'Triggers on Config rule compliance changes for automated remediation'
      EventPattern:
        source: [aws.config]
        detail-type: [Config Rules Compliance Change]
        detail:
          newEvaluationResult:
            complianceType: [NON_COMPLIANT]
      State: ENABLED
      Targets:
        - Arn: !GetAtt RemediationLambdaFunction.Arn
          Id: RemediationLambdaTarget

  # Lambda permission for EventBridge to invoke remediation
  RemediationLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: CreateRemediation
    Properties:
      FunctionName: !Ref RemediationLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ConfigComplianceChangeRule.Arn

  # ============================================================================
  # CLOUDWATCH ALARMS
  # ============================================================================
  
  # CloudWatch Alarm for Config Compliance
  ConfigComplianceAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateConfig
    Properties:
      AlarmName: !Sub '${ProjectName}-config-compliance-violation'
      AlarmDescription: 'Triggers when Config rules detect non-compliant resources'
      MetricName: ComplianceByConfigRule
      Namespace: AWS/Config
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0.95
      ComparisonOperator: LessThanThreshold
      AlarmActions: !If
        - CreateSNSNotifications
        - [!Ref ComplianceNotificationTopic]
        - []
      TreatMissingData: notBreaching
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # ============================================================================
  # CLOUDWATCH DASHBOARD
  # ============================================================================
  
  InfrastructureMonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: CreateDashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-infrastructure-monitoring'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Config", "ComplianceByConfigRule", "ConfigRuleName", "s3-bucket-public-access-prohibited", { "stat": "Average" } ],
                  [ ".", ".", ".", "encrypted-volumes", { "stat": "Average" } ],
                  [ ".", ".", ".", "root-access-key-check", { "stat": "Average" } ],
                  [ ".", ".", ".", "iam-password-policy", { "stat": "Average" } ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Config Rule Compliance Status",
                "yAxis": {
                  "left": {
                    "min": 0,
                    "max": 1
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Config", "TotalDiscoveredResources", { "stat": "Maximum" } ]
                ],
                "period": 3600,
                "stat": "Maximum",
                "region": "${AWS::Region}",
                "title": "Total Discovered Resources"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 8,
              "properties": {
                "query": "SOURCE '/aws/lambda/${ProjectName}-infrastructure-remediation'\n| fields @timestamp, @message\n| filter @message like /Successfully remediated/\n| sort @timestamp desc\n| limit 20",
                "region": "${AWS::Region}",
                "title": "Recent Automated Remediations",
                "view": "table"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 14,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/S3", "BucketSizeBytes", "BucketName", "${MonitoringLogsBucket}", "StorageType", "StandardStorage", { "stat": "Average" } ]
                ],
                "period": 86400,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Monitoring Logs Storage Usage"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 14,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SNS", "NumberOfMessagesPublished", "TopicName", "${ProjectName}-compliance-notifications", { "stat": "Sum" } ]
                ],
                "period": 3600,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Compliance Notifications Sent"
              }
            }
          ]
        }

Outputs:
  # General Infrastructure
  MonitoringBucketName:
    Description: 'S3 bucket name for storing monitoring logs and configuration data'
    Value: !Ref MonitoringLogsBucket
    Export:
      Name: !Sub '${AWS::StackName}-MonitoringBucket'

  MonitoringBucketArn:
    Description: 'ARN of the S3 bucket for monitoring logs'
    Value: !Sub '${MonitoringLogsBucket}'
    Export:
      Name: !Sub '${AWS::StackName}-MonitoringBucketArn'

  # KMS Configuration
  KMSKeyId:
    Description: 'ID of the KMS key for encryption'
    Value: !Ref MonitoringKMSKey
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyId'

  KMSKeyArn:
    Description: 'ARN of the KMS key for encryption'
    Value: !GetAtt MonitoringKMSKey.Arn
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyArn'

  # SNS Configuration
  ComplianceNotificationTopicArn:
    Condition: CreateSNSNotifications
    Description: 'ARN of the SNS topic for compliance notifications'
    Value: !Ref ComplianceNotificationTopic
    Export:
      Name: !Sub '${AWS::StackName}-ComplianceNotificationTopic'

  # CloudTrail Information
  CloudTrailArn:
    Condition: CreateCloudTrail
    Description: 'ARN of the CloudTrail for infrastructure monitoring'
    Value: !GetAtt InfrastructureCloudTrail.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CloudTrailArn'

  CloudTrailName:
    Condition: CreateCloudTrail
    Description: 'Name of the CloudTrail'
    Value: !Ref InfrastructureCloudTrail
    Export:
      Name: !Sub '${AWS::StackName}-CloudTrailName'

  # Config Configuration
  ConfigServiceRoleArn:
    Condition: CreateConfig
    Description: 'ARN of the Config service role'
    Value: !GetAtt ConfigServiceRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ConfigServiceRoleArn'

  ConfigurationRecorderName:
    Condition: CreateConfig
    Description: 'Name of the Config configuration recorder'
    Value: !Ref ConfigurationRecorder
    Export:
      Name: !Sub '${AWS::StackName}-ConfigurationRecorderName'

  # Config Rules
  ConfigRuleNames:
    Description: 'List of created Config rule names'
    Value: !Sub |
      ${EnableS3PublicAccessRule} ? s3-bucket-public-access-prohibited : Not Created
      ${EnableEncryptedVolumesRule} ? encrypted-volumes : Not Created
      ${EnableRootAccessKeyRule} ? root-access-key-check : Not Created
      ${EnablePasswordPolicyRule} ? iam-password-policy : Not Created

  # Systems Manager
  MaintenanceWindowId:
    Condition: CreateSystemsManager
    Description: 'ID of the Systems Manager maintenance window'
    Value: !Ref InfrastructureMaintenanceWindow
    Export:
      Name: !Sub '${AWS::StackName}-MaintenanceWindowId'

  # Lambda Remediation
  RemediationLambdaFunctionArn:
    Condition: CreateRemediation
    Description: 'ARN of the automated remediation Lambda function'
    Value: !GetAtt RemediationLambdaFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-RemediationLambdaArn'

  # Dashboard
  DashboardURL:
    Condition: CreateDashboard
    Description: 'URL to access the CloudWatch monitoring dashboard'
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-infrastructure-monitoring'

  # Setup Instructions
  SetupInstructions:
    Description: 'Next steps to complete the monitoring setup'
    Value: !Sub |
      Infrastructure monitoring has been deployed successfully!
      
      Next Steps:
      1. If email notifications are enabled, check ${NotificationEmail} and confirm the SNS subscription
      2. Access the CloudWatch dashboard: https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-infrastructure-monitoring
      3. Review Config rule evaluations in the AWS Config console
      4. Test CloudTrail logging by performing API actions in your account
      5. Check Systems Manager OpsCenter for operational insights
      
      Resources Created:
      - S3 Bucket: ${MonitoringLogsBucket}
      - CloudTrail: ${EnableCloudTrail}
      - Config: ${EnableConfig}
      - Systems Manager: ${EnableSystemsManager}
      - SNS Notifications: ${EnableSNSNotifications}
      - Automated Remediation: ${EnableAutomatedRemediation}
      
      Cost Monitoring:
      Monitor costs in AWS Cost Explorer and AWS Budgets.
      Most charges will come from:
      - Config rule evaluations
      - CloudTrail data events (if enabled)
      - S3 storage for logs
      - SNS message delivery