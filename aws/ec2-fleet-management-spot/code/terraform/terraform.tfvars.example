# Example Terraform variables file for EC2 Fleet Management
# Copy this file to terraform.tfvars and customize the values

# Basic Configuration
aws_region   = "us-east-1"
environment  = "demo"
project_name = "ec2-fleet-demo"

# Network Configuration
use_default_vpc = true
# vpc_id = "vpc-xxxxxxxxx"  # Uncomment and specify if not using default VPC
# subnet_ids = ["subnet-xxxxxxxxx", "subnet-yyyyyyyyy"]  # Uncomment and specify if not using default VPC

# Security Configuration
allowed_cidr_blocks = ["0.0.0.0/0"]  # Restrict this to your IP range for better security
# allowed_cidr_blocks = ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"]  # Example for private networks

# Instance Configuration
instance_types = ["t3.micro", "t3.small", "t3.nano"]

# EC2 Fleet Configuration
ec2_fleet_target_capacity   = 6
ec2_fleet_on_demand_capacity = 2
ec2_fleet_spot_capacity     = 4

# Spot Fleet Configuration
spot_fleet_target_capacity = 3
spot_max_price            = "0.10"
fleet_allocation_strategy = "capacity-optimized"

# Key Pair Configuration
create_key_pair = true
key_pair_name   = ""  # Will be auto-generated if empty

# Monitoring Configuration
create_cloudwatch_dashboard = true
enable_detailed_monitoring  = false

# Instance Management
replace_unhealthy_instances  = true
enable_termination_protection = false

# Additional Security Group Rules (optional)
# additional_security_group_rules = [
#   {
#     type        = "ingress"
#     from_port   = 8080
#     to_port     = 8080
#     protocol    = "tcp"
#     cidr_blocks = ["10.0.0.0/8"]
#     description = "Custom application port"
#   }
# ]

# Custom User Data Script (optional)
# user_data_script = <<EOF
# #!/bin/bash
# # Your custom user data script here
# yum update -y
# # Add your custom configuration
# EOF

# Additional Resource Tags
resource_tags = {
  Owner       = "your-name"
  Department  = "engineering"
  CostCenter  = "12345"
  # Add more tags as needed
}