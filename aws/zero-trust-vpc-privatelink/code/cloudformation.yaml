AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Zero Trust Network Architecture with VPC Endpoints and PrivateLink
  Creates a complete zero trust networking solution with VPC endpoints,
  PrivateLink services, and comprehensive security controls.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCidr
          - ProviderVpcCidr
          - PrivateSubnet1Cidr
          - PrivateSubnet2Cidr
          - ProviderSubnetCidr
      - Label:
          default: "Security Configuration"
        Parameters:
          - EnableVpcFlowLogs
          - FlowLogsRetentionDays
          - RequireAcceptanceForEndpointService
      - Label:
          default: "Monitoring Configuration"
        Parameters:
          - CreateTestLambda
          - LambdaTimeout

Parameters:
  VpcCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: CIDR block for the consumer VPC
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block

  ProviderVpcCidr:
    Type: String
    Default: '10.1.0.0/16'
    Description: CIDR block for the provider VPC
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block

  PrivateSubnet1Cidr:
    Type: String
    Default: '10.0.1.0/24'
    Description: CIDR block for the first private subnet
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block

  PrivateSubnet2Cidr:
    Type: String
    Default: '10.0.2.0/24'
    Description: CIDR block for the second private subnet
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block

  ProviderSubnetCidr:
    Type: String
    Default: '10.1.1.0/24'
    Description: CIDR block for the provider subnet
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: Must be a valid CIDR block

  EnableVpcFlowLogs:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable VPC Flow Logs for network monitoring

  FlowLogsRetentionDays:
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: Number of days to retain VPC Flow Logs

  RequireAcceptanceForEndpointService:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Require manual acceptance for VPC endpoint service connections

  CreateTestLambda:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Create a test Lambda function for validation

  LambdaTimeout:
    Type: Number
    Default: 30
    MinValue: 3
    MaxValue: 900
    Description: Timeout for Lambda function in seconds

Conditions:
  CreateFlowLogs: !Equals [!Ref EnableVpcFlowLogs, 'true']
  AcceptanceRequired: !Equals [!Ref RequireAcceptanceForEndpointService, 'true']
  CreateLambdaFunction: !Equals [!Ref CreateTestLambda, 'true']

Resources:
  # Consumer VPC - Zero Trust Architecture
  ConsumerVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-zero-trust-vpc'
        - Key: Environment
          Value: ZeroTrust
        - Key: Purpose
          Value: Consumer

  # Provider VPC - Service Provider
  ProviderVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref ProviderVpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-provider-vpc'
        - Key: Environment
          Value: Provider
        - Key: Purpose
          Value: ServiceProvider

  # Private Subnets for Zero Trust Architecture
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ConsumerVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-subnet-1'
        - Key: Type
          Value: Private
        - Key: Purpose
          Value: ZeroTrust

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ConsumerVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-subnet-2'
        - Key: Type
          Value: Private
        - Key: Purpose
          Value: ZeroTrust

  # Provider Subnet
  ProviderSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProviderVPC
      CidrBlock: !Ref ProviderSubnetCidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-provider-subnet'
        - Key: Type
          Value: Private
        - Key: Purpose
          Value: ServiceProvider

  # Security Groups with Least Privilege Access
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-endpoint-sg'
      GroupDescription: Zero Trust VPC Endpoint Security Group - Least Privilege Access
      VpcId: !Ref ConsumerVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr
          Description: Allow HTTPS from VPC CIDR only
      SecurityGroupEgress: []  # Remove default egress rule
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-endpoint-sg'
        - Key: Purpose
          Value: VPCEndpoints

  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-app-sg'
      GroupDescription: Zero Trust Application Security Group - No Internet Access
      VpcId: !Ref ConsumerVPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          DestinationSecurityGroupId: !Ref VPCEndpointSecurityGroup
          Description: Allow HTTPS to VPC endpoints only
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-sg'
        - Key: Purpose
          Value: Applications

  ProviderServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-provider-sg'
      GroupDescription: Provider Service Security Group for PrivateLink
      VpcId: !Ref ProviderVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr
          Description: Allow HTTPS from consumer VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-provider-sg'
        - Key: Purpose
          Value: ProviderService

  # Route Tables with No Internet Access
  ZeroTrustRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ConsumerVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-zero-trust-rt'
        - Key: Purpose
          Value: ZeroTrustNetworking

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref ZeroTrustRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref ZeroTrustRouteTable

  ProviderRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ProviderVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-provider-rt'
        - Key: Purpose
          Value: ProviderNetworking

  ProviderSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ProviderSubnet
      RouteTableId: !Ref ProviderRouteTable

  # S3 Interface VPC Endpoint
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref ConsumerVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:ListBucket'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:PrincipalAccount': !Ref 'AWS::AccountId'

  # Lambda Interface VPC Endpoint
  LambdaVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref ConsumerVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.lambda'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true

  # CloudWatch Logs Interface VPC Endpoint
  CloudWatchLogsVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref ConsumerVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true

  # Network Load Balancer for PrivateLink Service
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-zero-trust-nlb'
      Type: network
      Scheme: internal
      Subnets:
        - !Ref ProviderSubnet
      SecurityGroups:
        - !Ref ProviderServiceSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-zero-trust-nlb'
        - Key: Purpose
          Value: PrivateLink

  # Target Group for NLB
  NLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-zero-trust-tg'
      Protocol: TCP
      Port: 443
      VpcId: !Ref ProviderVPC
      TargetType: ip
      HealthCheckProtocol: TCP
      HealthCheckPort: 443
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-zero-trust-tg'
        - Key: Purpose
          Value: PrivateLink

  # NLB Listener
  NLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Protocol: TCP
      Port: 443
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NLBTargetGroup

  # VPC Endpoint Service Configuration
  VPCEndpointServiceConfiguration:
    Type: AWS::EC2::VPCEndpointServiceConfiguration
    Properties:
      NetworkLoadBalancerArns:
        - !Ref NetworkLoadBalancer
      AcceptanceRequired: !If [AcceptanceRequired, true, false]
      TagSpecifications:
        - ResourceType: vpc-endpoint-service
          Tags:
            - Key: Name
              Value: !Sub '${AWS::StackName}-endpoint-service'
            - Key: Purpose
              Value: ZeroTrustPrivateLink

  # VPC Endpoint Service Permissions
  VPCEndpointServicePermissions:
    Type: AWS::EC2::VPCEndpointServicePermissions
    Properties:
      ServiceId: !Ref VPCEndpointServiceConfiguration
      AllowedPrincipals:
        - !Sub 'arn:aws:iam::${AWS::AccountId}:root'

  # Custom Service VPC Endpoint
  CustomServiceVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref ConsumerVPC
      ServiceName: !GetAtt VPCEndpointServiceConfiguration.ServiceName
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true

  # Private Hosted Zone for Service Discovery
  PrivateHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: zero-trust-service.internal
      VPCs:
        - VPCId: !Ref ConsumerVPC
          VPCRegion: !Ref 'AWS::Region'
      HostedZoneTags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-zone'
        - Key: Purpose
          Value: ServiceDiscovery

  # DNS Record for Service Discovery
  ServiceDiscoveryRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PrivateHostedZone
      Name: api.zero-trust-service.internal
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !Select [1, !Split [':', !Select [0, !GetAtt CustomServiceVPCEndpoint.DnsEntries]]]

  # VPC Flow Logs IAM Role
  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Condition: CreateFlowLogs
    Properties:
      RoleName: !Sub '${AWS::StackName}-VPCFlowLogsRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/VPCFlowLogsDeliveryRolePolicy
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPCFlowLogsRole'
        - Key: Purpose
          Value: NetworkMonitoring

  # CloudWatch Log Group for VPC Flow Logs
  VPCFlowLogsGroup:
    Type: AWS::Logs::LogGroup
    Condition: CreateFlowLogs
    Properties:
      LogGroupName: !Sub '/aws/vpc/${AWS::StackName}-zero-trust-flowlogs'
      RetentionInDays: !Ref FlowLogsRetentionDays

  # VPC Flow Logs
  VPCFlowLogs:
    Type: AWS::EC2::FlowLog
    Condition: CreateFlowLogs
    Properties:
      ResourceType: VPC
      ResourceId: !Ref ConsumerVPC
      TrafficType: ALL
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref VPCFlowLogsGroup
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogsRole.Arn
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc-flow-logs'
        - Key: Purpose
          Value: NetworkMonitoring

  # Lambda Execution Role for Test Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: CreateLambdaFunction
    Properties:
      RoleName: !Sub '${AWS::StackName}-ZeroTrustLambdaRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: S3ReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBuckets
                  - s3:GetObject
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ZeroTrustLambdaRole'
        - Key: Purpose
          Value: Testing

  # Test Lambda Function for Validation
  ZeroTrustTestFunction:
    Type: AWS::Lambda::Function
    Condition: CreateLambdaFunction
    Properties:
      FunctionName: !Sub '${AWS::StackName}-zero-trust-test'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: !Ref LambdaTimeout
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
        SecurityGroupIds:
          - !Ref ApplicationSecurityGroup
      Code:
        ZipFile: |
          import json
          import boto3
          import urllib3
          from botocore.exceptions import ClientError

          def lambda_handler(event, context):
              """Test function to validate zero trust connectivity"""
              results = {
                  'message': 'Zero Trust validation complete',
                  'timestamp': context.aws_request_id,
                  'tests': {}
              }
              
              try:
                  # Test S3 access through VPC endpoint
                  s3_client = boto3.client('s3')
                  buckets = s3_client.list_buckets()
                  results['tests']['s3_access'] = {
                      'status': 'PASS',
                      'bucket_count': len(buckets['Buckets']),
                      'message': 'S3 access through VPC endpoint successful'
                  }
              except ClientError as e:
                  results['tests']['s3_access'] = {
                      'status': 'FAIL',
                      'error': str(e),
                      'message': 'S3 access failed'
                  }
              
              # Test external HTTP request (should fail in zero trust)
              try:
                  http = urllib3.PoolManager()
                  response = http.request('GET', 'https://httpbin.org/get', timeout=5)
                  results['tests']['internet_access'] = {
                      'status': 'FAIL',
                      'message': 'Internet access should be blocked in zero trust architecture',
                      'response_status': response.status
                  }
              except Exception as e:
                  results['tests']['internet_access'] = {
                      'status': 'PASS',
                      'message': 'Internet access properly blocked',
                      'error': str(type(e).__name__)
                  }
              
              # Test VPC endpoint connectivity
              try:
                  lambda_client = boto3.client('lambda')
                  # Simple API call that doesn't require additional permissions
                  lambda_client.get_account_settings()
                  results['tests']['vpc_endpoint_connectivity'] = {
                      'status': 'PASS',
                      'message': 'Lambda VPC endpoint connectivity verified'
                  }
              except Exception as e:
                  results['tests']['vpc_endpoint_connectivity'] = {
                      'status': 'UNKNOWN',
                      'message': 'Lambda VPC endpoint test inconclusive',
                      'error': str(e)
                  }
              
              # Determine overall status
              test_results = [test['status'] for test in results['tests'].values()]
              if 'FAIL' in test_results:
                  status_code = 500
              else:
                  status_code = 200
              
              return {
                  'statusCode': status_code,
                  'body': json.dumps(results, indent=2)
              }
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-zero-trust-test'
        - Key: Purpose
          Value: Validation

Outputs:
  ConsumerVPCId:
    Description: ID of the consumer VPC
    Value: !Ref ConsumerVPC
    Export:
      Name: !Sub '${AWS::StackName}-ConsumerVPC'

  ProviderVPCId:
    Description: ID of the provider VPC
    Value: !Ref ProviderVPC
    Export:
      Name: !Sub '${AWS::StackName}-ProviderVPC'

  PrivateSubnet1Id:
    Description: ID of the first private subnet
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1'

  PrivateSubnet2Id:
    Description: ID of the second private subnet
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2'

  VPCEndpointSecurityGroupId:
    Description: ID of the VPC endpoint security group
    Value: !Ref VPCEndpointSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-EndpointSG'

  ApplicationSecurityGroupId:
    Description: ID of the application security group
    Value: !Ref ApplicationSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-AppSG'

  S3VPCEndpointId:
    Description: ID of the S3 VPC endpoint
    Value: !Ref S3VPCEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-S3Endpoint'

  LambdaVPCEndpointId:
    Description: ID of the Lambda VPC endpoint
    Value: !Ref LambdaVPCEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-LambdaEndpoint'

  CloudWatchLogsVPCEndpointId:
    Description: ID of the CloudWatch Logs VPC endpoint
    Value: !Ref CloudWatchLogsVPCEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-LogsEndpoint'

  NetworkLoadBalancerArn:
    Description: ARN of the Network Load Balancer
    Value: !Ref NetworkLoadBalancer
    Export:
      Name: !Sub '${AWS::StackName}-NLB'

  VPCEndpointServiceName:
    Description: Name of the VPC endpoint service
    Value: !GetAtt VPCEndpointServiceConfiguration.ServiceName
    Export:
      Name: !Sub '${AWS::StackName}-EndpointService'

  CustomServiceVPCEndpointId:
    Description: ID of the custom service VPC endpoint
    Value: !Ref CustomServiceVPCEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-CustomEndpoint'

  PrivateHostedZoneId:
    Description: ID of the private hosted zone
    Value: !Ref PrivateHostedZone
    Export:
      Name: !Sub '${AWS::StackName}-PrivateZone'

  ServiceDiscoveryDNS:
    Description: DNS name for service discovery
    Value: api.zero-trust-service.internal
    Export:
      Name: !Sub '${AWS::StackName}-ServiceDNS'

  VPCFlowLogsId:
    Description: ID of the VPC Flow Logs (if enabled)
    Value: !If [CreateFlowLogs, !Ref VPCFlowLogs, 'Not Created']
    Export:
      Name: !Sub '${AWS::StackName}-FlowLogs'

  TestLambdaFunctionName:
    Description: Name of the test Lambda function (if created)
    Value: !If [CreateLambdaFunction, !Ref ZeroTrustTestFunction, 'Not Created']
    Export:
      Name: !Sub '${AWS::StackName}-TestFunction'

  ZeroTrustArchitectureStatus:
    Description: Status of zero trust architecture deployment
    Value: Successfully deployed zero trust network architecture with VPC endpoints and PrivateLink
    Export:
      Name: !Sub '${AWS::StackName}-Status'

  ValidationInstructions:
    Description: Instructions for validating the zero trust architecture
    Value: !Sub |
      To validate your zero trust architecture:
      1. Invoke test Lambda: aws lambda invoke --function-name ${AWS::StackName}-zero-trust-test output.json
      2. Check VPC Flow Logs: aws logs describe-log-streams --log-group-name /aws/vpc/${AWS::StackName}-zero-trust-flowlogs
      3. Verify endpoint connectivity: aws ec2 describe-vpc-endpoints --filters Name=vpc-id,Values=${ConsumerVPC}
      4. Test DNS resolution: nslookup api.zero-trust-service.internal (from within VPC)

  SecurityRecommendations:
    Description: Additional security recommendations
    Value: |
      Additional security measures to consider:
      1. Enable AWS Config for compliance monitoring
      2. Set up CloudTrail for API logging
      3. Configure GuardDuty for threat detection
      4. Implement Network Access Analyzer for path analysis
      5. Use AWS Security Hub for centralized security findings
      6. Consider AWS WAF for application-layer protection