# Get current AWS account ID and region
data "aws_caller_identity" "current" {}
data "aws_region" "current" {}

# Generate random suffix for unique resource naming
resource "random_password" "suffix" {
  length  = 6
  special = false
  upper   = false
}

locals {
  # Use provided random suffix or generate one
  random_suffix = var.random_suffix != null ? var.random_suffix : random_password.suffix.result
  
  # Construct resource names with random suffix
  ecr_repository_name = var.ecr_repository_name != null ? var.ecr_repository_name : "vulnerable-app-${local.random_suffix}"
  sns_topic_name      = var.sns_topic_name != null ? var.sns_topic_name : "ecr-vulnerability-alerts-${local.random_suffix}"
  
  # Common tags merged with additional tags
  common_tags = merge(
    {
      Purpose     = "VulnerabilityScanning"
      Environment = var.environment
      Repository  = local.ecr_repository_name
    },
    var.additional_tags
  )
}

# Amazon ECR Repository with Enhanced Scanning
resource "aws_ecr_repository" "main" {
  name                 = local.ecr_repository_name
  image_tag_mutability = var.image_tag_mutability

  # Enable vulnerability scanning on push
  image_scanning_configuration {
    scan_on_push = var.enable_scan_on_push
  }

  # Enable encryption at rest
  encryption_configuration {
    encryption_type = "AES256"
  }

  tags = merge(local.common_tags, {
    Name = local.ecr_repository_name
  })
}

# ECR Repository Lifecycle Policy to manage image retention
resource "aws_ecr_lifecycle_policy" "main" {
  count      = var.repository_lifecycle_policy != null ? 1 : 0
  repository = aws_ecr_repository.main.name
  policy     = var.repository_lifecycle_policy
}

# Default lifecycle policy if none provided
resource "aws_ecr_lifecycle_policy" "default" {
  count      = var.repository_lifecycle_policy == null ? 1 : 0
  repository = aws_ecr_repository.main.name

  policy = jsonencode({
    rules = [
      {
        rulePriority = 1
        description  = "Keep last 10 tagged images"
        selection = {
          tagStatus     = "tagged"
          tagPrefixList = ["v"]
          countType     = "imageCountMoreThan"
          countNumber   = 10
        }
        action = {
          type = "expire"
        }
      },
      {
        rulePriority = 2
        description  = "Keep untagged images for 1 day"
        selection = {
          tagStatus   = "untagged"
          countType   = "sinceImagePushed"
          countUnit   = "days"
          countNumber = 1
        }
        action = {
          type = "expire"
        }
      }
    ]
  })
}

# Enable Amazon Inspector for ECR scanning
resource "aws_inspector2_enabler" "ecr" {
  count           = var.enable_inspector ? 1 : 0
  account_ids     = [data.aws_caller_identity.current.account_id]
  resource_types  = ["ECR"]
}

# Configure ECR registry scanning with Enhanced scanning
resource "aws_ecr_registry_scanning_configuration" "main" {
  count     = var.enable_inspector ? 1 : 0
  scan_type = "ENHANCED"

  rule {
    scan_frequency = var.enable_continuous_scanning ? "CONTINUOUS_SCAN" : "SCAN_ON_PUSH"
    repository_filter {
      filter      = "*"
      filter_type = "WILDCARD"
    }
  }

  depends_on = [aws_inspector2_enabler.ecr]
}

# Configure Inspector ECR settings
resource "aws_inspector2_configuration" "ecr" {
  count = var.enable_inspector ? 1 : 0

  ecr_configuration {
    rescan_duration = var.inspector_rescan_duration
  }

  depends_on = [aws_inspector2_enabler.ecr]
}

# SNS Topic for vulnerability notifications
resource "aws_sns_topic" "vulnerability_alerts" {
  count = var.enable_email_notifications && var.email_address != null ? 1 : 0
  name  = local.sns_topic_name

  # Enable encryption in transit
  kms_master_key_id = "alias/aws/sns"

  tags = merge(local.common_tags, {
    Name = local.sns_topic_name
  })
}

# SNS Topic Policy to allow EventBridge to publish
resource "aws_sns_topic_policy" "vulnerability_alerts" {
  count = var.enable_email_notifications && var.email_address != null ? 1 : 0
  arn   = aws_sns_topic.vulnerability_alerts[0].arn

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid    = "AllowEventBridgePublish"
        Effect = "Allow"
        Principal = {
          Service = "events.amazonaws.com"
        }
        Action   = "SNS:Publish"
        Resource = aws_sns_topic.vulnerability_alerts[0].arn
        Condition = {
          StringEquals = {
            "aws:SourceAccount" = data.aws_caller_identity.current.account_id
          }
        }
      }
    ]
  })
}

# SNS Email subscription
resource "aws_sns_topic_subscription" "email" {
  count     = var.enable_email_notifications && var.email_address != null ? 1 : 0
  topic_arn = aws_sns_topic.vulnerability_alerts[0].arn
  protocol  = "email"
  endpoint  = var.email_address
}

# CloudWatch Log Group for Inspector findings
resource "aws_cloudwatch_log_group" "inspector_findings" {
  name              = "/aws/inspector/ecr-findings"
  retention_in_days = var.cloudwatch_log_retention_days

  tags = merge(local.common_tags, {
    Name = "inspector-ecr-findings"
  })
}

# CloudWatch Alarm for Critical Vulnerabilities
resource "aws_cloudwatch_metric_alarm" "critical_vulnerabilities" {
  count = var.enable_cloudwatch_alarms ? 1 : 0

  alarm_name          = "ECR-Critical-Vulnerabilities-${local.random_suffix}"
  comparison_operator = "GreaterThanOrEqualToThreshold"
  evaluation_periods  = "1"
  metric_name         = "CriticalVulnerabilities"
  namespace           = "AWS/Inspector"
  period              = "300"
  statistic           = "Average"
  threshold           = var.critical_vulnerability_threshold
  alarm_description   = "Alert when critical vulnerabilities are found in ECR images"
  alarm_actions       = var.enable_email_notifications && var.email_address != null ? [aws_sns_topic.vulnerability_alerts[0].arn] : []

  tags = merge(local.common_tags, {
    Name     = "ECR-Critical-Vulnerabilities-${local.random_suffix}"
    Severity = "Critical"
  })
}

# CloudWatch Alarm for High Severity Vulnerabilities
resource "aws_cloudwatch_metric_alarm" "high_vulnerabilities" {
  count = var.enable_cloudwatch_alarms ? 1 : 0

  alarm_name          = "ECR-High-Vulnerabilities-${local.random_suffix}"
  comparison_operator = "GreaterThanOrEqualToThreshold"
  evaluation_periods  = "1"
  metric_name         = "HighVulnerabilities"
  namespace           = "AWS/Inspector"
  period              = "300"
  statistic           = "Average"
  threshold           = var.high_vulnerability_threshold
  alarm_description   = "Alert when high severity vulnerabilities are found in ECR images"
  alarm_actions       = var.enable_email_notifications && var.email_address != null ? [aws_sns_topic.vulnerability_alerts[0].arn] : []

  tags = merge(local.common_tags, {
    Name     = "ECR-High-Vulnerabilities-${local.random_suffix}"
    Severity = "High"
  })
}

# EventBridge Rule for Inspector ECR findings
resource "aws_cloudwatch_event_rule" "inspector_findings" {
  count = var.enable_eventbridge_notifications ? 1 : 0

  name        = "ECR-Vulnerability-Findings-${local.random_suffix}"
  description = "Capture Inspector ECR vulnerability findings"

  event_pattern = jsonencode({
    source      = ["aws.inspector2"]
    detail-type = ["Inspector2 Finding"]
    detail = {
      service = ["ECR"]
    }
  })

  tags = merge(local.common_tags, {
    Name = "ECR-Vulnerability-Findings-${local.random_suffix}"
  })
}

# EventBridge Target for SNS notifications
resource "aws_cloudwatch_event_target" "sns" {
  count = var.enable_eventbridge_notifications && var.enable_email_notifications && var.email_address != null ? 1 : 0

  rule      = aws_cloudwatch_event_rule.inspector_findings[0].name
  target_id = "SendToSNS"
  arn       = aws_sns_topic.vulnerability_alerts[0].arn

  # Transform the event for better readability
  input_transformer {
    input_paths = {
      severity    = "$.detail.severity"
      title       = "$.detail.title"
      repository  = "$.detail.packageVulnerabilityDetails.sourcePackage.name"
      finding_arn = "$.detail.findingArn"
    }
    input_template = jsonencode({
      default = <<-EOT
        ðŸš¨ VULNERABILITY ALERT ðŸš¨
        
        Severity: <severity>
        Title: <title>
        Repository: <repository>
        Finding ARN: <finding_arn>
        
        Please review and remediate this vulnerability promptly.
        EOT
    })
  }
}