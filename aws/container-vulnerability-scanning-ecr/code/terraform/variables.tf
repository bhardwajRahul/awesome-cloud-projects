# General Configuration
variable "aws_region" {
  description = "AWS region for resource deployment"
  type        = string
  default     = "us-east-1"

  validation {
    condition = can(regex("^[a-z0-9-]+$", var.aws_region))
    error_message = "AWS region must be a valid region identifier."
  }
}

variable "environment" {
  description = "Environment name (dev, staging, prod)"
  type        = string
  default     = "dev"

  validation {
    condition     = contains(["dev", "staging", "prod"], var.environment)
    error_message = "Environment must be one of: dev, staging, prod."
  }
}

# ECR Configuration
variable "ecr_repository_name" {
  description = "Name of the ECR repository to create"
  type        = string
  default     = null

  validation {
    condition = var.ecr_repository_name == null ? true : can(regex("^[a-z0-9]+(?:[._-][a-z0-9]+)*$", var.ecr_repository_name))
    error_message = "ECR repository name must follow AWS naming conventions (lowercase, numbers, hyphens, underscores, periods)."
  }
}

variable "enable_scan_on_push" {
  description = "Enable vulnerability scanning on image push"
  type        = bool
  default     = true
}

variable "image_tag_mutability" {
  description = "Image tag mutability setting for the repository"
  type        = string
  default     = "MUTABLE"

  validation {
    condition     = contains(["MUTABLE", "IMMUTABLE"], var.image_tag_mutability)
    error_message = "Image tag mutability must be either MUTABLE or IMMUTABLE."
  }
}

variable "repository_lifecycle_policy" {
  description = "JSON policy document for repository lifecycle management"
  type        = string
  default     = null
}

# Inspector Configuration
variable "enable_inspector" {
  description = "Enable Amazon Inspector for ECR scanning"
  type        = bool
  default     = true
}

variable "inspector_rescan_duration" {
  description = "Inspector rescan duration for ECR repositories"
  type        = string
  default     = "DAYS_30"

  validation {
    condition     = contains(["DAYS_14", "DAYS_30", "DAYS_60", "DAYS_90", "DAYS_180"], var.inspector_rescan_duration)
    error_message = "Inspector rescan duration must be one of: DAYS_14, DAYS_30, DAYS_60, DAYS_90, DAYS_180."
  }
}

variable "enable_continuous_scanning" {
  description = "Enable continuous scanning for all repositories"
  type        = bool
  default     = true
}

# Notification Configuration
variable "email_address" {
  description = "Email address for vulnerability notifications"
  type        = string
  default     = null

  validation {
    condition = var.email_address == null ? true : can(regex("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$", var.email_address))
    error_message = "Email address must be a valid email format."
  }
}

variable "enable_email_notifications" {
  description = "Enable email notifications for vulnerability findings"
  type        = bool
  default     = false
}

variable "sns_topic_name" {
  description = "Name of the SNS topic for vulnerability alerts"
  type        = string
  default     = null
}

# CloudWatch Configuration
variable "cloudwatch_log_retention_days" {
  description = "Number of days to retain CloudWatch logs"
  type        = number
  default     = 30

  validation {
    condition = contains([
      1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653
    ], var.cloudwatch_log_retention_days)
    error_message = "CloudWatch log retention days must be a valid retention period."
  }
}

variable "enable_cloudwatch_alarms" {
  description = "Enable CloudWatch alarms for vulnerability findings"
  type        = bool
  default     = true
}

variable "critical_vulnerability_threshold" {
  description = "Threshold for critical vulnerability CloudWatch alarm"
  type        = number
  default     = 1

  validation {
    condition     = var.critical_vulnerability_threshold >= 1
    error_message = "Critical vulnerability threshold must be at least 1."
  }
}

variable "high_vulnerability_threshold" {
  description = "Threshold for high severity vulnerability CloudWatch alarm"
  type        = number
  default     = 5

  validation {
    condition     = var.high_vulnerability_threshold >= 1
    error_message = "High vulnerability threshold must be at least 1."
  }
}

# EventBridge Configuration
variable "enable_eventbridge_notifications" {
  description = "Enable EventBridge notifications for Inspector findings"
  type        = bool
  default     = true
}

# Resource Naming Configuration
variable "random_suffix" {
  description = "Random suffix for resource naming (leave null to auto-generate)"
  type        = string
  default     = null

  validation {
    condition = var.random_suffix == null ? true : can(regex("^[a-z0-9]{6}$", var.random_suffix))
    error_message = "Random suffix must be exactly 6 lowercase alphanumeric characters."
  }
}

# Additional Tags
variable "additional_tags" {
  description = "Additional tags to apply to all resources"
  type        = map(string)
  default     = {}

  validation {
    condition = alltrue([
      for k, v in var.additional_tags : can(regex("^[a-zA-Z0-9\\s\\._:/=+\\-@]{1,127}$", k))
    ])
    error_message = "Tag keys must be between 1 and 127 characters and contain only allowed characters."
  }

  validation {
    condition = alltrue([
      for k, v in var.additional_tags : can(regex("^[a-zA-Z0-9\\s\\._:/=+\\-@]{0,255}$", v))
    ])
    error_message = "Tag values must be between 0 and 255 characters and contain only allowed characters."
  }
}