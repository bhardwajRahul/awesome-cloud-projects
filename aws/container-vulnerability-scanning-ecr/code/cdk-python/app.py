#!/usr/bin/env python3
"""
AWS CDK Python Application for Container Image Vulnerability Scanning
This application deploys ECR repositories with enhanced scanning, Amazon Inspector
integration, CloudWatch alarms, and EventBridge rules for automated vulnerability
detection and alerting.
"""

import aws_cdk as cdk
from aws_cdk import (
    Stack,
    CfnOutput,
    RemovalPolicy,
    Duration,
    aws_ecr as ecr,
    aws_inspector2 as inspector2,
    aws_sns as sns,
    aws_cloudwatch as cloudwatch,
    aws_events as events,
    aws_events_targets as targets,
    aws_logs as logs,
    aws_iam as iam,
)
from constructs import Construct
import os


class ContainerVulnerabilityScanningStack(Stack):
    """
    Stack for implementing container image vulnerability scanning using
    Amazon ECR enhanced scanning with Inspector integration.
    """

    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)

        # Parameters from environment variables or defaults
        self.notification_email = self.node.try_get_context("notification_email") or "admin@example.com"
        self.repository_name = self.node.try_get_context("repository_name") or "vulnerability-scan-demo"
        
        # Create ECR repository with enhanced scanning
        self.ecr_repository = self._create_ecr_repository()
        
        # Create SNS topic for vulnerability alerts
        self.sns_topic = self._create_sns_topic()
        
        # Create CloudWatch log group for Inspector findings
        self.log_group = self._create_log_group()
        
        # Create CloudWatch alarm for critical vulnerabilities
        self.critical_vulnerability_alarm = self._create_cloudwatch_alarm()
        
        # Create EventBridge rule for vulnerability findings
        self.eventbridge_rule = self._create_eventbridge_rule()
        
        # Create IAM role for Inspector enhanced scanning
        self.inspector_service_role = self._create_inspector_service_role()
        
        # Enable Inspector enhanced scanning (custom resource)
        self.inspector_configuration = self._create_inspector_configuration()
        
        # Create outputs
        self._create_outputs()

    def _create_ecr_repository(self) -> ecr.Repository:
        """
        Create ECR repository with enhanced scanning enabled.
        
        Returns:
            ecr.Repository: The created ECR repository
        """
        repository = ecr.Repository(
            self,
            "VulnerabilityRepository",
            repository_name=self.repository_name,
            image_scan_on_push=True,
            image_tag_mutability=ecr.TagMutability.MUTABLE,
            encryption=ecr.RepositoryEncryption.AES_256,
            removal_policy=RemovalPolicy.DESTROY,
            lifecycle_rules=[
                ecr.LifecycleRule(
                    description="Remove untagged images after 1 day",
                    max_image_count=10,
                    rule_priority=1,
                    tag_status=ecr.TagStatus.UNTAGGED
                ),
                ecr.LifecycleRule(
                    description="Keep only 5 most recent tagged images",
                    max_image_count=5,
                    rule_priority=2,
                    tag_status=ecr.TagStatus.TAGGED
                )
            ]
        )
        
        # Add tags for resource management
        cdk.Tags.of(repository).add("Purpose", "VulnerabilityScanning")
        cdk.Tags.of(repository).add("Environment", "Demo")
        cdk.Tags.of(repository).add("ManagedBy", "CDK")
        
        return repository

    def _create_sns_topic(self) -> sns.Topic:
        """
        Create SNS topic for vulnerability alert notifications.
        
        Returns:
            sns.Topic: The created SNS topic
        """
        topic = sns.Topic(
            self,
            "VulnerabilityAlertsTopic",
            topic_name="ecr-vulnerability-alerts",
            display_name="ECR Vulnerability Alerts",
            fifo=False
        )
        
        # Create email subscription
        topic.add_subscription(
            sns.EmailSubscription(self.notification_email)
        )
        
        # Add policy to allow EventBridge to publish
        topic.add_to_resource_policy(
            iam.PolicyStatement(
                effect=iam.Effect.ALLOW,
                principals=[iam.ServicePrincipal("events.amazonaws.com")],
                actions=["sns:Publish"],
                resources=[topic.topic_arn]
            )
        )
        
        return topic

    def _create_log_group(self) -> logs.LogGroup:
        """
        Create CloudWatch log group for Inspector findings.
        
        Returns:
            logs.LogGroup: The created log group
        """
        log_group = logs.LogGroup(
            self,
            "InspectorFindingsLogGroup",
            log_group_name="/aws/inspector/ecr-findings",
            retention=logs.RetentionDays.ONE_MONTH,
            removal_policy=RemovalPolicy.DESTROY
        )
        
        return log_group

    def _create_cloudwatch_alarm(self) -> cloudwatch.Alarm:
        """
        Create CloudWatch alarm for critical vulnerability detection.
        
        Returns:
            cloudwatch.Alarm: The created CloudWatch alarm
        """
        # Create custom metric for critical vulnerabilities
        critical_vulnerability_metric = cloudwatch.Metric(
            metric_name="CriticalVulnerabilities",
            namespace="AWS/Inspector",
            statistic="Average",
            period=Duration.minutes(5)
        )
        
        alarm = cloudwatch.Alarm(
            self,
            "CriticalVulnerabilityAlarm",
            alarm_name="ECR-Critical-Vulnerabilities",
            alarm_description="Alert when critical vulnerabilities are detected in ECR images",
            metric=critical_vulnerability_metric,
            threshold=1,
            comparison_operator=cloudwatch.ComparisonOperator.GREATER_THAN_OR_EQUAL_TO_THRESHOLD,
            evaluation_periods=1,
            datapoints_to_alarm=1,
            treat_missing_data=cloudwatch.TreatMissingData.NOT_BREACHING
        )
        
        # Add SNS action
        alarm.add_alarm_action(
            cloudwatch.SnsAction(self.sns_topic)
        )
        
        return alarm

    def _create_eventbridge_rule(self) -> events.Rule:
        """
        Create EventBridge rule to capture Inspector vulnerability findings.
        
        Returns:
            events.Rule: The created EventBridge rule
        """
        rule = events.Rule(
            self,
            "VulnerabilityFindingsRule",
            rule_name="ECR-Vulnerability-Findings",
            description="Capture Inspector ECR vulnerability findings",
            event_pattern=events.EventPattern(
                source=["aws.inspector2"],
                detail_type=["Inspector2 Finding"],
                detail={
                    "service": ["ECR"]
                }
            )
        )
        
        # Add SNS target
        rule.add_target(
            targets.SnsTopic(self.sns_topic)
        )
        
        # Add CloudWatch Logs target for debugging
        rule.add_target(
            targets.CloudWatchLogGroup(self.log_group)
        )
        
        return rule

    def _create_inspector_service_role(self) -> iam.Role:
        """
        Create IAM service role for Inspector enhanced scanning.
        
        Returns:
            iam.Role: The created IAM role
        """
        role = iam.Role(
            self,
            "InspectorServiceRole",
            role_name="Inspector-ECR-Service-Role",
            assumed_by=iam.ServicePrincipal("inspector2.amazonaws.com"),
            managed_policies=[
                iam.ManagedPolicy.from_aws_managed_policy_name("AmazonInspector2ServiceRolePolicy")
            ],
            inline_policies={
                "ECRAccess": iam.PolicyDocument(
                    statements=[
                        iam.PolicyStatement(
                            effect=iam.Effect.ALLOW,
                            actions=[
                                "ecr:GetAuthorizationToken",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:BatchGetImage",
                                "ecr:DescribeImages",
                                "ecr:DescribeRepositories",
                                "ecr:ListImages",
                                "ecr:DescribeImageScanFindings"
                            ],
                            resources=["*"]
                        )
                    ]
                )
            }
        )
        
        return role

    def _create_inspector_configuration(self) -> cdk.CustomResource:
        """
        Create custom resource to enable Inspector enhanced scanning.
        
        Returns:
            cdk.CustomResource: The custom resource for Inspector configuration
        """
        # Lambda execution role for custom resource
        lambda_role = iam.Role(
            self,
            "InspectorConfigLambdaRole",
            assumed_by=iam.ServicePrincipal("lambda.amazonaws.com"),
            managed_policies=[
                iam.ManagedPolicy.from_aws_managed_policy_name("service-role/AWSLambdaBasicExecutionRole")
            ],
            inline_policies={
                "InspectorConfig": iam.PolicyDocument(
                    statements=[
                        iam.PolicyStatement(
                            effect=iam.Effect.ALLOW,
                            actions=[
                                "inspector2:Enable",
                                "inspector2:Disable",
                                "inspector2:GetConfiguration",
                                "inspector2:UpdateConfiguration",
                                "ecr:PutRegistryScanningConfiguration",
                                "ecr:GetRegistryScanningConfiguration"
                            ],
                            resources=["*"]
                        )
                    ]
                )
            }
        )
        
        # Lambda function code for Inspector configuration
        lambda_code = """
import boto3
import json
import cfnresponse

def lambda_handler(event, context):
    try:
        inspector_client = boto3.client('inspector2')
        ecr_client = boto3.client('ecr')
        
        if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
            # Enable Inspector for ECR
            account_id = context.invoked_function_arn.split(':')[4]
            
            inspector_client.enable(
                resourceTypes=['ECR'],
                accountIds=[account_id]
            )
            
            # Configure ECR registry scanning
            ecr_client.put_registry_scanning_configuration(
                scanType='ENHANCED',
                rules=[
                    {
                        'scanFrequency': 'CONTINUOUS_SCAN',
                        'repositoryFilters': [
                            {
                                'filter': '*',
                                'filterType': 'WILDCARD'
                            }
                        ]
                    }
                ]
            )
            
            # Update Inspector configuration
            inspector_client.update_configuration(
                ecrConfiguration={
                    'rescanDuration': 'DAYS_30'
                }
            )
            
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            
        elif event['RequestType'] == 'Delete':
            # Disable Inspector for ECR
            account_id = context.invoked_function_arn.split(':')[4]
            
            try:
                inspector_client.disable(
                    resourceTypes=['ECR'],
                    accountIds=[account_id]
                )
            except Exception as e:
                print(f"Error disabling Inspector: {e}")
            
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            
    except Exception as e:
        print(f"Error: {e}")
        cfnresponse.send(event, context, cfnresponse.FAILED, {})
"""
        
        # Create Lambda function
        lambda_function = cdk.aws_lambda.Function(
            self,
            "InspectorConfigFunction",
            runtime=cdk.aws_lambda.Runtime.PYTHON_3_9,
            handler="index.lambda_handler",
            code=cdk.aws_lambda.Code.from_inline(lambda_code),
            role=lambda_role,
            timeout=Duration.minutes(5)
        )
        
        # Create custom resource
        custom_resource = cdk.CustomResource(
            self,
            "InspectorConfiguration",
            service_token=lambda_function.function_arn,
            properties={
                "RepositoryName": self.ecr_repository.repository_name
            }
        )
        
        # Ensure custom resource depends on ECR repository
        custom_resource.node.add_dependency(self.ecr_repository)
        
        return custom_resource

    def _create_outputs(self) -> None:
        """Create CloudFormation outputs for important resources."""
        CfnOutput(
            self,
            "ECRRepositoryName",
            description="Name of the ECR repository",
            value=self.ecr_repository.repository_name
        )
        
        CfnOutput(
            self,
            "ECRRepositoryURI",
            description="URI of the ECR repository",
            value=self.ecr_repository.repository_uri
        )
        
        CfnOutput(
            self,
            "SNSTopicArn",
            description="ARN of the SNS topic for vulnerability alerts",
            value=self.sns_topic.topic_arn
        )
        
        CfnOutput(
            self,
            "CloudWatchAlarmName",
            description="Name of the CloudWatch alarm for critical vulnerabilities",
            value=self.critical_vulnerability_alarm.alarm_name
        )
        
        CfnOutput(
            self,
            "EventBridgeRuleName",
            description="Name of the EventBridge rule for vulnerability findings",
            value=self.eventbridge_rule.rule_name
        )
        
        CfnOutput(
            self,
            "LogGroupName",
            description="Name of the CloudWatch log group for Inspector findings",
            value=self.log_group.log_group_name
        )


app = cdk.App()

# Create the main stack
ContainerVulnerabilityScanningStack(
    app,
    "ContainerVulnerabilityScanningStack",
    description="Container Image Vulnerability Scanning with ECR and Inspector",
    env=cdk.Environment(
        account=os.getenv('CDK_DEFAULT_ACCOUNT'),
        region=os.getenv('CDK_DEFAULT_REGION')
    )
)

app.synth()