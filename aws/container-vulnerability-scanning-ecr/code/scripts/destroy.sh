#!/bin/bash

# Container Image Vulnerability Scanning with ECR and Inspector - Destroy Script
# This script safely removes all infrastructure created by the deploy script

set -e  # Exit on any error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
check_command() {
    if ! command -v "$1" &> /dev/null; then
        error "$1 is required but not installed"
        exit 1
    fi
}

# Function to check AWS CLI authentication
check_aws_auth() {
    if ! aws sts get-caller-identity &> /dev/null; then
        error "AWS CLI is not configured or credentials are invalid"
        exit 1
    fi
}

# Function to safely delete resource
safe_delete() {
    local resource_type="$1"
    local command="$2"
    local resource_name="$3"
    
    log "Deleting $resource_type: $resource_name"
    
    if eval "$command" &> /dev/null; then
        success "$resource_type deleted successfully"
    else
        warning "Failed to delete $resource_type (may not exist or already deleted)"
    fi
}

# Function to wait for resource deletion
wait_for_deletion() {
    local resource_type="$1"
    local check_command="$2"
    local max_attempts=30
    local attempt=1
    
    log "Waiting for $resource_type deletion to complete..."
    while [ $attempt -le $max_attempts ]; do
        if ! eval "$check_command" &> /dev/null; then
            success "$resource_type deletion completed"
            return 0
        fi
        sleep 5
        echo -n "."
        attempt=$((attempt + 1))
    done
    echo ""
    warning "$resource_type deletion may still be in progress"
}

# Function to confirm deletion
confirm_deletion() {
    if [ "$FORCE_DELETE" = "true" ] || [ "$1" = "--force" ]; then
        return 0
    fi
    
    echo -e "${YELLOW}WARNING: This will delete all resources created by the ECR vulnerability scanning setup.${NC}"
    echo "This action cannot be undone!"
    echo ""
    read -p "Are you sure you want to continue? (y/N): " -n 1 -r
    echo ""
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log "Deletion cancelled by user"
        exit 0
    fi
}

# Parse command line arguments
FORCE_DELETE="false"
if [ "$1" = "--force" ]; then
    FORCE_DELETE="true"
fi

# Banner
echo -e "${RED}"
cat << 'EOF'
╔═══════════════════════════════════════════════════════════╗
║               ECR Vulnerability Scanning Cleanup         ║
║                 DESTRUCTIVE OPERATION                     ║
╚═══════════════════════════════════════════════════════════╝
EOF
echo -e "${NC}"

# Check prerequisites
log "Checking prerequisites..."

check_command "aws"
check_aws_auth

success "Prerequisites met"

# Load deployment information if available
if [ -f ".deployment_info" ]; then
    log "Loading deployment information..."
    source .deployment_info
    success "Deployment information loaded"
else
    warning "No deployment information found. Will attempt to find resources manually."
    
    # Try to get current AWS account info
    export AWS_REGION=$(aws configure get region)
    export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
    
    # Prompt for resource names if not available
    if [ -z "$ECR_REPOSITORY_NAME" ]; then
        read -p "Enter ECR repository name to delete (or press Enter to skip): " ECR_REPOSITORY_NAME
    fi
    
    if [ -z "$SNS_TOPIC_NAME" ]; then
        read -p "Enter SNS topic name to delete (or press Enter to skip): " SNS_TOPIC_NAME
    fi
    
    if [ -z "$RANDOM_SUFFIX" ]; then
        read -p "Enter resource suffix used during deployment (or press Enter to skip): " RANDOM_SUFFIX
    fi
fi

# Confirm deletion
confirm_deletion "$1"

log "Starting cleanup process..."

# 1. Delete container images first
if [ -n "$ECR_REPOSITORY_NAME" ]; then
    log "Deleting container images from ECR repository..."
    
    # Get all image tags
    IMAGE_TAGS=$(aws ecr describe-images \
        --repository-name "$ECR_REPOSITORY_NAME" \
        --query 'imageDetails[].imageTags[]' \
        --output text 2>/dev/null || echo "")
    
    if [ -n "$IMAGE_TAGS" ]; then
        for tag in $IMAGE_TAGS; do
            safe_delete "Container image" \
                "aws ecr batch-delete-image \
                    --repository-name '$ECR_REPOSITORY_NAME' \
                    --image-ids imageTag='$tag'" \
                "$tag"
        done
    else
        warning "No container images found in repository"
    fi
fi

# 2. Remove EventBridge rule targets and rules
if [ -n "$RANDOM_SUFFIX" ]; then
    EVENTBRIDGE_RULE_NAME="ECR-Vulnerability-Findings-${RANDOM_SUFFIX}"
    
    log "Cleaning up EventBridge resources..."
    
    # Remove targets first
    safe_delete "EventBridge rule targets" \
        "aws events remove-targets \
            --rule '$EVENTBRIDGE_RULE_NAME' \
            --ids '1'" \
        "$EVENTBRIDGE_RULE_NAME"
    
    # Delete the rule
    safe_delete "EventBridge rule" \
        "aws events delete-rule \
            --name '$EVENTBRIDGE_RULE_NAME'" \
        "$EVENTBRIDGE_RULE_NAME"
fi

# 3. Delete CloudWatch alarm
if [ -n "$RANDOM_SUFFIX" ]; then
    ALARM_NAME="ECR-Critical-Vulnerabilities-${RANDOM_SUFFIX}"
    
    safe_delete "CloudWatch alarm" \
        "aws cloudwatch delete-alarms \
            --alarm-names '$ALARM_NAME'" \
        "$ALARM_NAME"
fi

# 4. Delete CloudWatch log group
safe_delete "CloudWatch log group" \
    "aws logs delete-log-group \
        --log-group-name '/aws/inspector/ecr-findings'" \
    "/aws/inspector/ecr-findings"

# 5. Delete SNS topic and subscriptions
if [ -n "$SNS_TOPIC_NAME" ] && [ -n "$AWS_REGION" ] && [ -n "$AWS_ACCOUNT_ID" ]; then
    SNS_TOPIC_ARN="arn:aws:sns:${AWS_REGION}:${AWS_ACCOUNT_ID}:${SNS_TOPIC_NAME}"
    
    # List and delete all subscriptions
    log "Deleting SNS subscriptions..."
    SUBSCRIPTIONS=$(aws sns list-subscriptions-by-topic \
        --topic-arn "$SNS_TOPIC_ARN" \
        --query 'Subscriptions[].SubscriptionArn' \
        --output text 2>/dev/null || echo "")
    
    if [ -n "$SUBSCRIPTIONS" ]; then
        for sub_arn in $SUBSCRIPTIONS; do
            if [ "$sub_arn" != "PendingConfirmation" ] && [ "$sub_arn" != "None" ]; then
                safe_delete "SNS subscription" \
                    "aws sns unsubscribe --subscription-arn '$sub_arn'" \
                    "$sub_arn"
            fi
        done
    fi
    
    # Delete the topic
    safe_delete "SNS topic" \
        "aws sns delete-topic --topic-arn '$SNS_TOPIC_ARN'" \
        "$SNS_TOPIC_NAME"
fi

# 6. Delete ECR repository
if [ -n "$ECR_REPOSITORY_NAME" ]; then
    safe_delete "ECR repository" \
        "aws ecr delete-repository \
            --repository-name '$ECR_REPOSITORY_NAME' \
            --force" \
        "$ECR_REPOSITORY_NAME"
fi

# 7. Reset registry scanning configuration (optional)
log "Checking if registry scanning should be reset..."
read -p "Reset ECR registry scanning to basic mode? (y/N): " -n 1 -r
echo ""

if [[ $REPLY =~ ^[Yy]$ ]]; then
    log "Resetting registry scanning configuration..."
    aws ecr put-registry-scanning-configuration \
        --scan-type BASIC \
        --rules '[]' > /dev/null || warning "Failed to reset scanning configuration"
    success "Registry scanning reset to basic mode"
else
    warning "Registry scanning configuration left unchanged"
fi

# 8. Optionally disable Inspector (with warning)
log "Checking if Inspector should be disabled..."
echo -e "${YELLOW}WARNING: Disabling Inspector will affect ALL ECR repositories in this account.${NC}"
read -p "Disable Inspector ECR scanning for the entire account? (y/N): " -n 1 -r
echo ""

if [[ $REPLY =~ ^[Yy]$ ]]; then
    log "Disabling Inspector ECR scanning..."
    safe_delete "Inspector ECR scanning" \
        "aws inspector2 disable \
            --resource-types ECR \
            --account-ids '$AWS_ACCOUNT_ID'" \
        "account-wide"
else
    warning "Inspector ECR scanning left enabled"
fi

# 9. Clean up local files
log "Cleaning up local files..."

if [ -f ".deployment_info" ]; then
    rm -f .deployment_info
    success "Deployment info file removed"
fi

# Clean up any local Docker images
log "Cleaning up local Docker images (if any)..."
if [ -n "$ECR_REPOSITORY_NAME" ] && command -v docker &> /dev/null; then
    # Get repository URI pattern for cleanup
    if [ -n "$AWS_ACCOUNT_ID" ] && [ -n "$AWS_REGION" ]; then
        REPO_URI_PATTERN="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}"
        
        # Remove local images
        docker images --format "table {{.Repository}}:{{.Tag}}" | \
            grep "$REPO_URI_PATTERN" | \
            awk '{print $1}' | \
            xargs -r docker rmi -f 2>/dev/null || warning "No local Docker images to clean up"
    fi
fi

# Display cleanup summary
echo ""
echo -e "${GREEN}╔═══════════════════════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║                    CLEANUP COMPLETED                     ║${NC}"
echo -e "${GREEN}╚═══════════════════════════════════════════════════════════╝${NC}"
echo ""
echo "Resources cleaned up:"
echo "  ✅ Container images deleted"
echo "  ✅ ECR repository removed"
echo "  ✅ EventBridge rules deleted"
echo "  ✅ CloudWatch alarms removed"
echo "  ✅ CloudWatch log groups deleted"
echo "  ✅ SNS topics and subscriptions removed"
echo "  ✅ Local files cleaned up"
echo ""

if [ -f ".deployment_info" ]; then
    warning "Some resources may still exist. Check AWS console for any remaining resources."
else
    success "All tracked resources have been cleaned up successfully!"
fi

echo ""
log "Cleanup process completed"