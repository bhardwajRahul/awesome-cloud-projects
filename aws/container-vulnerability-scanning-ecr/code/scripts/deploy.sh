#!/bin/bash

# Container Image Vulnerability Scanning with ECR and Inspector - Deploy Script
# This script deploys the complete vulnerability scanning infrastructure

set -e  # Exit on any error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
check_command() {
    if ! command -v "$1" &> /dev/null; then
        error "$1 is required but not installed"
        exit 1
    fi
}

# Function to check AWS CLI authentication
check_aws_auth() {
    if ! aws sts get-caller-identity &> /dev/null; then
        error "AWS CLI is not configured or credentials are invalid"
        exit 1
    fi
}

# Function to wait for resource creation
wait_for_resource() {
    local resource_type="$1"
    local max_attempts=30
    local attempt=1
    
    log "Waiting for $resource_type to be ready..."
    while [ $attempt -le $max_attempts ]; do
        sleep 10
        echo -n "."
        attempt=$((attempt + 1))
    done
    echo ""
    success "$resource_type should be ready"
}

# Function to validate email format
validate_email() {
    local email="$1"
    if [[ ! "$email" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]; then
        error "Invalid email format: $email"
        exit 1
    fi
}

# Function to cleanup on error
cleanup_on_error() {
    error "Deployment failed. Starting cleanup..."
    ./destroy.sh --force 2>/dev/null || true
    exit 1
}

# Set trap for cleanup on error
trap cleanup_on_error ERR

# Banner
echo -e "${BLUE}"
cat << 'EOF'
╔═══════════════════════════════════════════════════════════╗
║               ECR Vulnerability Scanning Setup           ║
║              with Amazon Inspector Integration            ║
╚═══════════════════════════════════════════════════════════╝
EOF
echo -e "${NC}"

# Check prerequisites
log "Checking prerequisites..."

check_command "aws"
check_command "docker"
check_command "jq"

check_aws_auth

success "All prerequisites met"

# Get configuration parameters
log "Setting up configuration..."

# Check if email is provided as environment variable or parameter
if [ -z "$EMAIL_ADDRESS" ]; then
    if [ -n "$1" ]; then
        EMAIL_ADDRESS="$1"
    else
        read -p "Enter email address for vulnerability alerts: " EMAIL_ADDRESS
    fi
fi

validate_email "$EMAIL_ADDRESS"

# Set environment variables
export AWS_REGION=$(aws configure get region)
if [ -z "$AWS_REGION" ]; then
    export AWS_REGION="us-east-1"
    warning "No default region set, using us-east-1"
fi

export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

# Generate unique identifiers for resources
log "Generating unique resource identifiers..."

RANDOM_SUFFIX=$(aws secretsmanager get-random-password \
    --exclude-punctuation --exclude-uppercase \
    --password-length 6 --require-each-included-type \
    --output text --query RandomPassword 2>/dev/null || openssl rand -hex 3)

# Set resource names
export ECR_REPOSITORY_NAME="vulnerable-app-${RANDOM_SUFFIX}"
export SNS_TOPIC_NAME="ecr-vulnerability-alerts-${RANDOM_SUFFIX}"

log "Configuration:"
echo "  AWS Region: $AWS_REGION"
echo "  AWS Account: $AWS_ACCOUNT_ID"
echo "  ECR Repository: $ECR_REPOSITORY_NAME"
echo "  SNS Topic: $SNS_TOPIC_NAME"
echo "  Email: $EMAIL_ADDRESS"

# Create SNS topic for vulnerability alerts
log "Creating SNS topic for vulnerability alerts..."

aws sns create-topic --name "${SNS_TOPIC_NAME}" > /dev/null

# Store topic ARN
export SNS_TOPIC_ARN=$(aws sns get-topic-attributes \
    --topic-arn "arn:aws:sns:${AWS_REGION}:${AWS_ACCOUNT_ID}:${SNS_TOPIC_NAME}" \
    --query Attributes.TopicArn --output text)

success "SNS topic created: ${SNS_TOPIC_NAME}"

# Create ECR repository with enhanced scanning
log "Creating ECR repository with enhanced scanning..."

aws ecr create-repository \
    --repository-name "${ECR_REPOSITORY_NAME}" \
    --image-scanning-configuration scanOnPush=true \
    --tags Key=Purpose,Value=VulnerabilityScanning Key=Environment,Value=Demo > /dev/null

# Store repository URI
export ECR_REPOSITORY_URI=$(aws ecr describe-repositories \
    --repository-names "${ECR_REPOSITORY_NAME}" \
    --query 'repositories[0].repositoryUri' --output text)

success "ECR repository created: ${ECR_REPOSITORY_URI}"

# Enable Amazon Inspector Enhanced Scanning
log "Enabling Amazon Inspector Enhanced Scanning..."

# Check if Inspector is already enabled
INSPECTOR_STATUS=$(aws inspector2 get-configuration \
    --query 'ecrConfiguration.rescanDurationState.status' \
    --output text 2>/dev/null || echo "NOT_ENABLED")

if [ "$INSPECTOR_STATUS" != "SUCCESS" ]; then
    aws inspector2 enable \
        --resource-types ECR \
        --account-ids "${AWS_ACCOUNT_ID}" > /dev/null
    
    success "Inspector enabled for ECR scanning"
else
    warning "Inspector ECR scanning already enabled"
fi

# Configure registry scanning configuration
log "Configuring registry scanning settings..."

aws ecr put-registry-scanning-configuration \
    --scan-type ENHANCED \
    --rules '[{
        "scanFrequency": "CONTINUOUS_SCAN",
        "repositoryFilters": [{
            "filter": "*",
            "filterType": "WILDCARD"
        }]
    }]' > /dev/null

success "Registry scanning configuration updated"

# Set ECR re-scan duration
log "Configuring Inspector scan settings..."

aws inspector2 update-configuration \
    --ecr-configuration '{
        "rescanDuration": "DAYS_30"
    }' > /dev/null

success "Inspector scanning configuration updated"

# Create sample vulnerable container image
log "Creating sample vulnerable container image..."

# Create temporary directory for Docker build
BUILD_DIR=$(mktemp -d)
cd "$BUILD_DIR"

# Create Dockerfile with intentionally vulnerable packages
cat > Dockerfile << 'EOF'
FROM ubuntu:20.04
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    apache2 \
    php7.4 \
    libssl1.1 \
    openssl \
    && rm -rf /var/lib/apt/lists/*
EXPOSE 80
CMD ["apache2ctl", "-D", "FOREGROUND"]
EOF

# Build the container image
log "Building vulnerable container image..."
docker build -t "${ECR_REPOSITORY_URI}:vulnerable-v1.0" . > /dev/null

success "Sample vulnerable container image built"

# Authenticate and push image to ECR
log "Authenticating with ECR and pushing image..."

aws ecr get-login-password --region "${AWS_REGION}" | \
    docker login --username AWS --password-stdin \
    "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com" > /dev/null

docker push "${ECR_REPOSITORY_URI}:vulnerable-v1.0" > /dev/null

success "Container image pushed to ECR"

# Create CloudWatch log group
log "Creating CloudWatch log group..."

aws logs create-log-group \
    --log-group-name "/aws/inspector/ecr-findings" \
    --retention-in-days 30 > /dev/null || warning "Log group may already exist"

# Create CloudWatch alarm for critical vulnerabilities
log "Creating CloudWatch alarm for critical vulnerabilities..."

aws cloudwatch put-metric-alarm \
    --alarm-name "ECR-Critical-Vulnerabilities-${RANDOM_SUFFIX}" \
    --alarm-description "Alert on critical vulnerabilities in ECR images" \
    --metric-name "CriticalVulnerabilities" \
    --namespace "AWS/Inspector" \
    --statistic Average \
    --period 300 \
    --threshold 1 \
    --comparison-operator GreaterThanOrEqualToThreshold \
    --evaluation-periods 1 \
    --alarm-actions "${SNS_TOPIC_ARN}" > /dev/null

success "CloudWatch alarm created"

# Create EventBridge rule for Inspector findings
log "Creating EventBridge rule for vulnerability notifications..."

aws events put-rule \
    --name "ECR-Vulnerability-Findings-${RANDOM_SUFFIX}" \
    --description "Capture Inspector ECR vulnerability findings" \
    --event-pattern '{
        "source": ["aws.inspector2"],
        "detail-type": ["Inspector2 Finding"],
        "detail": {
            "service": ["ECR"]
        }
    }' > /dev/null

# Add SNS target to the rule
aws events put-targets \
    --rule "ECR-Vulnerability-Findings-${RANDOM_SUFFIX}" \
    --targets "Id=1,Arn=${SNS_TOPIC_ARN}" > /dev/null

# Grant EventBridge permission to publish to SNS
aws sns add-permission \
    --topic-arn "${SNS_TOPIC_ARN}" \
    --label "EventBridge-Publish" \
    --aws-account-id "${AWS_ACCOUNT_ID}" \
    --action-name "Publish" > /dev/null

success "EventBridge rule configured"

# Configure SNS email subscription
log "Setting up email subscription..."

aws sns subscribe \
    --topic-arn "${SNS_TOPIC_ARN}" \
    --protocol email \
    --notification-endpoint "${EMAIL_ADDRESS}" > /dev/null

success "Email subscription created (please check your email for confirmation)"

# Create enhanced container image with fewer vulnerabilities
log "Creating secure container image..."

cat > Dockerfile.secure << 'EOF'
FROM ubuntu:22.04
RUN apt-get update && apt-get install -y \
    curl \
    && apt-get upgrade -y \
    && rm -rf /var/lib/apt/lists/*
RUN useradd -m -s /bin/bash appuser
USER appuser
WORKDIR /home/appuser
CMD ["sleep", "infinity"]
EOF

# Build and push the secure image
docker build -f Dockerfile.secure -t "${ECR_REPOSITORY_URI}:secure-v1.0" . > /dev/null
docker push "${ECR_REPOSITORY_URI}:secure-v1.0" > /dev/null

success "Secure container image built and pushed"

# Clean up build directory
cd - > /dev/null
rm -rf "$BUILD_DIR"

# Save deployment information for cleanup
cat > .deployment_info << EOF
ECR_REPOSITORY_NAME=${ECR_REPOSITORY_NAME}
SNS_TOPIC_NAME=${SNS_TOPIC_NAME}
SNS_TOPIC_ARN=${SNS_TOPIC_ARN}
RANDOM_SUFFIX=${RANDOM_SUFFIX}
AWS_REGION=${AWS_REGION}
AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}
EOF

# Display deployment summary
echo ""
echo -e "${GREEN}╔═══════════════════════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║                  DEPLOYMENT SUCCESSFUL                   ║${NC}"
echo -e "${GREEN}╚═══════════════════════════════════════════════════════════╝${NC}"
echo ""
echo "Resources created:"
echo "  ✅ ECR Repository: ${ECR_REPOSITORY_NAME}"
echo "  ✅ SNS Topic: ${SNS_TOPIC_NAME}"
echo "  ✅ CloudWatch Alarm: ECR-Critical-Vulnerabilities-${RANDOM_SUFFIX}"
echo "  ✅ EventBridge Rule: ECR-Vulnerability-Findings-${RANDOM_SUFFIX}"
echo "  ✅ Container Images: vulnerable-v1.0, secure-v1.0"
echo ""
echo "Next steps:"
echo "  1. Confirm your email subscription to receive alerts"
echo "  2. Wait 5-10 minutes for vulnerability scans to complete"
echo "  3. Check scan results with:"
echo "     aws ecr describe-image-scan-findings \\"
echo "       --repository-name ${ECR_REPOSITORY_NAME} \\"
echo "       --image-id imageTag=vulnerable-v1.0"
echo ""
echo "To clean up all resources, run: ./destroy.sh"
echo ""

success "Deployment completed successfully!"