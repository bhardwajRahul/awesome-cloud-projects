AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Infrastructure as Code for Container Image Vulnerability Scanning with ECR and Inspector.
  This template creates an automated vulnerability scanning solution for container images
  using Amazon ECR enhanced scanning with Amazon Inspector integration.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Repository Configuration"
        Parameters:
          - RepositoryName
          - ScanOnPush
          - RescanDuration
      - Label:
          default: "Notification Configuration"
        Parameters:
          - NotificationEmail
          - EnableEmailNotifications
      - Label:
          default: "Monitoring Configuration"
        Parameters:
          - CriticalVulnerabilityThreshold
          - HighVulnerabilityThreshold
          - LogRetentionDays
    ParameterLabels:
      RepositoryName:
        default: "ECR Repository Name"
      ScanOnPush:
        default: "Enable Scan on Push"
      RescanDuration:
        default: "Continuous Rescan Duration"
      NotificationEmail:
        default: "Notification Email Address"
      EnableEmailNotifications:
        default: "Enable Email Notifications"
      CriticalVulnerabilityThreshold:
        default: "Critical Vulnerability Threshold"
      HighVulnerabilityThreshold:
        default: "High Vulnerability Threshold"
      LogRetentionDays:
        default: "Log Retention Period (Days)"

Parameters:
  RepositoryName:
    Type: String
    Description: Name for the ECR repository
    Default: vulnerable-app-demo
    AllowedPattern: ^[a-z0-9]+(?:[._-][a-z0-9]+)*$
    ConstraintDescription: Repository name must be lowercase alphanumeric with optional periods, underscores, or hyphens
    MinLength: 2
    MaxLength: 256

  ScanOnPush:
    Type: String
    Description: Enable automatic vulnerability scanning when images are pushed
    Default: true
    AllowedValues:
      - true
      - false

  RescanDuration:
    Type: String
    Description: Duration for continuous rescanning of images for new vulnerabilities
    Default: DAYS_30
    AllowedValues:
      - DAYS_14
      - DAYS_30
      - DAYS_60
      - DAYS_90
      - DAYS_180

  NotificationEmail:
    Type: String
    Description: Email address for vulnerability notifications (leave blank to skip email setup)
    Default: ""
    AllowedPattern: ^$|^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
    ConstraintDescription: Must be a valid email address or empty

  EnableEmailNotifications:
    Type: String
    Description: Enable email notifications for vulnerability findings
    Default: true
    AllowedValues:
      - true
      - false

  CriticalVulnerabilityThreshold:
    Type: Number
    Description: Threshold for critical vulnerability alerts
    Default: 1
    MinValue: 1
    MaxValue: 100

  HighVulnerabilityThreshold:
    Type: Number
    Description: Threshold for high vulnerability alerts
    Default: 5
    MinValue: 1
    MaxValue: 100

  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period in days
    Default: 30
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653

Conditions:
  CreateEmailNotifications: !And
    - !Equals [!Ref EnableEmailNotifications, true]
    - !Not [!Equals [!Ref NotificationEmail, ""]]

  EnableScanOnPush: !Equals [!Ref ScanOnPush, true]

Resources:
  # ECR Repository with enhanced scanning
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref RepositoryName
      ImageScanningConfiguration:
        ScanOnPush: !Ref EnableScanOnPush
      EncryptionConfiguration:
        EncryptionType: AES256
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "tagged",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 2,
                "description": "Delete untagged images older than 1 day",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 1
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Purpose
          Value: VulnerabilityScanning
        - Key: Environment
          Value: Demo
        - Key: ManagedBy
          Value: CloudFormation

  # SNS Topic for vulnerability notifications
  VulnerabilityTopic:
    Type: AWS::SNS::Topic
    Condition: CreateEmailNotifications
    Properties:
      TopicName: !Sub "${AWS::StackName}-vulnerability-alerts"
      DisplayName: ECR Vulnerability Alerts
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Purpose
          Value: VulnerabilityNotifications
        - Key: ManagedBy
          Value: CloudFormation

  # SNS Topic Policy
  VulnerabilityTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Condition: CreateEmailNotifications
    Properties:
      Topics:
        - !Ref VulnerabilityTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowEventBridgePublish
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - SNS:Publish
            Resource: !Ref VulnerabilityTopic
          - Sid: AllowCloudWatchAlarms
            Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action:
              - SNS:Publish
            Resource: !Ref VulnerabilityTopic

  # Email subscription for SNS topic
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Condition: CreateEmailNotifications
    Properties:
      Protocol: email
      TopicArn: !Ref VulnerabilityTopic
      Endpoint: !Ref NotificationEmail

  # CloudWatch Log Group for Inspector findings
  InspectorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/inspector/ecr-findings-${AWS::StackName}"
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Purpose
          Value: VulnerabilityLogging
        - Key: ManagedBy
          Value: CloudFormation

  # CloudWatch Alarm for Critical Vulnerabilities
  CriticalVulnerabilityAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateEmailNotifications
    Properties:
      AlarmName: !Sub "${AWS::StackName}-Critical-Vulnerabilities"
      AlarmDescription: !Sub "Alert when critical vulnerabilities detected in ECR repository ${RepositoryName}"
      MetricName: CriticalVulnerabilities
      Namespace: AWS/Inspector
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref CriticalVulnerabilityThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref VulnerabilityTopic
      OKActions:
        - !Ref VulnerabilityTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Severity
          Value: Critical
        - Key: Purpose
          Value: VulnerabilityMonitoring
        - Key: ManagedBy
          Value: CloudFormation

  # CloudWatch Alarm for High Vulnerabilities
  HighVulnerabilityAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateEmailNotifications
    Properties:
      AlarmName: !Sub "${AWS::StackName}-High-Vulnerabilities"
      AlarmDescription: !Sub "Alert when high severity vulnerabilities detected in ECR repository ${RepositoryName}"
      MetricName: HighVulnerabilities
      Namespace: AWS/Inspector
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref HighVulnerabilityThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref VulnerabilityTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Severity
          Value: High
        - Key: Purpose
          Value: VulnerabilityMonitoring
        - Key: ManagedBy
          Value: CloudFormation

  # EventBridge Rule for Inspector findings
  InspectorFindingsRule:
    Type: AWS::Events::Rule
    Condition: CreateEmailNotifications
    Properties:
      Name: !Sub "${AWS::StackName}-Inspector-Findings"
      Description: Capture Amazon Inspector ECR vulnerability findings
      EventPattern:
        source:
          - aws.inspector2
        detail-type:
          - Inspector2 Finding
        detail:
          service:
            - ECR
      State: ENABLED
      Targets:
        - Arn: !Ref VulnerabilityTopic
          Id: "SNSTarget"
        - Arn: !GetAtt InspectorLogGroup.Arn
          Id: "LogGroupTarget"

  # EventBridge Rule for ECR Image Scan completion
  ECRScanCompleteRule:
    Type: AWS::Events::Rule
    Condition: CreateEmailNotifications
    Properties:
      Name: !Sub "${AWS::StackName}-ECR-Scan-Complete"
      Description: Capture ECR image scan completion events
      EventPattern:
        source:
          - aws.ecr
        detail-type:
          - ECR Image Scan
        detail:
          scan-status:
            - COMPLETE
          repository-name:
            - !Ref RepositoryName
      State: ENABLED
      Targets:
        - Arn: !Ref VulnerabilityTopic
          Id: "SNSTarget"

  # IAM Role for Lambda function to enable Inspector (if needed)
  InspectorEnablerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-Inspector-Enabler-Role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: InspectorEnablerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - inspector2:Enable
                  - inspector2:Disable
                  - inspector2:GetConfiguration
                  - inspector2:UpdateConfiguration
                  - ecr:PutRegistryScanningConfiguration
                  - ecr:GetRegistryScanningConfiguration
                Resource: '*'
      Tags:
        - Key: Purpose
          Value: InspectorManagement
        - Key: ManagedBy
          Value: CloudFormation

  # Lambda function to enable Inspector Enhanced Scanning
  InspectorEnablerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-Inspector-Enabler"
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt InspectorEnablerRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              try:
                  inspector = boto3.client('inspector2')
                  ecr = boto3.client('ecr')
                  
                  account_id = context.invoked_function_arn.split(':')[4]
                  rescan_duration = event['ResourceProperties'].get('RescanDuration', 'DAYS_30')
                  
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      # Enable Inspector for ECR
                      logger.info(f"Enabling Inspector for account {account_id}")
                      inspector.enable(
                          resourceTypes=['ECR'],
                          accountIds=[account_id]
                      )
                      
                      # Configure ECR scanning
                      logger.info("Configuring ECR enhanced scanning")
                      ecr.put_registry_scanning_configuration(
                          scanType='ENHANCED',
                          rules=[{
                              'scanFrequency': 'CONTINUOUS_SCAN',
                              'repositoryFilters': [{
                                  'filter': '*',
                                  'filterType': 'WILDCARD'
                              }]
                          }]
                      )
                      
                      # Update Inspector configuration
                      logger.info(f"Setting rescan duration to {rescan_duration}")
                      inspector.update_configuration(
                          ecrConfiguration={
                              'rescanDuration': rescan_duration
                          }
                      )
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'Message': 'Inspector enabled successfully'
                      })
                      
                  elif event['RequestType'] == 'Delete':
                      # Disable Inspector for ECR
                      logger.info(f"Disabling Inspector for account {account_id}")
                      try:
                          inspector.disable(
                              resourceTypes=['ECR'],
                              accountIds=[account_id]
                          )
                      except Exception as e:
                          logger.warning(f"Error disabling Inspector: {str(e)}")
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'Message': 'Inspector disabled successfully'
                      })
                      
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Message': str(e)
                  })

      Tags:
        - Key: Purpose
          Value: InspectorManagement
        - Key: ManagedBy
          Value: CloudFormation

  # Custom Resource to trigger Inspector enablement
  InspectorEnabler:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt InspectorEnablerFunction.Arn
      RescanDuration: !Ref RescanDuration

  # CloudWatch Dashboard for vulnerability monitoring
  VulnerabilityDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${AWS::StackName}-Vulnerability-Monitoring"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Inspector", "CriticalVulnerabilities" ],
                  [ ".", "HighVulnerabilities" ],
                  [ ".", "MediumVulnerabilities" ],
                  [ ".", "LowVulnerabilities" ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Vulnerability Counts by Severity",
                "view": "timeSeries",
                "stacked": false
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/inspector/ecr-findings-${AWS::StackName}'\n| fields @timestamp, @message\n| sort @timestamp desc\n| limit 20",
                "region": "${AWS::Region}",
                "title": "Recent Inspector Findings",
                "view": "table"
              }
            }
          ]
        }

Outputs:
  ECRRepositoryName:
    Description: Name of the created ECR repository
    Value: !Ref ECRRepository
    Export:
      Name: !Sub "${AWS::StackName}-ECR-Repository-Name"

  ECRRepositoryURI:
    Description: URI of the created ECR repository
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}"
    Export:
      Name: !Sub "${AWS::StackName}-ECR-Repository-URI"

  ECRRepositoryArn:
    Description: ARN of the created ECR repository
    Value: !GetAtt ECRRepository.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ECR-Repository-ARN"

  SNSTopicArn:
    Description: ARN of the SNS topic for vulnerability notifications
    Value: !Ref VulnerabilityTopic
    Condition: CreateEmailNotifications
    Export:
      Name: !Sub "${AWS::StackName}-SNS-Topic-ARN"

  InspectorLogGroupName:
    Description: Name of the CloudWatch log group for Inspector findings
    Value: !Ref InspectorLogGroup
    Export:
      Name: !Sub "${AWS::StackName}-Inspector-Log-Group"

  CriticalVulnerabilityAlarmName:
    Description: Name of the CloudWatch alarm for critical vulnerabilities
    Value: !Ref CriticalVulnerabilityAlarm
    Condition: CreateEmailNotifications
    Export:
      Name: !Sub "${AWS::StackName}-Critical-Alarm"

  HighVulnerabilityAlarmName:
    Description: Name of the CloudWatch alarm for high vulnerabilities
    Value: !Ref HighVulnerabilityAlarm
    Condition: CreateEmailNotifications
    Export:
      Name: !Sub "${AWS::StackName}-High-Alarm"

  DashboardURL:
    Description: URL to the CloudWatch dashboard for vulnerability monitoring
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${AWS::StackName}-Vulnerability-Monitoring"
    Export:
      Name: !Sub "${AWS::StackName}-Dashboard-URL"

  DeploymentCommands:
    Description: Commands to deploy this template
    Value: !Sub |
      aws cloudformation create-stack \
        --stack-name ${AWS::StackName} \
        --template-body file://cloudformation.yaml \
        --parameters ParameterKey=NotificationEmail,ParameterValue=your-email@example.com \
        --capabilities CAPABILITY_NAMED_IAM \
        --region ${AWS::Region}

  ContainerPushCommands:
    Description: Commands to push container images to the repository
    Value: !Sub |
      # Authenticate Docker to ECR
      aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com
      
      # Tag and push your image
      docker tag your-image:latest ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest
      docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest