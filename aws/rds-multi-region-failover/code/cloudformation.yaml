AWSTemplateFormatVersion: '2010-09-09'
Description: 'Advanced RDS Multi-AZ Deployment with Cross-Region Failover - Enterprise-grade database availability with automated disaster recovery'

Parameters:
  # Database Configuration
  DBInstanceIdentifier:
    Type: String
    Description: 'Unique identifier for the RDS database instance'
    Default: 'financial-db'
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    ConstraintDescription: 'Must begin with a letter and contain only alphanumeric characters and hyphens'
    MinLength: 1
    MaxLength: 63

  DBInstanceClass:
    Type: String
    Description: 'Database instance class for optimal performance'
    Default: 'db.r5.xlarge'
    AllowedValues:
      - 'db.r5.large'
      - 'db.r5.xlarge'
      - 'db.r5.2xlarge'
      - 'db.r5.4xlarge'
      - 'db.r6g.large'
      - 'db.r6g.xlarge'
      - 'db.r6g.2xlarge'
    ConstraintDescription: 'Must select a valid database instance class'

  DBMasterUsername:
    Type: String
    Description: 'Master username for the database'
    Default: 'dbadmin'
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9]*$'
    ConstraintDescription: 'Must begin with a letter and contain only alphanumeric characters'
    MinLength: 1
    MaxLength: 16

  DBMasterPassword:
    Type: String
    Description: 'Master password for the database (8-128 characters)'
    NoEcho: true
    MinLength: 8
    MaxLength: 128
    AllowedPattern: '^[a-zA-Z0-9!@#$%^&*()_+=-]*$'
    ConstraintDescription: 'Must contain 8-128 alphanumeric and special characters'

  DBAllocatedStorage:
    Type: Number
    Description: 'Initial allocated storage size in GB (minimum 20)'
    Default: 500
    MinValue: 20
    MaxValue: 65536
    ConstraintDescription: 'Must be between 20 and 65536 GB'

  DBStorageType:
    Type: String
    Description: 'Storage type for the database'
    Default: 'gp3'
    AllowedValues:
      - 'gp2'
      - 'gp3'
      - 'io1'
      - 'io2'
    ConstraintDescription: 'Must select a valid storage type'

  # Network Configuration
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: 'VPC ID where the database will be deployed'

  PrivateSubnetIds:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: 'List of private subnet IDs for the database (minimum 2 subnets in different AZs)'

  DatabaseSecurityGroupIds:
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Description: 'Security group IDs for database access'

  # Backup and Maintenance Configuration
  BackupRetentionPeriod:
    Type: Number
    Description: 'Number of days to retain automated backups (0-35)'
    Default: 30
    MinValue: 0
    MaxValue: 35
    ConstraintDescription: 'Must be between 0 and 35 days'

  PreferredBackupWindow:
    Type: String
    Description: 'Preferred backup window (UTC time, format: HH:MM-HH:MM)'
    Default: '03:00-04:00'
    AllowedPattern: '^([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9]$'
    ConstraintDescription: 'Must be in the format HH:MM-HH:MM (UTC time)'

  PreferredMaintenanceWindow:
    Type: String
    Description: 'Preferred maintenance window (format: ddd:HH:MM-ddd:HH:MM)'
    Default: 'sun:04:00-sun:05:00'
    AllowedPattern: '^(mon|tue|wed|thu|fri|sat|sun):[0-2][0-9]:[0-5][0-9]-(mon|tue|wed|thu|fri|sat|sun):[0-2][0-9]:[0-5][0-9]$'
    ConstraintDescription: 'Must be in the format ddd:HH:MM-ddd:HH:MM'

  # Cross-Region Configuration
  SecondaryRegion:
    Type: String
    Description: 'Secondary AWS region for cross-region read replica'
    Default: 'us-west-2'
    AllowedValues:
      - 'us-east-1'
      - 'us-east-2'
      - 'us-west-1'
      - 'us-west-2'
      - 'eu-west-1'
      - 'eu-west-2'
      - 'eu-central-1'
      - 'ap-southeast-1'
      - 'ap-southeast-2'
      - 'ap-northeast-1'
    ConstraintDescription: 'Must select a valid AWS region different from the primary region'

  # Monitoring Configuration
  EnhancedMonitoring:
    Type: String
    Description: 'Enable enhanced monitoring for detailed performance metrics'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  MonitoringInterval:
    Type: Number
    Description: 'Enhanced monitoring interval in seconds'
    Default: 60
    AllowedValues:
      - 0
      - 1
      - 5
      - 10
      - 15
      - 30
      - 60
    ConstraintDescription: 'Must be 0, 1, 5, 10, 15, 30, or 60 seconds'

  PerformanceInsightsRetentionPeriod:
    Type: Number
    Description: 'Performance Insights data retention period in days'
    Default: 7
    AllowedValues:
      - 7
      - 31
      - 62
      - 93
      - 124
      - 155
      - 186
      - 217
      - 248
      - 279
      - 310
      - 341
      - 372
      - 403
      - 434
      - 465
      - 496
      - 527
      - 558
      - 589
      - 620
      - 651
      - 682
      - 713
      - 731
    ConstraintDescription: 'Must be a valid retention period value'

  # DNS Configuration
  Route53HostedZoneName:
    Type: String
    Description: 'Route 53 hosted zone name for DNS failover (e.g., financial-db.internal)'
    Default: 'financial-db.internal'
    AllowedPattern: '^[a-zA-Z0-9.-]+$'
    ConstraintDescription: 'Must be a valid domain name'

  DNSRecordName:
    Type: String
    Description: 'DNS record name for database endpoint'
    Default: 'db'
    AllowedPattern: '^[a-zA-Z0-9-]+$'
    ConstraintDescription: 'Must contain only alphanumeric characters and hyphens'

  # Environment and Tagging
  Environment:
    Type: String
    Description: 'Environment name for resource tagging'
    Default: 'production'
    AllowedValues:
      - 'development'
      - 'staging'
      - 'production'
    ConstraintDescription: 'Must be development, staging, or production'

  ProjectName:
    Type: String
    Description: 'Project name for resource tagging'
    Default: 'financial-services'
    AllowedPattern: '^[a-zA-Z0-9-]+$'
    ConstraintDescription: 'Must contain only alphanumeric characters and hyphens'

Conditions:
  # Conditional resource creation based on parameters
  EnableEnhancedMonitoring: !Equals [!Ref EnhancedMonitoring, 'true']
  EnablePerformanceInsights: !Not [!Equals [!Ref PerformanceInsightsRetentionPeriod, 0]]
  IsProductionEnvironment: !Equals [!Ref Environment, 'production']

Resources:
  # Enhanced monitoring IAM role
  RDSEnhancedMonitoringRole:
    Type: 'AWS::IAM::Role'
    Condition: EnableEnhancedMonitoring
    Properties:
      RoleName: !Sub '${AWS::StackName}-rds-enhanced-monitoring-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowRDSToAssumeRole
            Effect: Allow
            Principal:
              Service: monitoring.rds.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-rds-enhanced-monitoring-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Database subnet group for Multi-AZ deployment
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: !Sub '${AWS::StackName}-db-subnet-group'
      DBSubnetGroupDescription: 'Subnet group for Multi-AZ RDS deployment with cross-region failover'
      SubnetIds: !Ref PrivateSubnetIds
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-subnet-group'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Custom parameter group for PostgreSQL optimization
  DBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      DBParameterGroupName: !Sub '${AWS::StackName}-postgres-params'
      Description: 'Custom parameter group for PostgreSQL high-availability optimization'
      Family: 'postgres15'
      Parameters:
        # Enhanced logging for audit trails
        log_statement: 'all'
        log_min_duration_statement: '1000'
        # Optimized checkpoint timing for failover performance
        checkpoint_completion_target: '0.9'
        # Connection and memory optimization
        max_connections: '200'
        shared_preload_libraries: 'pg_stat_statements'
        # WAL settings for replication optimization
        wal_level: 'replica'
        max_wal_senders: '10'
        wal_keep_segments: '32'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-postgres-params'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Primary Multi-AZ RDS instance
  PrimaryDatabase:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      DBInstanceClass: !Ref DBInstanceClass
      Engine: 'postgres'
      EngineVersion: '15.4'
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterPassword
      AllocatedStorage: !Ref DBAllocatedStorage
      StorageType: !Ref DBStorageType
      StorageEncrypted: true
      # Multi-AZ configuration for high availability
      MultiAZ: true
      # Network configuration
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups: !Ref DatabaseSecurityGroupIds
      # Parameter group
      DBParameterGroupName: !Ref DBParameterGroup
      # Backup configuration
      BackupRetentionPeriod: !Ref BackupRetentionPeriod
      PreferredBackupWindow: !Ref PreferredBackupWindow
      PreferredMaintenanceWindow: !Ref PreferredMaintenanceWindow
      # Monitoring configuration
      EnablePerformanceInsights: !If [EnablePerformanceInsights, true, false]
      PerformanceInsightsRetentionPeriod: !If [EnablePerformanceInsights, !Ref PerformanceInsightsRetentionPeriod, !Ref 'AWS::NoValue']
      MonitoringInterval: !If [EnableEnhancedMonitoring, !Ref MonitoringInterval, 0]
      MonitoringRoleArn: !If [EnableEnhancedMonitoring, !GetAtt RDSEnhancedMonitoringRole.Arn, !Ref 'AWS::NoValue']
      # Security and compliance
      DeletionProtection: !If [IsProductionEnvironment, true, false]
      EnableCloudwatchLogsExports:
        - 'postgresql'
      # Tagging
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-primary-db'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: DatabaseRole
          Value: 'primary'
        - Key: MultiAZ
          Value: 'true'

  # SNS topic for database alerts
  DatabaseAlertsTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: !Sub '${AWS::StackName}-db-alerts'
      DisplayName: 'Database Alerts for Multi-AZ RDS'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-alerts'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # CloudWatch alarm for database connections
  DatabaseConnectionAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub '${AWS::StackName}-db-connection-failures'
      AlarmDescription: 'Alert when database connections exceed threshold'
      MetricName: 'DatabaseConnections'
      Namespace: 'AWS/RDS'
      Statistic: 'Maximum'
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: 'GreaterThanThreshold'
      AlarmActions:
        - !Ref DatabaseAlertsTopic
      Dimensions:
        - Name: 'DBInstanceIdentifier'
          Value: !Ref PrimaryDatabase
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-connection-alarm'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # CloudWatch alarm for CPU utilization
  DatabaseCPUAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub '${AWS::StackName}-db-cpu-utilization'
      AlarmDescription: 'Alert when database CPU utilization is high'
      MetricName: 'CPUUtilization'
      Namespace: 'AWS/RDS'
      Statistic: 'Average'
      Period: 300
      EvaluationPeriods: 3
      Threshold: 80
      ComparisonOperator: 'GreaterThanThreshold'
      AlarmActions:
        - !Ref DatabaseAlertsTopic
      Dimensions:
        - Name: 'DBInstanceIdentifier'
          Value: !Ref PrimaryDatabase
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-cpu-alarm'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Route 53 hosted zone for DNS failover
  DatabaseHostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: !Ref Route53HostedZoneName
      HostedZoneConfig:
        Comment: !Sub 'Private hosted zone for ${AWS::StackName} database DNS failover'
      VPCs:
        - VPCId: !Ref VpcId
          VPCRegion: !Ref 'AWS::Region'
      HostedZoneTags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-hosted-zone'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Route 53 health check for primary database
  PrimaryDatabaseHealthCheck:
    Type: 'AWS::Route53::HealthCheck'
    Properties:
      Type: 'CALCULATED'
      HealthCheckConfig:
        Type: 'CALCULATED'
        ChildHealthChecks: []
        HealthThreshold: 1
        InvertHealthcheck: false
      HealthCheckTags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-primary-db-health-check'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Primary DNS record with failover routing
  PrimaryDatabaseDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref DatabaseHostedZone
      Name: !Sub '${DNSRecordName}.${Route53HostedZoneName}'
      Type: 'CNAME'
      TTL: 60
      SetIdentifier: 'primary'
      Failover: 'PRIMARY'
      ResourceRecords:
        - !GetAtt PrimaryDatabase.Endpoint.Address
      HealthCheckId: !Ref PrimaryDatabaseHealthCheck

  # IAM role for cross-region promotion automation
  CrossRegionPromotionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-cross-region-promotion-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: 'RDSCrossRegionPromotionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'rds:PromoteReadReplica'
                  - 'rds:DescribeDBInstances'
                  - 'rds:ModifyDBInstance'
                  - 'route53:ChangeResourceRecordSets'
                  - 'route53:GetChange'
                  - 'route53:ListResourceRecordSets'
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-cross-region-promotion-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Lambda function for automated promotion (basic framework)
  DatabasePromotionFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AWS::StackName}-db-promotion-function'
      Runtime: 'python3.11'
      Handler: 'index.lambda_handler'
      Role: !GetAtt CrossRegionPromotionRole.Arn
      Timeout: 300
      Description: 'Automates cross-region read replica promotion during disasters'
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              """
              Basic framework for automated database promotion.
              This function should be enhanced with specific promotion logic.
              """
              logger.info(f"Received event: {json.dumps(event)}")
              
              # TODO: Implement promotion logic
              # 1. Verify primary database failure
              # 2. Promote read replica in secondary region
              # 3. Update Route 53 DNS records
              # 4. Send notifications
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Promotion function executed successfully')
              }
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-promotion-function'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

Outputs:
  # Database Outputs
  PrimaryDatabaseInstanceId:
    Description: 'Primary RDS database instance identifier'
    Value: !Ref PrimaryDatabase
    Export:
      Name: !Sub '${AWS::StackName}-primary-db-id'

  PrimaryDatabaseEndpoint:
    Description: 'Primary RDS database endpoint address'
    Value: !GetAtt PrimaryDatabase.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-primary-db-endpoint'

  PrimaryDatabasePort:
    Description: 'Primary RDS database port'
    Value: !GetAtt PrimaryDatabase.Endpoint.Port
    Export:
      Name: !Sub '${AWS::StackName}-primary-db-port'

  # DNS Outputs
  DatabaseHostedZoneId:
    Description: 'Route 53 hosted zone ID for database DNS'
    Value: !Ref DatabaseHostedZone
    Export:
      Name: !Sub '${AWS::StackName}-db-hosted-zone-id'

  DatabaseDNSName:
    Description: 'DNS name for database access with failover capability'
    Value: !Sub '${DNSRecordName}.${Route53HostedZoneName}'
    Export:
      Name: !Sub '${AWS::StackName}-db-dns-name'

  # Monitoring Outputs
  DatabaseAlertsTopicArn:
    Description: 'SNS topic ARN for database alerts'
    Value: !Ref DatabaseAlertsTopic
    Export:
      Name: !Sub '${AWS::StackName}-db-alerts-topic-arn'

  DatabaseConnectionAlarmName:
    Description: 'CloudWatch alarm name for database connections'
    Value: !Ref DatabaseConnectionAlarm
    Export:
      Name: !Sub '${AWS::StackName}-db-connection-alarm-name'

  # Security Outputs
  DatabaseSubnetGroupName:
    Description: 'Database subnet group name'
    Value: !Ref DBSubnetGroup
    Export:
      Name: !Sub '${AWS::StackName}-db-subnet-group-name'

  DatabaseParameterGroupName:
    Description: 'Database parameter group name'
    Value: !Ref DBParameterGroup
    Export:
      Name: !Sub '${AWS::StackName}-db-parameter-group-name'

  # Cross-Region Automation Outputs
  CrossRegionPromotionRoleArn:
    Description: 'IAM role ARN for cross-region promotion automation'
    Value: !GetAtt CrossRegionPromotionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-promotion-role-arn'

  DatabasePromotionFunctionName:
    Description: 'Lambda function name for database promotion automation'
    Value: !Ref DatabasePromotionFunction
    Export:
      Name: !Sub '${AWS::StackName}-promotion-function-name'

  # Connection Information
  DatabaseConnectionString:
    Description: 'Database connection string template (replace {password} with actual password)'
    Value: !Sub 'postgresql://${DBMasterUsername}:{password}@${DNSRecordName}.${Route53HostedZoneName}:${PrimaryDatabase.Endpoint.Port}/postgres'
    Export:
      Name: !Sub '${AWS::StackName}-db-connection-string'

  # Deployment Information
  StackName:
    Description: 'CloudFormation stack name'
    Value: !Ref 'AWS::StackName'
    Export:
      Name: !Sub '${AWS::StackName}-stack-name'

  PrimaryRegion:
    Description: 'Primary AWS region for this deployment'
    Value: !Ref 'AWS::Region'
    Export:
      Name: !Sub '${AWS::StackName}-primary-region'

  SecondaryRegion:
    Description: 'Configured secondary region for cross-region failover'
    Value: !Ref SecondaryRegion
    Export:
      Name: !Sub '${AWS::StackName}-secondary-region'