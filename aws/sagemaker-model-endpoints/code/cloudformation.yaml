AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Deploy machine learning models with Amazon SageMaker Endpoints for scalable inference.
  This template creates a complete MLOps infrastructure including ECR repository,
  S3 bucket for model artifacts, SageMaker model, endpoint configuration, and endpoint
  with auto-scaling capabilities.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Model Configuration"
        Parameters:
          - ModelName
          - EndpointName
          - ECRRepositoryName
      - Label:
          default: "Compute Configuration"
        Parameters:
          - InstanceType
          - InitialInstanceCount
          - MaxInstanceCount
          - MinInstanceCount
      - Label:
          default: "Auto Scaling Configuration"
        Parameters:
          - TargetInvocationsPerInstance
          - ScaleInCooldown
          - ScaleOutCooldown
      - Label:
          default: "Monitoring Configuration"
        Parameters:
          - EnableDataCapture
          - DataCapturePercentage
          - EnableCloudWatchLogging
      - Label:
          default: "Security Configuration"
        Parameters:
          - VpcId
          - SubnetIds
          - EnableVpcConfig
    ParameterLabels:
      ModelName:
        default: "SageMaker Model Name"
      EndpointName:
        default: "SageMaker Endpoint Name"
      ECRRepositoryName:
        default: "ECR Repository Name"
      InstanceType:
        default: "ML Instance Type"
      InitialInstanceCount:
        default: "Initial Instance Count"
      MaxInstanceCount:
        default: "Maximum Instance Count"
      MinInstanceCount:
        default: "Minimum Instance Count"
      TargetInvocationsPerInstance:
        default: "Target Invocations Per Instance"
      ScaleInCooldown:
        default: "Scale In Cooldown Period"
      ScaleOutCooldown:
        default: "Scale Out Cooldown Period"
      EnableDataCapture:
        default: "Enable Data Capture"
      DataCapturePercentage:
        default: "Data Capture Percentage"
      EnableCloudWatchLogging:
        default: "Enable CloudWatch Logging"
      VpcId:
        default: "VPC ID"
      SubnetIds:
        default: "Subnet IDs"
      EnableVpcConfig:
        default: "Enable VPC Configuration"

Parameters:
  # Model Configuration Parameters
  ModelName:
    Type: String
    Default: sklearn-iris-classifier
    Description: Name for the SageMaker model
    AllowedPattern: ^[a-zA-Z0-9\-]{1,63}$
    ConstraintDescription: Model name must be 1-63 characters, alphanumeric and hyphens only

  EndpointName:
    Type: String
    Default: iris-prediction-endpoint
    Description: Name for the SageMaker endpoint
    AllowedPattern: ^[a-zA-Z0-9\-]{1,63}$
    ConstraintDescription: Endpoint name must be 1-63 characters, alphanumeric and hyphens only

  ECRRepositoryName:
    Type: String
    Default: sagemaker-sklearn-inference
    Description: Name for the ECR repository to store inference container
    AllowedPattern: ^[a-z0-9]+(?:[._-][a-z0-9]+)*$
    ConstraintDescription: Repository name must be lowercase, alphanumeric with periods, underscores, and hyphens

  # Compute Configuration Parameters
  InstanceType:
    Type: String
    Default: ml.t2.medium
    Description: EC2 instance type for the SageMaker endpoint
    AllowedValues:
      - ml.t2.medium
      - ml.t2.large
      - ml.t2.xlarge
      - ml.t2.2xlarge
      - ml.c5.large
      - ml.c5.xlarge
      - ml.c5.2xlarge
      - ml.c5.4xlarge
      - ml.c5.9xlarge
      - ml.c5.18xlarge
      - ml.m5.large
      - ml.m5.xlarge
      - ml.m5.2xlarge
      - ml.m5.4xlarge
      - ml.m5.12xlarge
      - ml.m5.24xlarge
      - ml.p3.2xlarge
      - ml.p3.8xlarge
      - ml.p3.16xlarge
    ConstraintDescription: Must be a valid SageMaker ML instance type

  InitialInstanceCount:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 10
    Description: Initial number of instances for the endpoint
    ConstraintDescription: Must be between 1 and 10

  MaxInstanceCount:
    Type: Number
    Default: 5
    MinValue: 1
    MaxValue: 100
    Description: Maximum number of instances for auto-scaling
    ConstraintDescription: Must be between 1 and 100

  MinInstanceCount:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 10
    Description: Minimum number of instances for auto-scaling
    ConstraintDescription: Must be between 1 and 10

  # Auto Scaling Configuration Parameters
  TargetInvocationsPerInstance:
    Type: Number
    Default: 70
    MinValue: 1
    MaxValue: 1000
    Description: Target number of invocations per instance for auto-scaling
    ConstraintDescription: Must be between 1 and 1000

  ScaleInCooldown:
    Type: Number
    Default: 300
    MinValue: 60
    MaxValue: 3600
    Description: Scale-in cooldown period in seconds
    ConstraintDescription: Must be between 60 and 3600 seconds

  ScaleOutCooldown:
    Type: Number
    Default: 300
    MinValue: 60
    MaxValue: 3600
    Description: Scale-out cooldown period in seconds
    ConstraintDescription: Must be between 60 and 3600 seconds

  # Monitoring Configuration Parameters
  EnableDataCapture:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable data capture for model monitoring

  DataCapturePercentage:
    Type: Number
    Default: 100
    MinValue: 1
    MaxValue: 100
    Description: Percentage of requests to capture for monitoring
    ConstraintDescription: Must be between 1 and 100

  EnableCloudWatchLogging:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable CloudWatch logging for the endpoint

  # Security Configuration Parameters
  EnableVpcConfig:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: Enable VPC configuration for the endpoint

  VpcId:
    Type: String
    Default: ''
    Description: VPC ID for endpoint security (optional)

  SubnetIds:
    Type: CommaDelimitedList
    Default: ''
    Description: Comma-delimited list of subnet IDs for VPC configuration (optional)

Conditions:
  # Condition to enable VPC configuration
  EnableVpc: !Equals [!Ref EnableVpcConfig, 'true']
  
  # Condition to enable data capture
  EnableDataCaptureCondition: !Equals [!Ref EnableDataCapture, 'true']
  
  # Condition to enable CloudWatch logging
  EnableLogging: !Equals [!Ref EnableCloudWatchLogging, 'true']
  
  # Condition to check if max instances is greater than initial instances
  NeedsAutoScaling: !Not [!Equals [!Ref MaxInstanceCount, !Ref InitialInstanceCount]]

Resources:
  # S3 Bucket for Model Artifacts
  ModelArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'sagemaker-models-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      LoggingConfiguration: !If
        - EnableLogging
        - DestinationBucketName: !Ref AccessLogsBucket
          LogFilePrefix: model-artifacts-access-logs/
        - !Ref AWS::NoValue
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref ModelArtifactsLogGroup
      Tags:
        - Key: Purpose
          Value: SageMaker Model Artifacts
        - Key: Environment
          Value: !Ref AWS::StackName

  # S3 Bucket for Access Logs (if logging is enabled)
  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Condition: EnableLogging
    Properties:
      BucketName: !Sub 'sagemaker-access-logs-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 90
      Tags:
        - Key: Purpose
          Value: S3 Access Logs

  # CloudWatch Log Group for Model Artifacts
  ModelArtifactsLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: EnableLogging
    Properties:
      LogGroupName: !Sub '/aws/s3/sagemaker-models/${AWS::StackName}'
      RetentionInDays: 30
      Tags:
        - Key: Purpose
          Value: Model Artifacts Logging

  # ECR Repository for Custom Inference Container
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepositoryName
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 7
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 2,
                "selection": {
                  "tagStatus": "tagged",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      EncryptionConfiguration:
        EncryptionType: AES256
      Tags:
        - Key: Purpose
          Value: SageMaker Inference Container
        - Key: Environment
          Value: !Ref AWS::StackName

  # IAM Role for SageMaker Execution
  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'SageMakerExecutionRole-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Policies:
        - PolicyName: S3ModelArtifactsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub '${ModelArtifactsBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource:
                  - !GetAtt ModelArtifactsBucket.Arn
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetAuthorizationToken
                Resource: '*'
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/sagemaker/*'
        - PolicyName: VPCAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:CreateNetworkInterfacePermission
                  - ec2:DeleteNetworkInterface
                  - ec2:DeleteNetworkInterfacePermission
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeVpcs
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                Resource: '*'
      Tags:
        - Key: Purpose
          Value: SageMaker Model Execution
        - Key: Environment
          Value: !Ref AWS::StackName

  # Security Group for SageMaker Endpoint (if VPC is enabled)
  SageMakerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: EnableVpc
    Properties:
      GroupDescription: Security group for SageMaker endpoint
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/8
          Description: HTTPS access for SageMaker endpoint
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub 'SageMaker-SG-${AWS::StackName}'
        - Key: Purpose
          Value: SageMaker Endpoint Security

  # SageMaker Model
  SageMakerModel:
    Type: AWS::SageMaker::Model
    Properties:
      ModelName: !Sub '${ModelName}-${AWS::StackName}'
      ExecutionRoleArn: !GetAtt SageMakerExecutionRole.Arn
      PrimaryContainer:
        Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}:latest'
        ModelDataUrl: !Sub 's3://${ModelArtifactsBucket}/model.tar.gz'
        Environment:
          SAGEMAKER_PROGRAM: predictor.py
          SAGEMAKER_SUBMIT_DIRECTORY: /opt/ml/code
          SAGEMAKER_CONTAINER_LOG_LEVEL: '20'
          SAGEMAKER_REGION: !Ref AWS::Region
      VpcConfig: !If
        - EnableVpc
        - SecurityGroupIds:
            - !Ref SageMakerSecurityGroup
          Subnets: !Ref SubnetIds
        - !Ref AWS::NoValue
      EnableNetworkIsolation: false
      Tags:
        - Key: Name
          Value: !Sub '${ModelName}-${AWS::StackName}'
        - Key: Purpose
          Value: ML Model for Inference
        - Key: Environment
          Value: !Ref AWS::StackName

  # SageMaker Endpoint Configuration
  SageMakerEndpointConfig:
    Type: AWS::SageMaker::EndpointConfig
    Properties:
      EndpointConfigName: !Sub '${ModelName}-config-${AWS::StackName}'
      ProductionVariants:
        - ModelName: !GetAtt SageMakerModel.ModelName
          VariantName: primary
          InitialInstanceCount: !Ref InitialInstanceCount
          InstanceType: !Ref InstanceType
          InitialVariantWeight: 1.0
          AcceleratorType: !Ref AWS::NoValue
      DataCaptureConfig: !If
        - EnableDataCaptureCondition
        - EnableCapture: true
          InitialSamplingPercentage: !Ref DataCapturePercentage
          DestinationS3Uri: !Sub 's3://${ModelArtifactsBucket}/data-capture/'
          CaptureOptions:
            - CaptureMode: Input
            - CaptureMode: Output
          CaptureContentTypeHeader:
            JsonContentTypes:
              - application/json
        - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub '${ModelName}-config-${AWS::StackName}'
        - Key: Purpose
          Value: Endpoint Configuration
        - Key: Environment
          Value: !Ref AWS::StackName

  # SageMaker Endpoint
  SageMakerEndpoint:
    Type: AWS::SageMaker::Endpoint
    Properties:
      EndpointName: !Sub '${EndpointName}-${AWS::StackName}'
      EndpointConfigName: !GetAtt SageMakerEndpointConfig.EndpointConfigName
      Tags:
        - Key: Name
          Value: !Sub '${EndpointName}-${AWS::StackName}'
        - Key: Purpose
          Value: ML Inference Endpoint
        - Key: Environment
          Value: !Ref AWS::StackName

  # Application Auto Scaling Target for SageMaker Endpoint
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: NeedsAutoScaling
    Properties:
      ServiceNamespace: sagemaker
      ResourceId: !Sub 'endpoint/${SageMakerEndpoint.EndpointName}/variant/primary'
      ScalableDimension: sagemaker:variant:DesiredInstanceCount
      MinCapacity: !Ref MinInstanceCount
      MaxCapacity: !Ref MaxInstanceCount
      RoleARN: !GetAtt AutoScalingRole.Arn

  # IAM Role for Auto Scaling
  AutoScalingRole:
    Type: AWS::IAM::Role
    Condition: NeedsAutoScaling
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/application-autoscaling/SageMakerEndpointVariantScalingPolicy

  # Auto Scaling Policy
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: NeedsAutoScaling
    Properties:
      PolicyName: !Sub '${EndpointName}-scaling-policy-${AWS::StackName}'
      PolicyType: TargetTrackingScaling
      ServiceNamespace: sagemaker
      ResourceId: !Sub 'endpoint/${SageMakerEndpoint.EndpointName}/variant/primary'
      ScalableDimension: sagemaker:variant:DesiredInstanceCount
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: !Ref TargetInvocationsPerInstance
        PredefinedMetricSpecification:
          PredefinedMetricType: SageMakerVariantInvocationsPerInstance
        ScaleInCooldown: !Ref ScaleInCooldown
        ScaleOutCooldown: !Ref ScaleOutCooldown

  # CloudWatch Dashboard for Monitoring
  SageMakerDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: EnableLogging
    Properties:
      DashboardName: !Sub 'SageMaker-${EndpointName}-${AWS::StackName}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SageMaker", "Invocations", "EndpointName", "${SageMakerEndpoint.EndpointName}", "VariantName", "primary" ],
                  [ ".", "InvocationsPerInstance", ".", ".", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Endpoint Invocations"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SageMaker", "ModelLatency", "EndpointName", "${SageMakerEndpoint.EndpointName}", "VariantName", "primary" ],
                  [ ".", "OverheadLatency", ".", ".", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Latency Metrics"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SageMaker", "Invocation4XXErrors", "EndpointName", "${SageMakerEndpoint.EndpointName}", "VariantName", "primary" ],
                  [ ".", "Invocation5XXErrors", ".", ".", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Error Metrics"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SageMaker", "CPUUtilization", "EndpointName", "${SageMakerEndpoint.EndpointName}", "VariantName", "primary" ],
                  [ ".", "MemoryUtilization", ".", ".", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Resource Utilization"
              }
            }
          ]
        }

  # CloudWatch Alarms for Monitoring
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableLogging
    Properties:
      AlarmName: !Sub 'SageMaker-HighErrorRate-${EndpointName}-${AWS::StackName}'
      AlarmDescription: 'High error rate on SageMaker endpoint'
      MetricName: Invocation4XXErrors
      Namespace: AWS/SageMaker
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: EndpointName
          Value: !GetAtt SageMakerEndpoint.EndpointName
        - Name: VariantName
          Value: primary
      TreatMissingData: notBreaching

  HighLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableLogging
    Properties:
      AlarmName: !Sub 'SageMaker-HighLatency-${EndpointName}-${AWS::StackName}'
      AlarmDescription: 'High latency on SageMaker endpoint'
      MetricName: ModelLatency
      Namespace: AWS/SageMaker
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 5000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: EndpointName
          Value: !GetAtt SageMakerEndpoint.EndpointName
        - Name: VariantName
          Value: primary
      TreatMissingData: notBreaching

Outputs:
  # Model Artifacts and Container Registry
  ModelArtifactsBucket:
    Description: S3 bucket for storing model artifacts
    Value: !Ref ModelArtifactsBucket
    Export:
      Name: !Sub '${AWS::StackName}-ModelArtifactsBucket'

  ECRRepositoryUri:
    Description: ECR repository URI for inference container
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}'
    Export:
      Name: !Sub '${AWS::StackName}-ECRRepositoryUri'

  # SageMaker Resources
  SageMakerModelName:
    Description: Name of the created SageMaker model
    Value: !GetAtt SageMakerModel.ModelName
    Export:
      Name: !Sub '${AWS::StackName}-SageMakerModelName'

  SageMakerEndpointName:
    Description: Name of the created SageMaker endpoint
    Value: !GetAtt SageMakerEndpoint.EndpointName
    Export:
      Name: !Sub '${AWS::StackName}-SageMakerEndpointName'

  SageMakerEndpointConfigName:
    Description: Name of the SageMaker endpoint configuration
    Value: !GetAtt SageMakerEndpointConfig.EndpointConfigName
    Export:
      Name: !Sub '${AWS::StackName}-SageMakerEndpointConfigName'

  # IAM and Security
  SageMakerExecutionRoleArn:
    Description: ARN of the SageMaker execution role
    Value: !GetAtt SageMakerExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SageMakerExecutionRoleArn'

  SageMakerSecurityGroup:
    Description: Security group for SageMaker endpoint (if VPC enabled)
    Value: !If [EnableVpc, !Ref SageMakerSecurityGroup, 'N/A - VPC not enabled']
    Export:
      Name: !Sub '${AWS::StackName}-SageMakerSecurityGroup'

  # Monitoring and Scaling
  CloudWatchDashboard:
    Description: CloudWatch dashboard for monitoring (if logging enabled)
    Value: !If [EnableLogging, !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${SageMakerDashboard}', 'N/A - Logging not enabled']

  AutoScalingTargetArn:
    Description: Auto scaling target ARN (if auto scaling enabled)
    Value: !If [NeedsAutoScaling, !Ref AutoScalingTarget, 'N/A - Auto scaling not needed']
    Export:
      Name: !Sub '${AWS::StackName}-AutoScalingTargetArn'

  # Usage Information
  EndpointUrl:
    Description: SageMaker runtime endpoint URL for making predictions
    Value: !Sub 'https://runtime.sagemaker.${AWS::Region}.amazonaws.com/endpoints/${SageMakerEndpoint.EndpointName}/invocations'
    Export:
      Name: !Sub '${AWS::StackName}-EndpointUrl'

  ModelDataUrl:
    Description: S3 URL where model artifacts should be uploaded
    Value: !Sub 's3://${ModelArtifactsBucket}/model.tar.gz'
    Export:
      Name: !Sub '${AWS::StackName}-ModelDataUrl'

  # Cost Estimation
  EstimatedMonthlyCost:
    Description: Estimated monthly cost for the deployed resources (USD)
    Value: !Sub 
      - 'Approximately $${Cost} per month for ${InitialInstanceCount} ${InstanceType} instances (24/7 usage). Actual cost varies with usage patterns and data transfer.'
      - Cost: !If
          - !Equals [!Ref InstanceType, 'ml.t2.medium']
          - !Sub '${InitialInstanceCount}50'
          - !If
              - !Equals [!Ref InstanceType, 'ml.c5.large']
              - !Sub '${InitialInstanceCount}100'
              - !Sub '${InitialInstanceCount}200+'

  # Sample Inference Commands
  SampleTestCommand:
    Description: Sample AWS CLI command to test the endpoint
    Value: !Sub |
      aws sagemaker-runtime invoke-endpoint \
        --endpoint-name ${SageMakerEndpoint.EndpointName} \
        --content-type application/json \
        --body '{"instances":[[5.1,3.5,1.4,0.2]]}' \
        --region ${AWS::Region} \
        output.json && cat output.json