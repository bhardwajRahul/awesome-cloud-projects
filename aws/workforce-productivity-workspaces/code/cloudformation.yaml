AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS WorkSpaces Workforce Productivity Solution - Complete virtual desktop infrastructure with VPC, Directory Service, and WorkSpaces'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCidr
          - PublicSubnetCidr
          - PrivateSubnet1Cidr
          - PrivateSubnet2Cidr
      - Label:
          default: "Directory Service Configuration"
        Parameters:
          - DirectoryName
          - DirectoryPassword
          - DirectorySize
      - Label:
          default: "WorkSpaces Configuration"
        Parameters:
          - WorkSpaceUserName
          - WorkSpaceBundleType
          - WorkSpaceRunningMode
          - AutoStopTimeoutMinutes
          - RootVolumeSizeGib
          - UserVolumeSizeGib
      - Label:
          default: "Security Configuration"
        Parameters:
          - EnableWorkDocs
          - EnableSelfService
          - AllowedIpRange
      - Label:
          default: "Resource Naming"
        Parameters:
          - ResourcePrefix
    ParameterLabels:
      VpcCidr:
        default: "VPC CIDR Block"
      PublicSubnetCidr:
        default: "Public Subnet CIDR"
      PrivateSubnet1Cidr:
        default: "Private Subnet 1 CIDR"
      PrivateSubnet2Cidr:
        default: "Private Subnet 2 CIDR"
      DirectoryName:
        default: "Directory Name"
      DirectoryPassword:
        default: "Directory Administrator Password"
      DirectorySize:
        default: "Directory Size"
      WorkSpaceUserName:
        default: "WorkSpace Test User Name"
      WorkSpaceBundleType:
        default: "WorkSpace Bundle Type"
      WorkSpaceRunningMode:
        default: "WorkSpace Running Mode"
      AutoStopTimeoutMinutes:
        default: "Auto Stop Timeout (Minutes)"
      RootVolumeSizeGib:
        default: "Root Volume Size (GiB)"
      UserVolumeSizeGib:
        default: "User Volume Size (GiB)"
      EnableWorkDocs:
        default: "Enable WorkDocs Integration"
      EnableSelfService:
        default: "Enable Self-Service Portal"
      AllowedIpRange:
        default: "Allowed IP Range for WorkSpaces Access"
      ResourcePrefix:
        default: "Resource Name Prefix"

Parameters:
  # Network Configuration
  VpcCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: 'CIDR block for the VPC'
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    ConstraintDescription: 'Must be a valid CIDR block format'

  PublicSubnetCidr:
    Type: String
    Default: '10.0.1.0/24'
    Description: 'CIDR block for the public subnet (for NAT Gateway)'
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    ConstraintDescription: 'Must be a valid CIDR block format'

  PrivateSubnet1Cidr:
    Type: String
    Default: '10.0.2.0/24'
    Description: 'CIDR block for the first private subnet (for WorkSpaces)'
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    ConstraintDescription: 'Must be a valid CIDR block format'

  PrivateSubnet2Cidr:
    Type: String
    Default: '10.0.3.0/24'
    Description: 'CIDR block for the second private subnet (for WorkSpaces)'
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    ConstraintDescription: 'Must be a valid CIDR block format'

  # Directory Service Configuration
  DirectoryName:
    Type: String
    Default: 'workspaces-directory'
    Description: 'Name for the Simple AD directory (will have .local suffix)'
    MinLength: 1
    MaxLength: 15
    AllowedPattern: '^[a-zA-Z0-9-]+$'
    ConstraintDescription: 'Must contain only alphanumeric characters and hyphens'

  DirectoryPassword:
    Type: String
    NoEcho: true
    Description: 'Password for the Simple AD directory administrator account'
    MinLength: 8
    MaxLength: 64
    AllowedPattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
    ConstraintDescription: 'Must be 8-64 characters with at least one uppercase, lowercase, digit, and special character'

  DirectorySize:
    Type: String
    Default: 'Small'
    AllowedValues:
      - 'Small'
      - 'Large'
    Description: 'Size of the Simple AD directory'

  # WorkSpaces Configuration
  WorkSpaceUserName:
    Type: String
    Default: 'testuser'
    Description: 'Username for the test WorkSpace user'
    MinLength: 1
    MaxLength: 20
    AllowedPattern: '^[a-zA-Z0-9]+$'
    ConstraintDescription: 'Must contain only alphanumeric characters'

  WorkSpaceBundleType:
    Type: String
    Default: 'Standard'
    AllowedValues:
      - 'Value'
      - 'Standard'
      - 'Performance'
      - 'Power'
      - 'PowerPro'
      - 'Graphics'
      - 'GraphicsPro'
    Description: 'WorkSpace bundle type determining performance and applications'

  WorkSpaceRunningMode:
    Type: String
    Default: 'AUTO_STOP'
    AllowedValues:
      - 'AUTO_STOP'
      - 'ALWAYS_ON'
    Description: 'WorkSpace running mode for cost optimization'

  AutoStopTimeoutMinutes:
    Type: Number
    Default: 60
    MinValue: 60
    MaxValue: 36000
    Description: 'Auto-stop timeout in minutes (only applies to AUTO_STOP mode)'

  RootVolumeSizeGib:
    Type: Number
    Default: 80
    MinValue: 80
    MaxValue: 2000
    Description: 'Root volume size in GiB'

  UserVolumeSizeGib:
    Type: Number
    Default: 50
    MinValue: 10
    MaxValue: 2000
    Description: 'User volume size in GiB'

  # Security Configuration
  EnableWorkDocs:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable WorkDocs integration for file sharing'

  EnableSelfService:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable self-service portal for users'

  AllowedIpRange:
    Type: String
    Default: '0.0.0.0/0'
    Description: 'IP range allowed to access WorkSpaces (use specific ranges for production)'
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    ConstraintDescription: 'Must be a valid CIDR block format'

  # Resource Naming
  ResourcePrefix:
    Type: String
    Default: 'workspaces'
    Description: 'Prefix for resource names'
    MinLength: 1
    MaxLength: 20
    AllowedPattern: '^[a-zA-Z0-9-]+$'
    ConstraintDescription: 'Must contain only alphanumeric characters and hyphens'

Conditions:
  # Condition to check if WorkDocs should be enabled
  EnableWorkDocsCondition: !Equals [!Ref EnableWorkDocs, 'true']
  
  # Condition to check if self-service should be enabled
  EnableSelfServiceCondition: !Equals [!Ref EnableSelfService, 'true']
  
  # Condition for AUTO_STOP mode
  AutoStopMode: !Equals [!Ref WorkSpaceRunningMode, 'AUTO_STOP']

Resources:
  # VPC and Networking Resources
  WorkSpacesVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-vpc'
        - Key: Purpose
          Value: 'WorkSpaces Infrastructure'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-igw'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref WorkSpacesVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet for NAT Gateway
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WorkSpacesVPC
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-public-subnet'
        - Key: Type
          Value: 'Public'

  # Private Subnets for WorkSpaces
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WorkSpacesVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-private-subnet-1'
        - Key: Type
          Value: 'Private'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref WorkSpacesVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-private-subnet-2'
        - Key: Type
          Value: 'Private'

  # Elastic IP for NAT Gateway
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-nat-eip'

  # NAT Gateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-nat-gateway'

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WorkSpacesVPC
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-public-rt'

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref WorkSpacesVPC
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-private-rt'

  # Routes
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

  # Route Table Associations
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Simple AD Directory
  SimpleADDirectory:
    Type: AWS::DirectoryService::SimpleAD
    Properties:
      Name: !Sub '${DirectoryName}.local'
      Password: !Ref DirectoryPassword
      Size: !Ref DirectorySize
      Description: 'Simple AD Directory for WorkSpaces'
      VpcSettings:
        VpcId: !Ref WorkSpacesVPC
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  # CloudWatch Log Group for WorkSpaces
  WorkSpacesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/workspaces/${SimpleADDirectory}'
      RetentionInDays: 30

  # CloudWatch Alarm for WorkSpace Connection Failures
  WorkSpaceConnectionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ResourcePrefix}-connection-failures'
      AlarmDescription: 'Monitor WorkSpace connection failures'
      MetricName: 'ConnectionAttempt'
      Namespace: 'AWS/WorkSpaces'
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: 'GreaterThanThreshold'
      TreatMissingData: 'notBreaching'

  # IAM Role for WorkSpaces
  WorkSpacesServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ResourcePrefix}-workspaces-service-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: workspaces.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonWorkSpacesServiceAccess
        - arn:aws:iam::aws:policy/AmazonWorkSpacesSelfServiceAccess
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-workspaces-service-role'

  # IP Access Control Group for WorkSpaces
  WorkSpacesIPGroup:
    Type: AWS::WorkSpaces::ConnectionAlias
    Properties:
      ConnectionString: !Sub '${ResourcePrefix}-connection-alias'
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-connection-alias'

# Custom Resource for WorkSpaces Directory Registration
# Note: This would typically be done via a Lambda-backed custom resource
# For simplicity, this template includes the infrastructure but manual registration is required

Outputs:
  # VPC Information
  VPCId:
    Description: 'ID of the VPC created for WorkSpaces'
    Value: !Ref WorkSpacesVPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC-ID'

  VPCCidr:
    Description: 'CIDR block of the VPC'
    Value: !Ref VpcCidr
    Export:
      Name: !Sub '${AWS::StackName}-VPC-CIDR'

  # Subnet Information
  PublicSubnetId:
    Description: 'ID of the public subnet'
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub '${AWS::StackName}-Public-Subnet-ID'

  PrivateSubnet1Id:
    Description: 'ID of the first private subnet'
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-Private-Subnet-1-ID'

  PrivateSubnet2Id:
    Description: 'ID of the second private subnet'
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-Private-Subnet-2-ID'

  # Directory Service Information
  DirectoryId:
    Description: 'ID of the Simple AD directory'
    Value: !Ref SimpleADDirectory
    Export:
      Name: !Sub '${AWS::StackName}-Directory-ID'

  DirectoryName:
    Description: 'Name of the Simple AD directory'
    Value: !Sub '${DirectoryName}.local'
    Export:
      Name: !Sub '${AWS::StackName}-Directory-Name'

  DirectoryDNSIpAddresses:
    Description: 'DNS IP addresses of the Simple AD directory'
    Value: !Join [',', !GetAtt SimpleADDirectory.DnsIpAddresses]
    Export:
      Name: !Sub '${AWS::StackName}-Directory-DNS-IPs'

  # Network Infrastructure
  InternetGatewayId:
    Description: 'ID of the Internet Gateway'
    Value: !Ref InternetGateway
    Export:
      Name: !Sub '${AWS::StackName}-IGW-ID'

  NATGatewayId:
    Description: 'ID of the NAT Gateway'
    Value: !Ref NATGateway
    Export:
      Name: !Sub '${AWS::StackName}-NAT-Gateway-ID'

  NATGatewayEIP:
    Description: 'Elastic IP address of the NAT Gateway'
    Value: !Ref NATGatewayEIP
    Export:
      Name: !Sub '${AWS::StackName}-NAT-EIP'

  # Monitoring
  LogGroupName:
    Description: 'CloudWatch Log Group for WorkSpaces'
    Value: !Ref WorkSpacesLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-Log-Group'

  ConnectionAlarmName:
    Description: 'CloudWatch Alarm for connection monitoring'
    Value: !Ref WorkSpaceConnectionAlarm
    Export:
      Name: !Sub '${AWS::StackName}-Connection-Alarm'

  # Post-Deployment Instructions
  NextSteps:
    Description: 'Manual steps required after CloudFormation deployment'
    Value: !Sub |
      1. Register the directory (${SimpleADDirectory}) with WorkSpaces service using AWS CLI:
         aws workspaces register-workspace-directory --directory-id ${SimpleADDirectory} --subnet-ids ${PrivateSubnet1} ${PrivateSubnet2} --enable-work-docs --enable-self-service
      2. Create IP access control group:
         aws workspaces create-ip-group --group-name "${ResourcePrefix}-ip-group" --group-desc "IP access control for WorkSpaces" --user-rules "ipRule=${AllowedIpRange},ruleDesc=Allowed IP range"
      3. Get available WorkSpace bundles:
         aws workspaces describe-workspace-bundles --query 'Bundles[?contains(Name, `${WorkSpaceBundleType}`) && contains(Name, `Windows`)].BundleId'
      4. Create WorkSpace for user:
         aws workspaces create-workspaces --workspaces DirectoryId=${SimpleADDirectory},UserName=${WorkSpaceUserName},BundleId=<bundle-id>,UserVolumeEncryptionEnabled=true,RootVolumeEncryptionEnabled=true

  # Cost Estimation
  EstimatedMonthlyCost:
    Description: 'Estimated monthly cost for this infrastructure (excluding WorkSpaces)'
    Value: !Sub |
      VPC Components: ~$45-60/month (NAT Gateway: ~$45, EIP: ~$3.65)
      Simple AD: Free with WorkSpaces
      CloudWatch: ~$1-5/month (logs and alarms)
      WorkSpaces: $25-75/month per WorkSpace (depends on bundle and usage)
      Total Infrastructure: ~$46-65/month + WorkSpace costs

  # Security Recommendations
  SecurityRecommendations:
    Description: 'Security best practices for production deployment'
    Value: !Sub |
      1. Replace the default IP range (${AllowedIpRange}) with specific office/VPN IP ranges
      2. Enable AWS CloudTrail for API call logging
      3. Configure VPC Flow Logs for network monitoring
      4. Implement AWS Config for compliance monitoring
      5. Use AWS Secrets Manager for directory password management
      6. Enable AWS GuardDuty for threat detection
      7. Consider using AWS Managed Microsoft AD for enterprise environments
      8. Implement backup strategy for user data volumes