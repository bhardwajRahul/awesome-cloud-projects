AWSTemplateFormatVersion: '2010-09-09'
Description: 'Serverless Container Application with AWS Fargate - Deploy containerized applications without managing infrastructure'

# Parameters for customization
Parameters:
  ProjectName:
    Type: String
    Default: fargate-demo
    Description: Name prefix for all resources
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters and hyphens
    
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name for resource tagging and configuration
    
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where Fargate tasks will be deployed
    
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet IDs for Fargate task placement (recommend private subnets for production)
    
  ContainerImage:
    Type: String
    Default: nginx:latest
    Description: Container image URI (will use demo app if building from source)
    
  ContainerPort:
    Type: Number
    Default: 3000
    MinValue: 1
    MaxValue: 65535
    Description: Port that the container application listens on
    
  TaskCpu:
    Type: String
    Default: '256'
    AllowedValues:
      - '256'
      - '512'
      - '1024'
      - '2048'
      - '4096'
    Description: CPU units for Fargate task (1 vCPU = 1024 CPU units)
    
  TaskMemory:
    Type: String
    Default: '512'
    AllowedValues:
      - '512'
      - '1024'
      - '2048'
      - '3072'
      - '4096'
      - '5120'
      - '6144'
      - '7168'
      - '8192'
    Description: Memory (MB) for Fargate task
    
  DesiredCount:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 100
    Description: Desired number of running tasks
    
  MinCapacity:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 100
    Description: Minimum number of tasks for auto-scaling
    
  MaxCapacity:
    Type: Number
    Default: 10
    MinValue: 1
    MaxValue: 1000
    Description: Maximum number of tasks for auto-scaling
    
  TargetCpuUtilization:
    Type: Number
    Default: 50
    MinValue: 1
    MaxValue: 100
    Description: Target CPU utilization percentage for auto-scaling
    
  CreateLoadBalancer:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Whether to create an Application Load Balancer for the service
    
  EnableContainerInsights:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable CloudWatch Container Insights for enhanced monitoring

# Conditions for optional resources
Conditions:
  CreateALB: !Equals [!Ref CreateLoadBalancer, 'true']
  EnableInsights: !Equals [!Ref EnableContainerInsights, 'true']
  IsProduction: !Equals [!Ref Environment, 'prod']

# Resources
Resources:
  # ECR Repository for container images
  ContainerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub '${ProjectName}-${Environment}'
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-repository'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # CloudWatch Log Group for container logs
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${ProjectName}-${Environment}'
      RetentionInDays: !If [IsProduction, 30, 7]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-logs'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${ProjectName}-${Environment}-cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
          Base: !Ref DesiredCount
        - CapacityProvider: FARGATE_SPOT
          Weight: 4
      ClusterSettings:
        - Name: containerInsights
          Value: !If [EnableInsights, 'enabled', 'disabled']
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-cluster'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # IAM Role for ECS Task Execution
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-task-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt LogGroup.Arn
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-task-execution-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # IAM Role for ECS Tasks (application permissions)
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-task-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSExecAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-task-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Security Group for Fargate Tasks
  TaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-${Environment}-task-sg'
      GroupDescription: Security group for Fargate tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !If 
            - CreateALB
            - !Ref LoadBalancerSecurityGroup
            - !Ref 'AWS::NoValue'
          CidrIp: !If 
            - CreateALB
            - !Ref 'AWS::NoValue'
            - '0.0.0.0/0'
          Description: !If 
            - CreateALB
            - 'Access from Load Balancer'
            - 'Direct access for testing'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
          Description: 'All outbound traffic'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-task-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Security Group for Load Balancer (if enabled)
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateALB
    Properties:
      GroupName: !Sub '${ProjectName}-${Environment}-alb-sg'
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: 'HTTP access from internet'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
          Description: 'HTTPS access from internet'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
          Description: 'All outbound traffic'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-alb-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Application Load Balancer (optional)
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: CreateALB
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-alb'
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-alb'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Target Group for Load Balancer
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: CreateALB
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-tg'
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-tg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Load Balancer Listener
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: CreateALB
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ProjectName}-${Environment}'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub '${ProjectName}-container'
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - !Sub 'curl -f http://localhost:${ContainerPort}/health || exit 1'
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          Environment:
            - Name: PORT
              Value: !Ref ContainerPort
            - Name: NODE_ENV
              Value: !Ref Environment
            - Name: AWS_REGION
              Value: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-task'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: 
      - !If [CreateALB, LoadBalancerListener, !Ref 'AWS::NoValue']
    Properties:
      ServiceName: !Sub '${ProjectName}-${Environment}-service'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      PlatformVersion: LATEST
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref TaskSecurityGroup
          Subnets: !Ref SubnetIds
          AssignPublicIp: ENABLED  # Change to DISABLED for private subnets
      LoadBalancers: !If
        - CreateALB
        - - ContainerName: !Sub '${ProjectName}-container'
            ContainerPort: !Ref ContainerPort
            TargetGroupArn: !Ref TargetGroup
        - !Ref 'AWS::NoValue'
      HealthCheckGracePeriodSeconds: !If [CreateALB, 300, !Ref 'AWS::NoValue']
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      EnableExecuteCommand: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-service'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Auto Scaling Target
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      ServiceNamespace: ecs
      ResourceId: !Sub 'service/${ECSCluster}/${ECSService.Name}'
      ScalableDimension: ecs:service:DesiredCount
      MinCapacity: !Ref MinCapacity
      MaxCapacity: !Ref MaxCapacity
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'

  # Auto Scaling Policy
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${ProjectName}-${Environment}-cpu-scaling-policy'
      PolicyType: TargetTrackingScaling
      ServiceNamespace: ecs
      ResourceId: !Sub 'service/${ECSCluster}/${ECSService.Name}'
      ScalableDimension: ecs:service:DesiredCount
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: !Ref TargetCpuUtilization
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

  # CloudWatch Alarms for monitoring
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-high-cpu'
      AlarmDescription: 'High CPU utilization alarm for ECS service'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ServiceName
          Value: !Ref ECSService
        - Name: ClusterName
          Value: !Ref ECSCluster
      AlarmActions:
        - !Ref SNSTopic

  # CloudWatch Alarm for memory utilization
  HighMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-high-memory'
      AlarmDescription: 'High memory utilization alarm for ECS service'
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ServiceName
          Value: !Ref ECSService
        - Name: ClusterName
          Value: !Ref ECSCluster
      AlarmActions:
        - !Ref SNSTopic

  # SNS Topic for alarm notifications
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-${Environment}-alerts'
      DisplayName: !Sub '${ProjectName} ${Environment} Alerts'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-alerts'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

# Outputs for integration and verification
Outputs:
  ClusterName:
    Description: 'Name of the ECS cluster'
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'

  ServiceName:
    Description: 'Name of the ECS service'
    Value: !Ref ECSService
    Export:
      Name: !Sub '${AWS::StackName}-ServiceName'

  ServiceArn:
    Description: 'ARN of the ECS service'
    Value: !Ref ECSService
    Export:
      Name: !Sub '${AWS::StackName}-ServiceArn'

  TaskDefinitionArn:
    Description: 'ARN of the task definition'
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub '${AWS::StackName}-TaskDefinitionArn'

  RepositoryUri:
    Description: 'URI of the ECR repository'
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ContainerRepository}'
    Export:
      Name: !Sub '${AWS::StackName}-RepositoryUri'

  LoadBalancerDNS:
    Condition: CreateALB
    Description: 'DNS name of the load balancer'
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNS'

  LoadBalancerHostedZoneId:
    Condition: CreateALB
    Description: 'Hosted zone ID of the load balancer'
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerHostedZoneId'

  SecurityGroupId:
    Description: 'Security group ID for the Fargate tasks'
    Value: !Ref TaskSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'

  LogGroupName:
    Description: 'CloudWatch log group name'
    Value: !Ref LogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroupName'

  ServiceUrl:
    Condition: CreateALB
    Description: 'URL to access the service'
    Value: !Sub 'http://${LoadBalancer.DNSName}'

  AutoScalingTargetId:
    Description: 'Auto scaling target resource ID'
    Value: !Ref AutoScalingTarget
    Export:
      Name: !Sub '${AWS::StackName}-AutoScalingTargetId'

  SNSTopicArn:
    Description: 'SNS Topic ARN for notifications'
    Value: !Ref SNSTopic
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopicArn'