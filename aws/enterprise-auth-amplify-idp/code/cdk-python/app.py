#!/usr/bin/env python3
"""
CDK Python Application for Enterprise Authentication with Amplify and External Identity Providers

This application creates the infrastructure for implementing enterprise authentication
using AWS Amplify with Amazon Cognito User Pools and external SAML/OIDC identity providers.

The stack includes:
- Amazon Cognito User Pool with federation configuration
- Cognito User Pool Client with OAuth settings
- Cognito User Pool Domain for hosted authentication
- SAML Identity Provider configuration
- AWS Amplify application for the frontend
- IAM roles and policies for secure access

Author: Generated by CDK Recipe Generator v1.3
Recipe: Enterprise Authentication with Amplify
"""

import aws_cdk as cdk
from aws_cdk import (
    Stack,
    CfnOutput,
    RemovalPolicy,
    aws_cognito as cognito,
    aws_amplify as amplify,
    aws_iam as iam,
    aws_s3 as s3,
    aws_logs as logs,
)
from constructs import Construct
from typing import Dict, List, Optional
import os


class EnterpriseAuthenticationStack(Stack):
    """
    CDK Stack for Enterprise Authentication with Amplify and External Identity Providers
    
    This stack deploys a complete enterprise authentication solution using:
    - Amazon Cognito User Pools for user management and federation
    - External SAML/OIDC identity provider integration
    - AWS Amplify for hosting the authentication application
    - Secure IAM roles and policies
    """

    def __init__(
        self,
        scope: Construct,
        construct_id: str,
        *,
        environment: str = "dev",
        saml_metadata_url: Optional[str] = None,
        callback_urls: List[str] = None,
        logout_urls: List[str] = None,
        **kwargs
    ) -> None:
        super().__init__(scope, construct_id, **kwargs)

        # Set default values
        self.environment = environment
        self.callback_urls = callback_urls or ["http://localhost:3000/auth/callback"]
        self.logout_urls = logout_urls or ["http://localhost:3000/auth/logout"]
        
        # Create CloudWatch log group for authentication events
        self.auth_log_group = self._create_log_group()
        
        # Create Cognito User Pool for authentication
        self.user_pool = self._create_user_pool()
        
        # Create User Pool Client for application integration
        self.user_pool_client = self._create_user_pool_client()
        
        # Create User Pool Domain for hosted authentication
        self.user_pool_domain = self._create_user_pool_domain()
        
        # Create SAML Identity Provider if metadata URL is provided
        if saml_metadata_url:
            self.saml_identity_provider = self._create_saml_identity_provider(saml_metadata_url)
        
        # Create S3 bucket for Amplify app deployment
        self.amplify_bucket = self._create_amplify_bucket()
        
        # Create IAM roles for authentication
        self.auth_roles = self._create_auth_roles()
        
        # Create Amplify application
        self.amplify_app = self._create_amplify_app()
        
        # Create CloudFormation outputs
        self._create_outputs()

    def _create_log_group(self) -> logs.LogGroup:
        """Create CloudWatch log group for authentication events"""
        return logs.LogGroup(
            self,
            "AuthenticationLogGroup",
            log_group_name=f"/aws/cognito/enterprise-auth-{self.environment}",
            retention=logs.RetentionDays.ONE_MONTH,
            removal_policy=RemovalPolicy.DESTROY
        )

    def _create_user_pool(self) -> cognito.UserPool:
        """
        Create Cognito User Pool with enterprise authentication configuration
        
        Returns:
            cognito.UserPool: Configured user pool for enterprise authentication
        """
        return cognito.UserPool(
            self,
            "EnterpriseUserPool",
            user_pool_name=f"EnterprisePool-{self.environment}",
            
            # Sign-in configuration
            sign_in_aliases=cognito.SignInAliases(
                email=True,
                username=True
            ),
            
            # User attributes
            standard_attributes=cognito.StandardAttributes(
                email=cognito.StandardAttribute(required=True, mutable=True),
                given_name=cognito.StandardAttribute(required=True, mutable=True),
                family_name=cognito.StandardAttribute(required=True, mutable=True),
                preferred_username=cognito.StandardAttribute(required=False, mutable=True)
            ),
            
            # Password policy for enterprise compliance
            password_policy=cognito.PasswordPolicy(
                min_length=12,
                require_lowercase=True,
                require_uppercase=True,
                require_digits=True,
                require_symbols=True
            ),
            
            # Account recovery settings
            account_recovery=cognito.AccountRecovery.EMAIL_ONLY,
            
            # Advanced security features
            advanced_security_mode=cognito.AdvancedSecurityMode.ENFORCED,
            
            # Device tracking for enhanced security
            device_tracking=cognito.DeviceTracking(
                challenge_required_on_new_device=True,
                device_only_remembered_on_user_prompt=True
            ),
            
            # Self sign-up configuration
            self_sign_up_enabled=True,
            user_verification=cognito.UserVerificationConfig(
                email_subject="Verify your email for Enterprise Authentication",
                email_body="Please verify your email by clicking {##Verify Email##}",
                email_style=cognito.VerificationEmailStyle.LINK
            ),
            
            # Deletion protection
            removal_policy=RemovalPolicy.DESTROY,
            
            # Enable logging
            user_pool_name=f"EnterprisePool-{self.environment}"
        )

    def _create_user_pool_client(self) -> cognito.UserPoolClient:
        """
        Create User Pool Client with OAuth and federation support
        
        Returns:
            cognito.UserPoolClient: Configured client for OAuth flows
        """
        return cognito.UserPoolClient(
            self,
            "EnterpriseUserPoolClient",
            user_pool=self.user_pool,
            user_pool_client_name=f"EnterpriseClient-{self.environment}",
            
            # OAuth configuration for federation
            o_auth=cognito.OAuthSettings(
                flows=cognito.OAuthFlows(
                    authorization_code_grant=True,
                    implicit_code_grant=False  # Security best practice
                ),
                scopes=[
                    cognito.OAuthScope.OPENID,
                    cognito.OAuthScope.EMAIL,
                    cognito.OAuthScope.PROFILE
                ],
                callback_urls=self.callback_urls,
                logout_urls=self.logout_urls
            ),
            
            # Enable both Cognito and federated authentication
            supported_identity_providers=[
                cognito.UserPoolClientIdentityProvider.COGNITO
                # SAML provider will be added after creation
            ],
            
            # Security settings
            generate_secret=False,  # For web applications
            prevent_user_existence_errors=True,
            
            # Token validity periods for enterprise security
            access_token_validity=cdk.Duration.hours(1),
            id_token_validity=cdk.Duration.hours(1),
            refresh_token_validity=cdk.Duration.days(30),
            
            # Enable advanced security features
            enable_token_revocation=True
        )

    def _create_user_pool_domain(self) -> cognito.UserPoolDomain:
        """
        Create User Pool Domain for hosted authentication UI
        
        Returns:
            cognito.UserPoolDomain: Domain for authentication endpoints
        """
        domain_prefix = f"enterprise-auth-{self.environment}-{cdk.Aws.ACCOUNT_ID}"[:63]
        
        return cognito.UserPoolDomain(
            self,
            "EnterpriseUserPoolDomain",
            user_pool=self.user_pool,
            cognito_domain=cognito.CognitoDomainOptions(
                domain_prefix=domain_prefix
            )
        )

    def _create_saml_identity_provider(self, metadata_url: str) -> cognito.CfnUserPoolIdentityProvider:
        """
        Create SAML Identity Provider for enterprise federation
        
        Args:
            metadata_url: URL to the SAML metadata XML
            
        Returns:
            cognito.CfnUserPoolIdentityProvider: SAML identity provider configuration
        """
        saml_provider = cognito.CfnUserPoolIdentityProvider(
            self,
            "EnterpriseADProvider",
            user_pool_id=self.user_pool.user_pool_id,
            provider_name="EnterpriseAD",
            provider_type="SAML",
            
            # SAML provider details
            provider_details={
                "MetadataURL": metadata_url
            },
            
            # Attribute mapping from SAML to Cognito
            attribute_mapping={
                "email": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress",
                "family_name": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname",
                "given_name": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname",
                "preferred_username": "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
            }
        )
        
        # Update the User Pool Client to support the SAML provider
        # This needs to be done after the provider is created
        self.user_pool_client.node.add_dependency(saml_provider)
        
        return saml_provider

    def _create_amplify_bucket(self) -> s3.Bucket:
        """
        Create S3 bucket for Amplify application artifacts
        
        Returns:
            s3.Bucket: S3 bucket for application deployment
        """
        return s3.Bucket(
            self,
            "AmplifyArtifactsBucket",
            bucket_name=f"enterprise-auth-amplify-{self.environment}-{cdk.Aws.ACCOUNT_ID}",
            
            # Security configuration
            encryption=s3.BucketEncryption.S3_MANAGED,
            block_public_access=s3.BlockPublicAccess.BLOCK_ALL,
            versioned=True,
            
            # Lifecycle management
            lifecycle_rules=[
                s3.LifecycleRule(
                    id="CleanupOldVersions",
                    enabled=True,
                    noncurrent_version_expiration=cdk.Duration.days(30)
                )
            ],
            
            # Removal policy for development
            removal_policy=RemovalPolicy.DESTROY,
            auto_delete_objects=True
        )

    def _create_auth_roles(self) -> Dict[str, iam.Role]:
        """
        Create IAM roles for authentication and application access
        
        Returns:
            Dict[str, iam.Role]: Dictionary of IAM roles for different access levels
        """
        # Role for authenticated users
        authenticated_role = iam.Role(
            self,
            "AuthenticatedRole",
            role_name=f"EnterpriseAuth-Authenticated-{self.environment}",
            assumed_by=iam.FederatedPrincipal(
                "cognito-identity.amazonaws.com",
                conditions={
                    "StringEquals": {
                        "cognito-identity.amazonaws.com:aud": self.user_pool.user_pool_id
                    },
                    "ForAnyValue:StringLike": {
                        "cognito-identity.amazonaws.com:amr": "authenticated"
                    }
                }
            ),
            inline_policies={
                "AuthenticatedUserPolicy": iam.PolicyDocument(
                    statements=[
                        iam.PolicyStatement(
                            effect=iam.Effect.ALLOW,
                            actions=[
                                "s3:GetObject",
                                "s3:PutObject"
                            ],
                            resources=[
                                f"{self.amplify_bucket.bucket_arn}/protected/${{cognito-identity.amazonaws.com:sub}}/*",
                                f"{self.amplify_bucket.bucket_arn}/private/${{cognito-identity.amazonaws.com:sub}}/*"
                            ]
                        ),
                        iam.PolicyStatement(
                            effect=iam.Effect.ALLOW,
                            actions=[
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            resources=[f"{self.auth_log_group.log_group_arn}:*"]
                        )
                    ]
                )
            }
        )
        
        # Role for unauthenticated users (limited access)
        unauthenticated_role = iam.Role(
            self,
            "UnauthenticatedRole",
            role_name=f"EnterpriseAuth-Unauthenticated-{self.environment}",
            assumed_by=iam.FederatedPrincipal(
                "cognito-identity.amazonaws.com",
                conditions={
                    "StringEquals": {
                        "cognito-identity.amazonaws.com:aud": self.user_pool.user_pool_id
                    },
                    "ForAnyValue:StringLike": {
                        "cognito-identity.amazonaws.com:amr": "unauthenticated"
                    }
                }
            ),
            inline_policies={
                "UnauthenticatedUserPolicy": iam.PolicyDocument(
                    statements=[
                        iam.PolicyStatement(
                            effect=iam.Effect.ALLOW,
                            actions=[
                                "s3:GetObject"
                            ],
                            resources=[
                                f"{self.amplify_bucket.bucket_arn}/public/*"
                            ]
                        )
                    ]
                )
            }
        )
        
        return {
            "authenticated": authenticated_role,
            "unauthenticated": unauthenticated_role
        }

    def _create_amplify_app(self) -> amplify.CfnApp:
        """
        Create Amplify application for the enterprise authentication frontend
        
        Returns:
            amplify.CfnApp: Amplify application configuration
        """
        # Create IAM role for Amplify service
        amplify_role = iam.Role(
            self,
            "AmplifyServiceRole",
            role_name=f"EnterpriseAuth-AmplifyService-{self.environment}",
            assumed_by=iam.ServicePrincipal("amplify.amazonaws.com"),
            managed_policies=[
                iam.ManagedPolicy.from_aws_managed_policy_name("AdministratorAccess-Amplify")
            ]
        )
        
        return amplify.CfnApp(
            self,
            "EnterpriseAuthAmplifyApp",
            name=f"enterprise-auth-{self.environment}",
            description="Enterprise Authentication with Amplify and External Identity Providers",
            
            # Build settings for React application
            build_spec="""version: 1
frontend:
  phases:
    preBuild:
      commands:
        - npm ci
    build:
      commands:
        - npm run build
  artifacts:
    baseDirectory: build
    files:
      - '**/*'
  cache:
    paths:
      - node_modules/**/*""",
            
            # Environment variables for authentication configuration
            environment_variables=[
                amplify.CfnApp.EnvironmentVariableProperty(
                    name="REACT_APP_AWS_REGION",
                    value=cdk.Aws.REGION
                ),
                amplify.CfnApp.EnvironmentVariableProperty(
                    name="REACT_APP_USER_POOL_ID",
                    value=self.user_pool.user_pool_id
                ),
                amplify.CfnApp.EnvironmentVariableProperty(
                    name="REACT_APP_USER_POOL_CLIENT_ID",
                    value=self.user_pool_client.user_pool_client_id
                ),
                amplify.CfnApp.EnvironmentVariableProperty(
                    name="REACT_APP_OAUTH_DOMAIN",
                    value=self.user_pool_domain.domain_name
                )
            ],
            
            # IAM service role
            iam_service_role=amplify_role.role_arn,
            
            # Platform configuration
            platform="WEB"
        )

    def _create_outputs(self) -> None:
        """Create CloudFormation outputs for key resources"""
        
        CfnOutput(
            self,
            "UserPoolId",
            value=self.user_pool.user_pool_id,
            description="Cognito User Pool ID for enterprise authentication",
            export_name=f"EnterpriseAuth-UserPoolId-{self.environment}"
        )
        
        CfnOutput(
            self,
            "UserPoolClientId",
            value=self.user_pool_client.user_pool_client_id,
            description="Cognito User Pool Client ID for application integration",
            export_name=f"EnterpriseAuth-ClientId-{self.environment}"
        )
        
        CfnOutput(
            self,
            "UserPoolDomain",
            value=f"https://{self.user_pool_domain.domain_name}.auth.{cdk.Aws.REGION}.amazoncognito.com",
            description="Cognito User Pool Domain for hosted authentication",
            export_name=f"EnterpriseAuth-Domain-{self.environment}"
        )
        
        CfnOutput(
            self,
            "AmplifyAppId",
            value=self.amplify_app.attr_app_id,
            description="Amplify Application ID for frontend deployment",
            export_name=f"EnterpriseAuth-AmplifyAppId-{self.environment}"
        )
        
        CfnOutput(
            self,
            "AmplifyDefaultDomain",
            value=self.amplify_app.attr_default_domain,
            description="Amplify default domain for application access",
            export_name=f"EnterpriseAuth-AmplifyDomain-{self.environment}"
        )
        
        CfnOutput(
            self,
            "AuthenticationBucket",
            value=self.amplify_bucket.bucket_name,
            description="S3 bucket for authentication artifacts and user content",
            export_name=f"EnterpriseAuth-Bucket-{self.environment}"
        )
        
        # SAML configuration outputs for identity provider setup
        CfnOutput(
            self,
            "SAMLEntityId",
            value=f"urn:amazon:cognito:sp:{self.user_pool.user_pool_id}",
            description="SAML Entity ID for identity provider configuration"
        )
        
        CfnOutput(
            self,
            "SAMLReplyURL",
            value=f"https://{self.user_pool_domain.domain_name}.auth.{cdk.Aws.REGION}.amazoncognito.com/saml2/idpresponse",
            description="SAML Reply URL for identity provider configuration"
        )


class EnterpriseAuthenticationApp(cdk.App):
    """CDK Application for Enterprise Authentication solution"""
    
    def __init__(self):
        super().__init__()
        
        # Get configuration from environment variables or use defaults
        environment = os.environ.get("DEPLOYMENT_ENVIRONMENT", "dev")
        saml_metadata_url = os.environ.get("SAML_METADATA_URL")
        
        # Parse callback and logout URLs from environment
        callback_urls = os.environ.get("CALLBACK_URLS", "http://localhost:3000/auth/callback").split(",")
        logout_urls = os.environ.get("LOGOUT_URLS", "http://localhost:3000/auth/logout").split(",")
        
        # Create the main stack
        EnterpriseAuthenticationStack(
            self,
            f"EnterpriseAuthenticationStack-{environment}",
            environment=environment,
            saml_metadata_url=saml_metadata_url,
            callback_urls=callback_urls,
            logout_urls=logout_urls,
            description=f"Enterprise Authentication with Amplify and External Identity Providers - {environment}",
            
            # Add tags for resource management
            tags={
                "Project": "EnterpriseAuthentication",
                "Environment": environment,
                "ManagedBy": "CDK",
                "Recipe": "enterprise-authentication-amplify-external-identity-providers"
            }
        )


# Create and run the application
if __name__ == "__main__":
    app = EnterpriseAuthenticationApp()
    app.synth()