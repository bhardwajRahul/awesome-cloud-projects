AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete nested stack infrastructure with network, security, and application layers'

# =============================================================================
# METADATA
# =============================================================================
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Project Configuration"
        Parameters:
          - ProjectName
          - Environment
          - TemplateBucketName
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCidr
          - PublicSubnet1Cidr
          - PublicSubnet2Cidr
          - PrivateSubnet1Cidr
          - PrivateSubnet2Cidr
      - Label:
          default: "Application Configuration"
        Parameters:
          - InstanceType
          - MinSize
          - MaxSize
          - DesiredCapacity
          - DBInstanceClass
          - DBAllocatedStorage
    ParameterLabels:
      ProjectName:
        default: "Project Name"
      Environment:
        default: "Environment"
      TemplateBucketName:
        default: "S3 Template Bucket"
      VpcCidr:
        default: "VPC CIDR Block"

# =============================================================================
# PARAMETERS
# =============================================================================
Parameters:
  ProjectName:
    Type: String
    Default: webapp
    Description: Project name for resource tagging and naming
    MinLength: 3
    MaxLength: 20
    AllowedPattern: '^[a-z][a-z0-9-]*[a-z0-9]$'
    ConstraintDescription: Must be 3-20 characters, start with letter, contain only lowercase letters, numbers, and hyphens

  Environment:
    Type: String
    Default: development
    AllowedValues: 
      - development
      - staging
      - production
    Description: Environment name for resource configuration and tagging

  TemplateBucketName:
    Type: String
    Description: S3 bucket name containing nested stack templates
    MinLength: 3
    MaxLength: 63
    AllowedPattern: '^[a-z0-9][a-z0-9-]*[a-z0-9]$'
    ConstraintDescription: Must be a valid S3 bucket name

  VpcCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: CIDR block for VPC (must be /16 network)
    AllowedPattern: '^10\.\d{1,3}\.\d{1,3}\.0/16$'
    ConstraintDescription: Must be a valid /16 CIDR block in 10.x.x.0/16 format

  PublicSubnet1Cidr:
    Type: String
    Default: '10.0.1.0/24'
    Description: CIDR block for public subnet 1
    AllowedPattern: '^10\.\d{1,3}\.\d{1,3}\.0/24$'

  PublicSubnet2Cidr:
    Type: String
    Default: '10.0.2.0/24'
    Description: CIDR block for public subnet 2
    AllowedPattern: '^10\.\d{1,3}\.\d{1,3}\.0/24$'

  PrivateSubnet1Cidr:
    Type: String
    Default: '10.0.10.0/24'
    Description: CIDR block for private subnet 1
    AllowedPattern: '^10\.\d{1,3}\.\d{1,3}\.0/24$'

  PrivateSubnet2Cidr:
    Type: String
    Default: '10.0.20.0/24'
    Description: CIDR block for private subnet 2
    AllowedPattern: '^10\.\d{1,3}\.\d{1,3}\.0/24$'

  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    Description: EC2 instance type for application servers

  MinSize:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 10
    Description: Minimum number of instances in Auto Scaling Group

  MaxSize:
    Type: Number
    Default: 4
    MinValue: 1
    MaxValue: 20
    Description: Maximum number of instances in Auto Scaling Group

  DesiredCapacity:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
    Description: Desired number of instances in Auto Scaling Group

  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
    Description: RDS instance class for database

  DBAllocatedStorage:
    Type: Number
    Default: 20
    MinValue: 20
    MaxValue: 1000
    Description: RDS allocated storage in GB

# =============================================================================
# MAPPINGS
# =============================================================================
Mappings:
  EnvironmentSettings:
    development:
      EnableMultiAZ: false
      DeletionProtection: false
      BackupRetentionPeriod: 1
      PerformanceInsights: false
    staging:
      EnableMultiAZ: false
      DeletionProtection: false
      BackupRetentionPeriod: 7
      PerformanceInsights: true
    production:
      EnableMultiAZ: true
      DeletionProtection: true
      BackupRetentionPeriod: 30
      PerformanceInsights: true

# =============================================================================
# CONDITIONS
# =============================================================================
Conditions:
  IsProduction: !Equals [!Ref Environment, production]
  IsNotDevelopment: !Not [!Equals [!Ref Environment, development]]

# =============================================================================
# RESOURCES
# =============================================================================
Resources:
  # ---------------------------------------------------------------------------
  # NETWORK INFRASTRUCTURE NESTED STACK
  # ---------------------------------------------------------------------------
  NetworkStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/network-template.yaml'
      Parameters:
        Environment: !Ref Environment
        ProjectName: !Ref ProjectName
        VpcCidr: !Ref VpcCidr
        PublicSubnet1Cidr: !Ref PublicSubnet1Cidr
        PublicSubnet2Cidr: !Ref PublicSubnet2Cidr
        PrivateSubnet1Cidr: !Ref PrivateSubnet1Cidr
        PrivateSubnet2Cidr: !Ref PrivateSubnet2Cidr
      TimeoutInMinutes: 30
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-network-stack'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Component
          Value: Network
        - Key: StackType
          Value: Nested

  # ---------------------------------------------------------------------------
  # SECURITY INFRASTRUCTURE NESTED STACK
  # ---------------------------------------------------------------------------
  SecurityStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: NetworkStack
    Properties:
      TemplateURL: !Sub 'https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/security-template.yaml'
      Parameters:
        Environment: !Ref Environment
        ProjectName: !Ref ProjectName
        VpcId: !GetAtt NetworkStack.Outputs.VpcId
        VpcCidr: !GetAtt NetworkStack.Outputs.VpcCidr
      TimeoutInMinutes: 20
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-security-stack'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Component
          Value: Security
        - Key: StackType
          Value: Nested

  # ---------------------------------------------------------------------------
  # APPLICATION INFRASTRUCTURE NESTED STACK
  # ---------------------------------------------------------------------------
  ApplicationStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: 
      - NetworkStack
      - SecurityStack
    Properties:
      TemplateURL: !Sub 'https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/application-template.yaml'
      Parameters:
        Environment: !Ref Environment
        ProjectName: !Ref ProjectName
        VpcId: !GetAtt NetworkStack.Outputs.VpcId
        PublicSubnets: !GetAtt NetworkStack.Outputs.PublicSubnets
        PrivateSubnets: !GetAtt NetworkStack.Outputs.PrivateSubnets
        ALBSecurityGroupId: !GetAtt SecurityStack.Outputs.ALBSecurityGroupId
        ApplicationSecurityGroupId: !GetAtt SecurityStack.Outputs.ApplicationSecurityGroupId
        DatabaseSecurityGroupId: !GetAtt SecurityStack.Outputs.DatabaseSecurityGroupId
        EC2InstanceProfileArn: !GetAtt SecurityStack.Outputs.EC2InstanceProfileArn
        RDSMonitoringRoleArn: !GetAtt SecurityStack.Outputs.RDSMonitoringRoleArn
        InstanceType: !Ref InstanceType
        MinSize: !Ref MinSize
        MaxSize: !Ref MaxSize
        DesiredCapacity: !Ref DesiredCapacity
        DBInstanceClass: !Ref DBInstanceClass
        DBAllocatedStorage: !Ref DBAllocatedStorage
        EnableMultiAZ: !FindInMap [EnvironmentSettings, !Ref Environment, EnableMultiAZ]
        DeletionProtection: !FindInMap [EnvironmentSettings, !Ref Environment, DeletionProtection]
        BackupRetentionPeriod: !FindInMap [EnvironmentSettings, !Ref Environment, BackupRetentionPeriod]
        PerformanceInsights: !FindInMap [EnvironmentSettings, !Ref Environment, PerformanceInsights]
      TimeoutInMinutes: 45
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-application-stack'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Component
          Value: Application
        - Key: StackType
          Value: Nested

  # ---------------------------------------------------------------------------
  # CLOUDWATCH DASHBOARD FOR MONITORING
  # ---------------------------------------------------------------------------
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-${Environment}-infrastructure'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${ApplicationStack.Outputs.LoadBalancerArn}" ],
                  [ ".", "TargetResponseTime", ".", "." ],
                  [ ".", "HTTPCode_Target_2XX_Count", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Application Load Balancer Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/AutoScaling", "GroupDesiredCapacity", "AutoScalingGroupName", "${ApplicationStack.Outputs.AutoScalingGroupName}" ],
                  [ ".", "GroupInServiceInstances", ".", "." ],
                  [ ".", "GroupTotalInstances", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Auto Scaling Group Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/RDS", "CPUUtilization", "DBInstanceIdentifier", "${ApplicationStack.Outputs.DatabaseInstanceId}" ],
                  [ ".", "DatabaseConnections", ".", "." ],
                  [ ".", "ReadLatency", ".", "." ],
                  [ ".", "WriteLatency", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "RDS Database Metrics",
                "period": 300
              }
            }
          ]
        }

  # ---------------------------------------------------------------------------
  # CLOUDFORMATION STACK SETS (FOR CROSS-REGION DEPLOYMENT)
  # ---------------------------------------------------------------------------
  StackSetAdministrationRole:
    Type: AWS::IAM::Role
    Condition: IsProduction
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-stackset-admin-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCloudFormationStacksetsOrgAdminServiceRolePolicy
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: StackSet

# =============================================================================
# OUTPUTS
# =============================================================================
Outputs:
  # ---------------------------------------------------------------------------
  # STACK IDENTIFIERS
  # ---------------------------------------------------------------------------
  RootStackId:
    Description: Root stack ID
    Value: !Ref AWS::StackId
    Export:
      Name: !Sub '${AWS::StackName}-RootStackId'

  NetworkStackId:
    Description: Network nested stack ID
    Value: !Ref NetworkStack
    Export:
      Name: !Sub '${AWS::StackName}-NetworkStackId'

  SecurityStackId:
    Description: Security nested stack ID
    Value: !Ref SecurityStack
    Export:
      Name: !Sub '${AWS::StackName}-SecurityStackId'

  ApplicationStackId:
    Description: Application nested stack ID
    Value: !Ref ApplicationStack
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationStackId'

  # ---------------------------------------------------------------------------
  # NETWORK RESOURCES
  # ---------------------------------------------------------------------------
  VpcId:
    Description: VPC ID from network stack
    Value: !GetAtt NetworkStack.Outputs.VpcId
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'

  VpcCidr:
    Description: VPC CIDR block
    Value: !GetAtt NetworkStack.Outputs.VpcCidr
    Export:
      Name: !Sub '${AWS::StackName}-VpcCidr'

  PublicSubnets:
    Description: List of public subnet IDs
    Value: !GetAtt NetworkStack.Outputs.PublicSubnets
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnets'

  PrivateSubnets:
    Description: List of private subnet IDs
    Value: !GetAtt NetworkStack.Outputs.PrivateSubnets
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnets'

  PublicSubnet1Id:
    Description: Public subnet 1 ID
    Value: !GetAtt NetworkStack.Outputs.PublicSubnet1Id
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1Id'

  PublicSubnet2Id:
    Description: Public subnet 2 ID
    Value: !GetAtt NetworkStack.Outputs.PublicSubnet2Id
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2Id'

  PrivateSubnet1Id:
    Description: Private subnet 1 ID
    Value: !GetAtt NetworkStack.Outputs.PrivateSubnet1Id
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1Id'

  PrivateSubnet2Id:
    Description: Private subnet 2 ID
    Value: !GetAtt NetworkStack.Outputs.PrivateSubnet2Id
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2Id'

  # ---------------------------------------------------------------------------
  # SECURITY RESOURCES
  # ---------------------------------------------------------------------------
  ALBSecurityGroupId:
    Description: Application Load Balancer security group ID
    Value: !GetAtt SecurityStack.Outputs.ALBSecurityGroupId
    Export:
      Name: !Sub '${AWS::StackName}-ALBSecurityGroupId'

  ApplicationSecurityGroupId:
    Description: Application security group ID
    Value: !GetAtt SecurityStack.Outputs.ApplicationSecurityGroupId
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationSecurityGroupId'

  DatabaseSecurityGroupId:
    Description: Database security group ID
    Value: !GetAtt SecurityStack.Outputs.DatabaseSecurityGroupId
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSecurityGroupId'

  BastionSecurityGroupId:
    Description: Bastion host security group ID
    Value: !GetAtt SecurityStack.Outputs.BastionSecurityGroupId
    Export:
      Name: !Sub '${AWS::StackName}-BastionSecurityGroupId'

  EC2InstanceRoleArn:
    Description: EC2 instance role ARN
    Value: !GetAtt SecurityStack.Outputs.EC2InstanceRoleArn
    Export:
      Name: !Sub '${AWS::StackName}-EC2InstanceRoleArn'

  # ---------------------------------------------------------------------------
  # APPLICATION RESOURCES
  # ---------------------------------------------------------------------------
  ApplicationURL:
    Description: Application URL via load balancer
    Value: !Sub 'http://${ApplicationStack.Outputs.LoadBalancerDNS}'
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationURL'

  LoadBalancerDNS:
    Description: Application Load Balancer DNS name
    Value: !GetAtt ApplicationStack.Outputs.LoadBalancerDNS
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNS'

  LoadBalancerArn:
    Description: Application Load Balancer ARN
    Value: !GetAtt ApplicationStack.Outputs.LoadBalancerArn
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerArn'

  AutoScalingGroupName:
    Description: Auto Scaling Group name
    Value: !GetAtt ApplicationStack.Outputs.AutoScalingGroupName
    Export:
      Name: !Sub '${AWS::StackName}-AutoScalingGroupName'

  DatabaseEndpoint:
    Description: RDS database endpoint
    Value: !GetAtt ApplicationStack.Outputs.DatabaseEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseEndpoint'

  DatabasePort:
    Description: RDS database port
    Value: !GetAtt ApplicationStack.Outputs.DatabasePort
    Export:
      Name: !Sub '${AWS::StackName}-DatabasePort'

  DatabaseSecretArn:
    Description: Database credentials secret ARN
    Value: !GetAtt ApplicationStack.Outputs.DatabaseSecretArn
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSecretArn'

  # ---------------------------------------------------------------------------
  # MONITORING RESOURCES
  # ---------------------------------------------------------------------------
  MonitoringDashboardURL:
    Description: CloudWatch dashboard URL
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-${Environment}-infrastructure'
    Export:
      Name: !Sub '${AWS::StackName}-MonitoringDashboardURL'

  # ---------------------------------------------------------------------------
  # DEPLOYMENT METADATA
  # ---------------------------------------------------------------------------
  DeploymentTimestamp:
    Description: Deployment timestamp
    Value: !Sub '${AWS::StackCreationTime}'
    Export:
      Name: !Sub '${AWS::StackName}-DeploymentTimestamp'

  StackConfiguration:
    Description: Stack configuration summary
    Value: !Sub '${ProjectName}-${Environment} (${InstanceType}, ${MinSize}-${MaxSize} instances, ${DBInstanceClass})'
    Export:
      Name: !Sub '${AWS::StackName}-StackConfiguration'

  CrossStackReferences:
    Description: Number of cross-stack references used
    Value: '15'
    Export:
      Name: !Sub '${AWS::StackName}-CrossStackReferences'

  NestedStackCount:
    Description: Total number of nested stacks
    Value: '3'
    Export:
      Name: !Sub '${AWS::StackName}-NestedStackCount'