#!/usr/bin/env python3
"""
AWS CDK Python application for Site-to-Site VPN Recipe

This application creates a complete AWS infrastructure for establishing
secure Site-to-Site VPN connections between on-premises networks and AWS VPC.

Author: Generated by Claude Code
Recipe: Site-to-Site VPN Connections with AWS
"""

import os
from typing import Dict, List, Optional

import aws_cdk as cdk
from aws_cdk import (
    Stack,
    CfnOutput,
    Tags,
    aws_ec2 as ec2,
    aws_cloudwatch as cloudwatch,
    aws_iam as iam,
)
from constructs import Construct


class VpnSiteToSiteStack(Stack):
    """
    AWS CDK Stack for Site-to-Site VPN infrastructure.
    
    This stack creates:
    - VPC with public and private subnets
    - Internet Gateway and route tables
    - Customer Gateway and Virtual Private Gateway
    - Site-to-Site VPN connection with BGP routing
    - Security groups for VPN access
    - Test EC2 instance for connectivity validation
    - CloudWatch dashboard for monitoring
    """

    def __init__(
        self,
        scope: Construct,
        construct_id: str,
        customer_gateway_ip: str,
        customer_bgp_asn: int = 65000,
        aws_bgp_asn: int = 64512,
        onprem_cidr: str = "10.0.0.0/16",
        **kwargs
    ) -> None:
        """
        Initialize the VPN Site-to-Site stack.

        Args:
            scope: CDK scope
            construct_id: Construct identifier
            customer_gateway_ip: Public IP address of on-premises VPN device
            customer_bgp_asn: BGP ASN for customer gateway (default: 65000)
            aws_bgp_asn: BGP ASN for AWS side (default: 64512)
            onprem_cidr: On-premises network CIDR (default: 10.0.0.0/16)
            **kwargs: Additional CDK stack arguments
        """
        super().__init__(scope, construct_id, **kwargs)

        # Store configuration
        self.customer_gateway_ip = customer_gateway_ip
        self.customer_bgp_asn = customer_bgp_asn
        self.aws_bgp_asn = aws_bgp_asn
        self.onprem_cidr = onprem_cidr

        # Create VPC infrastructure
        self.vpc = self._create_vpc()
        
        # Create internet gateway and routing
        self.internet_gateway = self._create_internet_gateway()
        
        # Create subnets
        self.public_subnet, self.private_subnet = self._create_subnets()
        
        # Create custom route table for VPN
        self.vpn_route_table = self._create_vpn_route_table()
        
        # Create VPN infrastructure
        self.customer_gateway = self._create_customer_gateway()
        self.vpn_gateway = self._create_vpn_gateway()
        self.vpn_connection = self._create_vpn_connection()
        
        # Configure route propagation
        self._configure_route_propagation()
        
        # Create security group
        self.security_group = self._create_security_group()
        
        # Create test instance
        self.test_instance = self._create_test_instance()
        
        # Create CloudWatch dashboard
        self.dashboard = self._create_cloudwatch_dashboard()
        
        # Add outputs
        self._create_outputs()

    def _create_vpc(self) -> ec2.Vpc:
        """Create VPC with custom configuration."""
        vpc = ec2.Vpc(
            self,
            "VpnDemoVpc",
            ip_addresses=ec2.IpAddresses.cidr("172.31.0.0/16"),
            max_azs=2,
            enable_dns_hostnames=True,
            enable_dns_support=True,
            subnet_configuration=[
                ec2.SubnetConfiguration(
                    name="Public",
                    subnet_type=ec2.SubnetType.PUBLIC,
                    cidr_mask=20,
                ),
                ec2.SubnetConfiguration(
                    name="Private",
                    subnet_type=ec2.SubnetType.PRIVATE_ISOLATED,
                    cidr_mask=20,
                ),
            ],
        )
        
        # Add tags
        Tags.of(vpc).add("Name", "vpn-demo-vpc")
        Tags.of(vpc).add("Purpose", "VPN Site-to-Site Demo")
        
        return vpc

    def _create_internet_gateway(self) -> ec2.CfnInternetGateway:
        """Create and attach Internet Gateway."""
        igw = ec2.CfnInternetGateway(
            self,
            "VpnDemoIgw",
            tags=[{"key": "Name", "value": "vpn-demo-igw"}],
        )
        
        # Attach to VPC
        ec2.CfnVPCGatewayAttachment(
            self,
            "VpnDemoIgwAttachment",
            vpc_id=self.vpc.vpc_id,
            internet_gateway_id=igw.ref,
        )
        
        return igw

    def _create_subnets(self) -> tuple[ec2.ISubnet, ec2.ISubnet]:
        """Get references to created subnets."""
        public_subnet = self.vpc.public_subnets[0]
        private_subnet = self.vpc.isolated_subnets[0]
        
        return public_subnet, private_subnet

    def _create_vpn_route_table(self) -> ec2.CfnRouteTable:
        """Create custom route table for VPN routing."""
        route_table = ec2.CfnRouteTable(
            self,
            "VpnRouteTable",
            vpc_id=self.vpc.vpc_id,
            tags=[{"key": "Name", "value": "vpn-demo-route-table"}],
        )
        
        # Associate with private subnet
        ec2.CfnSubnetRouteTableAssociation(
            self,
            "VpnRouteTableAssociation",
            route_table_id=route_table.ref,
            subnet_id=self.private_subnet.subnet_id,
        )
        
        return route_table

    def _create_customer_gateway(self) -> ec2.CfnCustomerGateway:
        """Create Customer Gateway for on-premises VPN device."""
        customer_gateway = ec2.CfnCustomerGateway(
            self,
            "VpnCustomerGateway",
            type="ipsec.1",
            ip_address=self.customer_gateway_ip,
            bgp_asn=self.customer_bgp_asn,
            tags=[{"key": "Name", "value": "vpn-demo-customer-gateway"}],
        )
        
        return customer_gateway

    def _create_vpn_gateway(self) -> ec2.CfnVPNGateway:
        """Create Virtual Private Gateway for AWS side."""
        vpn_gateway = ec2.CfnVPNGateway(
            self,
            "VpnVirtualGateway",
            type="ipsec.1",
            amazon_side_asn=self.aws_bgp_asn,
            tags=[{"key": "Name", "value": "vpn-demo-virtual-gateway"}],
        )
        
        # Attach to VPC
        ec2.CfnVPCGatewayAttachment(
            self,
            "VpnGatewayAttachment",
            vpc_id=self.vpc.vpc_id,
            vpn_gateway_id=vpn_gateway.ref,
        )
        
        return vpn_gateway

    def _create_vpn_connection(self) -> ec2.CfnVPNConnection:
        """Create Site-to-Site VPN connection."""
        vpn_connection = ec2.CfnVPNConnection(
            self,
            "VpnConnection",
            type="ipsec.1",
            customer_gateway_id=self.customer_gateway.ref,
            vpn_gateway_id=self.vpn_gateway.ref,
            static_routes_only=False,  # Enable BGP routing
            tags=[{"key": "Name", "value": "vpn-demo-connection"}],
        )
        
        return vpn_connection

    def _configure_route_propagation(self) -> None:
        """Configure route propagation from VPN Gateway to route table."""
        ec2.CfnVPNGatewayRoutePropagation(
            self,
            "VpnGatewayRoutePropagation",
            route_table_ids=[self.vpn_route_table.ref],
            vpn_gateway_id=self.vpn_gateway.ref,
        )

    def _create_security_group(self) -> ec2.SecurityGroup:
        """Create security group for VPN access."""
        security_group = ec2.SecurityGroup(
            self,
            "VpnSecurityGroup",
            vpc=self.vpc,
            description="Security group for VPN testing",
            security_group_name="vpn-demo-sg",
            allow_all_outbound=True,
        )
        
        # Allow SSH from on-premises network
        security_group.add_ingress_rule(
            peer=ec2.Peer.ipv4(self.onprem_cidr),
            connection=ec2.Port.tcp(22),
            description="SSH from on-premises network",
        )
        
        # Allow ICMP from on-premises network
        security_group.add_ingress_rule(
            peer=ec2.Peer.ipv4(self.onprem_cidr),
            connection=ec2.Port.icmp_ping(),
            description="ICMP from on-premises network",
        )
        
        # Allow all traffic from same security group
        security_group.add_ingress_rule(
            peer=ec2.Peer.security_group_id(security_group.security_group_id),
            connection=ec2.Port.all_traffic(),
            description="All traffic from same security group",
        )
        
        # Add tags
        Tags.of(security_group).add("Name", "vpn-demo-sg")
        
        return security_group

    def _create_test_instance(self) -> ec2.Instance:
        """Create test EC2 instance in private subnet."""
        # Get latest Amazon Linux 2 AMI
        ami = ec2.MachineImage.latest_amazon_linux2()
        
        # Create instance
        instance = ec2.Instance(
            self,
            "VpnTestInstance",
            instance_type=ec2.InstanceType.of(
                ec2.InstanceClass.BURSTABLE3,
                ec2.InstanceSize.MICRO,
            ),
            machine_image=ami,
            vpc=self.vpc,
            subnet_selection=ec2.SubnetSelection(
                subnet_type=ec2.SubnetType.PRIVATE_ISOLATED
            ),
            security_group=self.security_group,
            user_data=ec2.UserData.for_linux(),
        )
        
        # Add user data for basic configuration
        instance.add_user_data(
            "#!/bin/bash",
            "yum update -y",
            "yum install -y tcpdump telnet",
            "echo 'VPN test instance configured' > /tmp/setup-complete",
        )
        
        # Add tags
        Tags.of(instance).add("Name", "vpn-test-instance")
        Tags.of(instance).add("Purpose", "VPN connectivity testing")
        
        return instance

    def _create_cloudwatch_dashboard(self) -> cloudwatch.Dashboard:
        """Create CloudWatch dashboard for VPN monitoring."""
        dashboard = cloudwatch.Dashboard(
            self,
            "VpnMonitoringDashboard",
            dashboard_name="VPN-Site-to-Site-Monitoring",
        )
        
        # VPN connection state widget
        connection_state_widget = cloudwatch.GraphWidget(
            title="VPN Connection State",
            left=[
                cloudwatch.Metric(
                    namespace="AWS/VPN",
                    metric_name="VpnState",
                    dimensions_map={"VpnId": self.vpn_connection.ref},
                    statistic="Average",
                    period=cdk.Duration.minutes(5),
                ),
            ],
            width=12,
            height=6,
        )
        
        # VPN tunnel state widget
        tunnel_state_widget = cloudwatch.GraphWidget(
            title="VPN Tunnel State",
            left=[
                cloudwatch.Metric(
                    namespace="AWS/VPN",
                    metric_name="VpnTunnelState",
                    dimensions_map={"VpnId": self.vpn_connection.ref},
                    statistic="Average",
                    period=cdk.Duration.minutes(5),
                ),
            ],
            width=12,
            height=6,
        )
        
        # VPN traffic widget
        traffic_widget = cloudwatch.GraphWidget(
            title="VPN Traffic",
            left=[
                cloudwatch.Metric(
                    namespace="AWS/VPN",
                    metric_name="VpnPacketsReceived",
                    dimensions_map={"VpnId": self.vpn_connection.ref},
                    statistic="Sum",
                    period=cdk.Duration.minutes(5),
                ),
                cloudwatch.Metric(
                    namespace="AWS/VPN",
                    metric_name="VpnPacketsSent",
                    dimensions_map={"VpnId": self.vpn_connection.ref},
                    statistic="Sum",
                    period=cdk.Duration.minutes(5),
                ),
            ],
            width=12,
            height=6,
        )
        
        # Add widgets to dashboard
        dashboard.add_widgets(
            connection_state_widget,
            tunnel_state_widget,
            traffic_widget,
        )
        
        return dashboard

    def _create_outputs(self) -> None:
        """Create CloudFormation outputs for important resources."""
        CfnOutput(
            self,
            "VpcId",
            value=self.vpc.vpc_id,
            description="VPC ID",
            export_name=f"{self.stack_name}-VpcId",
        )
        
        CfnOutput(
            self,
            "CustomerGatewayId",
            value=self.customer_gateway.ref,
            description="Customer Gateway ID",
            export_name=f"{self.stack_name}-CustomerGatewayId",
        )
        
        CfnOutput(
            self,
            "VpnGatewayId",
            value=self.vpn_gateway.ref,
            description="Virtual Private Gateway ID",
            export_name=f"{self.stack_name}-VpnGatewayId",
        )
        
        CfnOutput(
            self,
            "VpnConnectionId",
            value=self.vpn_connection.ref,
            description="VPN Connection ID",
            export_name=f"{self.stack_name}-VpnConnectionId",
        )
        
        CfnOutput(
            self,
            "TestInstanceId",
            value=self.test_instance.instance_id,
            description="Test Instance ID",
            export_name=f"{self.stack_name}-TestInstanceId",
        )
        
        CfnOutput(
            self,
            "TestInstancePrivateIp",
            value=self.test_instance.instance_private_ip,
            description="Test Instance Private IP",
            export_name=f"{self.stack_name}-TestInstancePrivateIp",
        )
        
        CfnOutput(
            self,
            "SecurityGroupId",
            value=self.security_group.security_group_id,
            description="Security Group ID",
            export_name=f"{self.stack_name}-SecurityGroupId",
        )
        
        CfnOutput(
            self,
            "DashboardUrl",
            value=f"https://console.aws.amazon.com/cloudwatch/home?region={self.region}#dashboards:name={self.dashboard.dashboard_name}",
            description="CloudWatch Dashboard URL",
        )


def main() -> None:
    """Main function to create and deploy the CDK application."""
    app = cdk.App()
    
    # Get configuration from environment variables or use defaults
    customer_gateway_ip = app.node.try_get_context("customer_gateway_ip")
    if not customer_gateway_ip:
        customer_gateway_ip = os.environ.get("CDK_CUSTOMER_GATEWAY_IP", "203.0.113.12")
    
    customer_bgp_asn = int(app.node.try_get_context("customer_bgp_asn") or 65000)
    aws_bgp_asn = int(app.node.try_get_context("aws_bgp_asn") or 64512)
    onprem_cidr = app.node.try_get_context("onprem_cidr") or "10.0.0.0/16"
    
    # Create the stack
    stack = VpnSiteToSiteStack(
        app,
        "VpnSiteToSiteStack",
        customer_gateway_ip=customer_gateway_ip,
        customer_bgp_asn=customer_bgp_asn,
        aws_bgp_asn=aws_bgp_asn,
        onprem_cidr=onprem_cidr,
        description="AWS Site-to-Site VPN infrastructure stack",
    )
    
    # Add tags to the stack
    Tags.of(stack).add("Project", "VPN-Site-to-Site-Demo")
    Tags.of(stack).add("Environment", "Development")
    Tags.of(stack).add("Owner", "CDK-Application")
    
    # Synthesize the app
    app.synth()


if __name__ == "__main__":
    main()