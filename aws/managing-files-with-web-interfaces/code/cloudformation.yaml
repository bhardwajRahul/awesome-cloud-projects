AWSTemplateFormatVersion: '2010-09-09'
Description: 'Self-Service File Management with AWS Transfer Family Web Apps, S3, IAM Identity Center, and S3 Access Grants'

# CloudFormation template for building secure, user-friendly file sharing solutions
# This template creates a complete Transfer Family Web App integrated with IAM Identity Center
# and S3 Access Grants for fine-grained access control

Parameters:
  # Infrastructure Configuration
  EnvironmentName:
    Type: String
    Default: 'demo'
    Description: 'Environment name for resource naming and tagging'
    AllowedPattern: '^[a-z0-9\-]{2,20}$'
    ConstraintDescription: 'Must be 2-20 characters, lowercase letters, numbers, and hyphens only'

  ProjectName:
    Type: String
    Default: 'file-management'
    Description: 'Project name for resource naming and tagging'
    AllowedPattern: '^[a-z0-9\-]{2,30}$'
    ConstraintDescription: 'Must be 2-30 characters, lowercase letters, numbers, and hyphens only'

  # IAM Identity Center Configuration
  IdentityCenterInstanceArn:
    Type: String
    Description: 'ARN of the existing IAM Identity Center instance (required)'
    AllowedPattern: '^arn:aws:sso:::instance/ssoins-[a-z0-9]{10}$'
    ConstraintDescription: 'Must be a valid IAM Identity Center instance ARN'

  IdentityStoreId:
    Type: String
    Description: 'ID of the IAM Identity Center identity store'
    AllowedPattern: '^d-[a-z0-9]{10}$'
    ConstraintDescription: 'Must be a valid Identity Store ID'

  # S3 Configuration
  S3BucketName:
    Type: String
    Default: ''
    Description: 'Custom S3 bucket name (leave empty for auto-generated name)'
    AllowedPattern: '^([a-z0-9\-]{3,63})?$'
    ConstraintDescription: 'Must be 3-63 characters, lowercase letters, numbers, and hyphens only'

  EnableS3Versioning:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable S3 bucket versioning for data protection'

  S3StorageClass:
    Type: String
    Default: 'STANDARD'
    AllowedValues: ['STANDARD', 'STANDARD_IA', 'ONEZONE_IA', 'INTELLIGENT_TIERING']
    Description: 'Default S3 storage class for new objects'

  # Web App Configuration
  WebAppBrandingTitle:
    Type: String
    Default: 'Secure File Management Portal'
    Description: 'Title for the Transfer Family Web App'
    MaxLength: 100

  WebAppBrandingDescription:
    Type: String
    Default: 'Upload, download, and manage your files securely'
    Description: 'Description for the Transfer Family Web App'
    MaxLength: 200

  # Network Configuration
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: 'VPC ID for the Transfer Family Web App endpoint'

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: 'Subnet IDs for the Transfer Family Web App endpoint (at least one required)'

  # Security Configuration
  AllowedCIDRBlocks:
    Type: CommaDelimitedList
    Default: '0.0.0.0/0'
    Description: 'CIDR blocks allowed to access the web app (comma-separated)'

  KMSKeyId:
    Type: String
    Default: 'alias/aws/s3'
    Description: 'KMS key ID for S3 bucket encryption (use alias/aws/s3 for AWS managed key)'

  # Test User Configuration (Optional)
  CreateTestUser:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Create a test user in IAM Identity Center for demonstration'

  TestUserName:
    Type: String
    Default: 'testuser'
    Description: 'Username for the test user (only if CreateTestUser is true)'
    AllowedPattern: '^[a-zA-Z0-9\-\.\_]{1,64}$'
    ConstraintDescription: 'Must be 1-64 characters, letters, numbers, hyphens, dots, and underscores only'

  TestUserEmail:
    Type: String
    Default: 'testuser@example.com'
    Description: 'Email address for the test user (only if CreateTestUser is true)'
    AllowedPattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    ConstraintDescription: 'Must be a valid email address'

  # Cost and Performance Optimization
  AccessPointCreationMode:
    Type: String
    Default: 'AUTO'
    AllowedValues: ['AUTO', 'MANUAL']
    Description: 'S3 Access Point creation mode for optimized access patterns'

  LoggingLevel:
    Type: String
    Default: 'INFO'
    AllowedValues: ['ERROR', 'WARN', 'INFO', 'DEBUG']
    Description: 'CloudWatch logging level for Transfer Family services'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Infrastructure Configuration'
        Parameters:
          - EnvironmentName
          - ProjectName
      - Label:
          default: 'IAM Identity Center Configuration'
        Parameters:
          - IdentityCenterInstanceArn
          - IdentityStoreId
      - Label:
          default: 'S3 Storage Configuration'
        Parameters:
          - S3BucketName
          - EnableS3Versioning
          - S3StorageClass
          - KMSKeyId
      - Label:
          default: 'Web App Configuration'
        Parameters:
          - WebAppBrandingTitle
          - WebAppBrandingDescription
      - Label:
          default: 'Network and Security Configuration'
        Parameters:
          - VpcId
          - SubnetIds
          - AllowedCIDRBlocks
      - Label:
          default: 'Test User Configuration (Optional)'
        Parameters:
          - CreateTestUser
          - TestUserName
          - TestUserEmail
      - Label:
          default: 'Advanced Configuration'
        Parameters:
          - AccessPointCreationMode
          - LoggingLevel
    ParameterLabels:
      EnvironmentName:
        default: 'Environment Name'
      ProjectName:
        default: 'Project Name'
      IdentityCenterInstanceArn:
        default: 'IAM Identity Center Instance ARN'
      IdentityStoreId:
        default: 'Identity Store ID'
      S3BucketName:
        default: 'S3 Bucket Name (Optional)'
      EnableS3Versioning:
        default: 'Enable S3 Versioning'
      S3StorageClass:
        default: 'S3 Storage Class'
      WebAppBrandingTitle:
        default: 'Web App Title'
      WebAppBrandingDescription:
        default: 'Web App Description'
      VpcId:
        default: 'VPC ID'
      SubnetIds:
        default: 'Subnet IDs'
      AllowedCIDRBlocks:
        default: 'Allowed CIDR Blocks'
      KMSKeyId:
        default: 'KMS Key ID'
      CreateTestUser:
        default: 'Create Test User'
      TestUserName:
        default: 'Test User Name'
      TestUserEmail:
        default: 'Test User Email'
      AccessPointCreationMode:
        default: 'Access Point Creation Mode'
      LoggingLevel:
        default: 'Logging Level'

Conditions:
  # Conditional resource creation based on parameters
  CreateCustomBucketName: !Not [!Equals [!Ref S3BucketName, '']]
  EnableVersioning: !Equals [!Ref EnableS3Versioning, 'true']
  CreateTestUserCondition: !Equals [!Ref CreateTestUser, 'true']
  UseCustomKMSKey: !Not [!Equals [!Ref KMSKeyId, 'alias/aws/s3']]
  EnableAdvancedLogging: !Or [!Equals [!Ref LoggingLevel, 'DEBUG'], !Equals [!Ref LoggingLevel, 'INFO']]

Resources:
  # Random suffix for unique resource naming
  RandomSuffix:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt GenerateRandomSuffixFunction.Arn

  # Lambda function to generate random suffix for unique naming
  GenerateRandomSuffixFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-generate-suffix-${EnvironmentName}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt RandomSuffixLambdaRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import random
          import string
          import cfnresponse
          
          def lambda_handler(event, context):
              try:
                  if event['RequestType'] == 'Delete':
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  
                  # Generate 6-character random suffix
                  suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=6))
                  
                  response_data = {'RandomSuffix': suffix}
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  # IAM role for the random suffix Lambda function
  RandomSuffixLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-random-suffix-role-${EnvironmentName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-random-suffix-role-${EnvironmentName}'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # S3 bucket for file storage with enhanced security and performance
  FileStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If
        - CreateCustomBucketName
        - !Ref S3BucketName
        - !Sub '${ProjectName}-storage-${EnvironmentName}-${RandomSuffix.RandomSuffix}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: !If [UseCustomKMSKey, 'aws:kms', 'AES256']
              KMSMasterKeyID: !If [UseCustomKMSKey, !Ref KMSKeyId, !Ref 'AWS::NoValue']
            BucketKeyEnabled: !If [UseCustomKMSKey, true, false]
      VersioningConfiguration:
        Status: !If [EnableVersioning, 'Enabled', 'Suspended']
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: IntelligentTieringRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 0
                StorageClass: !Ref S3StorageClass
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Id: DeleteOldVersions
            Status: !If [EnableVersioning, 'Enabled', 'Disabled']
            NoncurrentVersionExpirationInDays: 90
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogsBucket
        LogFilePrefix: 'access-logs/'
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: 's3:ObjectCreated:*'
            CloudWatchConfiguration:
              LogGroupName: !Ref S3AccessLogGroup
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            ExposedHeaders: [ETag]
            MaxAge: 3600
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-storage-${EnvironmentName}'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: 'File Management Storage'

  # Separate bucket for access logs
  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-access-logs-${EnvironmentName}-${RandomSuffix.RandomSuffix}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAccessLogsAfter90Days
            Status: Enabled
            ExpirationInDays: 90
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-access-logs-${EnvironmentName}'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: 'S3 Access Logging'

  # CloudWatch Log Group for S3 and Transfer Family logging
  S3AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/s3/${ProjectName}-${EnvironmentName}'
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-s3-logs-${EnvironmentName}'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  TransferFamilyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/transfer/${ProjectName}-${EnvironmentName}'
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-transfer-logs-${EnvironmentName}'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # IAM role for S3 Access Grants with enhanced permissions
  S3AccessGrantsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-s3-access-grants-role-${EnvironmentName}-${RandomSuffix.RandomSuffix}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'sts:ExternalId': !Sub '${ProjectName}-${EnvironmentName}'
      Policies:
        - PolicyName: S3AccessGrantsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                  - s3:RestoreObject
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:GetBucketLocation
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload
                Resource:
                  - !Sub '${FileStorageBucket}/*'
                  - !GetAtt FileStorageBucket.Arn
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !If
                  - UseCustomKMSKey
                  - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KMSKeyId}'
                  - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-s3-access-grants-role-${EnvironmentName}'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # S3 Access Grants instance
  S3AccessGrantsInstance:
    Type: AWS::S3::AccessGrantsInstance
    Properties:
      IdentityCenterArn: !Ref IdentityCenterInstanceArn
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-access-grants-${EnvironmentName}'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: 'Fine-grained S3 access control'

  # S3 Access Grants location for the bucket
  S3AccessGrantsLocation:
    Type: AWS::S3::AccessGrantsLocation
    Properties:
      IamRoleArn: !GetAtt S3AccessGrantsRole.Arn
      LocationScope: !Sub '${FileStorageBucket}/*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-access-grants-location-${EnvironmentName}'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # IAM role for Transfer Family Identity Bearer with comprehensive permissions
  TransferIdentityBearerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-transfer-identity-bearer-${EnvironmentName}-${RandomSuffix.RandomSuffix}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: transfer.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessGrantsIntegrationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetDataAccess
                Resource: '*'
              - Effect: Allow
                Action:
                  - sso:DescribeInstance
                  - identitystore:DescribeUser
                  - identitystore:DescribeGroup
                  - identitystore:ListUsers
                  - identitystore:ListGroups
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/transfer/*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-transfer-identity-bearer-${EnvironmentName}'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # Security Group for Transfer Family Web App
  TransferWebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-transfer-webapp-sg-${EnvironmentName}'
      GroupDescription: 'Security group for Transfer Family Web App endpoints'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Join [',', !Ref AllowedCIDRBlocks]
          Description: 'HTTPS access to Transfer Family Web App'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Join [',', !Ref AllowedCIDRBlocks]
          Description: 'HTTP access to Transfer Family Web App (redirects to HTTPS)'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
          Description: 'All outbound traffic for AWS service communication'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-transfer-webapp-sg-${EnvironmentName}'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # Transfer Family Web App with enhanced configuration
  TransferFamilyWebApp:
    Type: AWS::Transfer::WebApp
    Properties:
      IdentityProviderType: SERVICE_MANAGED
      IdentityProviderDetails:
        IdentityCenterConfig:
          InstanceArn: !Ref IdentityCenterInstanceArn
          Role: !GetAtt TransferIdentityBearerRole.Arn
      AccessEndpoint:
        Type: VPC
        VpcId: !Ref VpcId
        SubnetIds: !Ref SubnetIds
        SecurityGroupIds:
          - !Ref TransferWebAppSecurityGroup
      WebAppUnits: 1  # Start with minimum units for cost optimization
      Branding:
        Title: !Ref WebAppBrandingTitle
        Description: !Ref WebAppBrandingDescription
        LogoUrl: 'https://via.placeholder.com/200x60/FF9900/FFFFFF?text=Your+Logo'
        FaviconUrl: 'https://via.placeholder.com/32x32/FF9900/FFFFFF?text=F'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-webapp-${EnvironmentName}'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: 'Self-service file management portal'

  # Custom resource for creating IAM Identity Center test user
  CreateTestUserResource:
    Type: AWS::CloudFormation::CustomResource
    Condition: CreateTestUserCondition
    Properties:
      ServiceToken: !GetAtt CreateTestUserFunction.Arn
      IdentityStoreId: !Ref IdentityStoreId
      UserName: !Ref TestUserName
      DisplayName: 'Test User'
      GivenName: 'Test'
      FamilyName: 'User'
      Email: !Ref TestUserEmail

  # Lambda function to create IAM Identity Center test user
  CreateTestUserFunction:
    Type: AWS::Lambda::Function
    Condition: CreateTestUserCondition
    Properties:
      FunctionName: !Sub '${ProjectName}-create-test-user-${EnvironmentName}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt CreateTestUserLambdaRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import uuid
          
          def lambda_handler(event, context):
              try:
                  identity_store = boto3.client('identitystore')
                  
                  if event['RequestType'] == 'Delete':
                      # Clean up test user on stack deletion
                      try:
                          user_id = event['PhysicalResourceId']
                          if user_id and user_id != 'failed':
                              identity_store.delete_user(
                                  IdentityStoreId=event['ResourceProperties']['IdentityStoreId'],
                                  UserId=user_id
                              )
                      except Exception as e:
                          print(f"Error deleting user: {str(e)}")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  
                  if event['RequestType'] in ['Create', 'Update']:
                      # Create or update test user
                      response = identity_store.create_user(
                          IdentityStoreId=event['ResourceProperties']['IdentityStoreId'],
                          UserName=event['ResourceProperties']['UserName'],
                          DisplayName=event['ResourceProperties']['DisplayName'],
                          Name={
                              'GivenName': event['ResourceProperties']['GivenName'],
                              'FamilyName': event['ResourceProperties']['FamilyName']
                          },
                          Emails=[{
                              'Value': event['ResourceProperties']['Email'],
                              'Type': 'Work',
                              'Primary': True
                          }]
                      )
                      
                      user_id = response['UserId']
                      
                      response_data = {
                          'UserId': user_id,
                          'UserName': event['ResourceProperties']['UserName']
                      }
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, user_id)
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, 'failed')

  # IAM role for the test user creation Lambda function
  CreateTestUserLambdaRole:
    Type: AWS::IAM::Role
    Condition: CreateTestUserCondition
    Properties:
      RoleName: !Sub '${ProjectName}-create-test-user-role-${EnvironmentName}-${RandomSuffix.RandomSuffix}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: IdentityStoreManagementPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - identitystore:CreateUser
                  - identitystore:DeleteUser
                  - identitystore:UpdateUser
                  - identitystore:DescribeUser
                  - identitystore:ListUsers
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-create-test-user-role-${EnvironmentName}'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # S3 Access Grant for test user
  TestUserAccessGrant:
    Type: AWS::S3::AccessGrant
    Condition: CreateTestUserCondition
    Properties:
      AccessGrantsLocationId: !GetAtt S3AccessGrantsLocation.AccessGrantsLocationId
      AccessGrantsLocationConfiguration:
        S3SubPrefix: 'user-files/*'
      Grantee:
        GranteeType: IAM_IDENTITY_CENTER_USER
        GranteeIdentifier: !GetAtt CreateTestUserResource.UserId
      Permission: READWRITE
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-test-user-grant-${EnvironmentName}'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName
        - Key: Grantee
          Value: 'TestUser'

  # Custom resource to create sample files and folder structure
  CreateSampleFilesResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CreateSampleFilesFunction.Arn
      BucketName: !Ref FileStorageBucket

  # Lambda function to create sample files
  CreateSampleFilesFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-create-sample-files-${EnvironmentName}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt CreateSampleFilesLambdaRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          
          def lambda_handler(event, context):
              try:
                  s3 = boto3.client('s3')
                  bucket_name = event['ResourceProperties']['BucketName']
                  
                  if event['RequestType'] == 'Delete':
                      # Clean up sample files on stack deletion
                      try:
                          response = s3.list_objects_v2(Bucket=bucket_name, Prefix='user-files/')
                          if 'Contents' in response:
                              objects = [{'Key': obj['Key']} for obj in response['Contents']]
                              s3.delete_objects(Bucket=bucket_name, Delete={'Objects': objects})
                      except Exception as e:
                          print(f"Error deleting sample files: {str(e)}")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  
                  if event['RequestType'] in ['Create', 'Update']:
                      # Create sample files and folder structure
                      sample_files = {
                          'user-files/documents/README.txt': '''Welcome to the Secure File Management Portal!

This system provides a secure, easy-to-use interface for managing your files.

Getting Started:
1. Navigate through folders using the web interface
2. Upload files by dragging and dropping or using the upload button
3. Download files by clicking on them
4. Create new folders using the "New Folder" button

For support, contact your IT administrator.''',
                          
                          'user-files/documents/sample-document.txt': '''This is a sample document to demonstrate file management capabilities.
You can upload, download, and manage files like this one through the web interface.''',
                          
                          'user-files/shared/team-resources.txt': '''This folder contains shared resources for the team.
All team members have access to files in this location.'''
                      }
                      
                      for key, content in sample_files.items():
                          s3.put_object(
                              Bucket=bucket_name,
                              Key=key,
                              Body=content.encode('utf-8'),
                              ContentType='text/plain',
                              ServerSideEncryption='AES256'
                          )
                      
                      response_data = {
                          'SampleFilesCreated': len(sample_files),
                          'BucketName': bucket_name
                      }
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  # IAM role for the sample files creation Lambda function
  CreateSampleFilesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-create-sample-files-role-${EnvironmentName}-${RandomSuffix.RandomSuffix}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3ManagementPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${FileStorageBucket}/*'
                  - !GetAtt FileStorageBucket.Arn
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-create-sample-files-role-${EnvironmentName}'
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Project
          Value: !Ref ProjectName

  # CloudWatch Dashboard for monitoring
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: EnableAdvancedLogging
    Properties:
      DashboardName: !Sub '${ProjectName}-${EnvironmentName}-monitoring'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/S3", "NumberOfObjects", "BucketName", "${FileStorageBucket}", "StorageType", "AllStorageTypes"],
                  [".", "BucketSizeBytes", ".", ".", ".", "StandardStorage"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "S3 Storage Metrics",
                "period": 86400
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '${TransferFamilyLogGroup}'\n| fields @timestamp, @message\n| sort @timestamp desc\n| limit 100",
                "region": "${AWS::Region}",
                "title": "Transfer Family Logs",
                "view": "table"
              }
            }
          ]
        }

Outputs:
  # Infrastructure Information
  StackName:
    Description: 'CloudFormation stack name'
    Value: !Ref 'AWS::StackName'
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-stack-name'

  RandomSuffix:
    Description: 'Random suffix used for unique resource naming'
    Value: !GetAtt RandomSuffix.RandomSuffix
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-random-suffix'

  # S3 Storage Information
  S3BucketName:
    Description: 'Name of the S3 bucket for file storage'
    Value: !Ref FileStorageBucket
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-s3-bucket'

  S3BucketArn:
    Description: 'ARN of the S3 bucket for file storage'
    Value: !GetAtt FileStorageBucket.Arn
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-s3-bucket-arn'

  S3BucketDomainName:
    Description: 'Domain name of the S3 bucket'
    Value: !GetAtt FileStorageBucket.DomainName
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-s3-bucket-domain'

  AccessLogsBucketName:
    Description: 'Name of the S3 access logs bucket'
    Value: !Ref AccessLogsBucket
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-access-logs-bucket'

  # S3 Access Grants Information
  S3AccessGrantsInstanceArn:
    Description: 'ARN of the S3 Access Grants instance'
    Value: !GetAtt S3AccessGrantsInstance.AccessGrantsInstanceArn
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-access-grants-instance-arn'

  S3AccessGrantsInstanceId:
    Description: 'ID of the S3 Access Grants instance'
    Value: !GetAtt S3AccessGrantsInstance.AccessGrantsInstanceId
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-access-grants-instance-id'

  S3AccessGrantsLocationId:
    Description: 'ID of the S3 Access Grants location'
    Value: !GetAtt S3AccessGrantsLocation.AccessGrantsLocationId
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-access-grants-location-id'

  # Transfer Family Information
  TransferWebAppArn:
    Description: 'ARN of the Transfer Family Web App'
    Value: !GetAtt TransferFamilyWebApp.Arn
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-webapp-arn'

  TransferWebAppId:
    Description: 'ID of the Transfer Family Web App'
    Value: !Ref TransferFamilyWebApp
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-webapp-id'

  TransferWebAppEndpoint:
    Description: 'Web endpoint URL for the Transfer Family Web App'
    Value: !GetAtt TransferFamilyWebApp.WebAppEndpoint
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-webapp-endpoint'

  # IAM Roles Information
  TransferIdentityBearerRoleArn:
    Description: 'ARN of the Transfer Family Identity Bearer Role'
    Value: !GetAtt TransferIdentityBearerRole.Arn
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-identity-bearer-role-arn'

  S3AccessGrantsRoleArn:
    Description: 'ARN of the S3 Access Grants Role'
    Value: !GetAtt S3AccessGrantsRole.Arn
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-access-grants-role-arn'

  # Security Information
  SecurityGroupId:
    Description: 'ID of the Transfer Family Web App security group'
    Value: !Ref TransferWebAppSecurityGroup
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-security-group-id'

  # Test User Information (Conditional)
  TestUserId:
    Condition: CreateTestUserCondition
    Description: 'ID of the created test user in IAM Identity Center'
    Value: !GetAtt CreateTestUserResource.UserId
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-test-user-id'

  TestUserName:
    Condition: CreateTestUserCondition
    Description: 'Username of the created test user'
    Value: !GetAtt CreateTestUserResource.UserName
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-test-user-name'

  TestUserAccessGrantId:
    Condition: CreateTestUserCondition
    Description: 'ID of the access grant for the test user'
    Value: !GetAtt TestUserAccessGrant.AccessGrantId
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-test-user-grant-id'

  # Logging Information
  S3LogGroupName:
    Description: 'Name of the S3 CloudWatch log group'
    Value: !Ref S3AccessLogGroup
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-s3-log-group'

  TransferLogGroupName:
    Description: 'Name of the Transfer Family CloudWatch log group'
    Value: !Ref TransferFamilyLogGroup
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-transfer-log-group'

  # Monitoring Information
  MonitoringDashboardURL:
    Condition: EnableAdvancedLogging
    Description: 'URL to the CloudWatch monitoring dashboard'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-${EnvironmentName}-monitoring'
    Export:
      Name: !Sub '${ProjectName}-${EnvironmentName}-dashboard-url'

  # Configuration Summary
  ConfigurationSummary:
    Description: 'Summary of key configuration settings'
    Value: !Sub |
      Environment: ${EnvironmentName}
      S3 Bucket: ${FileStorageBucket}
      Web App URL: ${TransferFamilyWebApp.WebAppEndpoint}
      IAM Identity Center: ${IdentityCenterInstanceArn}
      Test User Created: ${CreateTestUser}
      Versioning Enabled: ${EnableS3Versioning}
      Storage Class: ${S3StorageClass}

  # Next Steps
  NextSteps:
    Description: 'Recommended next steps after deployment'
    Value: |
      1. Access the Transfer Family Web App at the provided endpoint URL
      2. Log in using IAM Identity Center credentials (test user if created)
      3. Test file upload/download functionality
      4. Configure additional users and access grants as needed
      5. Review CloudWatch logs and monitoring dashboard
      6. Customize web app branding and settings
      7. Implement lifecycle policies for long-term storage optimization