AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure as Code for Hyperledger Fabric Applications on Amazon Managed Blockchain - Creates a complete blockchain network with VPC, peer nodes, and client infrastructure'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - NetworkName
          - MemberName
          - NetworkFrameworkVersion
          - NetworkEdition
      - Label:
          default: "Node Configuration"
        Parameters:
          - NodeInstanceType
          - NodeAvailabilityZone
      - Label:
          default: "VPC Configuration"
        Parameters:
          - VpcCidr
          - SubnetCidr
          - ClientInstanceType
          - KeyPairName
      - Label:
          default: "Security Configuration"
        Parameters:
          - AdminUsername
          - AdminPassword
          - AllowedCidrForSSH
    ParameterLabels:
      NetworkName:
        default: "Blockchain Network Name"
      MemberName:
        default: "Member Organization Name"
      NetworkFrameworkVersion:
        default: "Hyperledger Fabric Version"
      NetworkEdition:
        default: "Network Edition"
      NodeInstanceType:
        default: "Peer Node Instance Type"
      NodeAvailabilityZone:
        default: "Node Availability Zone"
      VpcCidr:
        default: "VPC CIDR Block"
      SubnetCidr:
        default: "Subnet CIDR Block"
      ClientInstanceType:
        default: "Client Instance Type"
      KeyPairName:
        default: "EC2 Key Pair"
      AdminUsername:
        default: "Admin Username"
      AdminPassword:
        default: "Admin Password"
      AllowedCidrForSSH:
        default: "Allowed CIDR for SSH"

Parameters:
  NetworkName:
    Type: String
    Description: 'Name for the Hyperledger Fabric blockchain network'
    Default: 'enterprise-fabric-network'
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9]$'
    ConstraintDescription: 'Must begin with a letter, contain only alphanumeric characters and hyphens, and end with an alphanumeric character'

  MemberName:
    Type: String
    Description: 'Name for the founding member organization'
    Default: 'founding-member-org'
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9]$'
    ConstraintDescription: 'Must begin with a letter, contain only alphanumeric characters and hyphens, and end with an alphanumeric character'

  NetworkFrameworkVersion:
    Type: String
    Description: 'Hyperledger Fabric framework version'
    Default: '2.2'
    AllowedValues: ['1.4', '2.2']
    ConstraintDescription: 'Must be a supported Hyperledger Fabric version'

  NetworkEdition:
    Type: String
    Description: 'Network edition for Hyperledger Fabric'
    Default: 'STARTER'
    AllowedValues: ['STARTER', 'STANDARD']
    ConstraintDescription: 'Must be either STARTER or STANDARD edition'

  NodeInstanceType:
    Type: String
    Description: 'Instance type for the peer node'
    Default: 'bc.t3.small'
    AllowedValues: 
      - 'bc.t3.small'
      - 'bc.t3.medium'
      - 'bc.t3.large'
      - 'bc.t3.xlarge'
      - 'bc.m5.large'
      - 'bc.m5.xlarge'
      - 'bc.m5.2xlarge'
      - 'bc.m5.4xlarge'
    ConstraintDescription: 'Must be a valid Managed Blockchain instance type'

  NodeAvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: 'Availability zone for the peer node'

  VpcCidr:
    Type: String
    Description: 'CIDR block for the VPC'
    Default: '10.0.0.0/16'
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: 'Must be a valid CIDR block'

  SubnetCidr:
    Type: String
    Description: 'CIDR block for the subnet'
    Default: '10.0.1.0/24'
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: 'Must be a valid CIDR block within the VPC CIDR range'

  ClientInstanceType:
    Type: String
    Description: 'Instance type for the blockchain client EC2 instance'
    Default: 't3.medium'
    AllowedValues: ['t3.small', 't3.medium', 't3.large', 't3.xlarge', 'm5.large', 'm5.xlarge']
    ConstraintDescription: 'Must be a valid EC2 instance type'

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: 'Name of an existing EC2 KeyPair to enable SSH access to the client instance'

  AdminUsername:
    Type: String
    Description: 'Admin username for the Fabric CA'
    Default: 'admin'
    MinLength: 1
    MaxLength: 16
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9]*$'
    ConstraintDescription: 'Must begin with a letter and contain only alphanumeric characters'

  AdminPassword:
    Type: String
    Description: 'Admin password for the Fabric CA (must be at least 8 characters with uppercase, lowercase, and number)'
    NoEcho: true
    MinLength: 8
    MaxLength: 32
    AllowedPattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d@$!%*?&]{8,}$'
    ConstraintDescription: 'Must be at least 8 characters with at least one uppercase letter, one lowercase letter, and one number'

  AllowedCidrForSSH:
    Type: String
    Description: 'CIDR block allowed for SSH access to client instance'
    Default: '0.0.0.0/0'
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\/([0-9]|[1-2][0-9]|3[0-2])$'
    ConstraintDescription: 'Must be a valid CIDR block'

Conditions:
  IsStarterEdition: !Equals [!Ref NetworkEdition, 'STARTER']
  IsStandardEdition: !Equals [!Ref NetworkEdition, 'STANDARD']

Resources:
  # VPC Infrastructure
  BlockchainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-blockchain-vpc'
        - Key: Purpose
          Value: 'Blockchain Network Infrastructure'

  BlockchainSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref BlockchainVPC
      CidrBlock: !Ref SubnetCidr
      AvailabilityZone: !Ref NodeAvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-blockchain-subnet'

  BlockchainInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-blockchain-igw'

  BlockchainIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref BlockchainVPC
      InternetGatewayId: !Ref BlockchainInternetGateway

  BlockchainRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref BlockchainVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-blockchain-rt'

  BlockchainRoute:
    Type: AWS::EC2::Route
    DependsOn: BlockchainIGWAttachment
    Properties:
      RouteTableId: !Ref BlockchainRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref BlockchainInternetGateway

  BlockchainSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BlockchainSubnet
      RouteTableId: !Ref BlockchainRouteTable

  # Security Groups
  BlockchainClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-blockchain-client-sg'
      GroupDescription: 'Security group for blockchain client instance'
      VpcId: !Ref BlockchainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedCidrForSSH
          Description: 'SSH access for blockchain client administration'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr
          Description: 'HTTPS access for blockchain API calls'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
          Description: 'All outbound traffic'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-blockchain-client-sg'

  # IAM Roles and Policies
  BlockchainServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-blockchain-service-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: managedblockchain.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonManagedBlockchainServiceRolePolicy
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-blockchain-service-role'

  BlockchainClientRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-blockchain-client-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BlockchainClientPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - managedblockchain:GetNetwork
                  - managedblockchain:GetMember
                  - managedblockchain:GetNode
                  - managedblockchain:ListMembers
                  - managedblockchain:ListNodes
                  - managedblockchain:CreateAccessor
                  - managedblockchain:GetAccessor
                  - managedblockchain:ListAccessors
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-blockchain-client-role'

  BlockchainClientInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${AWS::StackName}-blockchain-client-profile'
      Roles:
        - !Ref BlockchainClientRole

  # Managed Blockchain Network
  HyperledgerFabricNetwork:
    Type: AWS::ManagedBlockchain::Network
    Properties:
      Name: !Ref NetworkName
      Description: !Sub 'Hyperledger Fabric network for ${AWS::StackName} - Enterprise blockchain for secure multi-party transactions'
      Framework: HYPERLEDGER_FABRIC
      FrameworkVersion: !Ref NetworkFrameworkVersion
      FrameworkConfiguration:
        NetworkFabricConfiguration:
          Edition: !Ref NetworkEdition
      VotingPolicy:
        ApprovalThresholdPolicy:
          ThresholdPercentage: 50
          ProposalDurationInHours: 24
          ThresholdComparator: GREATER_THAN
      MemberConfiguration:
        Name: !Ref MemberName
        Description: !Sub 'Founding member organization for ${NetworkName}'
        MemberFrameworkConfiguration:
          MemberFabricConfiguration:
            AdminUsername: !Ref AdminUsername
            AdminPassword: !Ref AdminPassword

  # Blockchain Member (automatically created with network, but we reference it)
  # Note: The member is created as part of the network, so we use a custom resource to get its ID

  GetMemberIdFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-get-member-id'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt GetMemberIdLambdaRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          
          def lambda_handler(event, context):
              try:
                  if event['RequestType'] == 'Delete':
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  
                  network_id = event['ResourceProperties']['NetworkId']
                  member_name = event['ResourceProperties']['MemberName']
                  
                  client = boto3.client('managedblockchain')
                  
                  # List members and find the one with matching name
                  response = client.list_members(NetworkId=network_id)
                  
                  member_id = None
                  for member in response['Members']:
                      if member['Name'] == member_name:
                          member_id = member['Id']
                          break
                  
                  if not member_id:
                      raise Exception(f"Member with name {member_name} not found")
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                                 {'MemberId': member_id})
                                 
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  GetMemberIdLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ManagedBlockchainReadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - managedblockchain:ListMembers
                  - managedblockchain:GetMember
                Resource: '*'

  GetMemberId:
    Type: Custom::GetMemberId
    Properties:
      ServiceToken: !GetAtt GetMemberIdFunction.Arn
      NetworkId: !Ref HyperledgerFabricNetwork
      MemberName: !Ref MemberName

  # Peer Node
  HyperledgerFabricNode:
    Type: AWS::ManagedBlockchain::Node
    DependsOn: GetMemberId
    Properties:
      NetworkId: !Ref HyperledgerFabricNetwork
      MemberId: !GetAtt GetMemberId.MemberId
      NodeConfiguration:
        InstanceType: !Ref NodeInstanceType
        AvailabilityZone: !Ref NodeAvailabilityZone

  # VPC Endpoint for Managed Blockchain
  ManagedBlockchainAccessor:
    Type: AWS::ManagedBlockchain::Accessor
    Properties:
      AccessorType: BILLING_TOKEN

  # CloudWatch Log Group for Blockchain Operations
  BlockchainLogGroup:
    Type: AWS::logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/managedblockchain/${AWS::StackName}'
      RetentionInDays: 30

  # Client EC2 Instance with Fabric SDK
  BlockchainClientInstance:
    Type: AWS::EC2::Instance
    DependsOn: 
      - BlockchainSubnetRouteTableAssociation
      - HyperledgerFabricNode
    Properties:
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
      InstanceType: !Ref ClientInstanceType
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref BlockchainClientInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref BlockchainClientSecurityGroup
          SubnetId: !Ref BlockchainSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y aws-cli git docker
          
          # Install Node.js and npm via NodeSource repository
          curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
          yum install -y nodejs
          
          # Start Docker service
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install Hyperledger Fabric binaries
          cd /home/ec2-user
          curl -sSL https://bit.ly/2ysbOFE | bash -s -- 2.2.0 1.4.7
          
          # Create fabric client application directory
          mkdir -p /home/ec2-user/fabric-client-app
          cd /home/ec2-user/fabric-client-app
          
          # Create package.json for Node.js dependencies
          cat > package.json << 'EOF'
          {
            "name": "fabric-blockchain-client",
            "version": "1.0.0",
            "description": "Hyperledger Fabric client for Amazon Managed Blockchain",
            "main": "app.js",
            "dependencies": {
              "fabric-network": "^2.2.20",
              "fabric-client": "^1.4.22",
              "fabric-ca-client": "^2.2.20",
              "@aws-sdk/client-managedblockchain": "^3.0.0"
            }
          }
          EOF
          
          # Install Node.js dependencies
          npm install
          
          # Create sample chaincode directory
          mkdir -p chaincode
          
          # Create sample asset management chaincode
          cat > chaincode/asset-contract.js << 'EOF'
          'use strict';
          
          const { Contract } = require('fabric-contract-api');
          
          class AssetContract extends Contract {
          
              async initLedger(ctx) {
                  console.info('============= START : Initialize Ledger ===========');
                  const assets = [
                      {
                          ID: 'asset1',
                          Owner: 'Alice',
                          Value: 100,
                          Timestamp: new Date().toISOString()
                      },
                      {
                          ID: 'asset2',
                          Owner: 'Bob',
                          Value: 200,
                          Timestamp: new Date().toISOString()
                      }
                  ];
          
                  for (const asset of assets) {
                      asset.docType = 'asset';
                      await ctx.stub.putState(asset.ID, Buffer.from(JSON.stringify(asset)));
                      console.info(`Asset ${asset.ID} initialized`);
                  }
                  console.info('============= END : Initialize Ledger ===========');
              }
          
              async createAsset(ctx, id, owner, value) {
                  console.info('============= START : Create Asset ===========');
                  
                  const asset = {
                      ID: id,
                      Owner: owner,
                      Value: parseInt(value),
                      Timestamp: new Date().toISOString(),
                      docType: 'asset'
                  };
                  
                  await ctx.stub.putState(id, Buffer.from(JSON.stringify(asset)));
                  console.info('============= END : Create Asset ===========');
                  return JSON.stringify(asset);
              }
          
              async readAsset(ctx, id) {
                  const assetJSON = await ctx.stub.getState(id);
                  if (!assetJSON || assetJSON.length === 0) {
                      throw new Error(`Asset ${id} does not exist`);
                  }
                  return assetJSON.toString();
              }
          
              async updateAsset(ctx, id, owner, value) {
                  console.info('============= START : Update Asset ===========');
                  
                  const exists = await this.assetExists(ctx, id);
                  if (!exists) {
                      throw new Error(`Asset ${id} does not exist`);
                  }
                  
                  const asset = {
                      ID: id,
                      Owner: owner,
                      Value: parseInt(value),
                      Timestamp: new Date().toISOString(),
                      docType: 'asset'
                  };
                  
                  await ctx.stub.putState(id, Buffer.from(JSON.stringify(asset)));
                  console.info('============= END : Update Asset ===========');
                  return JSON.stringify(asset);
              }
          
              async deleteAsset(ctx, id) {
                  const exists = await this.assetExists(ctx, id);
                  if (!exists) {
                      throw new Error(`Asset ${id} does not exist`);
                  }
                  await ctx.stub.deleteState(id);
              }
          
              async assetExists(ctx, id) {
                  const assetJSON = await ctx.stub.getState(id);
                  return assetJSON && assetJSON.length > 0;
              }
          
              async getAllAssets(ctx) {
                  const allResults = [];
                  const iterator = await ctx.stub.getStateByRange('', '');
                  let result = await iterator.next();
                  
                  while (!result.done) {
                      const strValue = Buffer.from(result.value.value).toString('utf8');
                      let record;
                      try {
                          record = JSON.parse(strValue);
                      } catch (err) {
                          console.log(err);
                          record = strValue;
                      }
                      allResults.push({ Key: result.value.key, Record: record });
                      result = await iterator.next();
                  }
                  
                  return JSON.stringify(allResults);
              }
          }
          
          module.exports = AssetContract;
          EOF
          
          # Create environment variables file with blockchain network details
          cat > .env << 'EOF'
          # Amazon Managed Blockchain Network Configuration
          NETWORK_ID=${HyperledgerFabricNetwork}
          MEMBER_ID=${GetMemberId.MemberId}
          NODE_ID=${HyperledgerFabricNode}
          AWS_REGION=${AWS::Region}
          
          # Hyperledger Fabric Configuration
          ADMIN_USERNAME=${AdminUsername}
          FABRIC_VERSION=${NetworkFrameworkVersion}
          NETWORK_EDITION=${NetworkEdition}
          EOF
          
          # Set ownership
          chown -R ec2-user:ec2-user /home/ec2-user/fabric-client-app
          chown -R ec2-user:ec2-user /home/ec2-user/fabric-samples
          
          # Signal CloudFormation that instance is ready
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BlockchainClientInstance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-blockchain-client'
        - Key: Purpose
          Value: 'Hyperledger Fabric Client'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 1

Outputs:
  NetworkId:
    Description: 'ID of the created Hyperledger Fabric network'
    Value: !Ref HyperledgerFabricNetwork
    Export:
      Name: !Sub '${AWS::StackName}-NetworkId'

  MemberId:
    Description: 'ID of the founding member organization'
    Value: !GetAtt GetMemberId.MemberId
    Export:
      Name: !Sub '${AWS::StackName}-MemberId'

  NodeId:
    Description: 'ID of the created peer node'
    Value: !Ref HyperledgerFabricNode
    Export:
      Name: !Sub '${AWS::StackName}-NodeId'

  VpcId:
    Description: 'ID of the created VPC for blockchain infrastructure'
    Value: !Ref BlockchainVPC
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'

  SubnetId:
    Description: 'ID of the subnet for blockchain client access'
    Value: !Ref BlockchainSubnet
    Export:
      Name: !Sub '${AWS::StackName}-SubnetId'

  ClientInstanceId:
    Description: 'ID of the blockchain client EC2 instance'
    Value: !Ref BlockchainClientInstance
    Export:
      Name: !Sub '${AWS::StackName}-ClientInstanceId'

  ClientInstancePublicIp:
    Description: 'Public IP address of the blockchain client instance'
    Value: !GetAtt BlockchainClientInstance.PublicIp

  ClientInstancePrivateIp:
    Description: 'Private IP address of the blockchain client instance'
    Value: !GetAtt BlockchainClientInstance.PrivateIp

  AccessorId:
    Description: 'ID of the Managed Blockchain accessor for billing'
    Value: !Ref ManagedBlockchainAccessor
    Export:
      Name: !Sub '${AWS::StackName}-AccessorId'

  NetworkEndpoint:
    Description: 'Network endpoint for Hyperledger Fabric operations'
    Value: !Sub 'https://managedblockchain.${AWS::Region}.amazonaws.com'

  SecurityGroupId:
    Description: 'ID of the security group for blockchain client'
    Value: !Ref BlockchainClientSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'

  LogGroupName:
    Description: 'CloudWatch Log Group for blockchain operations'
    Value: !Ref BlockchainLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroupName'

  SSHCommand:
    Description: 'SSH command to connect to the blockchain client instance'
    Value: !Sub 'ssh -i ${KeyPairName}.pem ec2-user@${BlockchainClientInstance.PublicIp}'

  NetworkConfiguration:
    Description: 'Summary of network configuration'
    Value: !Sub |
      Network: ${NetworkName} (${HyperledgerFabricNetwork})
      Framework: Hyperledger Fabric ${NetworkFrameworkVersion}
      Edition: ${NetworkEdition}
      Member: ${MemberName}
      Node Instance: ${NodeInstanceType}
      Region: ${AWS::Region}

  NextSteps:
    Description: 'Next steps for using the blockchain network'
    Value: |
      1. SSH into the client instance using the provided SSH command
      2. Navigate to ~/fabric-client-app directory
      3. Review the sample chaincode in ~/fabric-client-app/chaincode/
      4. Use the Fabric SDK to deploy and interact with smart contracts
      5. Monitor network activity in CloudWatch logs
      6. Refer to AWS Managed Blockchain documentation for advanced configurations