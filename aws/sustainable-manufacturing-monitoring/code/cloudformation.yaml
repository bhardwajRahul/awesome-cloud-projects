AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Sustainable Manufacturing Monitoring with AWS IoT SiteWise and CloudWatch Carbon Insights'

# Template Metadata
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Environment Configuration"
        Parameters:
          - Environment
          - ProjectName
          - ResourcePrefix
      - Label:
          default: "IoT SiteWise Configuration"
        Parameters:
          - AssetModelName
          - Equipment1Name
          - Equipment2Name
      - Label:
          default: "Lambda Configuration"
        Parameters:
          - LambdaFunctionName
          - LambdaRuntime
          - LambdaMemorySize
          - LambdaTimeout
      - Label:
          default: "Monitoring Configuration"
        Parameters:
          - CarbonEmissionThreshold
          - PowerConsumptionThreshold
          - AlarmEvaluationPeriods
          - MetricNamespace
      - Label:
          default: "Automation Configuration"
        Parameters:
          - EnableDailyReporting
          - ReportingSchedule
          - NotificationEmail
    ParameterLabels:
      Environment:
        default: "Deployment Environment"
      ProjectName:
        default: "Project Name"
      ResourcePrefix:
        default: "Resource Prefix"
      AssetModelName:
        default: "Asset Model Name"
      Equipment1Name:
        default: "Equipment 1 Name"
      Equipment2Name:
        default: "Equipment 2 Name"
      LambdaFunctionName:
        default: "Lambda Function Name"
      CarbonEmissionThreshold:
        default: "Carbon Emission Alert Threshold"
      PowerConsumptionThreshold:
        default: "Power Consumption Alert Threshold"
      EnableDailyReporting:
        default: "Enable Daily Reporting"
      NotificationEmail:
        default: "Notification Email Address"

# Parameters
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Deployment environment (dev, staging, prod)
    
  ProjectName:
    Type: String
    Default: sustainable-manufacturing
    Description: Name of the project for resource tagging and naming
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[a-zA-Z0-9-]+$
    ConstraintDescription: Must contain only alphanumeric characters and hyphens
    
  ResourcePrefix:
    Type: String
    Default: sustain-mfg
    Description: Prefix for resource names to ensure uniqueness
    MinLength: 3
    MaxLength: 20
    AllowedPattern: ^[a-zA-Z0-9-]+$
    ConstraintDescription: Must contain only alphanumeric characters and hyphens
    
  AssetModelName:
    Type: String
    Default: SustainableManufacturingModel
    Description: Name for the IoT SiteWise asset model
    MinLength: 3
    MaxLength: 100
    
  Equipment1Name:
    Type: String
    Default: Production_Line_A_Extruder
    Description: Name for the first manufacturing equipment asset
    MinLength: 3
    MaxLength: 100
    
  Equipment2Name:
    Type: String
    Default: Production_Line_B_Injection_Molding
    Description: Name for the second manufacturing equipment asset
    MinLength: 3
    MaxLength: 100
    
  LambdaFunctionName:
    Type: String
    Default: manufacturing-carbon-calculator
    Description: Name for the Lambda function that calculates carbon emissions
    MinLength: 3
    MaxLength: 64
    AllowedPattern: ^[a-zA-Z0-9-_]+$
    ConstraintDescription: Must contain only alphanumeric characters, hyphens, and underscores
    
  LambdaRuntime:
    Type: String
    Default: python3.9
    AllowedValues:
      - python3.9
      - python3.10
      - python3.11
    Description: Python runtime version for Lambda function
    
  LambdaMemorySize:
    Type: Number
    Default: 256
    MinValue: 128
    MaxValue: 3008
    Description: Memory size for Lambda function in MB
    
  LambdaTimeout:
    Type: Number
    Default: 60
    MinValue: 3
    MaxValue: 900
    Description: Timeout for Lambda function in seconds
    
  CarbonEmissionThreshold:
    Type: Number
    Default: 50.0
    MinValue: 0.1
    MaxValue: 1000.0
    Description: Carbon emission threshold in kg CO2 per hour for alarms
    
  PowerConsumptionThreshold:
    Type: Number
    Default: 100.0
    MinValue: 0.1
    MaxValue: 10000.0
    Description: Power consumption threshold in kW for alarms
    
  AlarmEvaluationPeriods:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
    Description: Number of evaluation periods for CloudWatch alarms
    
  MetricNamespace:
    Type: String
    Default: Manufacturing/Sustainability
    Description: CloudWatch namespace for sustainability metrics
    
  EnableDailyReporting:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable daily automated sustainability reporting
    
  ReportingSchedule:
    Type: String
    Default: 'cron(0 8 * * ? *)'
    Description: Schedule expression for daily reporting (default 8 AM UTC)
    
  NotificationEmail:
    Type: String
    Default: ''
    Description: Email address for alarm notifications (optional)
    AllowedPattern: ^$|^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
    ConstraintDescription: Must be a valid email address or empty

# Conditions
Conditions:
  IsProduction: !Equals [!Ref Environment, prod]
  EnableNotifications: !Not [!Equals [!Ref NotificationEmail, '']]
  EnableReporting: !Equals [!Ref EnableDailyReporting, 'true']

# Resources
Resources:
  # IoT SiteWise Asset Model
  ManufacturingAssetModel:
    Type: AWS::IoTSiteWise::AssetModel
    Properties:
      AssetModelName: !Ref AssetModelName
      AssetModelDescription: Asset model for sustainable manufacturing monitoring with carbon emissions tracking
      AssetModelHierarchies: []
      AssetModelCompositeModels: []
      AssetModelProperties:
        - Name: Equipment_Serial_Number
          DataType: STRING
          LogicalId: equipment_serial_number
          Type:
            Attribute:
              DefaultValue: 'UNKNOWN'
        - Name: Power_Consumption_kW
          DataType: DOUBLE
          LogicalId: power_consumption_kw
          Unit: kW
          Type:
            Measurement: {}
        - Name: Production_Rate_Units_Hour
          DataType: DOUBLE
          LogicalId: production_rate_units_hour
          Unit: units/hour
          Type:
            Measurement: {}
        - Name: Energy_Efficiency_Ratio
          DataType: DOUBLE
          LogicalId: energy_efficiency_ratio
          Unit: units/kWh
          Type:
            Transform:
              Expression: 'production_rate / power_consumption'
              Variables:
                - Name: production_rate
                  Value:
                    PropertyLogicalId: production_rate_units_hour
                - Name: power_consumption
                  Value:
                    PropertyLogicalId: power_consumption_kw
        - Name: Total_Energy_Consumption_kWh
          DataType: DOUBLE
          LogicalId: total_energy_consumption_kwh
          Unit: kWh
          Type:
            Metric:
              Expression: 'sum(power)'
              Variables:
                - Name: power
                  Value:
                    PropertyLogicalId: power_consumption_kw
              Window:
                Tumbling:
                  Interval: 1h
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: SustainableManufacturing

  # Manufacturing Equipment Asset 1
  ManufacturingEquipment1:
    Type: AWS::IoTSiteWise::Asset
    Properties:
      AssetName: !Ref Equipment1Name
      AssetModelId: !Ref ManufacturingAssetModel
      AssetDescription: First manufacturing equipment for sustainability monitoring
      AssetHierarchies: []
      AssetProperties:
        - LogicalId: equipment_serial_number
          Alias: !Sub '${Equipment1Name}/serial_number'
        - LogicalId: power_consumption_kw
          Alias: !Sub '${Equipment1Name}/power_consumption'
        - LogicalId: production_rate_units_hour
          Alias: !Sub '${Equipment1Name}/production_rate'
        - LogicalId: energy_efficiency_ratio
          Alias: !Sub '${Equipment1Name}/efficiency_ratio'
        - LogicalId: total_energy_consumption_kwh
          Alias: !Sub '${Equipment1Name}/total_energy'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: EquipmentType
          Value: Extruder
        - Key: ProductionLine
          Value: A

  # Manufacturing Equipment Asset 2
  ManufacturingEquipment2:
    Type: AWS::IoTSiteWise::Asset
    Properties:
      AssetName: !Ref Equipment2Name
      AssetModelId: !Ref ManufacturingAssetModel
      AssetDescription: Second manufacturing equipment for sustainability monitoring
      AssetHierarchies: []
      AssetProperties:
        - LogicalId: equipment_serial_number
          Alias: !Sub '${Equipment2Name}/serial_number'
        - LogicalId: power_consumption_kw
          Alias: !Sub '${Equipment2Name}/power_consumption'
        - LogicalId: production_rate_units_hour
          Alias: !Sub '${Equipment2Name}/production_rate'
        - LogicalId: energy_efficiency_ratio
          Alias: !Sub '${Equipment2Name}/efficiency_ratio'
        - LogicalId: total_energy_consumption_kwh
          Alias: !Sub '${Equipment2Name}/total_energy'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: EquipmentType
          Value: InjectionMolding
        - Key: ProductionLine
          Value: B

  # IAM Role for Lambda Carbon Calculator
  CarbonCalculatorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ResourcePrefix}-carbon-calculator-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: IoTSiteWiseReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iotsitewise:DescribeAsset
                  - iotsitewise:GetAssetPropertyValue
                  - iotsitewise:GetAssetPropertyValueHistory
                  - iotsitewise:ListAssets
                  - iotsitewise:ListAssetModels
                Resource: '*'
        - PolicyName: CloudWatchMetricsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace': !Ref MetricNamespace
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: CarbonCalculation

  # Lambda Function for Carbon Emissions Calculation
  CarbonCalculatorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ResourcePrefix}-${LambdaFunctionName}-${Environment}'
      Runtime: !Ref LambdaRuntime
      Handler: index.lambda_handler
      Role: !GetAtt CarbonCalculatorLambdaRole.Arn
      MemorySize: !Ref LambdaMemorySize
      Timeout: !Ref LambdaTimeout
      Description: Calculates carbon emissions based on manufacturing equipment power consumption
      Environment:
        Variables:
          METRIC_NAMESPACE: !Ref MetricNamespace
          CARBON_INTENSITY_US_EAST_1: '0.393'
          CARBON_INTENSITY_US_WEST_2: '0.295'
          CARBON_INTENSITY_EU_WEST_1: '0.316'
          CARBON_INTENSITY_AP_NORTHEAST_1: '0.518'
          DEFAULT_CARBON_INTENSITY: '0.4'
      Code:
        ZipFile: |
          import json
          import boto3
          import datetime
          import os
          from decimal import Decimal
          
          def lambda_handler(event, context):
              # Carbon intensity factors (kg CO2 per kWh) by region
              CARBON_INTENSITY_FACTORS = {
                  'us-east-1': float(os.environ.get('CARBON_INTENSITY_US_EAST_1', '0.393')),
                  'us-west-2': float(os.environ.get('CARBON_INTENSITY_US_WEST_2', '0.295')),
                  'eu-west-1': float(os.environ.get('CARBON_INTENSITY_EU_WEST_1', '0.316')),
                  'ap-northeast-1': float(os.environ.get('CARBON_INTENSITY_AP_NORTHEAST_1', '0.518'))
              }
              
              sitewise = boto3.client('iotsitewise')
              cloudwatch = boto3.client('cloudwatch')
              
              try:
                  # Get current energy consumption from IoT SiteWise
                  asset_id = event.get('asset_id')
                  if not asset_id:
                      return {
                          'statusCode': 400,
                          'body': json.dumps('Asset ID required')
                      }
                  
                  # Get asset properties first to find the correct property ID
                  asset_properties = sitewise.describe_asset(
                      assetId=asset_id
                  )
                  
                  # Find Power_Consumption_kW property ID
                  power_property_id = None
                  for prop in asset_properties['assetProperties']:
                      if prop['name'] == 'Power_Consumption_kW':
                          power_property_id = prop['id']
                          break
                  
                  if not power_property_id:
                      return {
                          'statusCode': 400,
                          'body': json.dumps('Power consumption property not found')
                      }
                  
                  # Get latest power consumption value
                  response = sitewise.get_asset_property_value(
                      assetId=asset_id,
                      propertyId=power_property_id
                  )
                  
                  power_consumption = response['propertyValue']['value']['doubleValue']
                  
                  # Calculate carbon emissions
                  region = context.invoked_function_arn.split(':')[3]
                  carbon_factor = CARBON_INTENSITY_FACTORS.get(region, float(os.environ.get('DEFAULT_CARBON_INTENSITY', '0.4')))
                  carbon_emissions = power_consumption * carbon_factor
                  
                  # Send metrics to CloudWatch
                  cloudwatch.put_metric_data(
                      Namespace=os.environ.get('METRIC_NAMESPACE', 'Manufacturing/Sustainability'),
                      MetricData=[
                          {
                              'MetricName': 'CarbonEmissions',
                              'Dimensions': [
                                  {
                                      'Name': 'AssetId',
                                      'Value': asset_id
                                  },
                                  {
                                      'Name': 'AssetName',
                                      'Value': asset_properties['assetName']
                                  }
                              ],
                              'Value': carbon_emissions,
                              'Unit': 'None',
                              'Timestamp': datetime.datetime.utcnow()
                          },
                          {
                              'MetricName': 'PowerConsumption',
                              'Dimensions': [
                                  {
                                      'Name': 'AssetId',
                                      'Value': asset_id
                                  },
                                  {
                                      'Name': 'AssetName',
                                      'Value': asset_properties['assetName']
                                  }
                              ],
                              'Value': power_consumption,
                              'Unit': 'None',
                              'Timestamp': datetime.datetime.utcnow()
                          }
                      ]
                  )
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'carbon_emissions_kg_co2_per_hour': carbon_emissions,
                          'power_consumption_kw': power_consumption,
                          'carbon_intensity_factor': carbon_factor,
                          'asset_name': asset_properties['assetName']
                      })
                  }
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Error: {str(e)}')
                  }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: CarbonCalculation

  # SNS Topic for Alarm Notifications
  SustainabilityAlarmTopic:
    Type: AWS::SNS::Topic
    Condition: EnableNotifications
    Properties:
      TopicName: !Sub '${ResourcePrefix}-sustainability-alarms-${Environment}'
      DisplayName: Sustainability Monitoring Alarms
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: AlarmNotifications

  # SNS Topic Subscription
  SustainabilityAlarmSubscription:
    Type: AWS::SNS::Subscription
    Condition: EnableNotifications
    Properties:
      Protocol: email
      TopicArn: !Ref SustainabilityAlarmTopic
      Endpoint: !Ref NotificationEmail

  # CloudWatch Alarm for High Carbon Emissions
  HighCarbonEmissionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ResourcePrefix}-high-carbon-emissions-${Environment}'
      AlarmDescription: Alert when carbon emissions exceed threshold across all manufacturing equipment
      MetricName: CarbonEmissions
      Namespace: !Ref MetricNamespace
      Statistic: Average
      Period: 300
      EvaluationPeriods: !Ref AlarmEvaluationPeriods
      Threshold: !Ref CarbonEmissionThreshold
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !If [EnableNotifications, !Ref SustainabilityAlarmTopic, !Ref 'AWS::NoValue']
      OKActions:
        - !If [EnableNotifications, !Ref SustainabilityAlarmTopic, !Ref 'AWS::NoValue']
      TreatMissingData: notBreaching
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: AlarmType
          Value: CarbonEmissions

  # CloudWatch Alarm for High Power Consumption
  HighPowerConsumptionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ResourcePrefix}-high-power-consumption-${Environment}'
      AlarmDescription: Alert when power consumption exceeds threshold across all manufacturing equipment
      MetricName: PowerConsumption
      Namespace: !Ref MetricNamespace
      Statistic: Average
      Period: 300
      EvaluationPeriods: !Ref AlarmEvaluationPeriods
      Threshold: !Ref PowerConsumptionThreshold
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !If [EnableNotifications, !Ref SustainabilityAlarmTopic, !Ref 'AWS::NoValue']
      OKActions:
        - !If [EnableNotifications, !Ref SustainabilityAlarmTopic, !Ref 'AWS::NoValue']
      TreatMissingData: notBreaching
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: AlarmType
          Value: PowerConsumption

  # EventBridge Rule for Daily Sustainability Reporting
  DailySustainabilityReportingRule:
    Type: AWS::Events::Rule
    Condition: EnableReporting
    Properties:
      Name: !Sub '${ResourcePrefix}-daily-sustainability-report-${Environment}'
      Description: Trigger daily sustainability calculations and reporting
      ScheduleExpression: !Ref ReportingSchedule
      State: ENABLED
      Targets:
        - Arn: !GetAtt CarbonCalculatorLambda.Arn
          Id: CarbonCalculatorTarget1
          Input: !Sub |
            {
              "asset_id": "${ManufacturingEquipment1}",
              "report_type": "daily"
            }
        - Arn: !GetAtt CarbonCalculatorLambda.Arn
          Id: CarbonCalculatorTarget2
          Input: !Sub |
            {
              "asset_id": "${ManufacturingEquipment2}",
              "report_type": "daily"
            }

  # Lambda Permission for EventBridge
  CarbonCalculatorLambdaEventBridgePermission:
    Type: AWS::Lambda::Permission
    Condition: EnableReporting
    Properties:
      FunctionName: !Ref CarbonCalculatorLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DailySustainabilityReportingRule.Arn

  # CloudWatch Dashboard for Sustainability Monitoring
  SustainabilityDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ResourcePrefix}-sustainability-dashboard-${Environment}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "${MetricNamespace}", "CarbonEmissions", "AssetName", "${Equipment1Name}" ],
                  [ "...", "${Equipment2Name}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Carbon Emissions Trend",
                "period": 3600,
                "stat": "Average",
                "yAxis": {
                  "left": {
                    "label": "kg CO2/hour"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "${MetricNamespace}", "PowerConsumption", "AssetName", "${Equipment1Name}" ],
                  [ "...", "${Equipment2Name}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Power Consumption Trend",
                "period": 3600,
                "stat": "Average",
                "yAxis": {
                  "left": {
                    "label": "kW"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "${MetricNamespace}", "CarbonEmissions", "AssetName", "${Equipment1Name}" ],
                  [ "...", "${Equipment2Name}" ]
                ],
                "view": "singleValue",
                "region": "${AWS::Region}",
                "title": "Current Carbon Emissions",
                "period": 3600,
                "stat": "Average"
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "${MetricNamespace}", "PowerConsumption", "AssetName", "${Equipment1Name}" ],
                  [ "...", "${Equipment2Name}" ]
                ],
                "view": "singleValue",
                "region": "${AWS::Region}",
                "title": "Current Power Consumption",
                "period": 3600,
                "stat": "Average"
              }
            },
            {
              "type": "metric",
              "x": 16,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "${MetricNamespace}", "CarbonEmissions", "AssetName", "${Equipment1Name}", { "stat": "Sum" } ],
                  [ "...", "${Equipment2Name}", { "stat": "Sum" } ]
                ],
                "view": "singleValue",
                "region": "${AWS::Region}",
                "title": "Daily Carbon Footprint",
                "period": 86400,
                "stat": "Sum"
              }
            }
          ]
        }

# Outputs
Outputs:
  AssetModelId:
    Description: ID of the created IoT SiteWise asset model
    Value: !Ref ManufacturingAssetModel
    Export:
      Name: !Sub '${AWS::StackName}-AssetModelId'

  Equipment1AssetId:
    Description: ID of the first manufacturing equipment asset
    Value: !Ref ManufacturingEquipment1
    Export:
      Name: !Sub '${AWS::StackName}-Equipment1AssetId'

  Equipment2AssetId:
    Description: ID of the second manufacturing equipment asset
    Value: !Ref ManufacturingEquipment2
    Export:
      Name: !Sub '${AWS::StackName}-Equipment2AssetId'

  CarbonCalculatorLambdaArn:
    Description: ARN of the carbon calculator Lambda function
    Value: !GetAtt CarbonCalculatorLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CarbonCalculatorLambdaArn'

  CarbonCalculatorLambdaName:
    Description: Name of the carbon calculator Lambda function
    Value: !Ref CarbonCalculatorLambda
    Export:
      Name: !Sub '${AWS::StackName}-CarbonCalculatorLambdaName'

  CloudWatchDashboardURL:
    Description: URL to the CloudWatch dashboard for sustainability monitoring
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ResourcePrefix}-sustainability-dashboard-${Environment}'

  SustainabilityAlarmTopicArn:
    Description: ARN of the SNS topic for sustainability alarms
    Value: !If [EnableNotifications, !Ref SustainabilityAlarmTopic, 'Not Created']
    Export:
      Name: !Sub '${AWS::StackName}-SustainabilityAlarmTopicArn'
    Condition: EnableNotifications

  MetricNamespace:
    Description: CloudWatch namespace for sustainability metrics
    Value: !Ref MetricNamespace
    Export:
      Name: !Sub '${AWS::StackName}-MetricNamespace'

  DailyReportingRuleArn:
    Description: ARN of the EventBridge rule for daily reporting
    Value: !If [EnableReporting, !GetAtt DailySustainabilityReportingRule.Arn, 'Not Created']
    Export:
      Name: !Sub '${AWS::StackName}-DailyReportingRuleArn'
    Condition: EnableReporting

  CarbonEmissionThreshold:
    Description: Configured carbon emission threshold for alarms
    Value: !Ref CarbonEmissionThreshold

  PowerConsumptionThreshold:
    Description: Configured power consumption threshold for alarms
    Value: !Ref PowerConsumptionThreshold

  StackEnvironment:
    Description: Environment this stack was deployed to
    Value: !Ref Environment

  StackProjectName:
    Description: Project name for this stack
    Value: !Ref ProjectName