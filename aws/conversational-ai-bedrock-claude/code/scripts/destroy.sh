#!/bin/bash
#
# Cleanup script for Conversational AI Applications with Amazon Bedrock and Claude
# This script safely removes all created infrastructure including DynamoDB, Lambda, API Gateway, and IAM resources
#
# Usage: ./destroy.sh [--force] [--dry-run] [--keep-logs]
#
# Author: Generated by Claude Code Recipe System
# Version: 1.0
# Last Updated: 2025-07-12

set -euo pipefail

# Color codes for output formatting
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="${SCRIPT_DIR}/destroy.log"
DRY_RUN=false
FORCE=false
KEEP_LOGS=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --force)
            FORCE=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --keep-logs)
            KEEP_LOGS=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [--force] [--dry-run] [--keep-logs]"
            echo "  --force       Skip confirmation prompts"
            echo "  --dry-run     Show what would be deleted without making changes"
            echo "  --keep-logs   Keep CloudWatch log groups after cleanup"
            echo "  -h, --help    Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option $1"
            exit 1
            ;;
    esac
done

# Logging function
log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case $level in
        INFO)
            echo -e "${GREEN}[INFO]${NC} $message" | tee -a "$LOG_FILE"
            ;;
        WARN)
            echo -e "${YELLOW}[WARN]${NC} $message" | tee -a "$LOG_FILE"
            ;;
        ERROR)
            echo -e "${RED}[ERROR]${NC} $message" | tee -a "$LOG_FILE"
            ;;
        DEBUG)
            echo -e "${BLUE}[DEBUG]${NC} $message" | tee -a "$LOG_FILE"
            ;;
    esac
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
}

# Error handling function
handle_error() {
    local exit_code=$?
    local line_number=$1
    log ERROR "Script failed at line $line_number with exit code $exit_code"
    log ERROR "Check the log file at $LOG_FILE for details"
    exit $exit_code
}

trap 'handle_error $LINENO' ERR

# Initialize log file
echo "=== Conversational AI Cleanup Started at $(date) ===" > "$LOG_FILE"

log INFO "Starting cleanup of Conversational AI Applications with Amazon Bedrock and Claude"

# Load environment variables from deployment
load_environment() {
    log INFO "Loading environment variables from deployment..."
    
    local env_file="${SCRIPT_DIR}/.env"
    if [[ ! -f "$env_file" ]]; then
        log ERROR "Environment file not found: $env_file"
        log ERROR "Cannot determine which resources to clean up"
        log ERROR "If you know the resource names, you can clean them up manually:"
        log ERROR "  - DynamoDB tables starting with 'conversational-ai-'"
        log ERROR "  - Lambda functions starting with 'conversational-ai-handler-'"
        log ERROR "  - API Gateway APIs starting with 'conversational-ai-api-'"
        log ERROR "  - IAM roles starting with 'ConversationalAILambdaRole-'"
        exit 1
    fi
    
    # Source environment variables
    source "$env_file"
    
    # Validate required variables
    local required_vars=(
        "AWS_REGION" "AWS_ACCOUNT_ID" "TABLE_NAME" "API_NAME" 
        "LAMBDA_FUNCTION_NAME" "IAM_ROLE_NAME"
    )
    
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var:-}" ]]; then
            log ERROR "Required environment variable not found: $var"
            exit 1
        fi
    done
    
    log INFO "Environment loaded successfully:"
    log INFO "  AWS Region: $AWS_REGION"
    log INFO "  Table Name: $TABLE_NAME"
    log INFO "  Lambda Function: $LAMBDA_FUNCTION_NAME"
    log INFO "  IAM Role: $IAM_ROLE_NAME"
    log INFO "  API Name: $API_NAME"
}

# Confirmation prompt
confirm_deletion() {
    if [[ "$FORCE" == "true" ]]; then
        log INFO "Force mode enabled, skipping confirmation"
        return
    fi
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log INFO "Dry run mode enabled, no resources will be deleted"
        return
    fi
    
    log WARN "This will DELETE all resources created for the Conversational AI application:"
    log WARN "  • DynamoDB Table: $TABLE_NAME"
    log WARN "  • Lambda Function: $LAMBDA_FUNCTION_NAME"
    log WARN "  • IAM Role: $IAM_ROLE_NAME"
    log WARN "  • API Gateway: $API_NAME"
    if [[ "${API_ID:-}" ]]; then
        log WARN "  • API Gateway ID: $API_ID"
    fi
    log WARN ""
    log WARN "This action CANNOT be undone!"
    log WARN ""
    
    read -p "Are you sure you want to continue? (type 'yes' to confirm): " confirmation
    
    if [[ "$confirmation" != "yes" ]]; then
        log INFO "Cleanup cancelled by user"
        exit 0
    fi
    
    log INFO "Proceeding with resource cleanup..."
}

# Check prerequisites
check_prerequisites() {
    log INFO "Checking prerequisites..."
    
    # Check if AWS CLI is installed
    if ! command -v aws &> /dev/null; then
        log ERROR "AWS CLI is not installed. Please install AWS CLI v2."
        exit 1
    fi
    
    # Check if user is authenticated
    if ! aws sts get-caller-identity &> /dev/null; then
        log ERROR "AWS credentials not configured. Please run 'aws configure'."
        exit 1
    fi
    
    # Verify we're in the correct AWS account
    local current_account=$(aws sts get-caller-identity --query Account --output text)
    if [[ "$current_account" != "$AWS_ACCOUNT_ID" ]]; then
        log ERROR "AWS account mismatch!"
        log ERROR "Expected: $AWS_ACCOUNT_ID"
        log ERROR "Current: $current_account"
        log ERROR "Please switch to the correct AWS account before running cleanup"
        exit 1
    fi
    
    log INFO "Prerequisites check completed successfully"
}

# Delete API Gateway
delete_api_gateway() {
    log INFO "Deleting API Gateway..."
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log INFO "[DRY RUN] Would delete API Gateway: $API_NAME"
        return
    fi
    
    # Find API ID if not in environment
    if [[ -z "${API_ID:-}" ]]; then
        API_ID=$(aws apigateway get-rest-apis \
            --query "items[?name=='$API_NAME'].id" --output text 2>/dev/null || echo "")
    fi
    
    if [[ -z "$API_ID" || "$API_ID" == "None" ]]; then
        log WARN "API Gateway $API_NAME not found, may have been already deleted"
        return
    fi
    
    # Delete API Gateway
    if aws apigateway delete-rest-api --rest-api-id "$API_ID" 2>/dev/null; then
        log INFO "Successfully deleted API Gateway: $API_NAME ($API_ID)"
    else
        log WARN "Failed to delete API Gateway $API_NAME, may have been already deleted"
    fi
}

# Delete Lambda function
delete_lambda_function() {
    log INFO "Deleting Lambda function..."
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log INFO "[DRY RUN] Would delete Lambda function: $LAMBDA_FUNCTION_NAME"
        return
    fi
    
    # Check if function exists
    if ! aws lambda get-function --function-name "$LAMBDA_FUNCTION_NAME" &> /dev/null; then
        log WARN "Lambda function $LAMBDA_FUNCTION_NAME not found, may have been already deleted"
        return
    fi
    
    # Delete function
    if aws lambda delete-function --function-name "$LAMBDA_FUNCTION_NAME" 2>/dev/null; then
        log INFO "Successfully deleted Lambda function: $LAMBDA_FUNCTION_NAME"
    else
        log WARN "Failed to delete Lambda function $LAMBDA_FUNCTION_NAME"
    fi
}

# Delete DynamoDB table
delete_dynamodb_table() {
    log INFO "Deleting DynamoDB table..."
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log INFO "[DRY RUN] Would delete DynamoDB table: $TABLE_NAME"
        return
    fi
    
    # Check if table exists
    if ! aws dynamodb describe-table --table-name "$TABLE_NAME" &> /dev/null; then
        log WARN "DynamoDB table $TABLE_NAME not found, may have been already deleted"
        return
    fi
    
    # Get table status before deletion
    local table_status=$(aws dynamodb describe-table \
        --table-name "$TABLE_NAME" \
        --query 'Table.TableStatus' --output text 2>/dev/null || echo "UNKNOWN")
    
    if [[ "$table_status" == "DELETING" ]]; then
        log WARN "DynamoDB table $TABLE_NAME is already being deleted"
        return
    fi
    
    # Check if table has data and warn user
    local item_count=$(aws dynamodb scan \
        --table-name "$TABLE_NAME" \
        --select COUNT \
        --query 'Count' --output text 2>/dev/null || echo "0")
    
    if [[ "$item_count" -gt 0 ]]; then
        log WARN "DynamoDB table $TABLE_NAME contains $item_count items"
        log WARN "All conversation data will be permanently lost"
        
        if [[ "$FORCE" != "true" ]]; then
            read -p "Continue with table deletion? (y/N): " table_confirm
            if [[ "$table_confirm" != "y" && "$table_confirm" != "Y" ]]; then
                log INFO "Skipping DynamoDB table deletion"
                return
            fi
        fi
    fi
    
    # Delete table
    if aws dynamodb delete-table --table-name "$TABLE_NAME" 2>/dev/null; then
        log INFO "Successfully initiated deletion of DynamoDB table: $TABLE_NAME"
        
        # Wait for table to be deleted (optional)
        log INFO "Waiting for table deletion to complete..."
        if aws dynamodb wait table-not-exists --table-name "$TABLE_NAME" 2>/dev/null; then
            log INFO "DynamoDB table deletion completed"
        else
            log WARN "Table deletion in progress, check AWS console for status"
        fi
    else
        log WARN "Failed to delete DynamoDB table $TABLE_NAME"
    fi
}

# Delete IAM role and policies
delete_iam_role() {
    log INFO "Deleting IAM role and policies..."
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log INFO "[DRY RUN] Would delete IAM role: $IAM_ROLE_NAME"
        return
    fi
    
    # Check if role exists
    if ! aws iam get-role --role-name "$IAM_ROLE_NAME" &> /dev/null; then
        log WARN "IAM role $IAM_ROLE_NAME not found, may have been already deleted"
        return
    fi
    
    # Detach managed policies
    log INFO "Detaching managed policies from role..."
    aws iam detach-role-policy \
        --role-name "$IAM_ROLE_NAME" \
        --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole 2>/dev/null || true
    
    # Delete inline policies
    log INFO "Deleting inline policies..."
    local inline_policies=$(aws iam list-role-policies \
        --role-name "$IAM_ROLE_NAME" \
        --query 'PolicyNames' --output text 2>/dev/null || echo "")
    
    if [[ -n "$inline_policies" ]]; then
        for policy in $inline_policies; do
            if aws iam delete-role-policy \
                --role-name "$IAM_ROLE_NAME" \
                --policy-name "$policy" 2>/dev/null; then
                log INFO "Deleted inline policy: $policy"
            fi
        done
    fi
    
    # Delete role
    if aws iam delete-role --role-name "$IAM_ROLE_NAME" 2>/dev/null; then
        log INFO "Successfully deleted IAM role: $IAM_ROLE_NAME"
    else
        log WARN "Failed to delete IAM role $IAM_ROLE_NAME"
    fi
}

# Delete CloudWatch logs
delete_cloudwatch_logs() {
    if [[ "$KEEP_LOGS" == "true" ]]; then
        log INFO "Keeping CloudWatch log groups as requested"
        return
    fi
    
    log INFO "Deleting CloudWatch log groups..."
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log INFO "[DRY RUN] Would delete CloudWatch log groups for Lambda function"
        return
    fi
    
    # Delete Lambda function log group
    local log_group_name="/aws/lambda/$LAMBDA_FUNCTION_NAME"
    
    if aws logs describe-log-groups \
        --log-group-name-prefix "$log_group_name" \
        --query 'logGroups[0].logGroupName' --output text 2>/dev/null | grep -q "$log_group_name"; then
        
        if aws logs delete-log-group --log-group-name "$log_group_name" 2>/dev/null; then
            log INFO "Successfully deleted CloudWatch log group: $log_group_name"
        else
            log WARN "Failed to delete CloudWatch log group: $log_group_name"
        fi
    else
        log INFO "CloudWatch log group not found: $log_group_name"
    fi
    
    # Delete API Gateway log groups (if any)
    local api_log_groups=$(aws logs describe-log-groups \
        --log-group-name-prefix "API-Gateway-Execution-Logs_" \
        --query 'logGroups[].logGroupName' --output text 2>/dev/null || echo "")
    
    if [[ -n "$api_log_groups" ]]; then
        for log_group in $api_log_groups; do
            if [[ "$log_group" == *"$API_ID"* ]]; then
                if aws logs delete-log-group --log-group-name "$log_group" 2>/dev/null; then
                    log INFO "Deleted API Gateway log group: $log_group"
                fi
            fi
        done
    fi
}

# Clean up local files
cleanup_local_files() {
    log INFO "Cleaning up local files..."
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log INFO "[DRY RUN] Would clean up local files"
        return
    fi
    
    # Remove environment file
    if [[ -f "${SCRIPT_DIR}/.env" ]]; then
        rm -f "${SCRIPT_DIR}/.env"
        log INFO "Removed environment file"
    fi
    
    # Remove test scripts
    if [[ -f "${SCRIPT_DIR}/test_conversational_ai.py" ]]; then
        rm -f "${SCRIPT_DIR}/test_conversational_ai.py"
        log INFO "Removed test script"
    fi
    
    # Remove any temporary files
    rm -f "${SCRIPT_DIR}"/conversational_ai_handler.*
    rm -f "${SCRIPT_DIR}"/*.zip
    
    log INFO "Local file cleanup completed"
}

# Verify cleanup completion
verify_cleanup() {
    log INFO "Verifying cleanup completion..."
    
    local cleanup_issues=0
    
    # Check DynamoDB table
    if aws dynamodb describe-table --table-name "$TABLE_NAME" &> /dev/null; then
        log WARN "DynamoDB table still exists: $TABLE_NAME"
        ((cleanup_issues++))
    fi
    
    # Check Lambda function
    if aws lambda get-function --function-name "$LAMBDA_FUNCTION_NAME" &> /dev/null; then
        log WARN "Lambda function still exists: $LAMBDA_FUNCTION_NAME"
        ((cleanup_issues++))
    fi
    
    # Check IAM role
    if aws iam get-role --role-name "$IAM_ROLE_NAME" &> /dev/null; then
        log WARN "IAM role still exists: $IAM_ROLE_NAME"
        ((cleanup_issues++))
    fi
    
    # Check API Gateway
    if [[ -n "${API_ID:-}" ]]; then
        if aws apigateway get-rest-api --rest-api-id "$API_ID" &> /dev/null; then
            log WARN "API Gateway still exists: $API_ID"
            ((cleanup_issues++))
        fi
    fi
    
    if [[ $cleanup_issues -eq 0 ]]; then
        log INFO "✅ All resources successfully cleaned up"
    else
        log WARN "⚠️  $cleanup_issues resource(s) may still exist"
        log WARN "Please check the AWS console and clean up manually if needed"
    fi
}

# Main cleanup function
main() {
    log INFO "=== Starting Conversational AI Cleanup ==="
    
    load_environment
    check_prerequisites
    confirm_deletion
    
    # Delete resources in reverse order of creation
    delete_api_gateway
    delete_lambda_function
    delete_iam_role
    delete_dynamodb_table
    delete_cloudwatch_logs
    cleanup_local_files
    
    if [[ "$DRY_RUN" != "true" ]]; then
        verify_cleanup
    fi
    
    log INFO "=== Cleanup Complete ==="
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log INFO ""
        log INFO "🔍 Dry run completed - no resources were actually deleted"
        log INFO "Run without --dry-run to perform actual cleanup"
    else
        log INFO ""
        log INFO "🗑️  Conversational AI infrastructure cleanup completed!"
        log INFO ""
        log INFO "📋 Cleanup Summary:"
        log INFO "  • DynamoDB Table: $TABLE_NAME"
        log INFO "  • Lambda Function: $LAMBDA_FUNCTION_NAME"
        log INFO "  • IAM Role: $IAM_ROLE_NAME"
        log INFO "  • API Gateway: $API_NAME"
        if [[ "$KEEP_LOGS" != "true" ]]; then
            log INFO "  • CloudWatch Logs: Deleted"
        else
            log INFO "  • CloudWatch Logs: Preserved"
        fi
        log INFO ""
        log INFO "📋 Full cleanup log: $LOG_FILE"
        log INFO ""
        log INFO "💡 If you need to redeploy, run: ${SCRIPT_DIR}/deploy.sh"
    fi
}

# Run main function
main "$@"