#!/usr/bin/env python3
"""
AWS CDK Python Application for WAF Rules Web Application Security

This CDK application deploys a comprehensive AWS WAF v2 solution with:
- Managed rule groups for OWASP Top 10 protection
- Custom rate limiting rules
- Geographic blocking capabilities
- Bot protection
- CloudWatch monitoring and alerting
- Comprehensive logging and dashboards

Author: Generated by Claude Code
Version: 1.0
"""

import os
from typing import Dict, Any, List, Optional

import aws_cdk as cdk
from aws_cdk import (
    Stack,
    CfnOutput,
    RemovalPolicy,
    Duration,
    aws_wafv2 as wafv2,
    aws_cloudwatch as cloudwatch,
    aws_cloudwatch_actions as cloudwatch_actions,
    aws_logs as logs,
    aws_sns as sns,
    aws_sns_subscriptions as sns_subscriptions,
    aws_iam as iam,
)
from constructs import Construct


class WafSecurityStack(Stack):
    """
    AWS CDK Stack for implementing comprehensive WAF security rules
    
    This stack creates:
    - WAF Web ACL with managed and custom rules
    - CloudWatch logging and monitoring
    - SNS notifications for security alerts
    - Comprehensive dashboards for security visibility
    """

    def __init__(
        self, 
        scope: Construct, 
        construct_id: str, 
        **kwargs: Any
    ) -> None:
        super().__init__(scope, construct_id, **kwargs)

        # Stack parameters with sensible defaults
        self.waf_name = self.node.try_get_parameter("waf_name") or f"webapp-security-waf-{self.stack_name.lower()}"
        self.rate_limit = int(self.node.try_get_parameter("rate_limit") or "10000")
        self.blocked_countries = self.node.try_get_parameter("blocked_countries") or ["CN", "RU", "KP"]
        self.notification_email = self.node.try_get_parameter("notification_email") or None
        self.enable_bot_control = self.node.try_get_parameter("enable_bot_control") or "true"

        # Create core WAF resources
        self._create_ip_set()
        self._create_regex_pattern_set()
        self._create_web_acl()
        
        # Create monitoring and alerting
        self._create_cloudwatch_log_group()
        self._create_sns_topic()
        self._create_cloudwatch_alarms()
        self._create_cloudwatch_dashboard()
        
        # Enable WAF logging
        self._enable_waf_logging()
        
        # Create outputs
        self._create_outputs()

    def _create_ip_set(self) -> None:
        """Create IP Set for blocking specific IP addresses"""
        self.blocked_ip_set = wafv2.CfnIPSet(
            self,
            "BlockedIPSet",
            name=f"blocked-ips-{self.stack_name.lower()}",
            scope="CLOUDFRONT",
            ip_address_version="IPV4",
            addresses=[
                "192.0.2.44/32",   # Example blocked IP
                "203.0.113.0/24"   # Example blocked subnet
            ],
            description="IP addresses and subnets to block for security",
            tags=[
                cdk.CfnTag(key="Purpose", value="Security"),
                cdk.CfnTag(key="Component", value="WAF")
            ]
        )

    def _create_regex_pattern_set(self) -> None:
        """Create Regex Pattern Set for detecting suspicious patterns"""
        self.suspicious_patterns = wafv2.CfnRegexPatternSet(
            self,
            "SuspiciousPatterns",
            name=f"suspicious-patterns-{self.stack_name.lower()}",
            scope="CLOUDFRONT",
            regular_expression_list=[
                # SQL Injection patterns
                {"regex_string": "(?i)(union.*select|select.*from|insert.*into|drop.*table)"},
                # XSS patterns
                {"regex_string": "(?i)(<script|javascript:|onerror=|onload=)"},
                # Directory traversal patterns
                {"regex_string": "(?i)(\\.\\./)|(\\\\\\.\\.\\\\)"},
                # Command injection patterns
                {"regex_string": "(?i)(cmd\\.exe|powershell|/bin/bash|/bin/sh)"}
            ],
            description="Patterns for detecting common attack signatures",
            tags=[
                cdk.CfnTag(key="Purpose", value="Security"),
                cdk.CfnTag(key="Component", value="WAF")
            ]
        )

    def _create_web_acl(self) -> None:
        """Create WAF Web ACL with comprehensive security rules"""
        
        # Build rules list
        rules = self._build_waf_rules()
        
        self.web_acl = wafv2.CfnWebACL(
            self,
            "WebSecurityACL",
            name=self.waf_name,
            scope="CLOUDFRONT",
            default_action=wafv2.CfnWebACL.DefaultActionProperty(
                allow={}
            ),
            description="Comprehensive WAF for web application security",
            rules=rules,
            visibility_config=wafv2.CfnWebACL.VisibilityConfigProperty(
                sampled_requests_enabled=True,
                cloud_watch_metrics_enabled=True,
                metric_name=f"{self.waf_name}Metric"
            ),
            tags=[
                cdk.CfnTag(key="Purpose", value="Security"),
                cdk.CfnTag(key="Component", value="WAF"),
                cdk.CfnTag(key="Environment", value=self.stack_name)
            ]
        )

    def _build_waf_rules(self) -> List[wafv2.CfnWebACL.RuleProperty]:
        """Build comprehensive list of WAF rules"""
        rules = []
        
        # AWS Managed Rules - Common Rule Set
        rules.append(
            wafv2.CfnWebACL.RuleProperty(
                name="AWSManagedRulesCommonRuleSet",
                priority=1,
                statement=wafv2.CfnWebACL.StatementProperty(
                    managed_rule_group_statement=wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(
                        vendor_name="AWS",
                        name="AWSManagedRulesCommonRuleSet"
                    )
                ),
                override_action=wafv2.CfnWebACL.OverrideActionProperty(
                    none={}
                ),
                visibility_config=wafv2.CfnWebACL.VisibilityConfigProperty(
                    sampled_requests_enabled=True,
                    cloud_watch_metrics_enabled=True,
                    metric_name="CommonRuleSetMetric"
                )
            )
        )

        # AWS Managed Rules - Known Bad Inputs Rule Set
        rules.append(
            wafv2.CfnWebACL.RuleProperty(
                name="AWSManagedRulesKnownBadInputsRuleSet",
                priority=2,
                statement=wafv2.CfnWebACL.StatementProperty(
                    managed_rule_group_statement=wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(
                        vendor_name="AWS",
                        name="AWSManagedRulesKnownBadInputsRuleSet"
                    )
                ),
                override_action=wafv2.CfnWebACL.OverrideActionProperty(
                    none={}
                ),
                visibility_config=wafv2.CfnWebACL.VisibilityConfigProperty(
                    sampled_requests_enabled=True,
                    cloud_watch_metrics_enabled=True,
                    metric_name="KnownBadInputsMetric"
                )
            )
        )

        # AWS Managed Rules - SQL Injection Rule Set
        rules.append(
            wafv2.CfnWebACL.RuleProperty(
                name="AWSManagedRulesSQLiRuleSet",
                priority=3,
                statement=wafv2.CfnWebACL.StatementProperty(
                    managed_rule_group_statement=wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(
                        vendor_name="AWS",
                        name="AWSManagedRulesSQLiRuleSet"
                    )
                ),
                override_action=wafv2.CfnWebACL.OverrideActionProperty(
                    none={}
                ),
                visibility_config=wafv2.CfnWebACL.VisibilityConfigProperty(
                    sampled_requests_enabled=True,
                    cloud_watch_metrics_enabled=True,
                    metric_name="SQLiRuleSetMetric"
                )
            )
        )

        # Bot Control Rule Set (if enabled)
        if self.enable_bot_control.lower() == "true":
            rules.append(
                wafv2.CfnWebACL.RuleProperty(
                    name="AWSManagedRulesBotControlRuleSet",
                    priority=4,
                    statement=wafv2.CfnWebACL.StatementProperty(
                        managed_rule_group_statement=wafv2.CfnWebACL.ManagedRuleGroupStatementProperty(
                            vendor_name="AWS",
                            name="AWSManagedRulesBotControlRuleSet"
                        )
                    ),
                    override_action=wafv2.CfnWebACL.OverrideActionProperty(
                        none={}
                    ),
                    visibility_config=wafv2.CfnWebACL.VisibilityConfigProperty(
                        sampled_requests_enabled=True,
                        cloud_watch_metrics_enabled=True,
                        metric_name="BotControlMetric"
                    )
                )
            )

        # Rate Limiting Rule
        priority_offset = 5 if self.enable_bot_control.lower() == "true" else 4
        rules.append(
            wafv2.CfnWebACL.RuleProperty(
                name="RateLimitRule",
                priority=priority_offset,
                statement=wafv2.CfnWebACL.StatementProperty(
                    rate_based_statement=wafv2.CfnWebACL.RateBasedStatementProperty(
                        limit=self.rate_limit,
                        aggregate_key_type="IP"
                    )
                ),
                action=wafv2.CfnWebACL.RuleActionProperty(
                    block={}
                ),
                visibility_config=wafv2.CfnWebACL.VisibilityConfigProperty(
                    sampled_requests_enabled=True,
                    cloud_watch_metrics_enabled=True,
                    metric_name="RateLimitMetric"
                )
            )
        )

        # Geographic Blocking Rule
        if self.blocked_countries:
            rules.append(
                wafv2.CfnWebACL.RuleProperty(
                    name="BlockHighRiskCountries",
                    priority=priority_offset + 1,
                    statement=wafv2.CfnWebACL.StatementProperty(
                        geo_match_statement=wafv2.CfnWebACL.GeoMatchStatementProperty(
                            country_codes=self.blocked_countries
                        )
                    ),
                    action=wafv2.CfnWebACL.RuleActionProperty(
                        block={}
                    ),
                    visibility_config=wafv2.CfnWebACL.VisibilityConfigProperty(
                        sampled_requests_enabled=True,
                        cloud_watch_metrics_enabled=True,
                        metric_name="GeoBlockMetric"
                    )
                )
            )

        # IP Blocking Rule
        rules.append(
            wafv2.CfnWebACL.RuleProperty(
                name="BlockMaliciousIPs",
                priority=priority_offset + 2,
                statement=wafv2.CfnWebACL.StatementProperty(
                    ip_set_reference_statement=wafv2.CfnWebACL.IPSetReferenceStatementProperty(
                        arn=self.blocked_ip_set.attr_arn
                    )
                ),
                action=wafv2.CfnWebACL.RuleActionProperty(
                    block={}
                ),
                visibility_config=wafv2.CfnWebACL.VisibilityConfigProperty(
                    sampled_requests_enabled=True,
                    cloud_watch_metrics_enabled=True,
                    metric_name="IPBlockMetric"
                )
            )
        )

        # Custom Pattern Matching Rule
        rules.append(
            wafv2.CfnWebACL.RuleProperty(
                name="BlockSuspiciousPatterns",
                priority=priority_offset + 3,
                statement=wafv2.CfnWebACL.StatementProperty(
                    regex_pattern_set_reference_statement=wafv2.CfnWebACL.RegexPatternSetReferenceStatementProperty(
                        arn=self.suspicious_patterns.attr_arn,
                        field_to_match=wafv2.CfnWebACL.FieldToMatchProperty(
                            uri_path={}
                        ),
                        text_transformations=[
                            wafv2.CfnWebACL.TextTransformationProperty(
                                priority=0,
                                type="URL_DECODE"
                            ),
                            wafv2.CfnWebACL.TextTransformationProperty(
                                priority=1,
                                type="HTML_ENTITY_DECODE"
                            )
                        ]
                    )
                ),
                action=wafv2.CfnWebACL.RuleActionProperty(
                    block={}
                ),
                visibility_config=wafv2.CfnWebACL.VisibilityConfigProperty(
                    sampled_requests_enabled=True,
                    cloud_watch_metrics_enabled=True,
                    metric_name="SuspiciousPatternsMetric"
                )
            )
        )

        return rules

    def _create_cloudwatch_log_group(self) -> None:
        """Create CloudWatch Log Group for WAF logs"""
        self.log_group = logs.LogGroup(
            self,
            "WAFLogGroup",
            log_group_name=f"/aws/wafv2/{self.waf_name}",
            retention=logs.RetentionDays.ONE_MONTH,
            removal_policy=RemovalPolicy.DESTROY
        )

    def _create_sns_topic(self) -> None:
        """Create SNS topic for security alerts"""
        self.security_alerts_topic = sns.Topic(
            self,
            "SecurityAlertsTopic",
            topic_name=f"waf-security-alerts-{self.stack_name.lower()}",
            display_name="WAF Security Alerts"
        )

        # Add email subscription if provided
        if self.notification_email:
            self.security_alerts_topic.add_subscription(
                sns_subscriptions.EmailSubscription(self.notification_email)
            )

    def _create_cloudwatch_alarms(self) -> None:
        """Create CloudWatch alarms for security monitoring"""
        
        # High Blocked Requests Alarm
        self.blocked_requests_alarm = cloudwatch.Alarm(
            self,
            "HighBlockedRequestsAlarm",
            alarm_name=f"waf-high-blocked-requests-{self.stack_name.lower()}",
            alarm_description="High number of blocked requests detected",
            metric=cloudwatch.Metric(
                namespace="AWS/WAFV2",
                metric_name="BlockedRequests",
                dimensions_map={
                    "WebACL": self.waf_name,
                    "Region": self.region
                },
                statistic="Sum",
                period=Duration.minutes(5)
            ),
            threshold=1000,
            evaluation_periods=2,
            comparison_operator=cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD
        )
        
        self.blocked_requests_alarm.add_alarm_action(
            cloudwatch_actions.SnsAction(self.security_alerts_topic)
        )

        # Rate Limit Triggered Alarm
        self.rate_limit_alarm = cloudwatch.Alarm(
            self,
            "RateLimitTriggeredAlarm",
            alarm_name=f"waf-rate-limit-triggered-{self.stack_name.lower()}",
            alarm_description="Rate limiting is actively blocking requests",
            metric=cloudwatch.Metric(
                namespace="AWS/WAFV2",
                metric_name="BlockedRequests",
                dimensions_map={
                    "WebACL": self.waf_name,
                    "Region": self.region,
                    "Rule": "RateLimitMetric"
                },
                statistic="Sum",
                period=Duration.minutes(5)
            ),
            threshold=100,
            evaluation_periods=1,
            comparison_operator=cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD
        )
        
        self.rate_limit_alarm.add_alarm_action(
            cloudwatch_actions.SnsAction(self.security_alerts_topic)
        )

    def _create_cloudwatch_dashboard(self) -> None:
        """Create CloudWatch dashboard for WAF monitoring"""
        self.waf_dashboard = cloudwatch.Dashboard(
            self,
            "WAFSecurityDashboard",
            dashboard_name=f"WAF-Security-Dashboard-{self.stack_name}"
        )

        # Add overall request statistics widget
        self.waf_dashboard.add_widgets(
            cloudwatch.GraphWidget(
                title="WAF Request Statistics",
                left=[
                    cloudwatch.Metric(
                        namespace="AWS/WAFV2",
                        metric_name="AllowedRequests",
                        dimensions_map={
                            "WebACL": self.waf_name,
                            "Region": self.region
                        },
                        statistic="Sum",
                        period=Duration.minutes(5),
                        label="Allowed Requests"
                    ),
                    cloudwatch.Metric(
                        namespace="AWS/WAFV2",
                        metric_name="BlockedRequests",
                        dimensions_map={
                            "WebACL": self.waf_name,
                            "Region": self.region
                        },
                        statistic="Sum",
                        period=Duration.minutes(5),
                        label="Blocked Requests"
                    )
                ],
                width=12,
                height=6
            )
        )

        # Add blocked requests by rule widget
        rule_metrics = [
            ("CommonRuleSetMetric", "Common Rule Set"),
            ("KnownBadInputsMetric", "Known Bad Inputs"),
            ("SQLiRuleSetMetric", "SQL Injection"),
            ("RateLimitMetric", "Rate Limiting"),
            ("GeoBlockMetric", "Geographic Blocking"),
            ("IPBlockMetric", "IP Blocking"),
            ("SuspiciousPatternsMetric", "Suspicious Patterns")
        ]

        if self.enable_bot_control.lower() == "true":
            rule_metrics.append(("BotControlMetric", "Bot Control"))

        blocked_by_rule_metrics = []
        for rule_metric, label in rule_metrics:
            blocked_by_rule_metrics.append(
                cloudwatch.Metric(
                    namespace="AWS/WAFV2",
                    metric_name="BlockedRequests",
                    dimensions_map={
                        "WebACL": self.waf_name,
                        "Region": self.region,
                        "Rule": rule_metric
                    },
                    statistic="Sum",
                    period=Duration.minutes(5),
                    label=label
                )
            )

        self.waf_dashboard.add_widgets(
            cloudwatch.GraphWidget(
                title="Blocked Requests by Rule",
                left=blocked_by_rule_metrics,
                width=12,
                height=6
            )
        )

    def _enable_waf_logging(self) -> None:
        """Enable WAF logging to CloudWatch"""
        
        # Create IAM role for WAF logging
        waf_log_role = iam.Role(
            self,
            "WAFLogRole",
            assumed_by=iam.ServicePrincipal("wafv2.amazonaws.com"),
            inline_policies={
                "WAFLogPolicy": iam.PolicyDocument(
                    statements=[
                        iam.PolicyStatement(
                            effect=iam.Effect.ALLOW,
                            actions=[
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            resources=[self.log_group.log_group_arn]
                        )
                    ]
                )
            }
        )

        # Enable logging configuration
        self.logging_configuration = wafv2.CfnLoggingConfiguration(
            self,
            "WAFLoggingConfiguration",
            resource_arn=self.web_acl.attr_arn,
            log_destination_configs=[self.log_group.log_group_arn],
            log_type="WAF_LOGS",
            log_scope="SECURITY_EVENTS"
        )

        # Ensure logging is created after the Web ACL
        self.logging_configuration.add_dependency(self.web_acl)

    def _create_outputs(self) -> None:
        """Create CloudFormation outputs"""
        
        CfnOutput(
            self,
            "WebACLArn",
            value=self.web_acl.attr_arn,
            description="WAF Web ACL ARN for association with CloudFront or ALB",
            export_name=f"{self.stack_name}-WebACL-ARN"
        )

        CfnOutput(
            self,
            "WebACLName",
            value=self.waf_name,
            description="WAF Web ACL Name",
            export_name=f"{self.stack_name}-WebACL-Name"
        )

        CfnOutput(
            self,
            "LogGroupName",
            value=self.log_group.log_group_name,
            description="CloudWatch Log Group for WAF logs",
            export_name=f"{self.stack_name}-LogGroup-Name"
        )

        CfnOutput(
            self,
            "SNSTopicArn",
            value=self.security_alerts_topic.topic_arn,
            description="SNS Topic ARN for security alerts",
            export_name=f"{self.stack_name}-SNS-Topic-ARN"
        )

        CfnOutput(
            self,
            "DashboardURL",
            value=f"https://{self.region}.console.aws.amazon.com/cloudwatch/home?region={self.region}#dashboards:name={self.waf_dashboard.dashboard_name}",
            description="CloudWatch Dashboard URL for WAF monitoring"
        )

        CfnOutput(
            self,
            "IPSetArn",
            value=self.blocked_ip_set.attr_arn,
            description="IP Set ARN for managing blocked IP addresses",
            export_name=f"{self.stack_name}-IPSet-ARN"
        )


def main() -> None:
    """Main application entry point"""
    app = cdk.App()
    
    # Get environment from context or use defaults
    env = cdk.Environment(
        account=os.environ.get("CDK_DEFAULT_ACCOUNT"),
        region=os.environ.get("CDK_DEFAULT_REGION", "us-east-1")
    )
    
    # Create the WAF Security stack
    waf_stack = WafSecurityStack(
        app,
        "WAFSecurityStack",
        env=env,
        description="Comprehensive WAF security implementation with managed rules, rate limiting, and monitoring"
    )
    
    # Add tags to all resources in the stack
    cdk.Tags.of(waf_stack).add("Project", "WAF-Security")
    cdk.Tags.of(waf_stack).add("Environment", "Production")
    cdk.Tags.of(waf_stack).add("Owner", "Security-Team")
    cdk.Tags.of(waf_stack).add("CostCenter", "Infrastructure")
    
    app.synth()


if __name__ == "__main__":
    main()