AWSTemplateFormatVersion: '2010-09-09'
Description: 'Comprehensive AWS WAF v2 Web ACL for web application security with managed rules, rate limiting, and monitoring'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "WAF Configuration"
        Parameters:
          - WAFName
          - WAFScope
          - RateLimitThreshold
      - Label:
          default: "Geographic Blocking"
        Parameters:
          - EnableGeographicBlocking
          - BlockedCountries
      - Label:
          default: "IP Blocking"
        Parameters:
          - BlockedIPAddresses
          - BlockedIPCIDRs
      - Label:
          default: "Monitoring & Logging"
        Parameters:
          - EnableLogging
          - LogRetentionDays
          - EnableCloudWatchAlarms
          - AlertEmail
      - Label:
          default: "Custom Pattern Detection"
        Parameters:
          - EnableCustomPatterns
          - CustomSQLiPatterns
          - CustomXSSPatterns
      - Label:
          default: "Advanced Protection"
        Parameters:
          - EnableBotControl
          - EnableAWSManagedRules
    ParameterLabels:
      WAFName:
        default: "WAF Web ACL Name"
      WAFScope:
        default: "WAF Scope"
      RateLimitThreshold:
        default: "Rate Limit Threshold"
      EnableGeographicBlocking:
        default: "Enable Geographic Blocking"
      BlockedCountries:
        default: "Blocked Country Codes"
      BlockedIPAddresses:
        default: "Blocked IP Addresses"
      BlockedIPCIDRs:
        default: "Blocked IP CIDR Blocks"
      EnableLogging:
        default: "Enable WAF Logging"
      LogRetentionDays:
        default: "Log Retention Period"
      EnableCloudWatchAlarms:
        default: "Enable CloudWatch Alarms"
      AlertEmail:
        default: "Alert Email Address"
      EnableCustomPatterns:
        default: "Enable Custom Pattern Detection"
      CustomSQLiPatterns:
        default: "Custom SQL Injection Patterns"
      CustomXSSPatterns:
        default: "Custom XSS Patterns"
      EnableBotControl:
        default: "Enable Bot Control"
      EnableAWSManagedRules:
        default: "Enable AWS Managed Rules"

Parameters:
  WAFName:
    Type: String
    Default: 'webapp-security-waf'
    Description: 'Name for the WAF Web ACL'
    MinLength: 1
    MaxLength: 128
    AllowedPattern: '^[a-zA-Z0-9\-_]+$'
    ConstraintDescription: 'Must contain only alphanumeric characters, hyphens, and underscores'

  WAFScope:
    Type: String
    Default: 'CLOUDFRONT'
    AllowedValues:
      - 'CLOUDFRONT'
      - 'REGIONAL'
    Description: 'Scope for the WAF (CLOUDFRONT for CloudFront distributions, REGIONAL for ALB/API Gateway)'

  RateLimitThreshold:
    Type: Number
    Default: 10000
    MinValue: 100
    MaxValue: 20000000
    Description: 'Maximum number of requests allowed from a single IP in 5 minutes'

  EnableGeographicBlocking:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable geographic blocking for high-risk countries'

  BlockedCountries:
    Type: CommaDelimitedList
    Default: 'CN,RU,KP'
    Description: 'List of country codes to block (comma-separated)'

  BlockedIPAddresses:
    Type: CommaDelimitedList
    Default: '192.0.2.44/32,203.0.113.44/32'
    Description: 'List of specific IP addresses to block (comma-separated with /32 suffix)'

  BlockedIPCIDRs:
    Type: CommaDelimitedList
    Default: '203.0.113.0/24'
    Description: 'List of IP CIDR blocks to block (comma-separated)'

  EnableLogging:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable WAF logging to CloudWatch'

  LogRetentionDays:
    Type: Number
    Default: 30
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: 'Number of days to retain WAF logs in CloudWatch'

  EnableCloudWatchAlarms:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable CloudWatch alarms for WAF monitoring'

  AlertEmail:
    Type: String
    Default: ''
    Description: 'Email address for security alerts (optional)'
    AllowedPattern: '^$|^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    ConstraintDescription: 'Must be a valid email address or empty'

  EnableCustomPatterns:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable custom pattern detection for advanced threats'

  CustomSQLiPatterns:
    Type: CommaDelimitedList
    Default: '(?i)(union.*select|select.*from|insert.*into|drop.*table),(?i)(exec|execute|sp_|xp_)'
    Description: 'Custom SQL injection patterns (comma-separated regex patterns)'

  CustomXSSPatterns:
    Type: CommaDelimitedList
    Default: '(?i)(<script|javascript:|onerror=|onload=),(?i)(alert\(|confirm\(|prompt\()'
    Description: 'Custom XSS patterns (comma-separated regex patterns)'

  EnableBotControl:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable AWS Managed Bot Control Rule Set'

  EnableAWSManagedRules:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable AWS Managed Rules for baseline protection'

Conditions:
  CreateCloudWatchLogs: !Equals [!Ref EnableLogging, 'true']
  CreateCloudWatchAlarms: !Equals [!Ref EnableCloudWatchAlarms, 'true']
  CreateSNSAlert: !And
    - !Equals [!Ref EnableCloudWatchAlarms, 'true']
    - !Not [!Equals [!Ref AlertEmail, '']]
  CreateGeographicBlocking: !Equals [!Ref EnableGeographicBlocking, 'true']
  CreateCustomPatterns: !Equals [!Ref EnableCustomPatterns, 'true']
  CreateBotControl: !Equals [!Ref EnableBotControl, 'true']
  CreateAWSManagedRules: !Equals [!Ref EnableAWSManagedRules, 'true']
  IsCloudFrontScope: !Equals [!Ref WAFScope, 'CLOUDFRONT']
  IsRegionalScope: !Equals [!Ref WAFScope, 'REGIONAL']

Resources:
  # CloudWatch Log Group for WAF Logs
  WAFLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: CreateCloudWatchLogs
    Properties:
      LogGroupName: !Sub '/aws/wafv2/${WAFName}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub '${WAFName}-logs'
        - Key: Purpose
          Value: 'WAF Security Logging'

  # IP Set for blocking specific IP addresses
  BlockedIPSet:
    Type: AWS::WAFv2::IPSet
    Properties:
      Name: !Sub '${WAFName}-blocked-ips'
      Description: 'IP addresses to block for security'
      Scope: !Ref WAFScope
      IPAddressVersion: IPV4
      Addresses: !Split
        - ','
        - !Sub 
          - '${list1},${list2}'
          - list1: !Join [',', !Ref BlockedIPAddresses]
            list2: !Join [',', !Ref BlockedIPCIDRs]
      Tags:
        - Key: Name
          Value: !Sub '${WAFName}-blocked-ips'
        - Key: Purpose
          Value: 'Security IP Blocking'

  # Regex Pattern Set for custom threat detection
  SuspiciousPatternSet:
    Type: AWS::WAFv2::RegexPatternSet
    Condition: CreateCustomPatterns
    Properties:
      Name: !Sub '${WAFName}-suspicious-patterns'
      Description: 'Patterns for detecting common attack signatures'
      Scope: !Ref WAFScope
      RegularExpressionList:
        - !Select [0, !Ref CustomSQLiPatterns]
        - !Select [1, !Ref CustomSQLiPatterns]
        - !Select [0, !Ref CustomXSSPatterns]
        - !Select [1, !Ref CustomXSSPatterns]
        - '(?i)(\\.\\./)|(\\\\\\.\\.\\\\)'  # Directory traversal
        - '(?i)(cmd\\.exe|powershell|/bin/bash|/bin/sh)'  # Command injection
      Tags:
        - Key: Name
          Value: !Sub '${WAFName}-suspicious-patterns'
        - Key: Purpose
          Value: 'Custom Threat Detection'

  # Main WAF Web ACL
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Ref WAFName
      Description: 'Comprehensive WAF for web application security'
      Scope: !Ref WAFScope
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${WAFName}Metric'
      Rules:
        # AWS Managed Rules - Common Rule Set
        - !If
          - CreateAWSManagedRules
          - Name: 'AWSManagedRulesCommonRuleSet'
            Priority: 1
            Statement:
              ManagedRuleGroupStatement:
                VendorName: 'AWS'
                Name: 'AWSManagedRulesCommonRuleSet'
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: 'CommonRuleSetMetric'
          - !Ref AWS::NoValue

        # AWS Managed Rules - Known Bad Inputs
        - !If
          - CreateAWSManagedRules
          - Name: 'AWSManagedRulesKnownBadInputsRuleSet'
            Priority: 2
            Statement:
              ManagedRuleGroupStatement:
                VendorName: 'AWS'
                Name: 'AWSManagedRulesKnownBadInputsRuleSet'
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: 'KnownBadInputsMetric'
          - !Ref AWS::NoValue

        # AWS Managed Rules - SQL Injection
        - !If
          - CreateAWSManagedRules
          - Name: 'AWSManagedRulesSQLiRuleSet'
            Priority: 3
            Statement:
              ManagedRuleGroupStatement:
                VendorName: 'AWS'
                Name: 'AWSManagedRulesSQLiRuleSet'
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: 'SQLiRuleSetMetric'
          - !Ref AWS::NoValue

        # AWS Managed Rules - Bot Control
        - !If
          - CreateBotControl
          - Name: 'AWSManagedRulesBotControlRuleSet'
            Priority: 4
            Statement:
              ManagedRuleGroupStatement:
                VendorName: 'AWS'
                Name: 'AWSManagedRulesBotControlRuleSet'
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: 'BotControlMetric'
          - !Ref AWS::NoValue

        # Rate Limiting Rule
        - Name: 'RateLimitRule'
          Priority: 5
          Statement:
            RateBasedStatement:
              Limit: !Ref RateLimitThreshold
              AggregateKeyType: 'IP'
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: 'RateLimitMetric'

        # Geographic Blocking Rule
        - !If
          - CreateGeographicBlocking
          - Name: 'BlockHighRiskCountries'
            Priority: 6
            Statement:
              GeoMatchStatement:
                CountryCodes: !Ref BlockedCountries
            Action:
              Block: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: 'GeoBlockMetric'
          - !Ref AWS::NoValue

        # IP Blocking Rule
        - Name: 'BlockMaliciousIPs'
          Priority: 7
          Statement:
            IPSetReferenceStatement:
              Arn: !GetAtt BlockedIPSet.Arn
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: 'IPBlockMetric'

        # Custom Pattern Detection Rule
        - !If
          - CreateCustomPatterns
          - Name: 'CustomThreatDetection'
            Priority: 8
            Statement:
              RegexPatternSetReferenceStatement:
                Arn: !GetAtt SuspiciousPatternSet.Arn
                FieldToMatch:
                  Body:
                    OversizeHandling: 'CONTINUE'
                TextTransformations:
                  - Priority: 0
                    Type: 'URL_DECODE'
                  - Priority: 1
                    Type: 'HTML_ENTITY_DECODE'
                  - Priority: 2
                    Type: 'LOWERCASE'
            Action:
              Block: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: 'CustomThreatMetric'
          - !Ref AWS::NoValue

      Tags:
        - Key: Name
          Value: !Ref WAFName
        - Key: Purpose
          Value: 'Web Application Security'

  # WAF Logging Configuration
  WAFLoggingConfiguration:
    Type: AWS::WAFv2::LoggingConfiguration
    Condition: CreateCloudWatchLogs
    Properties:
      ResourceArn: !GetAtt WebACL.Arn
      LogDestinationConfigs:
        - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${WAFLogGroup}'
      LogType: 'WAF_LOGS'
      LogScope: 'SECURITY_EVENTS'
      RedactedFields: []

  # SNS Topic for Security Alerts
  SecurityAlertsTopic:
    Type: AWS::SNS::Topic
    Condition: CreateSNSAlert
    Properties:
      TopicName: !Sub '${WAFName}-security-alerts'
      DisplayName: 'WAF Security Alerts'
      Tags:
        - Key: Name
          Value: !Sub '${WAFName}-security-alerts'
        - Key: Purpose
          Value: 'Security Alert Notifications'

  # SNS Subscription for Email Alerts
  SecurityAlertsSubscription:
    Type: AWS::SNS::Subscription
    Condition: CreateSNSAlert
    Properties:
      TopicArn: !Ref SecurityAlertsTopic
      Protocol: 'email'
      Endpoint: !Ref AlertEmail

  # CloudWatch Alarm for Blocked Requests
  BlockedRequestsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateCloudWatchAlarms
    Properties:
      AlarmName: !Sub '${WAFName}-high-blocked-requests'
      AlarmDescription: 'High number of blocked requests detected by WAF'
      MetricName: 'BlockedRequests'
      Namespace: 'AWS/WAFV2'
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1000
      ComparisonOperator: 'GreaterThanThreshold'
      Dimensions:
        - Name: 'WebACL'
          Value: !Ref WAFName
        - Name: 'Region'
          Value: !Ref AWS::Region
      AlarmActions: !If
        - CreateSNSAlert
        - [!Ref SecurityAlertsTopic]
        - []
      TreatMissingData: 'notBreaching'
      Tags:
        - Key: Name
          Value: !Sub '${WAFName}-blocked-requests-alarm'
        - Key: Purpose
          Value: 'Security Monitoring'

  # CloudWatch Alarm for Rate Limiting
  RateLimitAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateCloudWatchAlarms
    Properties:
      AlarmName: !Sub '${WAFName}-rate-limit-triggered'
      AlarmDescription: 'Rate limiting is actively blocking requests'
      MetricName: 'BlockedRequests'
      Namespace: 'AWS/WAFV2'
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 1
      Threshold: 100
      ComparisonOperator: 'GreaterThanThreshold'
      Dimensions:
        - Name: 'WebACL'
          Value: !Ref WAFName
        - Name: 'Region'
          Value: !Ref AWS::Region
        - Name: 'Rule'
          Value: 'RateLimitMetric'
      AlarmActions: !If
        - CreateSNSAlert
        - [!Ref SecurityAlertsTopic]
        - []
      TreatMissingData: 'notBreaching'
      Tags:
        - Key: Name
          Value: !Sub '${WAFName}-rate-limit-alarm'
        - Key: Purpose
          Value: 'DDoS Protection Monitoring'

  # CloudWatch Dashboard for WAF Monitoring
  WAFDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: CreateCloudWatchAlarms
    Properties:
      DashboardName: !Sub 'WAF-Security-Dashboard-${WAFName}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/WAFV2", "AllowedRequests", "WebACL", "${WAFName}", "Region", "${AWS::Region}"],
                  [".", "BlockedRequests", ".", ".", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "WAF Request Statistics",
                "period": 300,
                "stat": "Sum"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/WAFV2", "BlockedRequests", "WebACL", "${WAFName}", "Region", "${AWS::Region}", "Rule", "CommonRuleSetMetric"],
                  ["...", "KnownBadInputsMetric"],
                  ["...", "SQLiRuleSetMetric"],
                  ["...", "RateLimitMetric"],
                  ["...", "GeoBlockMetric"],
                  ["...", "IPBlockMetric"],
                  ["...", "CustomThreatMetric"],
                  ["...", "BotControlMetric"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Blocked Requests by Rule",
                "period": 300,
                "stat": "Sum"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/WAFV2", "BlockedRequests", "WebACL", "${WAFName}", "Region", "${AWS::Region}"]
                ],
                "view": "singleValue",
                "region": "${AWS::Region}",
                "title": "Total Blocked Requests (24h)",
                "period": 86400,
                "stat": "Sum"
              }
            }
          ]
        }

Outputs:
  WebACLId:
    Description: 'WAF Web ACL ID'
    Value: !GetAtt WebACL.Id
    Export:
      Name: !Sub '${AWS::StackName}-WebACL-Id'

  WebACLArn:
    Description: 'WAF Web ACL ARN'
    Value: !GetAtt WebACL.Arn
    Export:
      Name: !Sub '${AWS::StackName}-WebACL-Arn'

  WebACLName:
    Description: 'WAF Web ACL Name'
    Value: !Ref WAFName
    Export:
      Name: !Sub '${AWS::StackName}-WebACL-Name'

  IPSetId:
    Description: 'Blocked IP Set ID'
    Value: !GetAtt BlockedIPSet.Id
    Export:
      Name: !Sub '${AWS::StackName}-IPSet-Id'

  IPSetArn:
    Description: 'Blocked IP Set ARN'
    Value: !GetAtt BlockedIPSet.Arn
    Export:
      Name: !Sub '${AWS::StackName}-IPSet-Arn'

  RegexPatternSetId:
    Condition: CreateCustomPatterns
    Description: 'Suspicious Pattern Set ID'
    Value: !GetAtt SuspiciousPatternSet.Id
    Export:
      Name: !Sub '${AWS::StackName}-RegexPatternSet-Id'

  RegexPatternSetArn:
    Condition: CreateCustomPatterns
    Description: 'Suspicious Pattern Set ARN'
    Value: !GetAtt SuspiciousPatternSet.Arn
    Export:
      Name: !Sub '${AWS::StackName}-RegexPatternSet-Arn'

  LogGroupName:
    Condition: CreateCloudWatchLogs
    Description: 'CloudWatch Log Group for WAF logs'
    Value: !Ref WAFLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroup-Name'

  SNSTopicArn:
    Condition: CreateSNSAlert
    Description: 'SNS Topic ARN for security alerts'
    Value: !Ref SecurityAlertsTopic
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopic-Arn'

  DashboardURL:
    Condition: CreateCloudWatchAlarms
    Description: 'CloudWatch Dashboard URL'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=WAF-Security-Dashboard-${WAFName}'

  AssociationInstructions:
    Description: 'Instructions for associating WAF with resources'
    Value: !Sub |
      To associate this WAF with CloudFront: Update your CloudFront distribution's WebACLId to ${WebACL.Arn}
      To associate this WAF with ALB/API Gateway: Use the WebACL ARN ${WebACL.Arn} in your resource configuration

  SecurityConfiguration:
    Description: 'Summary of security configuration'
    Value: !Sub |
      Rate Limit: ${RateLimitThreshold} requests per 5 minutes
      Geographic Blocking: ${EnableGeographicBlocking}
      Custom Patterns: ${EnableCustomPatterns}
      Bot Control: ${EnableBotControl}
      Logging: ${EnableLogging}
      Monitoring: ${EnableCloudWatchAlarms}