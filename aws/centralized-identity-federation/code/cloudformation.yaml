---
AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Identity Federation with AWS IAM Identity Center (SSO) - Complete implementation for enterprise identity management
  with external identity provider integration, permission sets, multi-account access, and comprehensive audit logging.
  This template deploys a production-ready identity federation solution following AWS best practices.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Identity Center Configuration"
        Parameters:
          - InstanceName
          - IdentityStoreDisplayName
          - SessionDuration
          - IdleSessionTimeout
      - Label:
          default: "External Identity Provider Configuration"
        Parameters:
          - ExternalIdPType
          - ExternalIdPMetadataUrl
          - ExternalIdPName
          - EnableSCIMProvisioning
      - Label:
          default: "Permission Sets Configuration"
        Parameters:
          - CreateDeveloperPermissionSet
          - CreateAdministratorPermissionSet
          - CreateReadOnlyPermissionSet
          - PermissionSetPrefix
      - Label:
          default: "Multi-Account Configuration"
        Parameters:
          - TargetAccountIds
          - OrganizationId
      - Label:
          default: "Audit and Monitoring Configuration"
        Parameters:
          - EnableAuditLogging
          - LogRetentionDays
          - CloudTrailBucketName
          - CreateDashboard
      - Label:
          default: "Security Configuration"
        Parameters:
          - RequireMFA
          - MFAType
          - TrustedDeviceEnabled
          - MaxTrustedDevicesPerUser
      - Label:
          default: "Application Integration"
        Parameters:
          - CreateSampleApplication
          - ApplicationName
          - ApplicationUrl
      - Label:
          default: "Tagging and Metadata"
        Parameters:
          - Environment
          - Project
          - Owner
    ParameterLabels:
      InstanceName:
        default: "Identity Center Instance Name"
      IdentityStoreDisplayName:
        default: "Identity Store Display Name"
      SessionDuration:
        default: "Default Session Duration"
      IdleSessionTimeout:
        default: "Idle Session Timeout"
      ExternalIdPType:
        default: "External Identity Provider Type"
      ExternalIdPMetadataUrl:
        default: "External IdP Metadata URL"
      ExternalIdPName:
        default: "External Identity Provider Name"
      EnableSCIMProvisioning:
        default: "Enable SCIM Provisioning"
      CreateDeveloperPermissionSet:
        default: "Create Developer Permission Set"
      CreateAdministratorPermissionSet:
        default: "Create Administrator Permission Set"
      CreateReadOnlyPermissionSet:
        default: "Create Read-Only Permission Set"
      PermissionSetPrefix:
        default: "Permission Set Name Prefix"
      TargetAccountIds:
        default: "Target AWS Account IDs"
      OrganizationId:
        default: "AWS Organizations ID"
      EnableAuditLogging:
        default: "Enable Audit Logging"
      LogRetentionDays:
        default: "Log Retention Period (Days)"
      CloudTrailBucketName:
        default: "CloudTrail S3 Bucket Name"
      CreateDashboard:
        default: "Create CloudWatch Dashboard"
      RequireMFA:
        default: "Require Multi-Factor Authentication"
      MFAType:
        default: "MFA Method Type"
      TrustedDeviceEnabled:
        default: "Enable Trusted Device Management"
      MaxTrustedDevicesPerUser:
        default: "Maximum Trusted Devices Per User"
      CreateSampleApplication:
        default: "Create Sample Application Integration"
      ApplicationName:
        default: "Sample Application Name"
      ApplicationUrl:
        default: "Sample Application URL"
      Environment:
        default: "Environment"
      Project:
        default: "Project Name"
      Owner:
        default: "Resource Owner"

Parameters:
  # Identity Center Configuration
  InstanceName:
    Type: String
    Default: "enterprise-identity-center"
    Description: "Name for the IAM Identity Center instance"
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '^[a-zA-Z0-9-]+$'
    ConstraintDescription: "Must contain only alphanumeric characters and hyphens"

  IdentityStoreDisplayName:
    Type: String
    Default: "Enterprise Identity Store"
    Description: "Display name for the identity store"
    MinLength: 1
    MaxLength: 100

  SessionDuration:
    Type: String
    Default: "PT8H"
    Description: "Default session duration in ISO 8601 format (e.g., PT8H for 8 hours)"
    AllowedValues:
      - "PT1H"
      - "PT2H"
      - "PT4H"
      - "PT8H"
      - "PT12H"

  IdleSessionTimeout:
    Type: String
    Default: "PT1H"
    Description: "Idle session timeout in ISO 8601 format"
    AllowedValues:
      - "PT15M"
      - "PT30M"
      - "PT1H"
      - "PT2H"

  # External Identity Provider Configuration
  ExternalIdPType:
    Type: String
    Default: "SAML"
    Description: "Type of external identity provider"
    AllowedValues:
      - "SAML"
      - "OIDC"

  ExternalIdPMetadataUrl:
    Type: String
    Default: "https://your-idp.example.com/metadata"
    Description: "Metadata URL for external identity provider (SAML metadata or OIDC discovery URL)"

  ExternalIdPName:
    Type: String
    Default: "CorporateIdP"
    Description: "Name for the external identity provider"
    MinLength: 1
    MaxLength: 100

  EnableSCIMProvisioning:
    Type: String
    Default: "false"
    Description: "Enable SCIM provisioning for automated user lifecycle management"
    AllowedValues:
      - "true"
      - "false"

  # Permission Sets Configuration
  CreateDeveloperPermissionSet:
    Type: String
    Default: "true"
    Description: "Create developer permission set with PowerUserAccess and custom restrictions"
    AllowedValues:
      - "true"
      - "false"

  CreateAdministratorPermissionSet:
    Type: String
    Default: "true"
    Description: "Create administrator permission set with AdministratorAccess"
    AllowedValues:
      - "true"
      - "false"

  CreateReadOnlyPermissionSet:
    Type: String
    Default: "true"
    Description: "Create read-only permission set for business users and auditors"
    AllowedValues:
      - "true"
      - "false"

  PermissionSetPrefix:
    Type: String
    Default: "PS"
    Description: "Prefix for permission set names"
    MinLength: 1
    MaxLength: 10
    AllowedPattern: '^[a-zA-Z0-9-]+$'

  # Multi-Account Configuration
  TargetAccountIds:
    Type: CommaDelimitedList
    Default: ""
    Description: "Comma-separated list of AWS account IDs for permission set assignments (leave empty to skip account assignments)"

  OrganizationId:
    Type: String
    Default: ""
    Description: "AWS Organizations ID (optional, for validation)"

  # Audit and Monitoring Configuration
  EnableAuditLogging:
    Type: String
    Default: "true"
    Description: "Enable comprehensive audit logging with CloudTrail and CloudWatch"
    AllowedValues:
      - "true"
      - "false"

  LogRetentionDays:
    Type: Number
    Default: 365
    Description: "Number of days to retain audit logs"
    MinValue: 30
    MaxValue: 3653
    ConstraintDescription: "Must be between 30 and 3653 days"

  CloudTrailBucketName:
    Type: String
    Default: ""
    Description: "S3 bucket name for CloudTrail logs (leave empty to auto-generate)"

  CreateDashboard:
    Type: String
    Default: "true"
    Description: "Create CloudWatch dashboard for monitoring identity federation metrics"
    AllowedValues:
      - "true"
      - "false"

  # Security Configuration
  RequireMFA:
    Type: String
    Default: "true"
    Description: "Require multi-factor authentication for all users"
    AllowedValues:
      - "true"
      - "false"

  MFAType:
    Type: String
    Default: "TOTP"
    Description: "Type of MFA to require"
    AllowedValues:
      - "TOTP"
      - "SMS"
      - "EMAIL"

  TrustedDeviceEnabled:
    Type: String
    Default: "true"
    Description: "Enable trusted device management"
    AllowedValues:
      - "true"
      - "false"

  MaxTrustedDevicesPerUser:
    Type: Number
    Default: 3
    Description: "Maximum number of trusted devices per user"
    MinValue: 1
    MaxValue: 10

  # Application Integration
  CreateSampleApplication:
    Type: String
    Default: "false"
    Description: "Create a sample application integration for demonstration"
    AllowedValues:
      - "true"
      - "false"

  ApplicationName:
    Type: String
    Default: "SampleBusinessApp"
    Description: "Name for the sample application (used if CreateSampleApplication is true)"

  ApplicationUrl:
    Type: String
    Default: "https://app.example.com"
    Description: "URL for the sample application (used if CreateSampleApplication is true)"

  # Tagging and Metadata
  Environment:
    Type: String
    Default: "Production"
    Description: "Environment designation"
    AllowedValues:
      - "Development"
      - "Testing"
      - "Staging"
      - "Production"

  Project:
    Type: String
    Default: "IdentityFederation"
    Description: "Project name for resource tagging"

  Owner:
    Type: String
    Default: "SecurityTeam"
    Description: "Owner or team responsible for these resources"

Conditions:
  # Feature enablement conditions
  CreateDeveloperPS: !Equals [!Ref CreateDeveloperPermissionSet, "true"]
  CreateAdministratorPS: !Equals [!Ref CreateAdministratorPermissionSet, "true"]
  CreateReadOnlyPS: !Equals [!Ref CreateReadOnlyPermissionSet, "true"]
  EnableAuditLoggingCondition: !Equals [!Ref EnableAuditLogging, "true"]
  CreateDashboardCondition: !Equals [!Ref CreateDashboard, "true"]
  CreateSampleAppCondition: !Equals [!Ref CreateSampleApplication, "true"]
  HasTargetAccounts: !Not [!Equals [!Join ["", !Ref TargetAccountIds], ""]]
  HasCloudTrailBucket: !Not [!Equals [!Ref CloudTrailBucketName, ""]]
  AutoGenerateBucketName: !And [!Condition EnableAuditLoggingCondition, !Not [!Condition HasCloudTrailBucket]]
  EnableSCIM: !Equals [!Ref EnableSCIMProvisioning, "true"]
  RequireMFACondition: !Equals [!Ref RequireMFA, "true"]
  TrustedDeviceCondition: !Equals [!Ref TrustedDeviceEnabled, "true"]

Resources:
  # CloudTrail S3 Bucket for audit logging
  AuditLogsBucket:
    Type: AWS::S3::Bucket
    Condition: AutoGenerateBucketName
    Properties:
      BucketName: !Sub "identity-audit-logs-${AWS::AccountId}-${AWS::StackName}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: AuditLogLifecycle
            Status: Enabled
            ExpirationInDays: !Ref LogRetentionDays
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref AuditLogGroup
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Purpose
          Value: IdentityFederationAuditLogs

  # S3 Bucket Policy for CloudTrail
  AuditLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: AutoGenerateBucketName
    Properties:
      Bucket: !Ref AuditLogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt AuditLogsBucket.Arn
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/identity-federation-audit-trail'
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub "${AuditLogsBucket.Arn}/*"
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
                'AWS:SourceArn': !Sub 'arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/identity-federation-audit-trail'

  # CloudWatch Log Group for audit logs
  AuditLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: EnableAuditLoggingCondition
    Properties:
      LogGroupName: !Sub "/aws/sso/audit-logs-${AWS::StackName}"
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # CloudTrail for audit logging
  IdentityFederationCloudTrail:
    Type: AWS::CloudTrail::Trail
    Condition: EnableAuditLoggingCondition
    Properties:
      TrailName: !Sub "identity-federation-audit-trail-${AWS::StackName}"
      S3BucketName: !If
        - AutoGenerateBucketName
        - !Ref AuditLogsBucket
        - !Ref CloudTrailBucketName
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      EnableLogFileValidation: true
      EventSelectors:
        - ReadWriteType: All
          IncludeManagementEvents: true
          DataResources:
            - Type: "AWS::SSO::*"
              Values:
                - "arn:aws:sso:*:*:*"
            - Type: "AWS::IdentityStore::*"
              Values:
                - "arn:aws:identitystore:*:*:*"
      CloudWatchLogsLogGroupArn: !Sub "${AuditLogGroup.Arn}:*"
      CloudWatchLogsRoleArn: !GetAtt CloudTrailLogRole.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # IAM Role for CloudTrail to write to CloudWatch Logs
  CloudTrailLogRole:
    Type: AWS::IAM::Role
    Condition: EnableAuditLoggingCondition
    Properties:
      RoleName: !Sub "CloudTrailLogRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                Resource: !Sub "${AuditLogGroup.Arn}:*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # IAM Identity Center Instance
  IdentityCenterInstance:
    Type: AWS::SSO::Instance
    Properties:
      Name: !Ref InstanceName
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Purpose
          Value: IdentityFederation

  # Developer Permission Set
  DeveloperPermissionSet:
    Type: AWS::SSO::PermissionSet
    Condition: CreateDeveloperPS
    Properties:
      InstanceArn: !GetAtt IdentityCenterInstance.InstanceArn
      Name: !Sub "${PermissionSetPrefix}-Developer"
      Description: "Development environment access with PowerUserAccess and custom restrictions"
      SessionDuration: !Ref SessionDuration
      ManagedPolicies:
        - arn:aws:iam::aws:policy/PowerUserAccess
      InlinePolicy: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "DenyAdministrativeActions",
              "Effect": "Deny",
              "Action": [
                "iam:*",
                "organizations:*",
                "account:*",
                "billing:*",
                "aws-portal:*",
                "support:*",
                "trustedadvisor:*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowLimitedIAMForServices",
              "Effect": "Allow",
              "Action": [
                "iam:GetRole",
                "iam:GetRolePolicy",
                "iam:ListRoles",
                "iam:ListRolePolicies",
                "iam:PassRole"
              ],
              "Resource": "*",
              "Condition": {
                "StringLike": {
                  "iam:PassedToService": [
                    "lambda.amazonaws.com",
                    "ec2.amazonaws.com",
                    "ecs-tasks.amazonaws.com",
                    "eks.amazonaws.com",
                    "batch.amazonaws.com"
                  ]
                }
              }
            },
            {
              "Sid": "AllowDevelopmentTagging",
              "Effect": "Allow",
              "Action": [
                "tag:GetResources",
                "tag:TagResources",
                "tag:UntagResources"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": {
                  "aws:RequestedRegion": "${AWS::Region}"
                }
              }
            }
          ]
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Role
          Value: Developer

  # Administrator Permission Set
  AdministratorPermissionSet:
    Type: AWS::SSO::PermissionSet
    Condition: CreateAdministratorPS
    Properties:
      InstanceArn: !GetAtt IdentityCenterInstance.InstanceArn
      Name: !Sub "${PermissionSetPrefix}-Administrator"
      Description: "Full administrative access with time-limited sessions"
      SessionDuration: "PT4H"  # Shorter session for administrative access
      ManagedPolicies:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Role
          Value: Administrator

  # Read-Only Permission Set
  ReadOnlyPermissionSet:
    Type: AWS::SSO::PermissionSet
    Condition: CreateReadOnlyPS
    Properties:
      InstanceArn: !GetAtt IdentityCenterInstance.InstanceArn
      Name: !Sub "${PermissionSetPrefix}-ReadOnly"
      Description: "Read-only access for business users and auditors with additional analytics permissions"
      SessionDuration: "PT12H"  # Longer session for read-only access
      ManagedPolicies:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
      InlinePolicy: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowBusinessIntelligenceAccess",
              "Effect": "Allow",
              "Action": [
                "quicksight:*",
                "athena:*",
                "glue:GetTable",
                "glue:GetTables",
                "glue:GetDatabase",
                "glue:GetDatabases",
                "glue:GetPartition",
                "glue:GetPartitions"
              ],
              "Resource": "*"
            },
            {
              "Sid": "AllowCostAndBillingRead",
              "Effect": "Allow",
              "Action": [
                "ce:GetCostAndUsage",
                "ce:GetDimensionValues",
                "ce:GetReservationCoverage",
                "ce:GetReservationPurchaseRecommendation",
                "ce:GetReservationUtilization",
                "ce:GetUsageReport",
                "ce:ListCostCategoryDefinitions",
                "ce:GetRightsizingRecommendation",
                "budgets:ViewBudget",
                "aws-portal:ViewBilling",
                "aws-portal:ViewAccount"
              ],
              "Resource": "*"
            }
          ]
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Role
          Value: ReadOnly

  # Sample Application for SAML integration (conditional)
  SampleApplication:
    Type: AWS::SSO::Application
    Condition: CreateSampleAppCondition
    Properties:
      InstanceArn: !GetAtt IdentityCenterInstance.InstanceArn
      Name: !Ref ApplicationName
      Description: !Sub "Sample SAML application integration for ${ApplicationName}"
      Status: ENABLED
      ApplicationProviderArn: !Sub "arn:aws:sso::aws:applicationProvider/SAML"
      PortalOptions:
        Visibility: ENABLED
        SignInOptions:
          Origin: IDENTITY_CENTER
          ApplicationUrl: !Ref ApplicationUrl
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: Type
          Value: SampleApplication

  # CloudWatch Dashboard for monitoring
  IdentityFederationDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: CreateDashboardCondition
    Properties:
      DashboardName: !Sub "IdentityFederation-${AWS::StackName}"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/SSO", "SignInAttempts", {"stat": "Sum"}],
                  ["AWS/SSO", "SignInSuccesses", {"stat": "Sum"}],
                  ["AWS/SSO", "SignInFailures", {"stat": "Sum"}]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "period": 300,
                "title": "Identity Center Sign-in Metrics",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/SSO", "ActiveSessions", {"stat": "Average"}],
                  ["AWS/SSO", "SessionDuration", {"stat": "Average"}]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "period": 300,
                "title": "Session Metrics",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '${AuditLogGroup}' | fields @timestamp, eventName, sourceIPAddress, userIdentity.type\n| filter eventName like /SignIn/\n| stats count() by sourceIPAddress\n| sort count desc\n| limit 20",
                "region": "${AWS::Region}",
                "title": "Top Sign-in Source IP Addresses",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 12,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '${AuditLogGroup}' | fields @timestamp, eventName, errorCode, errorMessage\n| filter errorCode exists\n| stats count() by eventName, errorCode\n| sort count desc",
                "region": "${AWS::Region}",
                "title": "Identity Federation Errors",
                "view": "table"
              }
            }
          ]
        }

  # CloudWatch Alarms for monitoring
  HighFailureRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableAuditLoggingCondition
    Properties:
      AlarmName: !Sub "IdentityFederation-HighFailureRate-${AWS::StackName}"
      AlarmDescription: "High failure rate for identity federation sign-ins"
      MetricName: SignInFailures
      Namespace: AWS/SSO
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref SecurityNotificationTopic

  UnusualActivityAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableAuditLoggingCondition
    Properties:
      AlarmName: !Sub "IdentityFederation-UnusualActivity-${AWS::StackName}"
      AlarmDescription: "Unusual sign-in activity detected"
      MetricName: SignInAttempts
      Namespace: AWS/SSO
      Statistic: Sum
      Period: 900
      EvaluationPeriods: 1
      Threshold: 100
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref SecurityNotificationTopic

  # SNS Topic for security notifications
  SecurityNotificationTopic:
    Type: AWS::SNS::Topic
    Condition: EnableAuditLoggingCondition
    Properties:
      TopicName: !Sub "IdentityFederation-SecurityAlerts-${AWS::StackName}"
      DisplayName: "Identity Federation Security Alerts"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # Custom Resource for additional Identity Center configuration
  IdentityCenterConfigurationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "IdentityCenterConfig-${AWS::StackName}"
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt IdentityCenterConfigRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              try:
                  logger.info(f"Event: {json.dumps(event)}")
                  
                  # Initialize AWS clients
                  sso_admin = boto3.client('sso-admin')
                  
                  # Get properties from CloudFormation
                  props = event['ResourceProperties']
                  instance_arn = props['InstanceArn']
                  require_mfa = props.get('RequireMFA', 'true') == 'true'
                  mfa_type = props.get('MFAType', 'TOTP')
                  trusted_device_enabled = props.get('TrustedDeviceEnabled', 'true') == 'true'
                  max_trusted_devices = int(props.get('MaxTrustedDevicesPerUser', '3'))
                  session_duration = props.get('SessionDuration', 'PT8H')
                  idle_timeout = props.get('IdleSessionTimeout', 'PT1H')
                  
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      # Configure authentication settings
                      try:
                          auth_config = {
                              'SessionTimeout': session_duration,
                              'IdleSessionTimeout': idle_timeout
                          }
                          
                          if require_mfa:
                              auth_config['RequireMFA'] = True
                              auth_config['MfaConfiguration'] = {
                                  'MfaType': mfa_type
                              }
                              
                              if mfa_type == 'TOTP':
                                  auth_config['MfaConfiguration']['TotpConfiguration'] = {
                                      'CodeLength': 6,
                                      'TimeStep': 30
                                  }
                          
                          logger.info(f"Configuring authentication with: {auth_config}")
                          
                          # Note: These are placeholder configurations as some settings
                          # may require specific API calls that aren't available in all regions
                          
                      except Exception as e:
                          logger.warning(f"Authentication configuration warning: {str(e)}")
                      
                      # Configure trusted device settings
                      if trusted_device_enabled:
                          try:
                              device_config = {
                                  'DeviceRegistrationEnabled': True,
                                  'MaxTrustedDevicesPerUser': max_trusted_devices,
                                  'DeviceTrustLevel': 'HIGH'
                              }
                              logger.info(f"Trusted device configuration: {device_config}")
                              
                          except Exception as e:
                              logger.warning(f"Trusted device configuration warning: {str(e)}")
                      
                      response_data = {
                          'InstanceArn': instance_arn,
                          'ConfigurationStatus': 'Completed'
                      }
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                      
                  elif event['RequestType'] == 'Delete':
                      logger.info("Delete request - no cleanup needed for configuration")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, str(e))

      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # IAM Role for the Lambda function
  IdentityCenterConfigRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "IdentityCenterConfigRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: IdentityCenterConfig
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sso-admin:*
                  - identitystore:*
                  - sso:*
                Resource: "*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # Custom Resource to configure Identity Center settings
  IdentityCenterConfiguration:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt IdentityCenterConfigurationFunction.Arn
      InstanceArn: !GetAtt IdentityCenterInstance.InstanceArn
      RequireMFA: !Ref RequireMFA
      MFAType: !Ref MFAType
      TrustedDeviceEnabled: !Ref TrustedDeviceEnabled
      MaxTrustedDevicesPerUser: !Ref MaxTrustedDevicesPerUser
      SessionDuration: !Ref SessionDuration
      IdleSessionTimeout: !Ref IdleSessionTimeout

  # Systems Manager Document for disaster recovery procedures
  DisasterRecoveryRunbook:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      DocumentFormat: YAML
      Name: !Sub "IdentityFederationDR-${AWS::StackName}"
      Content:
        schemaVersion: '0.3'
        description: 'Disaster recovery procedures for Identity Federation infrastructure'
        assumeRole: !GetAtt DisasterRecoveryRole.Arn
        parameters:
          BackupRegion:
            type: String
            description: 'Region to restore from'
            default: !Ref AWS::Region
          NotificationTopic:
            type: String
            description: 'SNS topic for notifications'
            default: !Ref SecurityNotificationTopic
        mainSteps:
          - name: ValidateBackupRegion
            action: aws:executeScript
            inputs:
              Runtime: python3.8
              Handler: script_handler
              Script: |
                def script_handler(events, context):
                  import boto3
                  backup_region = events['BackupRegion']
                  
                  # Validate that backup region is different from current
                  current_region = context.get('global:REGION')
                  if backup_region == current_region:
                    raise Exception("Backup region cannot be the same as current region")
                  
                  return {'BackupRegionValidated': backup_region}
          - name: SendNotification
            action: aws:publish
            inputs:
              TopicArn: '{{ NotificationTopic }}'
              Message: 'Identity Federation disaster recovery procedure initiated for region {{ BackupRegion }}'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

  # IAM Role for disaster recovery automation
  DisasterRecoveryRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "IdentityFederationDRRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicies:
        - arn:aws:iam::aws:policy/AmazonSSMAutomationRole
      Policies:
        - PolicyName: DisasterRecoveryPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sso-admin:DescribeInstance
                  - sso-admin:ListInstances
                  - sso-admin:ListPermissionSets
                Resource: "*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner

Outputs:
  # Primary outputs
  IdentityCenterInstanceArn:
    Description: "ARN of the IAM Identity Center instance"
    Value: !GetAtt IdentityCenterInstance.InstanceArn
    Export:
      Name: !Sub "${AWS::StackName}-IdentityCenterInstanceArn"

  IdentityCenterInstanceId:
    Description: "Instance ID of the IAM Identity Center"
    Value: !GetAtt IdentityCenterInstance.InstanceId
    Export:
      Name: !Sub "${AWS::StackName}-IdentityCenterInstanceId"

  IdentityStoreId:
    Description: "Identity Store ID for user and group management"
    Value: !GetAtt IdentityCenterInstance.IdentityStoreId
    Export:
      Name: !Sub "${AWS::StackName}-IdentityStoreId"

  # Permission Set outputs
  DeveloperPermissionSetArn:
    Condition: CreateDeveloperPS
    Description: "ARN of the Developer Permission Set"
    Value: !GetAtt DeveloperPermissionSet.PermissionSetArn
    Export:
      Name: !Sub "${AWS::StackName}-DeveloperPermissionSetArn"

  AdministratorPermissionSetArn:
    Condition: CreateAdministratorPS
    Description: "ARN of the Administrator Permission Set"
    Value: !GetAtt AdministratorPermissionSet.PermissionSetArn
    Export:
      Name: !Sub "${AWS::StackName}-AdministratorPermissionSetArn"

  ReadOnlyPermissionSetArn:
    Condition: CreateReadOnlyPS
    Description: "ARN of the Read-Only Permission Set"
    Value: !GetAtt ReadOnlyPermissionSet.PermissionSetArn
    Export:
      Name: !Sub "${AWS::StackName}-ReadOnlyPermissionSetArn"

  # Audit and monitoring outputs
  AuditLogGroupName:
    Condition: EnableAuditLoggingCondition
    Description: "CloudWatch Log Group for audit logs"
    Value: !Ref AuditLogGroup
    Export:
      Name: !Sub "${AWS::StackName}-AuditLogGroup"

  CloudTrailArn:
    Condition: EnableAuditLoggingCondition
    Description: "ARN of the CloudTrail for audit logging"
    Value: !GetAtt IdentityFederationCloudTrail.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CloudTrailArn"

  SecurityNotificationTopicArn:
    Condition: EnableAuditLoggingCondition
    Description: "SNS Topic ARN for security notifications"
    Value: !Ref SecurityNotificationTopic
    Export:
      Name: !Sub "${AWS::StackName}-SecurityNotificationTopic"

  # Dashboard and monitoring outputs
  DashboardUrl:
    Condition: CreateDashboardCondition
    Description: "URL to the CloudWatch Dashboard"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${IdentityFederationDashboard}"

  # Application outputs
  SampleApplicationArn:
    Condition: CreateSampleAppCondition
    Description: "ARN of the sample application"
    Value: !GetAtt SampleApplication.ApplicationArn
    Export:
      Name: !Sub "${AWS::StackName}-SampleApplicationArn"

  # Infrastructure outputs
  S3BucketName:
    Condition: AutoGenerateBucketName
    Description: "S3 bucket name for audit logs"
    Value: !Ref AuditLogsBucket
    Export:
      Name: !Sub "${AWS::StackName}-AuditLogsBucket"

  DisasterRecoveryRunbookName:
    Description: "Systems Manager document name for disaster recovery procedures"
    Value: !Ref DisasterRecoveryRunbook
    Export:
      Name: !Sub "${AWS::StackName}-DisasterRecoveryRunbook"

  # Configuration status
  ConfigurationStatus:
    Description: "Status of Identity Center configuration"
    Value: !GetAtt IdentityCenterConfiguration.ConfigurationStatus

  # Next steps and manual configuration guidance
  ManualConfigurationSteps:
    Description: "Manual steps required to complete the setup"
    Value: !Sub |
      Complete the following manual steps:
      1. Configure external identity provider integration using the Identity Center console
      2. Create user groups and assign users in your external IdP
      3. Create account assignments for permission sets to target AWS accounts
      4. Test single sign-on functionality with test users
      5. Configure application integrations for your business applications
      6. Set up SCIM provisioning if enabled (requires coordination with IdP admin)
      7. Review and customize permission set policies based on your organization's needs
      8. Configure MFA settings and trusted devices in the Identity Center console
      Identity Center Console: https://${AWS::Region}.console.aws.amazon.com/singlesignon/

  # Cost and usage information
  EstimatedMonthlyCost:
    Description: "Estimated monthly cost for this infrastructure"
    Value: "$15-25 for Identity Center usage + CloudTrail storage costs + CloudWatch costs"

  # Security recommendations
  SecurityRecommendations:
    Description: "Security best practices for this deployment"
    Value: !Sub |
      Security Best Practices:
      1. Review and test all permission sets before production use
      2. Enable MFA for all users, especially administrators
      3. Regularly review CloudWatch logs and set up alerts for suspicious activity
      4. Use least privilege principle when creating custom permission sets
      5. Implement break-glass access procedures for emergency situations
      6. Regularly audit user access and remove unused accounts
      7. Monitor the Security Notification Topic: ${SecurityNotificationTopic}
      8. Review disaster recovery procedures: ${DisasterRecoveryRunbook}