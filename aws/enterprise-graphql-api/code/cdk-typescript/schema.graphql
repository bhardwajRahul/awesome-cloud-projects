# Custom scalar types for enhanced type safety
scalar AWSDateTime
scalar AWSEmail
scalar AWSURL
scalar AWSIPAddress
scalar AWSPhone
scalar AWSJSON

# Enhanced Product type with advanced fields
type Product {
    productId: ID!
    name: String!
    description: String
    price: Float!
    category: String!
    priceRange: PriceRange!
    inStock: Boolean!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime
    tags: [String]
    imageUrl: AWSURL
    seller: String
    rating: Float
    reviewCount: Int
    productScore: ProductScore
    recommendations: [Product]
    analytics: ProductAnalytics
}

# Product scoring information
type ProductScore {
    productId: ID!
    score: Float!
    breakdown: ScoreBreakdown!
}

# Score breakdown details
type ScoreBreakdown {
    rating: Float!
    popularity: Float!
    price: Float!
}

# Product analytics data
type ProductAnalytics {
    views: Int!
    purchases: Int!
    trending: Boolean!
    conversionRate: Float
}

# User type for advanced user management
type User {
    userId: ID!
    email: AWSEmail!
    userType: UserType!
    company: String
    createdAt: AWSDateTime!
    lastLoginAt: AWSDateTime
    preferences: UserPreferences
    analytics: UserAnalytics
}

# User preferences
type UserPreferences {
    favoriteCategories: [String]
    priceRange: PriceRange
    notifications: Boolean!
}

# User analytics
type UserAnalytics {
    totalViews: Int!
    totalPurchases: Int!
    averageOrderValue: Float
    lastActivityAt: AWSDateTime
}

# Analytics events
type AnalyticsEvent {
    eventId: ID!
    eventType: String!
    userId: ID
    timestamp: AWSDateTime!
    data: AWSJSON
    processed: Boolean!
}

# Enhanced input types for mutations
input CreateProductInput {
    name: String!
    description: String
    price: Float!
    category: String!
    inStock: Boolean = true
    tags: [String]
    imageUrl: AWSURL
    priceRange: PriceRange
}

input UpdateProductInput {
    productId: ID!
    name: String
    description: String
    price: Float
    category: String
    inStock: Boolean
    tags: [String]
    imageUrl: AWSURL
    priceRange: PriceRange
}

input CreateUserInput {
    email: AWSEmail!
    userType: UserType!
    company: String
    preferences: UserPreferencesInput
}

input UserPreferencesInput {
    favoriteCategories: [String]
    priceRange: PriceRange
    notifications: Boolean = true
}

input SearchProductsInput {
    searchTerm: String!
    category: String
    priceRange: PriceRange
    tags: [String]
    sortBy: ProductSortField
    sortDirection: SortDirection
    limit: Int = 20
}

input AnalyticsEventInput {
    eventType: String!
    data: AWSJSON
}

# Connection types for pagination
type ProductConnection {
    items: [Product]
    nextToken: String
    scannedCount: Int
    totalCount: Int
}

type UserConnection {
    items: [User]
    nextToken: String
    scannedCount: Int
}

type SearchResult {
    products: [Product]
    totalHits: Int!
    suggestions: [String]
    facets: SearchFacets
}

type SearchFacets {
    categories: [CategoryFacet]
    priceRanges: [PriceRangeFacet]
    tags: [TagFacet]
}

type CategoryFacet {
    category: String!
    count: Int!
}

type PriceRangeFacet {
    range: PriceRange!
    count: Int!
}

type TagFacet {
    tag: String!
    count: Int!
}

# Enhanced filter input
input ProductFilter {
    category: String
    minPrice: Float
    maxPrice: Float
    inStock: Boolean
    tags: [String]
    priceRange: PriceRange
    rating: Float
    seller: String
}

# Enhanced root query type
type Query {
    # Product queries
    getProduct(productId: ID!): Product
    listProducts(limit: Int = 20, nextToken: String, filter: ProductFilter): ProductConnection
    listProductsByCategory(
        category: String!,
        limit: Int = 20,
        nextToken: String,
        sortDirection: SortDirection = DESC
    ): ProductConnection
    
    # Advanced search with OpenSearch
    searchProducts(input: SearchProductsInput!): SearchResult
    
    # Product recommendations (uses Lambda)
    getProductRecommendations(userId: ID!, category: String, limit: Int = 5): [Product]
    
    # Product scoring (uses Lambda)
    getProductScore(productId: ID!): ProductScore
    
    # User management queries
    getUser(userId: ID!): User
    listUsers(limit: Int = 20, nextToken: String, userType: UserType): UserConnection
    
    # Analytics queries
    getProductAnalytics(productId: ID!): ProductAnalytics
    getUserAnalytics(userId: ID!): UserAnalytics
    
    # Advanced aggregation queries
    getTopProducts(category: String, limit: Int = 10): [Product]
    getTrendingProducts(limit: Int = 10): [Product]
    getCategoryStats: [CategoryStats]
}

# Category statistics
type CategoryStats {
    category: String!
    totalProducts: Int!
    averagePrice: Float!
    averageRating: Float!
}

# Enhanced root mutation type
type Mutation {
    # Product mutations
    createProduct(input: CreateProductInput!): Product
        @aws_auth(cognito_groups: ["admin", "seller"])
    updateProduct(input: UpdateProductInput!): Product
        @aws_auth(cognito_groups: ["admin", "seller"])
    deleteProduct(productId: ID!): Product
        @aws_auth(cognito_groups: ["admin"])
    updateProductStock(productId: ID!, inStock: Boolean!): Product
        @aws_auth(cognito_groups: ["admin", "seller"])
    
    # Batch operations
    batchCreateProducts(products: [CreateProductInput!]!): [Product]
        @aws_auth(cognito_groups: ["admin"])
    batchUpdateProducts(products: [UpdateProductInput!]!): [Product]
        @aws_auth(cognito_groups: ["admin", "seller"])
    
    # User management mutations
    createUser(input: CreateUserInput!): User
        @aws_auth(cognito_groups: ["admin"])
    updateUserPreferences(userId: ID!, preferences: UserPreferencesInput!): User
    
    # Search index management
    updateProductSearchIndex(productId: ID!): Boolean
        @aws_auth(cognito_groups: ["admin", "seller"])
    rebuildSearchIndex: Boolean
        @aws_auth(cognito_groups: ["admin"])
    
    # Analytics mutations
    trackEvent(input: AnalyticsEventInput!): AnalyticsEvent
    
    # Cache management
    invalidateCache(key: String!): Boolean
        @aws_auth(cognito_groups: ["admin"])
}

# Advanced real-time subscriptions
type Subscription {
    # Product subscriptions with filtering
    onCreateProduct(category: String, seller: String): Product
        @aws_subscribe(mutations: ["createProduct"])
    onUpdateProduct(productId: ID, category: String): Product
        @aws_subscribe(mutations: ["updateProduct", "updateProductStock"])
    onDeleteProduct(category: String): Product
        @aws_subscribe(mutations: ["deleteProduct"])
    
    # Batch operation subscriptions
    onBatchProductUpdate(seller: String): [Product]
        @aws_subscribe(mutations: ["batchUpdateProducts"])
    
    # Real-time analytics subscriptions
    onAnalyticsEvent(userId: ID, eventType: String): AnalyticsEvent
        @aws_subscribe(mutations: ["trackEvent"])
    
    # System notifications
    onSystemNotification: SystemNotification
        @aws_subscribe(mutations: ["publishSystemNotification"])
}

# System notification type
type SystemNotification {
    id: ID!
    type: String!
    message: String!
    timestamp: AWSDateTime!
    priority: NotificationPriority!
}

# Enhanced enums
enum SortDirection {
    ASC
    DESC
}

enum PriceRange {
    LOW
    MEDIUM
    HIGH
    PREMIUM
}

enum UserType {
    ADMIN
    SELLER
    CUSTOMER
    GUEST
}

enum ProductSortField {
    NAME
    PRICE
    RATING
    CREATED_AT
    POPULARITY
    RELEVANCE
}

enum NotificationPriority {
    LOW
    MEDIUM
    HIGH
    URGENT
}

# Schema definition with enhanced operations
schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}