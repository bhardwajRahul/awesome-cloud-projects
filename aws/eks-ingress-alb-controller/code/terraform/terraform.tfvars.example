# ============================================================================
# AWS EKS Ingress Controllers with AWS Load Balancer Controller
# Example Terraform Variables Configuration
# ============================================================================

# Copy this file to terraform.tfvars and modify the values as needed

# ============================================================================
# Required Variables
# ============================================================================

# Name of your existing EKS cluster
cluster_name = "your-eks-cluster-name"

# AWS region where your EKS cluster is deployed
aws_region = "us-west-2"

# ============================================================================
# AWS Load Balancer Controller Configuration
# ============================================================================

# Version of the AWS Load Balancer Controller Helm chart
alb_controller_version = "1.8.1"

# Controller image tag (should match chart version)
controller_image_tag = "v2.8.1"

# Controller logging level
controller_log_level = "info"

# ============================================================================
# Application Configuration
# ============================================================================

# Namespace for demo applications
demo_namespace = "ingress-demo"

# Number of replicas for sample applications
sample_app_replicas = 3

# Whether to create sample ingress resources for demonstration
create_sample_ingresses = true

# ============================================================================
# Domain and SSL Configuration
# ============================================================================

# Your domain name for SSL certificate and ingress hosts
# Leave empty to skip SSL configuration
domain_name = "example.com"

# ARN of existing ACM certificate (optional)
# certificate_arn = "arn:aws:acm:us-west-2:123456789012:certificate/12345678-1234-1234-1234-123456789012"

# ============================================================================
# Load Balancer Configuration
# ============================================================================

# Load balancer scheme: internet-facing or internal
load_balancer_scheme = "internet-facing"

# Target type for ALB target groups: ip or instance
target_type = "ip"

# Health check configuration
healthcheck_path = "/"
healthcheck_interval = 10
healthcheck_timeout = 5
healthy_threshold_count = 2
unhealthy_threshold_count = 3

# ============================================================================
# SSL/TLS Configuration
# ============================================================================

# SSL security policy for HTTPS listeners
ssl_policy = "ELBSecurityPolicy-TLS-1-2-2019-07"

# Enable automatic HTTP to HTTPS redirect
enable_ssl_redirect = true

# ============================================================================
# Logging and Monitoring Configuration
# ============================================================================

# Enable ALB access logs to S3
enable_access_logs = false

# S3 bucket name for ALB access logs (optional)
# access_logs_bucket = "my-alb-access-logs-bucket"

# Prefix for ALB access logs in S3
access_logs_prefix = "alb-logs"

# ============================================================================
# Network Load Balancer Configuration
# ============================================================================

# Create a Network Load Balancer service for demonstration
create_nlb_service = true

# Enable cross-zone load balancing for NLB
nlb_cross_zone_enabled = true

# ============================================================================
# Advanced Routing Configuration
# ============================================================================

# Create weighted routing ingress for canary deployments
enable_weighted_routing = false

# Traffic distribution for weighted routing (must sum to 100)
traffic_weight_v1 = 70
traffic_weight_v2 = 30

# ============================================================================
# Performance and Scaling Configuration
# ============================================================================

# Connection idle timeout for ALB in seconds
idle_timeout_seconds = 60

# Target deregistration delay in seconds
deregistration_delay_seconds = 30

# Enable session stickiness for target groups
enable_stickiness = false

# Duration of session stickiness in seconds (if enabled)
stickiness_duration = 86400

# ============================================================================
# Security Configuration
# ============================================================================

# Enable AWS WAF integration with ALB
enable_waf = false

# ARN of existing WAF Web ACL (if WAF is enabled)
# waf_acl_arn = "arn:aws:wafv2:us-west-2:123456789012:regional/webacl/ExampleWebACL/473e64fd-f30b-4765-81a0-62ad96dd167a"

# Enable AWS Shield Advanced protection
enable_shield_advanced = false

# ============================================================================
# Feature Flags
# ============================================================================

# Create OIDC identity provider for IRSA (set to false if already exists)
create_oidc_provider = true

# Wait for load balancers to be fully provisioned before completing
wait_for_load_balancer = true

# Enable pod readiness gate for zero-downtime deployments
enable_pod_readiness_gate = true

# Enable Elastic Fabric Adapter (EFA) support
enable_efa_support = false

# ============================================================================
# Development and Testing Options
# ============================================================================

# Deployment mode: development, staging, or production
deployment_mode = "development"

# Enable debug logging for AWS Load Balancer Controller
enable_debug_logging = false

# ============================================================================
# Backup and Disaster Recovery
# ============================================================================

# Enable deletion protection for load balancers
enable_deletion_protection = false

# Number of days to retain access log backups
backup_retention_days = 30

# ============================================================================
# Resource Tagging
# ============================================================================

# Default tags applied to all resources
tags = {
  Environment   = "demo"
  Project       = "eks-ingress-demo"
  ManagedBy     = "terraform"
  Purpose       = "aws-load-balancer-controller-demo"
  Owner         = "platform-team"
}

# Additional tags to merge with default tags
additional_tags = {
  CostCenter = "engineering"
  Team       = "platform"
}

# ============================================================================
# Example Production Configuration
# ============================================================================

# For production use, consider these settings:
# 
# deployment_mode = "production"
# enable_access_logs = true
# enable_deletion_protection = true
# enable_waf = true
# enable_shield_advanced = true
# sample_app_replicas = 5
# backup_retention_days = 90
# 
# tags = {
#   Environment = "production"
#   Project     = "eks-ingress"
#   ManagedBy   = "terraform"
#   Purpose     = "production-load-balancer-controller"
#   Owner       = "platform-team"
#   CostCenter  = "engineering"
#   Compliance  = "required"
# }

# ============================================================================
# Example Staging Configuration
# ============================================================================

# For staging use, consider these settings:
# 
# deployment_mode = "staging"
# enable_access_logs = true
# create_sample_ingresses = false
# sample_app_replicas = 2
# backup_retention_days = 30
# 
# tags = {
#   Environment = "staging"
#   Project     = "eks-ingress"
#   ManagedBy   = "terraform"
#   Purpose     = "staging-load-balancer-controller"
#   Owner       = "platform-team"
# }