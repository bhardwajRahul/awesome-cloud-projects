AWSTemplateFormatVersion: '2010-09-09'
Description: 'Real-Time Streaming Analytics with EMR on EKS and Apache Flink - Production-ready infrastructure for enterprise streaming workloads'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Cluster Configuration"
        Parameters:
          - ClusterName
          - KubernetesVersion
          - NodeInstanceType
          - MinNodes
          - MaxNodes
          - DesiredNodes
      - Label:
          default: "EMR Configuration"
        Parameters:
          - EMRNamespace
          - VirtualClusterName
          - FlinkOperatorVersion
      - Label:
          default: "Streaming Configuration"
        Parameters:
          - TradingStreamShards
          - MarketDataStreamShards
          - CheckpointInterval
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCidr
          - PublicSubnet1Cidr
          - PublicSubnet2Cidr
          - PrivateSubnet1Cidr
          - PrivateSubnet2Cidr
      - Label:
          default: "Monitoring & Logging"
        Parameters:
          - EnablePrometheus
          - CloudWatchLogRetention
      - Label:
          default: "Tags and Metadata"
        Parameters:
          - Environment
          - ProjectName
          - Owner

Parameters:
  # Cluster Configuration
  ClusterName:
    Type: String
    Default: emr-flink-analytics
    Description: Name for the EKS cluster
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9-]*$
    ConstraintDescription: Must start with a letter and contain only alphanumeric characters and hyphens

  KubernetesVersion:
    Type: String
    Default: '1.28'
    AllowedValues: ['1.27', '1.28', '1.29']
    Description: Kubernetes version for the EKS cluster

  NodeInstanceType:
    Type: String
    Default: m5.xlarge
    AllowedValues: 
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
    Description: EC2 instance type for EKS worker nodes

  MinNodes:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 20
    Description: Minimum number of worker nodes

  MaxNodes:
    Type: Number
    Default: 10
    MinValue: 1
    MaxValue: 100
    Description: Maximum number of worker nodes

  DesiredNodes:
    Type: Number
    Default: 4
    MinValue: 1
    MaxValue: 50
    Description: Desired number of worker nodes

  # EMR Configuration
  EMRNamespace:
    Type: String
    Default: emr-flink
    Description: Kubernetes namespace for EMR workloads
    AllowedPattern: ^[a-z][a-z0-9-]*$

  VirtualClusterName:
    Type: String
    Default: flink-analytics-cluster
    Description: Name for the EMR virtual cluster

  FlinkOperatorVersion:
    Type: String
    Default: 1.7.0-emr-7.0.0
    Description: Version of the Flink Kubernetes operator

  # Streaming Configuration
  TradingStreamShards:
    Type: Number
    Default: 4
    MinValue: 1
    MaxValue: 200
    Description: Number of shards for trading events stream

  MarketDataStreamShards:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 200
    Description: Number of shards for market data stream

  CheckpointInterval:
    Type: String
    Default: 60s
    Description: Flink checkpoint interval (e.g., 30s, 60s, 2min)

  # Network Configuration
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: CIDR block for the VPC

  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: CIDR block for public subnet 1

  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: CIDR block for public subnet 2

  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.3.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: CIDR block for private subnet 1

  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: CIDR block for private subnet 2

  # Monitoring & Logging
  EnablePrometheus:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable Prometheus monitoring stack

  CloudWatchLogRetention:
    Type: Number
    Default: 7
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: CloudWatch log retention period in days

  # Tags and Metadata
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name

  ProjectName:
    Type: String
    Default: flink-streaming-analytics
    Description: Project name for resource tagging

  Owner:
    Type: String
    Default: data-engineering-team
    Description: Owner or team responsible for these resources

Conditions:
  EnablePrometheusCondition: !Equals [!Ref EnablePrometheus, 'true']

Resources:
  # ========================================
  # VPC and Networking Resources
  # ========================================
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-vpc'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Owner
          Value: !Ref Owner

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-igw'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-public-subnet-1'
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: kubernetes.io/cluster/!Ref ClusterName
          Value: shared
        - Key: Environment
          Value: !Ref Environment

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-public-subnet-2'
        - Key: kubernetes.io/role/elb
          Value: '1'
        - Key: kubernetes.io/cluster/!Ref ClusterName
          Value: shared
        - Key: Environment
          Value: !Ref Environment

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1Cidr
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-private-subnet-1'
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: kubernetes.io/cluster/!Ref ClusterName
          Value: owned
        - Key: Environment
          Value: !Ref Environment

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2Cidr
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-private-subnet-2'
        - Key: kubernetes.io/role/internal-elb
          Value: '1'
        - Key: kubernetes.io/cluster/!Ref ClusterName
          Value: owned
        - Key: Environment
          Value: !Ref Environment

  # NAT Gateways
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-nat-gateway-1-eip'

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-nat-gateway-2-eip'

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-nat-gateway-1'

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-nat-gateway-2'

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-public-route-table'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-private-route-table-1'

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-private-route-table-2'

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # ========================================
  # IAM Roles and Policies
  # ========================================

  # EKS Cluster Service Role
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-eks-cluster-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # EKS Node Group Role
  EKSNodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-eks-nodegroup-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # EMR Containers Service Role
  EMRContainersServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-emr-containers-service-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: emr-containers.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEMRContainersServiceRolePolicy
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # EMR Job Execution Role
  EMRJobExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ClusterName}-emr-job-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/${EKSCluster.OpenIdConnectIssuerUrl}'
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringLike:
                !Sub '${EKSCluster.OpenIdConnectIssuerUrl}:sub': !Sub 'system:serviceaccount:${EMRNamespace}:*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonKinesisFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # EKS Cluster and Node Group
  # ========================================

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSClusterSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        EndpointConfigPrivate: true
        EndpointConfigPublic: true
        PublicAccessCidrs: ['0.0.0.0/0']
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
            - Type: authenticator
            - Type: controllerManager
            - Type: scheduler
      Tags:
        Environment: !Ref Environment
        Project: !Ref ProjectName
        Owner: !Ref Owner

  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS cluster control plane
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr
          Description: HTTPS access from VPC
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-cluster-sg'
        - Key: Environment
          Value: !Ref Environment

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      NodegroupName: !Sub '${ClusterName}-flink-workers'
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodeGroupRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      InstanceTypes:
        - !Ref NodeInstanceType
      ScalingConfig:
        MinSize: !Ref MinNodes
        MaxSize: !Ref MaxNodes
        DesiredSize: !Ref DesiredNodes
      DiskSize: 100
      AmiType: AL2_x86_64
      CapacityType: ON_DEMAND
      UpdateConfig:
        MaxUnavailablePercentage: 25
      Tags:
        Environment: !Ref Environment
        Project: !Ref ProjectName
        Owner: !Ref Owner

  # EKS Add-ons
  EKSAddonVPCCNI:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref EKSCluster
      AddonName: vpc-cni
      ResolveConflicts: OVERWRITE

  EKSAddonCoreDNS:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref EKSCluster
      AddonName: coredns
      ResolveConflicts: OVERWRITE
    DependsOn: EKSNodeGroup

  EKSAddonKubeProxy:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref EKSCluster
      AddonName: kube-proxy
      ResolveConflicts: OVERWRITE

  EKSAddonEBSCSI:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref EKSCluster
      AddonName: aws-ebs-csi-driver
      ResolveConflicts: OVERWRITE

  # ========================================
  # Storage Resources
  # ========================================

  # S3 Bucket for Flink Checkpoints and Results
  FlinkS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'emr-flink-analytics-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: CheckpointLifecycle
            Status: Enabled
            Prefix: checkpoints/
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: flink-checkpoints-and-results

  # ========================================
  # Kinesis Data Streams
  # ========================================

  TradingEventsStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub 'trading-events-${AWS::AccountId}'
      ShardCount: !Ref TradingStreamShards
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
      RetentionPeriodHours: 24
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: trading-events-ingestion

  MarketDataStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub 'market-data-${AWS::AccountId}'
      ShardCount: !Ref MarketDataStreamShards
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
      RetentionPeriodHours: 24
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Purpose
          Value: market-data-ingestion

  # ========================================
  # CloudWatch Resources
  # ========================================

  FlinkCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/emr-containers/${ClusterName}'
      RetentionInDays: !Ref CloudWatchLogRetention
      KmsKeyId: !Ref CloudWatchKMSKey

  CloudWatchKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for encrypting CloudWatch logs
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow CloudWatch Logs
            Effect: Allow
            Principal:
              Service: !Sub 'logs.${AWS::Region}.amazonaws.com'
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  CloudWatchKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${ClusterName}-cloudwatch-logs'
      TargetKeyId: !Ref CloudWatchKMSKey

  # ========================================
  # SNS for Alerts
  # ========================================

  FlinkAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ClusterName}-flink-alerts'
      DisplayName: Flink Streaming Analytics Alerts
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # ========================================
  # EMR Virtual Cluster
  # ========================================

  EMRVirtualCluster:
    Type: AWS::EMRContainers::VirtualCluster
    Properties:
      Name: !Ref VirtualClusterName
      ContainerProvider:
        Type: EKS
        Id: !Ref EKSCluster
        Info:
          EksInfo:
            Namespace: !Ref EMRNamespace
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: Owner
          Value: !Ref Owner

Outputs:
  # Cluster Information
  EKSClusterName:
    Description: Name of the EKS cluster
    Value: !Ref EKSCluster
    Export:
      Name: !Sub '${AWS::StackName}-eks-cluster-name'

  EKSClusterEndpoint:
    Description: EKS cluster endpoint URL
    Value: !GetAtt EKSCluster.Endpoint
    Export:
      Name: !Sub '${AWS::StackName}-eks-cluster-endpoint'

  EKSClusterArn:
    Description: EKS cluster ARN
    Value: !GetAtt EKSCluster.Arn
    Export:
      Name: !Sub '${AWS::StackName}-eks-cluster-arn'

  EKSClusterOIDCIssuer:
    Description: EKS cluster OIDC issuer URL
    Value: !GetAtt EKSCluster.OpenIdConnectIssuerUrl
    Export:
      Name: !Sub '${AWS::StackName}-eks-oidc-issuer'

  # EMR Information
  EMRVirtualClusterId:
    Description: EMR virtual cluster ID
    Value: !Ref EMRVirtualCluster
    Export:
      Name: !Sub '${AWS::StackName}-emr-virtual-cluster-id'

  EMRJobExecutionRoleArn:
    Description: ARN of the EMR job execution role
    Value: !GetAtt EMRJobExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-emr-job-execution-role-arn'

  EMRNamespace:
    Description: Kubernetes namespace for EMR workloads
    Value: !Ref EMRNamespace
    Export:
      Name: !Sub '${AWS::StackName}-emr-namespace'

  # Storage Information
  FlinkS3BucketName:
    Description: S3 bucket name for Flink checkpoints and results
    Value: !Ref FlinkS3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-flink-s3-bucket'

  FlinkS3BucketArn:
    Description: S3 bucket ARN for Flink checkpoints and results
    Value: !GetAtt FlinkS3Bucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-flink-s3-bucket-arn'

  # Streaming Information
  TradingEventsStreamName:
    Description: Kinesis stream name for trading events
    Value: !Ref TradingEventsStream
    Export:
      Name: !Sub '${AWS::StackName}-trading-events-stream'

  TradingEventsStreamArn:
    Description: Kinesis stream ARN for trading events
    Value: !GetAtt TradingEventsStream.Arn
    Export:
      Name: !Sub '${AWS::StackName}-trading-events-stream-arn'

  MarketDataStreamName:
    Description: Kinesis stream name for market data
    Value: !Ref MarketDataStream
    Export:
      Name: !Sub '${AWS::StackName}-market-data-stream'

  MarketDataStreamArn:
    Description: Kinesis stream ARN for market data
    Value: !GetAtt MarketDataStream.Arn
    Export:
      Name: !Sub '${AWS::StackName}-market-data-stream-arn'

  # Monitoring Information
  FlinkCloudWatchLogGroup:
    Description: CloudWatch log group for Flink applications
    Value: !Ref FlinkCloudWatchLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-flink-log-group'

  FlinkAlertsTopicArn:
    Description: SNS topic ARN for Flink alerts
    Value: !Ref FlinkAlertsTopic
    Export:
      Name: !Sub '${AWS::StackName}-flink-alerts-topic-arn'

  # Network Information
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-vpc-id'

  PrivateSubnets:
    Description: List of private subnet IDs
    Value: !Join
      - ','
      - - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-private-subnets'

  PublicSubnets:
    Description: List of public subnet IDs
    Value: !Join
      - ','
      - - !Ref PublicSubnet1
        - !Ref PublicSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-public-subnets'

  # Configuration Information
  FlinkOperatorVersion:
    Description: Version of the Flink Kubernetes operator
    Value: !Ref FlinkOperatorVersion
    Export:
      Name: !Sub '${AWS::StackName}-flink-operator-version'

  CheckpointInterval:
    Description: Flink checkpoint interval configuration
    Value: !Ref CheckpointInterval
    Export:
      Name: !Sub '${AWS::StackName}-checkpoint-interval'

  # Quick Start Commands
  KubectlConfigCommand:
    Description: Command to configure kubectl for this cluster
    Value: !Sub 'aws eks update-kubeconfig --region ${AWS::Region} --name ${EKSCluster}'

  FlinkDashboardPortForward:
    Description: Command to access Flink dashboard
    Value: !Sub 'kubectl port-forward -n ${EMRNamespace} service/fraud-detection-rest 8081:8081'

  PrometheusPortForward:
    Description: Command to access Prometheus dashboard (if enabled)
    Value: !Sub 'kubectl port-forward -n monitoring service/prometheus-server 9090:80'

  GrafanaPortForward:
    Description: Command to access Grafana dashboard (if enabled)
    Value: !Sub 'kubectl port-forward -n monitoring service/prometheus-grafana 3000:80'