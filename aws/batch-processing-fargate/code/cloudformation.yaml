AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Infrastructure as Code for Serverless Batch Processing with Fargate.
  This template creates a complete serverless batch processing solution including compute environments,
  job queues, job definitions, IAM roles, ECR repository, and CloudWatch logging.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - SubnetIds
          - SecurityGroupId
      - Label:
          default: "Batch Configuration"
        Parameters:
          - MaxvCpus
          - JobExecutionTimeout
          - JobRetryAttempts
      - Label:
          default: "Container Configuration"
        Parameters:
          - ContainerImageUri
          - ContainerVcpu
          - ContainerMemory
      - Label:
          default: "Logging Configuration"
        Parameters:
          - LogRetentionInDays
      - Label:
          default: "Tagging Configuration"
        Parameters:
          - Environment
          - Project
          - Owner
    ParameterLabels:
      VpcId:
        default: "VPC ID"
      SubnetIds:
        default: "Subnet IDs"
      SecurityGroupId:
        default: "Security Group ID"
      MaxvCpus:
        default: "Maximum vCPUs"
      JobExecutionTimeout:
        default: "Job Execution Timeout (seconds)"
      JobRetryAttempts:
        default: "Job Retry Attempts"
      ContainerImageUri:
        default: "Container Image URI"
      ContainerVcpu:
        default: "Container vCPU"
      ContainerMemory:
        default: "Container Memory (MB)"
      LogRetentionInDays:
        default: "Log Retention (days)"

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the batch compute environment will be deployed
    ConstraintDescription: Must be a valid VPC ID in your account

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet IDs for the batch compute environment (recommend private subnets)
    ConstraintDescription: Must be valid subnet IDs within the specified VPC

  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group ID for batch jobs (recommend allowing outbound HTTPS for ECR access)
    ConstraintDescription: Must be a valid security group ID within the specified VPC

  MaxvCpus:
    Type: Number
    Default: 256
    MinValue: 1
    MaxValue: 10000
    Description: Maximum number of vCPUs for the compute environment
    ConstraintDescription: Must be between 1 and 10000

  JobExecutionTimeout:
    Type: Number
    Default: 3600
    MinValue: 60
    MaxValue: 86400
    Description: Maximum time in seconds for job execution before timeout
    ConstraintDescription: Must be between 60 seconds (1 minute) and 86400 seconds (24 hours)

  JobRetryAttempts:
    Type: Number
    Default: 1
    MinValue: 0
    MaxValue: 10
    Description: Number of retry attempts for failed jobs
    ConstraintDescription: Must be between 0 and 10

  ContainerImageUri:
    Type: String
    Default: ""
    Description: URI of the container image in ECR (leave empty to use the ECR repository created by this template)
    AllowedPattern: ^(|[0-9]{12}\.dkr\.ecr\.[a-z0-9-]+\.amazonaws\.com\/[a-z0-9-_]+:[a-zA-Z0-9-_\.]+)$
    ConstraintDescription: Must be a valid ECR image URI or empty

  ContainerVcpu:
    Type: String
    Default: "0.25"
    AllowedValues:
      - "0.25"
      - "0.5"
      - "1"
      - "2"
      - "4"
    Description: Number of vCPUs allocated to each job container
    ConstraintDescription: Must be one of the supported Fargate vCPU values

  ContainerMemory:
    Type: Number
    Default: 512
    MinValue: 512
    MaxValue: 30720
    Description: Memory in MB allocated to each job container
    ConstraintDescription: Must be between 512 MB and 30720 MB and compatible with vCPU selection

  LogRetentionInDays:
    Type: Number
    Default: 7
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: Number of days to retain CloudWatch logs
    ConstraintDescription: Must be a valid CloudWatch log retention period

  Environment:
    Type: String
    Default: "development"
    AllowedValues:
      - "development"
      - "staging"
      - "production"
    Description: Environment name for resource tagging
    ConstraintDescription: Must be development, staging, or production

  Project:
    Type: String
    Default: "batch-processing-demo"
    MinLength: 1
    MaxLength: 64
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9-]*$
    Description: Project name for resource tagging and naming
    ConstraintDescription: Must start with a letter and contain only alphanumeric characters and hyphens

  Owner:
    Type: String
    Default: "devops-team"
    MinLength: 1
    MaxLength: 64
    Description: Owner or team responsible for these resources
    ConstraintDescription: Must be between 1 and 64 characters

Conditions:
  CreateDefaultContainerImage: !Equals [!Ref ContainerImageUri, ""]
  IsProduction: !Equals [!Ref Environment, "production"]

Resources:
  # ============================================================================
  # IAM ROLES AND POLICIES
  # ============================================================================

  # IAM role for Fargate task execution - enables ECS to pull images and write logs
  BatchFargateExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Project}-batch-execution-role-${Environment}"
      Description: "IAM role for AWS Batch Fargate task execution"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Name
          Value: !Sub "${Project}-batch-execution-role-${Environment}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: ManagedBy
          Value: "CloudFormation"

  # IAM role for batch jobs (optional for jobs that need AWS API access)
  BatchJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Project}-batch-job-role-${Environment}"
      Description: "IAM role for AWS Batch job containers to access AWS services"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "BatchJobCloudWatchAccess"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/batch/job*"
      Tags:
        - Key: Name
          Value: !Sub "${Project}-batch-job-role-${Environment}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: ManagedBy
          Value: "CloudFormation"

  # ============================================================================
  # CONTAINER REGISTRY (ECR)
  # ============================================================================

  # ECR repository for storing batch processing container images
  BatchProcessingRepository:
    Type: AWS::ECR::Repository
    Condition: CreateDefaultContainerImage
    Properties:
      RepositoryName: !Sub "${Project}-batch-processing-${Environment}"
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 2,
                "description": "Keep last 5 tagged images",
                "selection": {
                  "tagStatus": "tagged",
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: !Sub "${Project}-batch-processing-${Environment}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: ManagedBy
          Value: "CloudFormation"

  # ============================================================================
  # CLOUDWATCH LOGGING
  # ============================================================================

  # CloudWatch log group for batch job logs
  BatchJobLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/batch/job/${Project}-${Environment}"
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: Name
          Value: !Sub "${Project}-batch-logs-${Environment}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: ManagedBy
          Value: "CloudFormation"

  # ============================================================================
  # AWS BATCH COMPUTE ENVIRONMENT
  # ============================================================================

  # Fargate compute environment for serverless batch processing
  BatchComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Sub "${Project}-fargate-compute-${Environment}"
      Type: MANAGED
      State: ENABLED
      ServiceRole: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/batch.amazonaws.com/AWSServiceRoleForBatch"
      ComputeResources:
        Type: FARGATE
        MaxvCpus: !Ref MaxvCpus
        Subnets: !Ref SubnetIds
        SecurityGroupIds:
          - !Ref SecurityGroupId
        Tags:
          Name: !Sub "${Project}-fargate-compute-${Environment}"
          Environment: !Ref Environment
          Project: !Ref Project
          Owner: !Ref Owner
          ManagedBy: "CloudFormation"
      Tags:
        Name: !Sub "${Project}-fargate-compute-${Environment}"
        Environment: !Ref Environment
        Project: !Ref Project
        Owner: !Ref Owner
        ManagedBy: "CloudFormation"

  # Additional compute environment for Spot instances (cost optimization)
  BatchSpotComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Condition: IsProduction
    Properties:
      ComputeEnvironmentName: !Sub "${Project}-fargate-spot-compute-${Environment}"
      Type: MANAGED
      State: ENABLED
      ServiceRole: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/batch.amazonaws.com/AWSServiceRoleForBatch"
      ComputeResources:
        Type: FARGATE_SPOT
        MaxvCpus: !Ref MaxvCpus
        Subnets: !Ref SubnetIds
        SecurityGroupIds:
          - !Ref SecurityGroupId
        Tags:
          Name: !Sub "${Project}-fargate-spot-compute-${Environment}"
          Environment: !Ref Environment
          Project: !Ref Project
          Owner: !Ref Owner
          ManagedBy: "CloudFormation"
      Tags:
        Name: !Sub "${Project}-fargate-spot-compute-${Environment}"
        Environment: !Ref Environment
        Project: !Ref Project
        Owner: !Ref Owner
        ManagedBy: "CloudFormation"

  # ============================================================================
  # AWS BATCH JOB QUEUES
  # ============================================================================

  # High priority job queue for time-sensitive workloads
  BatchHighPriorityJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub "${Project}-high-priority-queue-${Environment}"
      State: ENABLED
      Priority: 100
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref BatchComputeEnvironment
      Tags:
        - Key: Name
          Value: !Sub "${Project}-high-priority-queue-${Environment}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: ManagedBy
          Value: "CloudFormation"

  # Standard priority job queue for regular batch processing
  BatchStandardJobQueue:
    Type: AWS::Batch::JobQueue
    Properties:
      JobQueueName: !Sub "${Project}-standard-queue-${Environment}"
      State: ENABLED
      Priority: 50
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref BatchComputeEnvironment
        - !If
          - IsProduction
          - Order: 2
            ComputeEnvironment: !Ref BatchSpotComputeEnvironment
          - !Ref "AWS::NoValue"
      Tags:
        - Key: Name
          Value: !Sub "${Project}-standard-queue-${Environment}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: ManagedBy
          Value: "CloudFormation"

  # Low priority job queue for background processing (Spot instances preferred)
  BatchLowPriorityJobQueue:
    Type: AWS::Batch::JobQueue
    Condition: IsProduction
    Properties:
      JobQueueName: !Sub "${Project}-low-priority-queue-${Environment}"
      State: ENABLED
      Priority: 10
      ComputeEnvironmentOrder:
        - Order: 1
          ComputeEnvironment: !Ref BatchSpotComputeEnvironment
        - Order: 2
          ComputeEnvironment: !Ref BatchComputeEnvironment
      Tags:
        - Key: Name
          Value: !Sub "${Project}-low-priority-queue-${Environment}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: ManagedBy
          Value: "CloudFormation"

  # ============================================================================
  # AWS BATCH JOB DEFINITIONS
  # ============================================================================

  # Small job definition for lightweight processing tasks
  BatchSmallJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Sub "${Project}-small-job-${Environment}"
      Type: container
      PlatformCapabilities:
        - FARGATE
      ContainerProperties:
        Image: !If
          - CreateDefaultContainerImage
          - !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${BatchProcessingRepository}:latest"
          - !Ref ContainerImageUri
        ResourceRequirements:
          - Type: VCPU
            Value: "0.25"
          - Type: MEMORY
            Value: "512"
        ExecutionRoleArn: !GetAtt BatchFargateExecutionRole.Arn
        JobRoleArn: !GetAtt BatchJobRole.Arn
        NetworkConfiguration:
          AssignPublicIp: ENABLED
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref BatchJobLogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: "small-job"
        Environment:
          - Name: JOB_TYPE
            Value: "small"
          - Name: ENVIRONMENT
            Value: !Ref Environment
          - Name: PROJECT
            Value: !Ref Project
      RetryStrategy:
        Attempts: !Ref JobRetryAttempts
      Timeout:
        AttemptDurationSeconds: !Ref JobExecutionTimeout
      Tags:
        Name: !Sub "${Project}-small-job-${Environment}"
        Environment: !Ref Environment
        Project: !Ref Project
        Owner: !Ref Owner
        ManagedBy: "CloudFormation"

  # Medium job definition for standard processing tasks
  BatchMediumJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Sub "${Project}-medium-job-${Environment}"
      Type: container
      PlatformCapabilities:
        - FARGATE
      ContainerProperties:
        Image: !If
          - CreateDefaultContainerImage
          - !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${BatchProcessingRepository}:latest"
          - !Ref ContainerImageUri
        ResourceRequirements:
          - Type: VCPU
            Value: !Ref ContainerVcpu
          - Type: MEMORY
            Value: !Ref ContainerMemory
        ExecutionRoleArn: !GetAtt BatchFargateExecutionRole.Arn
        JobRoleArn: !GetAtt BatchJobRole.Arn
        NetworkConfiguration:
          AssignPublicIp: ENABLED
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref BatchJobLogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: "medium-job"
        Environment:
          - Name: JOB_TYPE
            Value: "medium"
          - Name: ENVIRONMENT
            Value: !Ref Environment
          - Name: PROJECT
            Value: !Ref Project
      RetryStrategy:
        Attempts: !Ref JobRetryAttempts
      Timeout:
        AttemptDurationSeconds: !Ref JobExecutionTimeout
      Tags:
        Name: !Sub "${Project}-medium-job-${Environment}"
        Environment: !Ref Environment
        Project: !Ref Project
        Owner: !Ref Owner
        ManagedBy: "CloudFormation"

  # Large job definition for compute-intensive processing tasks
  BatchLargeJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Sub "${Project}-large-job-${Environment}"
      Type: container
      PlatformCapabilities:
        - FARGATE
      ContainerProperties:
        Image: !If
          - CreateDefaultContainerImage
          - !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${BatchProcessingRepository}:latest"
          - !Ref ContainerImageUri
        ResourceRequirements:
          - Type: VCPU
            Value: "2"
          - Type: MEMORY
            Value: "4096"
        ExecutionRoleArn: !GetAtt BatchFargateExecutionRole.Arn
        JobRoleArn: !GetAtt BatchJobRole.Arn
        NetworkConfiguration:
          AssignPublicIp: ENABLED
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref BatchJobLogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: "large-job"
        Environment:
          - Name: JOB_TYPE
            Value: "large"
          - Name: ENVIRONMENT
            Value: !Ref Environment
          - Name: PROJECT
            Value: !Ref Project
      RetryStrategy:
        Attempts: !Ref JobRetryAttempts
      Timeout:
        AttemptDurationSeconds: !Ref JobExecutionTimeout
      Tags:
        Name: !Sub "${Project}-large-job-${Environment}"
        Environment: !Ref Environment
        Project: !Ref Project
        Owner: !Ref Owner
        ManagedBy: "CloudFormation"

  # ============================================================================
  # CLOUDWATCH ALARMS AND MONITORING
  # ============================================================================

  # CloudWatch alarm for failed job monitoring
  BatchFailedJobsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Project}-batch-failed-jobs-${Environment}"
      AlarmDescription: "Alarm when batch jobs fail frequently"
      MetricName: FailedJobs
      Namespace: AWS/Batch
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: JobQueue
          Value: !Ref BatchStandardJobQueue
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${Project}-batch-failed-jobs-${Environment}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: ManagedBy
          Value: "CloudFormation"

  # CloudWatch alarm for long-running jobs
  BatchLongRunningJobsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Project}-batch-long-running-jobs-${Environment}"
      AlarmDescription: "Alarm when jobs run longer than expected"
      MetricName: RunningJobs
      Namespace: AWS/Batch
      Statistic: Average
      Period: 900
      EvaluationPeriods: 4
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: JobQueue
          Value: !Ref BatchStandardJobQueue
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${Project}-batch-long-running-jobs-${Environment}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref Project
        - Key: Owner
          Value: !Ref Owner
        - Key: ManagedBy
          Value: "CloudFormation"

# ============================================================================
# OUTPUTS
# ============================================================================

Outputs:
  # Compute Environment Outputs
  ComputeEnvironmentName:
    Description: "Name of the Fargate compute environment"
    Value: !Ref BatchComputeEnvironment
    Export:
      Name: !Sub "${AWS::StackName}-ComputeEnvironment"

  ComputeEnvironmentArn:
    Description: "ARN of the Fargate compute environment"
    Value: !Sub "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:compute-environment/${BatchComputeEnvironment}"
    Export:
      Name: !Sub "${AWS::StackName}-ComputeEnvironmentArn"

  SpotComputeEnvironmentName:
    Condition: IsProduction
    Description: "Name of the Fargate Spot compute environment"
    Value: !Ref BatchSpotComputeEnvironment
    Export:
      Name: !Sub "${AWS::StackName}-SpotComputeEnvironment"

  # Job Queue Outputs
  HighPriorityJobQueueName:
    Description: "Name of the high priority job queue"
    Value: !Ref BatchHighPriorityJobQueue
    Export:
      Name: !Sub "${AWS::StackName}-HighPriorityJobQueue"

  HighPriorityJobQueueArn:
    Description: "ARN of the high priority job queue"
    Value: !Sub "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/${BatchHighPriorityJobQueue}"
    Export:
      Name: !Sub "${AWS::StackName}-HighPriorityJobQueueArn"

  StandardJobQueueName:
    Description: "Name of the standard priority job queue"
    Value: !Ref BatchStandardJobQueue
    Export:
      Name: !Sub "${AWS::StackName}-StandardJobQueue"

  StandardJobQueueArn:
    Description: "ARN of the standard priority job queue"
    Value: !Sub "arn:aws:batch:${AWS::Region}:${AWS::AccountId}:job-queue/${BatchStandardJobQueue}"
    Export:
      Name: !Sub "${AWS::StackName}-StandardJobQueueArn"

  LowPriorityJobQueueName:
    Condition: IsProduction
    Description: "Name of the low priority job queue"
    Value: !Ref BatchLowPriorityJobQueue
    Export:
      Name: !Sub "${AWS::StackName}-LowPriorityJobQueue"

  # Job Definition Outputs
  SmallJobDefinitionName:
    Description: "Name of the small job definition"
    Value: !Ref BatchSmallJobDefinition
    Export:
      Name: !Sub "${AWS::StackName}-SmallJobDefinition"

  SmallJobDefinitionArn:
    Description: "ARN of the small job definition"
    Value: !Ref BatchSmallJobDefinition
    Export:
      Name: !Sub "${AWS::StackName}-SmallJobDefinitionArn"

  MediumJobDefinitionName:
    Description: "Name of the medium job definition"
    Value: !Ref BatchMediumJobDefinition
    Export:
      Name: !Sub "${AWS::StackName}-MediumJobDefinition"

  MediumJobDefinitionArn:
    Description: "ARN of the medium job definition"
    Value: !Ref BatchMediumJobDefinition
    Export:
      Name: !Sub "${AWS::StackName}-MediumJobDefinitionArn"

  LargeJobDefinitionName:
    Description: "Name of the large job definition"
    Value: !Ref BatchLargeJobDefinition
    Export:
      Name: !Sub "${AWS::StackName}-LargeJobDefinition"

  LargeJobDefinitionArn:
    Description: "ARN of the large job definition"
    Value: !Ref BatchLargeJobDefinition
    Export:
      Name: !Sub "${AWS::StackName}-LargeJobDefinitionArn"

  # IAM Role Outputs
  ExecutionRoleArn:
    Description: "ARN of the Fargate execution role"
    Value: !GetAtt BatchFargateExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ExecutionRoleArn"

  JobRoleArn:
    Description: "ARN of the batch job role"
    Value: !GetAtt BatchJobRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-JobRoleArn"

  # ECR Repository Outputs
  EcrRepositoryUri:
    Condition: CreateDefaultContainerImage
    Description: "URI of the ECR repository for container images"
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${BatchProcessingRepository}"
    Export:
      Name: !Sub "${AWS::StackName}-EcrRepositoryUri"

  EcrRepositoryName:
    Condition: CreateDefaultContainerImage
    Description: "Name of the ECR repository"
    Value: !Ref BatchProcessingRepository
    Export:
      Name: !Sub "${AWS::StackName}-EcrRepositoryName"

  # CloudWatch Outputs
  LogGroupName:
    Description: "Name of the CloudWatch log group for batch jobs"
    Value: !Ref BatchJobLogGroup
    Export:
      Name: !Sub "${AWS::StackName}-LogGroupName"

  LogGroupArn:
    Description: "ARN of the CloudWatch log group for batch jobs"
    Value: !GetAtt BatchJobLogGroup.Arn
    Export:
      Name: !Sub "${AWS::StackName}-LogGroupArn"

  # Monitoring Outputs
  FailedJobsAlarmName:
    Description: "Name of the failed jobs CloudWatch alarm"
    Value: !Ref BatchFailedJobsAlarm
    Export:
      Name: !Sub "${AWS::StackName}-FailedJobsAlarm"

  LongRunningJobsAlarmName:
    Description: "Name of the long running jobs CloudWatch alarm"
    Value: !Ref BatchLongRunningJobsAlarm
    Export:
      Name: !Sub "${AWS::StackName}-LongRunningJobsAlarm"

  # CLI Command Examples
  SubmitSmallJobCommand:
    Description: "AWS CLI command to submit a small job"
    Value: !Sub |
      aws batch submit-job \
        --job-name "small-job-$(date +%s)" \
        --job-queue ${BatchStandardJobQueue} \
        --job-definition ${BatchSmallJobDefinition}

  SubmitMediumJobCommand:
    Description: "AWS CLI command to submit a medium job"
    Value: !Sub |
      aws batch submit-job \
        --job-name "medium-job-$(date +%s)" \
        --job-queue ${BatchStandardJobQueue} \
        --job-definition ${BatchMediumJobDefinition}

  SubmitLargeJobCommand:
    Description: "AWS CLI command to submit a large job"
    Value: !Sub |
      aws batch submit-job \
        --job-name "large-job-$(date +%s)" \
        --job-queue ${BatchHighPriorityJobQueue} \
        --job-definition ${BatchLargeJobDefinition}

  # Stack Information
  StackId:
    Description: "CloudFormation stack ID"
    Value: !Ref AWS::StackId
    Export:
      Name: !Sub "${AWS::StackName}-StackId"

  StackRegion:
    Description: "AWS region where the stack is deployed"
    Value: !Ref AWS::Region
    Export:
      Name: !Sub "${AWS::StackName}-Region"

  StackEnvironment:
    Description: "Environment tag value"
    Value: !Ref Environment
    Export:
      Name: !Sub "${AWS::StackName}-Environment"