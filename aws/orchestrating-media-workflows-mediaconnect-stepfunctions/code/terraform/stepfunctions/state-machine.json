{
  "Comment": "Media workflow for monitoring MediaConnect flows and handling alerts",
  "StartAt": "MonitorStream",
  "States": {
    "MonitorStream": {
      "Type": "Task",
      "Resource": "${monitor_lambda_arn}",
      "Parameters": {
        "flow_arn.$": "$.flow_arn",
        "sns_topic_arn": "${sns_topic_arn}"
      },
      "ResultPath": "$.monitoring_result",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "MonitoringFailed",
          "ResultPath": "$.error"
        }
      ],
      "Next": "EvaluateHealth"
    },
    "EvaluateHealth": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.monitoring_result.healthy",
          "BooleanEquals": false,
          "Next": "CheckSeverity"
        },
        {
          "Variable": "$.monitoring_result.flow_status",
          "StringEquals": "STANDBY",
          "Next": "FlowStandby"
        }
      ],
      "Default": "HealthyFlow"
    },
    "CheckSeverity": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.monitoring_result.issues[0].severity",
          "StringEquals": "CRITICAL",
          "Next": "SendCriticalAlert"
        },
        {
          "Variable": "$.monitoring_result.issues[0].severity", 
          "StringEquals": "HIGH",
          "Next": "SendHighAlert"
        }
      ],
      "Default": "SendMediumAlert"
    },
    "SendCriticalAlert": {
      "Type": "Task",
      "Resource": "${alert_lambda_arn}",
      "Parameters": {
        "flow_name.$": "$.monitoring_result.flow_name",
        "flow_arn.$": "$.monitoring_result.flow_arn",
        "flow_status.$": "$.monitoring_result.flow_status",
        "timestamp.$": "$.monitoring_result.timestamp",
        "issues.$": "$.monitoring_result.issues",
        "healthy.$": "$.monitoring_result.healthy",
        "current_bitrate.$": "$.monitoring_result.current_bitrate",
        "sns_topic_arn": "${sns_topic_arn}",
        "alert_priority": "CRITICAL"
      },
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Next": "LogCriticalIssue"
    },
    "SendHighAlert": {
      "Type": "Task",
      "Resource": "${alert_lambda_arn}",
      "Parameters": {
        "flow_name.$": "$.monitoring_result.flow_name",
        "flow_arn.$": "$.monitoring_result.flow_arn",
        "flow_status.$": "$.monitoring_result.flow_status",
        "timestamp.$": "$.monitoring_result.timestamp",
        "issues.$": "$.monitoring_result.issues",
        "healthy.$": "$.monitoring_result.healthy",
        "current_bitrate.$": "$.monitoring_result.current_bitrate",
        "sns_topic_arn": "${sns_topic_arn}",
        "alert_priority": "HIGH"
      },
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 1,
          "MaxAttempts": 2,
          "BackoffRate": 2.0
        }
      ],
      "Next": "LogHighIssue"
    },
    "SendMediumAlert": {
      "Type": "Task",
      "Resource": "${alert_lambda_arn}",
      "Parameters": {
        "flow_name.$": "$.monitoring_result.flow_name",
        "flow_arn.$": "$.monitoring_result.flow_arn",
        "flow_status.$": "$.monitoring_result.flow_status",
        "timestamp.$": "$.monitoring_result.timestamp",
        "issues.$": "$.monitoring_result.issues",
        "healthy.$": "$.monitoring_result.healthy",
        "current_bitrate.$": "$.monitoring_result.current_bitrate",
        "sns_topic_arn": "${sns_topic_arn}",
        "alert_priority": "MEDIUM"
      },
      "Next": "LogMediumIssue"
    },
    "LogCriticalIssue": {
      "Type": "Pass",
      "Parameters": {
        "status": "CRITICAL_ALERT_SENT",
        "flow_name.$": "$.monitoring_result.flow_name",
        "issue_count.$": "$.monitoring_result.issues[*].metric",
        "timestamp.$": "$.monitoring_result.timestamp",
        "message": "Critical alert sent for MediaConnect flow"
      },
      "End": true
    },
    "LogHighIssue": {
      "Type": "Pass",
      "Parameters": {
        "status": "HIGH_ALERT_SENT",
        "flow_name.$": "$.monitoring_result.flow_name",
        "issue_count.$": "$.monitoring_result.issues[*].metric",
        "timestamp.$": "$.monitoring_result.timestamp",
        "message": "High priority alert sent for MediaConnect flow"
      },
      "End": true
    },
    "LogMediumIssue": {
      "Type": "Pass",
      "Parameters": {
        "status": "MEDIUM_ALERT_SENT",
        "flow_name.$": "$.monitoring_result.flow_name",
        "issue_count.$": "$.monitoring_result.issues[*].metric",
        "timestamp.$": "$.monitoring_result.timestamp",
        "message": "Medium priority alert sent for MediaConnect flow"
      },
      "End": true
    },
    "HealthyFlow": {
      "Type": "Pass",
      "Parameters": {
        "status": "HEALTHY",
        "flow_name.$": "$.monitoring_result.flow_name",
        "timestamp.$": "$.monitoring_result.timestamp",
        "current_bitrate.$": "$.monitoring_result.current_bitrate",
        "message": "Flow is healthy - no action required"
      },
      "End": true
    },
    "FlowStandby": {
      "Type": "Pass",
      "Parameters": {
        "status": "STANDBY",
        "flow_name.$": "$.monitoring_result.flow_name",
        "timestamp.$": "$.monitoring_result.timestamp",
        "message": "Flow is in standby mode - monitoring paused"
      },
      "End": true
    },
    "MonitoringFailed": {
      "Type": "Pass",
      "Parameters": {
        "status": "MONITORING_ERROR",
        "flow_arn.$": "$.flow_arn",
        "error.$": "$.error",
        "message": "Failed to monitor MediaConnect flow - check Lambda logs"
      },
      "End": true
    }
  }
}