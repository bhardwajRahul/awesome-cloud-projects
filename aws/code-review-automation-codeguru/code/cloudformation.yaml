AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Code Review Automation with CodeGuru - This template creates the infrastructure
  for automated code review using Amazon CodeGuru Reviewer and CodeGuru Profiler with
  CodeCommit repository integration. Includes IAM roles, repository setup, and profiling
  groups for comprehensive code quality automation.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Repository Configuration"
        Parameters:
          - RepositoryName
          - RepositoryDescription
      - Label:
          default: "Profiling Configuration"
        Parameters:
          - ProfilerGroupName
          - ComputePlatform
      - Label:
          default: "Security Configuration"
        Parameters:
          - IAMRoleName
          - EnableCodeGuruReviewer
          - EnableCodeGuruProfiler
      - Label:
          default: "Tagging Configuration"
        Parameters:
          - Environment
          - ProjectName
          - CostCenter
    ParameterLabels:
      RepositoryName:
        default: "Repository Name"
      RepositoryDescription:
        default: "Repository Description"
      ProfilerGroupName:
        default: "Profiler Group Name"
      ComputePlatform:
        default: "Compute Platform"
      IAMRoleName:
        default: "IAM Role Name"
      EnableCodeGuruReviewer:
        default: "Enable CodeGuru Reviewer"
      EnableCodeGuruProfiler:
        default: "Enable CodeGuru Profiler"
      Environment:
        default: "Environment"
      ProjectName:
        default: "Project Name"
      CostCenter:
        default: "Cost Center"

Parameters:
  RepositoryName:
    Type: String
    Description: "Name of the CodeCommit repository for CodeGuru analysis"
    Default: "codeguru-demo-repo"
    AllowedPattern: "^[a-zA-Z0-9._-]{1,100}$"
    ConstraintDescription: "Repository name must be 1-100 characters and contain only alphanumeric characters, periods, underscores, and hyphens"

  RepositoryDescription:
    Type: String
    Description: "Description of the CodeCommit repository"
    Default: "Demo repository for CodeGuru automation and code quality analysis"
    MaxLength: 1000

  ProfilerGroupName:
    Type: String
    Description: "Name of the CodeGuru Profiler group"
    Default: "demo-profiler-group"
    AllowedPattern: "^[a-zA-Z0-9._-]{1,255}$"
    ConstraintDescription: "Profiler group name must be 1-255 characters and contain only alphanumeric characters, periods, underscores, and hyphens"

  ComputePlatform:
    Type: String
    Description: "Compute platform for the profiling group"
    Default: "Default"
    AllowedValues:
      - "Default"
      - "AWSLambda"
    ConstraintDescription: "Must be either Default or AWSLambda"

  IAMRoleName:
    Type: String
    Description: "Name of the IAM role for CodeGuru services"
    Default: "CodeGuruDemoRole"
    AllowedPattern: "^[a-zA-Z0-9+=,.@_-]{1,64}$"
    ConstraintDescription: "Role name must be 1-64 characters and contain only alphanumeric characters and +=,.@_-"

  EnableCodeGuruReviewer:
    Type: String
    Description: "Enable CodeGuru Reviewer for the repository"
    Default: "true"
    AllowedValues:
      - "true"
      - "false"

  EnableCodeGuruProfiler:
    Type: String
    Description: "Enable CodeGuru Profiler group creation"
    Default: "true"
    AllowedValues:
      - "true"
      - "false"

  Environment:
    Type: String
    Description: "Environment name (e.g., dev, staging, production)"
    Default: "dev"
    AllowedValues:
      - "dev"
      - "staging"
      - "production"
      - "demo"

  ProjectName:
    Type: String
    Description: "Name of the project for resource tagging"
    Default: "codeguru-automation"
    AllowedPattern: "^[a-zA-Z0-9._-]{1,50}$"

  CostCenter:
    Type: String
    Description: "Cost center for billing and resource allocation"
    Default: "engineering"
    AllowedPattern: "^[a-zA-Z0-9._-]{1,50}$"

Conditions:
  CreateCodeGuruReviewer: !Equals [!Ref EnableCodeGuruReviewer, "true"]
  CreateCodeGuruProfiler: !Equals [!Ref EnableCodeGuruProfiler, "true"]
  IsProductionEnvironment: !Equals [!Ref Environment, "production"]

Resources:
  # IAM Role for CodeGuru Reviewer Service
  CodeGuruReviewerServiceRole:
    Type: AWS::IAM::Role
    Condition: CreateCodeGuruReviewer
    Properties:
      RoleName: !Sub "${IAMRoleName}-${AWS::StackName}"
      Description: "Service role for CodeGuru Reviewer to access repository and provide automated code reviews"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - codeguru-reviewer.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonCodeGuruReviewerServiceRolePolicy
      Tags:
        - Key: Name
          Value: !Sub "${IAMRoleName}-${AWS::StackName}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: ManagedBy
          Value: CloudFormation

  # IAM Role for CodeGuru Profiler Agent
  CodeGuruProfilerAgentRole:
    Type: AWS::IAM::Role
    Condition: CreateCodeGuruProfiler
    Properties:
      RoleName: !Sub "${IAMRoleName}-Profiler-${AWS::StackName}"
      Description: "Role for applications to submit profiling data to CodeGuru Profiler"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
      Policies:
        - PolicyName: CodeGuruProfilerAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codeguru-profiler:ConfigureAgent
                  - codeguru-profiler:PostAgentProfile
                  - codeguru-profiler:CreateProfilingGroup
                  - codeguru-profiler:DescribeProfilingGroup
                  - codeguru-profiler:GetPolicy
                  - codeguru-profiler:ListProfileTimes
                Resource: 
                  - !Sub "arn:aws:codeguru-profiler:${AWS::Region}:${AWS::AccountId}:profilingGroup/${ProfilerGroupName}"
      Tags:
        - Key: Name
          Value: !Sub "${IAMRoleName}-Profiler-${AWS::StackName}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: ManagedBy
          Value: CloudFormation

  # CodeCommit Repository
  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref RepositoryName
      RepositoryDescription: !Ref RepositoryDescription
      Code:
        S3:
          Bucket: !Ref CodeStorageBucket
          Key: "initial-code.zip"
        BranchName: main
      Triggers:
        - Name: CodeGuruReviewTrigger
          DestinationArn: !GetAtt CodeReviewNotificationTopic.TopicArn
          Events:
            - createReference
            - updateReference
          Branches:
            - main
            - develop
            - feature/*
      Tags:
        - Key: Name
          Value: !Ref RepositoryName
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: ManagedBy
          Value: CloudFormation
        - Key: CodeGuruEnabled
          Value: !Ref EnableCodeGuruReviewer

  # S3 Bucket for storing initial code and artifacts
  CodeStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "codeguru-demo-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: !If [IsProductionEnvironment, "Enabled", "Suspended"]
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
          - Id: TransitionToIA
            Status: Enabled
            Transition:
              StorageClass: STANDARD_IA
              TransitionInDays: 30
          - Id: TransitionToGlacier
            Status: !If [IsProductionEnvironment, "Enabled", "Disabled"]
            Transition:
              StorageClass: GLACIER
              TransitionInDays: 365
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref CodeReviewNotificationTopic
            Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: "code-reviews/"
      Tags:
        - Key: Name
          Value: !Sub "codeguru-demo-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: ManagedBy
          Value: CloudFormation

  # S3 Bucket Policy
  CodeStorageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodeStorageBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "${CodeStorageBucket}/*"
              - !Ref CodeStorageBucket
            Condition:
              Bool:
                "aws:SecureTransport": "false"
          - Sid: AllowCodeCommitAccess
            Effect: Allow
            Principal:
              Service: codecommit.amazonaws.com
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: !Sub "${CodeStorageBucket}/*"
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId

  # CodeGuru Profiler Group
  CodeGuruProfilerGroup:
    Type: AWS::CodeGuruProfiler::ProfilingGroup
    Condition: CreateCodeGuruProfiler
    Properties:
      ProfilingGroupName: !Ref ProfilerGroupName
      ComputePlatform: !Ref ComputePlatform
      AgentPermissions:
        Principals:
          - !GetAtt CodeGuruProfilerAgentRole.Arn
      Tags:
        - Key: Name
          Value: !Ref ProfilerGroupName
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: ManagedBy
          Value: CloudFormation

  # SNS Topic for notifications
  CodeReviewNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "CodeGuru-Notifications-${AWS::StackName}"
      DisplayName: "CodeGuru Code Review Notifications"
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Name
          Value: !Sub "CodeGuru-Notifications-${AWS::StackName}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: ManagedBy
          Value: CloudFormation

  # SNS Topic Policy
  CodeReviewNotificationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref CodeReviewNotificationTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCodeCommitPublish
            Effect: Allow
            Principal:
              Service: codecommit.amazonaws.com
            Action: sns:Publish
            Resource: !Ref CodeReviewNotificationTopic
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
          - Sid: AllowS3Publish
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sns:Publish
            Resource: !Ref CodeReviewNotificationTopic
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId

  # CloudWatch Log Group for monitoring
  CodeGuruLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codeguru/${AWS::StackName}"
      RetentionInDays: !If [IsProductionEnvironment, 30, 7]
      Tags:
        - Key: Name
          Value: !Sub "/aws/codeguru/${AWS::StackName}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: ManagedBy
          Value: CloudFormation

  # Lambda function for automated quality gates
  QualityGateLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "CodeGuru-QualityGate-${AWS::StackName}"
      Description: "Automated quality gate function for CodeGuru recommendations"
      Runtime: python3.11
      Handler: index.lambda_handler
      Timeout: 300
      MemorySize: 256
      Role: !GetAtt QualityGateLambdaRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref CodeReviewNotificationTopic
          LOG_GROUP_NAME: !Ref CodeGuruLogGroup
          HIGH_SEVERITY_THRESHOLD: "0"
          MEDIUM_SEVERITY_THRESHOLD: "5"
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          codeguru_client = boto3.client('codeguru-reviewer')
          sns_client = boto3.client('sns')
          
          def lambda_handler(event, context):
              try:
                  # Extract code review ARN from event
                  code_review_arn = event.get('codeReviewArn')
                  
                  if not code_review_arn:
                      logger.error("No code review ARN provided")
                      return {'statusCode': 400, 'body': 'No code review ARN provided'}
                  
                  # Get recommendations
                  response = codeguru_client.list_recommendations(
                      codeReviewArn=code_review_arn
                  )
                  
                  recommendations = response.get('recommendationSummaries', [])
                  
                  # Count by severity
                  severity_counts = {'HIGH': 0, 'MEDIUM': 0, 'LOW': 0, 'INFO': 0}
                  for rec in recommendations:
                      severity = rec.get('severity', 'INFO')
                      severity_counts[severity] = severity_counts.get(severity, 0) + 1
                  
                  # Quality gate logic
                  high_threshold = int(os.environ.get('HIGH_SEVERITY_THRESHOLD', '0'))
                  medium_threshold = int(os.environ.get('MEDIUM_SEVERITY_THRESHOLD', '5'))
                  
                  gate_passed = (
                      severity_counts['HIGH'] <= high_threshold and
                      severity_counts['MEDIUM'] <= medium_threshold
                  )
                  
                  # Send notification
                  message = {
                      'codeReviewArn': code_review_arn,
                      'qualityGatePassed': gate_passed,
                      'severityCounts': severity_counts,
                      'thresholds': {
                          'high': high_threshold,
                          'medium': medium_threshold
                      }
                  }
                  
                  sns_client.publish(
                      TopicArn=os.environ['SNS_TOPIC_ARN'],
                      Subject=f"CodeGuru Quality Gate {'Passed' if gate_passed else 'Failed'}",
                      Message=json.dumps(message, indent=2)
                  )
                  
                  logger.info(f"Quality gate {'passed' if gate_passed else 'failed'}: {severity_counts}")
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'qualityGatePassed': gate_passed,
                          'severityCounts': severity_counts
                      })
                  }
                  
              except Exception as e:
                  logger.error(f"Error processing quality gate: {str(e)}")
                  return {'statusCode': 500, 'body': f'Error: {str(e)}'}
      Tags:
        - Key: Name
          Value: !Sub "CodeGuru-QualityGate-${AWS::StackName}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: ManagedBy
          Value: CloudFormation

  # IAM Role for Quality Gate Lambda
  QualityGateLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "CodeGuru-QualityGate-Role-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CodeGuruQualityGatePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codeguru-reviewer:ListRecommendations
                  - codeguru-reviewer:DescribeCodeReview
                  - codeguru-reviewer:PutRecommendationFeedback
                Resource: "*"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref CodeReviewNotificationTopic
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "${CodeGuruLogGroup}:*"
      Tags:
        - Key: Name
          Value: !Sub "CodeGuru-QualityGate-Role-${AWS::StackName}"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: ManagedBy
          Value: CloudFormation

  # CloudWatch Dashboard for monitoring
  CodeGuruDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "CodeGuru-Monitoring-${AWS::StackName}"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${QualityGateLambdaFunction}" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Invocations", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Quality Gate Lambda Metrics"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '${CodeGuruLogGroup}' | fields @timestamp, @message\n| sort @timestamp desc\n| limit 100",
                "region": "${AWS::Region}",
                "title": "CodeGuru Activity Logs"
              }
            }
          ]
        }

Outputs:
  RepositoryCloneUrl:
    Description: "HTTPS clone URL for the CodeCommit repository"
    Value: !GetAtt CodeCommitRepository.CloneUrlHttp
    Export:
      Name: !Sub "${AWS::StackName}-RepositoryCloneUrl"

  RepositoryArn:
    Description: "ARN of the CodeCommit repository"
    Value: !GetAtt CodeCommitRepository.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RepositoryArn"

  RepositoryName:
    Description: "Name of the CodeCommit repository"
    Value: !Ref CodeCommitRepository
    Export:
      Name: !Sub "${AWS::StackName}-RepositoryName"

  ProfilerGroupName:
    Condition: CreateCodeGuruProfiler
    Description: "Name of the CodeGuru Profiler group"
    Value: !Ref CodeGuruProfilerGroup
    Export:
      Name: !Sub "${AWS::StackName}-ProfilerGroupName"

  ProfilerGroupArn:
    Condition: CreateCodeGuruProfiler
    Description: "ARN of the CodeGuru Profiler group"
    Value: !GetAtt CodeGuruProfilerGroup.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ProfilerGroupArn"

  CodeGuruReviewerRoleArn:
    Condition: CreateCodeGuruReviewer
    Description: "ARN of the CodeGuru Reviewer service role"
    Value: !GetAtt CodeGuruReviewerServiceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CodeGuruReviewerRoleArn"

  CodeGuruProfilerRoleArn:
    Condition: CreateCodeGuruProfiler
    Description: "ARN of the CodeGuru Profiler agent role"
    Value: !GetAtt CodeGuruProfilerAgentRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CodeGuruProfilerRoleArn"

  NotificationTopicArn:
    Description: "ARN of the SNS topic for CodeGuru notifications"
    Value: !Ref CodeReviewNotificationTopic
    Export:
      Name: !Sub "${AWS::StackName}-NotificationTopicArn"

  StorageBucketName:
    Description: "Name of the S3 bucket for code storage"
    Value: !Ref CodeStorageBucket
    Export:
      Name: !Sub "${AWS::StackName}-StorageBucketName"

  QualityGateFunctionArn:
    Description: "ARN of the quality gate Lambda function"
    Value: !GetAtt QualityGateLambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-QualityGateFunctionArn"

  DashboardUrl:
    Description: "URL of the CloudWatch dashboard for monitoring"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${CodeGuruDashboard}"
    Export:
      Name: !Sub "${AWS::StackName}-DashboardUrl"

  CodeGuruConsoleUrl:
    Description: "URL to access CodeGuru Reviewer console"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/codeguru/reviewer/home?region=${AWS::Region}"
    Export:
      Name: !Sub "${AWS::StackName}-CodeGuruConsoleUrl"

  ProfilerConsoleUrl:
    Condition: CreateCodeGuruProfiler
    Description: "URL to access CodeGuru Profiler console"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/codeguru/profiler/profile-groups/${ProfilerGroupName}?region=${AWS::Region}"
    Export:
      Name: !Sub "${AWS::StackName}-ProfilerConsoleUrl"

  NextSteps:
    Description: "Next steps for setting up CodeGuru automation"
    Value: !Sub |
      1. Clone repository: git clone ${CodeCommitRepository.CloneUrlHttp}
      2. Associate repository with CodeGuru Reviewer via CLI or console
      3. Configure applications to use profiler group: ${ProfilerGroupName}
      4. Set environment variables: AWS_CODEGURU_PROFILER_TARGET_REGION=${AWS::Region}
      5. Monitor progress in CloudWatch dashboard: ${CodeGuruDashboard}