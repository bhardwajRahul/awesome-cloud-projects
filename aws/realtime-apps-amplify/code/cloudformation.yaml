AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Full-Stack Real-Time Applications with AWS Amplify and AppSync GraphQL Subscriptions.
  This template creates a comprehensive real-time application platform with authentication,
  GraphQL API with subscriptions, DynamoDB tables, and Lambda functions for custom operations.
  
  **Cost Estimate**: $15-30/month for real-time API requests, DynamoDB reads/writes, and Lambda executions
  
  **Services**: AWS Amplify, AppSync, Amazon Cognito, DynamoDB, Lambda, CloudWatch, IAM

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Application Configuration"
        Parameters:
          - ApplicationName
          - Environment
          - DomainName
      - Label:
          default: "Authentication Settings"
        Parameters:
          - AdminUserEmail
          - EnableUserGroups
          - RequireEmailVerification
      - Label:
          default: "Real-Time Configuration"
        Parameters:
          - EnableDataStore
          - ConflictResolution
          - EnableAdvancedSecurity
      - Label:
          default: "Performance & Monitoring"
        Parameters:
          - DynamoDBBillingMode
          - LambdaMemorySize
          - EnableXRayTracing
          - EnableDetailedMonitoring
      - Label:
          default: "Security Configuration"
        Parameters:
          - EnableEncryption
          - EnableBackups
          - BackupRetentionDays
    ParameterLabels:
      ApplicationName:
        default: "Application Name"
      Environment:
        default: "Environment"
      DomainName:
        default: "Custom Domain Name"
      AdminUserEmail:
        default: "Admin User Email"
      EnableUserGroups:
        default: "Enable User Groups"
      RequireEmailVerification:
        default: "Require Email Verification"
      EnableDataStore:
        default: "Enable Offline DataStore"
      ConflictResolution:
        default: "Conflict Resolution Strategy"
      EnableAdvancedSecurity:
        default: "Enable Advanced Security"
      DynamoDBBillingMode:
        default: "DynamoDB Billing Mode"
      LambdaMemorySize:
        default: "Lambda Memory Size"
      EnableXRayTracing:
        default: "Enable X-Ray Tracing"
      EnableDetailedMonitoring:
        default: "Enable Detailed Monitoring"
      EnableEncryption:
        default: "Enable Encryption"
      EnableBackups:
        default: "Enable Automated Backups"
      BackupRetentionDays:
        default: "Backup Retention Days"

Parameters:
  ApplicationName:
    Type: String
    Default: "realtime-chat-app"
    Description: "Name of the real-time application (lowercase, alphanumeric, and hyphens only)"
    AllowedPattern: "^[a-z0-9-]+$"
    ConstraintDescription: "Must contain only lowercase letters, numbers, and hyphens"
    MinLength: 3
    MaxLength: 63

  Environment:
    Type: String
    Default: "dev"
    AllowedValues:
      - "dev"
      - "staging"
      - "prod"
    Description: "Environment for the application deployment"

  DomainName:
    Type: String
    Default: ""
    Description: "Optional custom domain name for the application (leave empty to use default)"

  AdminUserEmail:
    Type: String
    Default: ""
    Description: "Email address for the initial admin user (optional)"
    AllowedPattern: "^$|^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
    ConstraintDescription: "Must be a valid email address"

  EnableUserGroups:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "Enable user groups for role-based access control"

  RequireEmailVerification:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "Require email verification for user registration"

  EnableDataStore:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "Enable offline-first DataStore capabilities"

  ConflictResolution:
    Type: String
    Default: "AUTOMERGE"
    AllowedValues:
      - "AUTOMERGE"
      - "LAMBDA"
      - "OPTIMISTIC_CONCURRENCY"
    Description: "Conflict resolution strategy for DataStore"

  EnableAdvancedSecurity:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "Enable advanced security features for Cognito"

  DynamoDBBillingMode:
    Type: String
    Default: "PAY_PER_REQUEST"
    AllowedValues:
      - "PAY_PER_REQUEST"
      - "PROVISIONED"
    Description: "DynamoDB billing mode for cost optimization"

  LambdaMemorySize:
    Type: Number
    Default: 256
    MinValue: 128
    MaxValue: 3008
    Description: "Memory size for Lambda functions (MB)"

  EnableXRayTracing:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "Enable X-Ray tracing for Lambda functions"

  EnableDetailedMonitoring:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "Enable detailed CloudWatch monitoring"

  EnableEncryption:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "Enable encryption for data at rest"

  EnableBackups:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "Enable automated backups for DynamoDB tables"

  BackupRetentionDays:
    Type: Number
    Default: 7
    MinValue: 1
    MaxValue: 35
    Description: "Number of days to retain automated backups"

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, ""]]
  HasAdminEmail: !Not [!Equals [!Ref AdminUserEmail, ""]]
  EnableUserGroupsCondition: !Equals [!Ref EnableUserGroups, "true"]
  RequireEmailVerificationCondition: !Equals [!Ref RequireEmailVerification, "true"]
  EnableDataStoreCondition: !Equals [!Ref EnableDataStore, "true"]
  EnableAdvancedSecurityCondition: !Equals [!Ref EnableAdvancedSecurity, "true"]
  EnableXRayTracingCondition: !Equals [!Ref EnableXRayTracing, "true"]
  EnableDetailedMonitoringCondition: !Equals [!Ref EnableDetailedMonitoring, "true"]
  EnableEncryptionCondition: !Equals [!Ref EnableEncryption, "true"]
  EnableBackupsCondition: !Equals [!Ref EnableBackups, "true"]
  IsProduction: !Equals [!Ref Environment, "prod"]

Resources:
  # ============================================================================
  # KMS Key for Encryption
  # ============================================================================
  EncryptionKey:
    Type: AWS::KMS::Key
    Condition: EnableEncryptionCondition
    Properties:
      Description: !Sub "Encryption key for ${ApplicationName} real-time application"
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Sid: Allow CloudWatch Logs
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
          - Sid: Allow DynamoDB
            Effect: Allow
            Principal:
              Service: dynamodb.amazonaws.com
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-encryption-key"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName

  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Condition: EnableEncryptionCondition
    Properties:
      AliasName: !Sub "alias/${ApplicationName}-encryption-key"
      TargetKeyId: !Ref EncryptionKey

  # ============================================================================
  # Amazon Cognito User Pool for Authentication
  # ============================================================================
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${ApplicationName}-user-pool"
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: preferred_username
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7
      MfaConfiguration: !If
        - EnableAdvancedSecurityCondition
        - "OPTIONAL"
        - "OFF"
      EnabledMfas: !If
        - EnableAdvancedSecurityCondition
        - - "SMS_MFA"
          - "SOFTWARE_TOKEN_MFA"
        - !Ref "AWS::NoValue"
      SmsConfiguration: !If
        - EnableAdvancedSecurityCondition
        - ExternalId: !Sub "${ApplicationName}-sms-external-id"
          SnsCallerArn: !GetAtt CognitoSMSRole.Arn
        - !Ref "AWS::NoValue"
      AutoVerifiedAttributes: !If
        - RequireEmailVerificationCondition
        - - email
        - !Ref "AWS::NoValue"
      EmailVerificationSubject: !Sub "Verify your email for ${ApplicationName}"
      EmailVerificationMessage: "Your verification code is {####}"
      SmsVerificationMessage: "Your verification code is {####}"
      UserPoolAddOns: !If
        - EnableAdvancedSecurityCondition
        - AdvancedSecurityMode: "ENFORCED"
        - !Ref "AWS::NoValue"
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: true
        DeviceOnlyRememberedOnUserPrompt: false
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageAction: "EMAIL"
        TemporaryPasswordValidityDays: 7
      UserPoolTags:
        Name: !Sub "${ApplicationName}-user-pool"
        Environment: !Ref Environment
        Application: !Ref ApplicationName

  # User Pool Client for Web Applications
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${ApplicationName}-web-client"
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      PreventUserExistenceErrors: "ENABLED"
      ReadAttributes:
        - email
        - given_name
        - family_name
        - preferred_username
      WriteAttributes:
        - email
        - given_name
        - family_name
        - preferred_username
      RefreshTokenValidity: 30
      AccessTokenValidity: 60
      IdTokenValidity: 60
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      SupportedIdentityProviders:
        - COGNITO

  # User Pool Domain
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${ApplicationName}-${Environment}-${AWS::AccountId}"
      UserPoolId: !Ref UserPool
      CustomDomainConfig: !If
        - HasCustomDomain
        - CertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/*"
        - !Ref "AWS::NoValue"

  # Identity Pool for Federated Identities
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${ApplicationName}-identity-pool"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
          ServerSideTokenCheck: true

  # Identity Pool Roles
  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn
        unauthenticated: !GetAtt CognitoUnauthenticatedRole.Arn

  # User Groups for Role-Based Access Control
  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Condition: EnableUserGroupsCondition
    Properties:
      GroupName: "Administrators"
      Description: "Administrator group with full access"
      UserPoolId: !Ref UserPool
      Precedence: 1
      RoleArn: !GetAtt CognitoAdminRole.Arn

  ModeratorsUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Condition: EnableUserGroupsCondition
    Properties:
      GroupName: "Moderators"
      Description: "Moderator group with content management access"
      UserPoolId: !Ref UserPool
      Precedence: 2
      RoleArn: !GetAtt CognitoModeratorRole.Arn

  UsersUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Condition: EnableUserGroupsCondition
    Properties:
      GroupName: "Users"
      Description: "Regular user group with standard access"
      UserPoolId: !Ref UserPool
      Precedence: 3
      RoleArn: !GetAtt CognitoUserRole.Arn

  # ============================================================================
  # IAM Roles for Cognito
  # ============================================================================
  CognitoSMSRole:
    Type: AWS::IAM::Role
    Condition: EnableAdvancedSecurityCondition
    Properties:
      RoleName: !Sub "${ApplicationName}-cognito-sms-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cognito-idp.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Sub "${ApplicationName}-sms-external-id"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonCognitoIdpEmailServiceRolePolicy
      Policies:
        - PolicyName: CognitoSMSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: "*"

  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ApplicationName}-cognito-authenticated-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: CognitoAuthenticatedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - appsync:GraphQL
                Resource: !Sub "${GraphQLAPI.Arn}/*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "${S3Bucket.Arn}/public/*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "${S3Bucket.Arn}/protected/$${cognito-identity.amazonaws.com:sub}/*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "${S3Bucket.Arn}/private/$${cognito-identity.amazonaws.com:sub}/*"

  CognitoUnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ApplicationName}-cognito-unauthenticated-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
        - PolicyName: CognitoUnauthenticatedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-sync:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "${S3Bucket.Arn}/public/*"

  CognitoAdminRole:
    Type: AWS::IAM::Role
    Condition: EnableUserGroupsCondition
    Properties:
      RoleName: !Sub "${ApplicationName}-cognito-admin-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: CognitoAdminPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - appsync:GraphQL
                Resource: !Sub "${GraphQLAPI.Arn}/*"
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: 
                  - !GetAtt ChatRoomTable.Arn
                  - !GetAtt MessageTable.Arn
                  - !GetAtt ReactionTable.Arn
                  - !GetAtt UserPresenceTable.Arn
                  - !GetAtt NotificationTable.Arn

  CognitoModeratorRole:
    Type: AWS::IAM::Role
    Condition: EnableUserGroupsCondition
    Properties:
      RoleName: !Sub "${ApplicationName}-cognito-moderator-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: CognitoModeratorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - appsync:GraphQL
                Resource: !Sub "${GraphQLAPI.Arn}/*"
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !GetAtt ChatRoomTable.Arn
                  - !GetAtt MessageTable.Arn
                  - !GetAtt ReactionTable.Arn

  CognitoUserRole:
    Type: AWS::IAM::Role
    Condition: EnableUserGroupsCondition
    Properties:
      RoleName: !Sub "${ApplicationName}-cognito-user-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: CognitoUserPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - appsync:GraphQL
                Resource: !Sub "${GraphQLAPI.Arn}/*"

  # ============================================================================
  # S3 Bucket for File Storage
  # ============================================================================
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ApplicationName}-storage-${Environment}-${AWS::AccountId}"
      BucketEncryption: !If
        - EnableEncryptionCondition
        - ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: aws:kms
                KMSMasterKeyID: !GetAtt EncryptionKey.Arn
              BucketKeyEnabled: true
        - !Ref "AWS::NoValue"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - x-amz-server-side-encryption
              - x-amz-request-id
              - x-amz-id-2
            MaxAge: 3000
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt FileProcessingLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: uploads/
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
          - Id: TransitionToGlacier
            Status: Enabled
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 90
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-storage-bucket"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName

  # ============================================================================
  # DynamoDB Tables
  # ============================================================================
  ChatRoomTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ApplicationName}-ChatRoom-${Environment}"
      BillingMode: !Ref DynamoDBBillingMode
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        - AttributeName: lastActivity
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: byCreatedAt
          KeySchema:
            - AttributeName: createdAt
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: byLastActivity
          KeySchema:
            - AttributeName: lastActivity
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      SSESpecification: !If
        - EnableEncryptionCondition
        - SSEEnabled: true
          KMSMasterKeyId: !Ref EncryptionKey
        - !Ref "AWS::NoValue"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BackupPolicy: !If
        - EnableBackupsCondition
        - PointInTimeRecoveryEnabled: true
        - !Ref "AWS::NoValue"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-ChatRoom-table"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName

  MessageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ApplicationName}-Message-${Environment}"
      BillingMode: !Ref DynamoDBBillingMode
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: chatRoomId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        - AttributeName: replyToId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: byRoom
          KeySchema:
            - AttributeName: chatRoomId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: byReply
          KeySchema:
            - AttributeName: replyToId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      SSESpecification: !If
        - EnableEncryptionCondition
        - SSEEnabled: true
          KMSMasterKeyId: !Ref EncryptionKey
        - !Ref "AWS::NoValue"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BackupPolicy: !If
        - EnableBackupsCondition
        - PointInTimeRecoveryEnabled: true
        - !Ref "AWS::NoValue"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-Message-table"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName

  ReactionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ApplicationName}-Reaction-${Environment}"
      BillingMode: !Ref DynamoDBBillingMode
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: messageId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: byMessage
          KeySchema:
            - AttributeName: messageId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      SSESpecification: !If
        - EnableEncryptionCondition
        - SSEEnabled: true
          KMSMasterKeyId: !Ref EncryptionKey
        - !Ref "AWS::NoValue"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BackupPolicy: !If
        - EnableBackupsCondition
        - PointInTimeRecoveryEnabled: true
        - !Ref "AWS::NoValue"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-Reaction-table"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName

  UserPresenceTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ApplicationName}-UserPresence-${Environment}"
      BillingMode: !Ref DynamoDBBillingMode
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: lastSeen
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: byUser
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: lastSeen
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      SSESpecification: !If
        - EnableEncryptionCondition
        - SSEEnabled: true
          KMSMasterKeyId: !Ref EncryptionKey
        - !Ref "AWS::NoValue"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BackupPolicy: !If
        - EnableBackupsCondition
        - PointInTimeRecoveryEnabled: true
        - !Ref "AWS::NoValue"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-UserPresence-table"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName

  NotificationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ApplicationName}-Notification-${Environment}"
      BillingMode: !Ref DynamoDBBillingMode
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: byUser
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      SSESpecification: !If
        - EnableEncryptionCondition
        - SSEEnabled: true
          KMSMasterKeyId: !Ref EncryptionKey
        - !Ref "AWS::NoValue"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BackupPolicy: !If
        - EnableBackupsCondition
        - PointInTimeRecoveryEnabled: true
        - !Ref "AWS::NoValue"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-Notification-table"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName

  # ============================================================================
  # AWS AppSync GraphQL API
  # ============================================================================
  GraphQLAPI:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub "${ApplicationName}-graphql-api"
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        UserPoolId: !Ref UserPool
        AwsRegion: !Ref AWS::Region
        DefaultAction: ALLOW
      AdditionalAuthenticationProviders:
        - AuthenticationType: API_KEY
          ApiKeyConfig:
            ApiKeyExpirationDays: 365
            Description: "API Key for public access"
      LogConfig: !If
        - EnableDetailedMonitoringCondition
        - CloudWatchLogsRoleArn: !GetAtt AppSyncLogsRole.Arn
          ExcludeVerboseContent: false
          FieldLogLevel: ALL
        - !Ref "AWS::NoValue"
      XrayEnabled: !If
        - EnableXRayTracingCondition
        - true
        - false
      Tags:
        Name: !Sub "${ApplicationName}-graphql-api"
        Environment: !Ref Environment
        Application: !Ref ApplicationName

  # GraphQL Schema
  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      Definition: |
        type ChatRoom @aws_api_key @aws_cognito_user_pools {
          id: ID!
          name: String!
          description: String
          isPrivate: Boolean!
          createdBy: String!
          members: [String]
          lastActivity: AWSDateTime
          messageCount: Int
          messages: [Message] @connection(keyName: "byRoom", fields: ["id"])
          createdAt: AWSDateTime!
          updatedAt: AWSDateTime!
        }
        
        type Message @aws_api_key @aws_cognito_user_pools {
          id: ID!
          content: String!
          messageType: MessageType!
          author: String!
          authorName: String!
          chatRoomId: ID! @index(name: "byRoom", sortKeyFields: ["createdAt"])
          chatRoom: ChatRoom @connection(fields: ["chatRoomId"])
          replyToId: ID @index(name: "byReply", sortKeyFields: ["createdAt"])
          replyTo: Message @connection(fields: ["replyToId"])
          replies: [Message] @connection(keyName: "byReply", fields: ["id"])
          reactions: [Reaction] @connection(keyName: "byMessage", fields: ["id"])
          attachments: [String]
          editedAt: AWSDateTime
          isEdited: Boolean
          createdAt: AWSDateTime!
          updatedAt: AWSDateTime!
        }
        
        type Reaction @aws_api_key @aws_cognito_user_pools {
          id: ID!
          emoji: String!
          author: String!
          authorName: String!
          messageId: ID! @index(name: "byMessage", sortKeyFields: ["createdAt"])
          message: Message @connection(fields: ["messageId"])
          createdAt: AWSDateTime!
          updatedAt: AWSDateTime!
        }
        
        type UserPresence @aws_api_key @aws_cognito_user_pools {
          id: ID!
          userId: String!
          userName: String!
          status: PresenceStatus!
          lastSeen: AWSDateTime!
          currentRoom: String
          deviceInfo: String
          createdAt: AWSDateTime!
          updatedAt: AWSDateTime!
        }
        
        type Notification @aws_api_key @aws_cognito_user_pools {
          id: ID!
          type: NotificationType!
          title: String!
          message: String!
          userId: String!
          isRead: Boolean
          relatedId: String
          actionUrl: String
          createdAt: AWSDateTime!
          updatedAt: AWSDateTime!
        }
        
        enum MessageType {
          TEXT
          IMAGE
          FILE
          SYSTEM
          TYPING
        }
        
        enum PresenceStatus {
          ONLINE
          AWAY
          BUSY
          OFFLINE
        }
        
        enum NotificationType {
          MESSAGE
          MENTION
          ROOM_INVITE
          SYSTEM
        }
        
        type TypingIndicator {
          userId: String!
          userName: String!
          chatRoomId: ID!
          timestamp: AWSDateTime!
        }
        
        type Query {
          getChatRoom(id: ID!): ChatRoom @aws_api_key @aws_cognito_user_pools
          listChatRooms(filter: ModelChatRoomFilterInput, limit: Int, nextToken: String): ModelChatRoomConnection @aws_api_key @aws_cognito_user_pools
          getMessage(id: ID!): Message @aws_api_key @aws_cognito_user_pools
          listMessages(filter: ModelMessageFilterInput, limit: Int, nextToken: String): ModelMessageConnection @aws_api_key @aws_cognito_user_pools
          messagesByRoom(chatRoomId: ID!, sortDirection: ModelSortDirection, filter: ModelMessageFilterInput, limit: Int, nextToken: String): ModelMessageConnection @aws_api_key @aws_cognito_user_pools
          getReaction(id: ID!): Reaction @aws_api_key @aws_cognito_user_pools
          listReactions(filter: ModelReactionFilterInput, limit: Int, nextToken: String): ModelReactionConnection @aws_api_key @aws_cognito_user_pools
          reactionsByMessage(messageId: ID!, sortDirection: ModelSortDirection, filter: ModelReactionFilterInput, limit: Int, nextToken: String): ModelReactionConnection @aws_api_key @aws_cognito_user_pools
          getUserPresence(id: ID!): UserPresence @aws_api_key @aws_cognito_user_pools
          listUserPresences(filter: ModelUserPresenceFilterInput, limit: Int, nextToken: String): ModelUserPresenceConnection @aws_api_key @aws_cognito_user_pools
          getNotification(id: ID!): Notification @aws_api_key @aws_cognito_user_pools
          listNotifications(filter: ModelNotificationFilterInput, limit: Int, nextToken: String): ModelNotificationConnection @aws_api_key @aws_cognito_user_pools
        }
        
        type Mutation {
          createChatRoom(input: CreateChatRoomInput!, condition: ModelChatRoomConditionInput): ChatRoom @aws_api_key @aws_cognito_user_pools
          updateChatRoom(input: UpdateChatRoomInput!, condition: ModelChatRoomConditionInput): ChatRoom @aws_api_key @aws_cognito_user_pools
          deleteChatRoom(input: DeleteChatRoomInput!, condition: ModelChatRoomConditionInput): ChatRoom @aws_api_key @aws_cognito_user_pools
          createMessage(input: CreateMessageInput!, condition: ModelMessageConditionInput): Message @aws_api_key @aws_cognito_user_pools
          updateMessage(input: UpdateMessageInput!, condition: ModelMessageConditionInput): Message @aws_api_key @aws_cognito_user_pools
          deleteMessage(input: DeleteMessageInput!, condition: ModelMessageConditionInput): Message @aws_api_key @aws_cognito_user_pools
          createReaction(input: CreateReactionInput!, condition: ModelReactionConditionInput): Reaction @aws_api_key @aws_cognito_user_pools
          updateReaction(input: UpdateReactionInput!, condition: ModelReactionConditionInput): Reaction @aws_api_key @aws_cognito_user_pools
          deleteReaction(input: DeleteReactionInput!, condition: ModelReactionConditionInput): Reaction @aws_api_key @aws_cognito_user_pools
          createUserPresence(input: CreateUserPresenceInput!, condition: ModelUserPresenceConditionInput): UserPresence @aws_api_key @aws_cognito_user_pools
          updateUserPresence(input: UpdateUserPresenceInput!, condition: ModelUserPresenceConditionInput): UserPresence @aws_api_key @aws_cognito_user_pools
          deleteUserPresence(input: DeleteUserPresenceInput!, condition: ModelUserPresenceConditionInput): UserPresence @aws_api_key @aws_cognito_user_pools
          createNotification(input: CreateNotificationInput!, condition: ModelNotificationConditionInput): Notification @aws_api_key @aws_cognito_user_pools
          updateNotification(input: UpdateNotificationInput!, condition: ModelNotificationConditionInput): Notification @aws_api_key @aws_cognito_user_pools
          deleteNotification(input: DeleteNotificationInput!, condition: ModelNotificationConditionInput): Notification @aws_api_key @aws_cognito_user_pools
          
          # Custom mutations for real-time features
          startTyping(chatRoomId: ID!): TypingIndicator @aws_api_key @aws_cognito_user_pools
          stopTyping(chatRoomId: ID!): TypingIndicator @aws_api_key @aws_cognito_user_pools
          updatePresence(status: PresenceStatus!, currentRoom: String): UserPresence @aws_api_key @aws_cognito_user_pools
          joinRoom(roomId: ID!): ChatRoom @aws_api_key @aws_cognito_user_pools
          leaveRoom(roomId: ID!): ChatRoom @aws_api_key @aws_cognito_user_pools
        }
        
        type Subscription {
          onCreateChatRoom: ChatRoom @aws_subscribe(mutations: ["createChatRoom"]) @aws_api_key @aws_cognito_user_pools
          onUpdateChatRoom: ChatRoom @aws_subscribe(mutations: ["updateChatRoom"]) @aws_api_key @aws_cognito_user_pools
          onDeleteChatRoom: ChatRoom @aws_subscribe(mutations: ["deleteChatRoom"]) @aws_api_key @aws_cognito_user_pools
          onCreateMessage(chatRoomId: ID): Message @aws_subscribe(mutations: ["createMessage"]) @aws_api_key @aws_cognito_user_pools
          onUpdateMessage(chatRoomId: ID): Message @aws_subscribe(mutations: ["updateMessage"]) @aws_api_key @aws_cognito_user_pools
          onDeleteMessage(chatRoomId: ID): Message @aws_subscribe(mutations: ["deleteMessage"]) @aws_api_key @aws_cognito_user_pools
          onCreateReaction(messageId: ID): Reaction @aws_subscribe(mutations: ["createReaction"]) @aws_api_key @aws_cognito_user_pools
          onUpdateReaction(messageId: ID): Reaction @aws_subscribe(mutations: ["updateReaction"]) @aws_api_key @aws_cognito_user_pools
          onDeleteReaction(messageId: ID): Reaction @aws_subscribe(mutations: ["deleteReaction"]) @aws_api_key @aws_cognito_user_pools
          onCreateUserPresence: UserPresence @aws_subscribe(mutations: ["createUserPresence"]) @aws_api_key @aws_cognito_user_pools
          onUpdateUserPresence: UserPresence @aws_subscribe(mutations: ["updateUserPresence"]) @aws_api_key @aws_cognito_user_pools
          onDeleteUserPresence: UserPresence @aws_subscribe(mutations: ["deleteUserPresence"]) @aws_api_key @aws_cognito_user_pools
          onCreateNotification(userId: String): Notification @aws_subscribe(mutations: ["createNotification"]) @aws_api_key @aws_cognito_user_pools
          onUpdateNotification(userId: String): Notification @aws_subscribe(mutations: ["updateNotification"]) @aws_api_key @aws_cognito_user_pools
          onDeleteNotification(userId: String): Notification @aws_subscribe(mutations: ["deleteNotification"]) @aws_api_key @aws_cognito_user_pools
          
          # Custom subscriptions for real-time features
          onTypingStarted(chatRoomId: ID!): TypingIndicator @aws_api_key @aws_cognito_user_pools
          onTypingEnded(chatRoomId: ID!): TypingIndicator @aws_api_key @aws_cognito_user_pools
          onUserPresenceChanged: UserPresence @aws_api_key @aws_cognito_user_pools
          onNotificationReceived(userId: String!): Notification @aws_api_key @aws_cognito_user_pools
        }
        
        # Standard model inputs and connections would be automatically generated
        # This is a simplified version focusing on the core schema structure

  # API Key for public access
  GraphQLAPIKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      Description: "API Key for public access to GraphQL API"
      Expires: !Ref "AWS::NoValue"

  # ============================================================================
  # AppSync Data Sources
  # ============================================================================
  ChatRoomDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      Name: "ChatRoomDataSource"
      Type: "AMAZON_DYNAMODB"
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref ChatRoomTable
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false

  MessageDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      Name: "MessageDataSource"
      Type: "AMAZON_DYNAMODB"
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref MessageTable
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false

  ReactionDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      Name: "ReactionDataSource"
      Type: "AMAZON_DYNAMODB"
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref ReactionTable
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false

  UserPresenceDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      Name: "UserPresenceDataSource"
      Type: "AMAZON_DYNAMODB"
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref UserPresenceTable
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false

  NotificationDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      Name: "NotificationDataSource"
      Type: "AMAZON_DYNAMODB"
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref NotificationTable
        AwsRegion: !Ref AWS::Region
        UseCallerCredentials: false

  RealtimeHandlerDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      Name: "RealtimeHandlerDataSource"
      Type: "AWS_LAMBDA"
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt RealtimeHandlerLambda.Arn

  # ============================================================================
  # Lambda Functions
  # ============================================================================
  RealtimeHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ApplicationName}-realtime-handler"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt RealtimeHandlerLambdaRole.Arn
      MemorySize: !Ref LambdaMemorySize
      Timeout: 30
      Environment:
        Variables:
          APPSYNC_API_ID: !GetAtt GraphQLAPI.ApiId
          APPSYNC_API_URL: !GetAtt GraphQLAPI.GraphQLUrl
          CHATROOM_TABLE: !Ref ChatRoomTable
          MESSAGE_TABLE: !Ref MessageTable
          REACTION_TABLE: !Ref ReactionTable
          USER_PRESENCE_TABLE: !Ref UserPresenceTable
          NOTIFICATION_TABLE: !Ref NotificationTable
          REGION: !Ref AWS::Region
      TracingConfig: !If
        - EnableXRayTracingCondition
        - Mode: Active
        - !Ref "AWS::NoValue"
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();
          
          const APPSYNC_API_ID = process.env.APPSYNC_API_ID;
          const REGION = process.env.AWS_REGION;
          const CHATROOM_TABLE = process.env.CHATROOM_TABLE;
          const USER_PRESENCE_TABLE = process.env.USER_PRESENCE_TABLE;
          
          exports.handler = async (event) => {
            console.log('Real-time event received:', JSON.stringify(event, null, 2));
            
            const { field, source, arguments: args, identity } = event;
            const userId = identity.claims.sub;
            const userName = identity.claims['cognito:username'];
            
            try {
              switch (field) {
                case 'startTyping':
                  return await handleTypingStart(args.chatRoomId, userId, userName);
                
                case 'stopTyping':
                  return await handleTypingStop(args.chatRoomId, userId, userName);
                
                case 'updatePresence':
                  return await updateUserPresence(userId, userName, args.status, args.currentRoom);
                
                case 'joinRoom':
                  return await joinChatRoom(args.roomId, userId, userName);
                
                case 'leaveRoom':
                  return await leaveChatRoom(args.roomId, userId, userName);
                
                default:
                  throw new Error(`Unknown field: ${field}`);
              }
            } catch (error) {
              console.error('Error processing real-time operation:', error);
              throw new Error(`Failed to process ${field}: ${error.message}`);
            }
          };
          
          async function handleTypingStart(chatRoomId, userId, userName) {
            const typingIndicator = {
              userId,
              userName,
              chatRoomId,
              timestamp: new Date().toISOString()
            };
            
            console.log('Typing started:', typingIndicator);
            return typingIndicator;
          }
          
          async function handleTypingStop(chatRoomId, userId, userName) {
            const typingIndicator = {
              userId,
              userName,
              chatRoomId,
              timestamp: new Date().toISOString()
            };
            
            console.log('Typing stopped:', typingIndicator);
            return typingIndicator;
          }
          
          async function updateUserPresence(userId, userName, status, currentRoom) {
            const presence = {
              id: userId,
              userId,
              userName,
              status,
              lastSeen: new Date().toISOString(),
              currentRoom: currentRoom || null,
              deviceInfo: 'Web',
              updatedAt: new Date().toISOString()
            };
            
            await dynamodb.put({
              TableName: USER_PRESENCE_TABLE,
              Item: presence
            }).promise();
            
            return presence;
          }
          
          async function joinChatRoom(roomId, userId, userName) {
            await dynamodb.update({
              TableName: CHATROOM_TABLE,
              Key: { id: roomId },
              UpdateExpression: 'ADD members :userId SET lastActivity = :timestamp',
              ExpressionAttributeValues: {
                ':userId': dynamodb.createSet([userId]),
                ':timestamp': new Date().toISOString()
              }
            }).promise();
            
            await updateUserPresence(userId, userName, 'ONLINE', roomId);
            
            const room = await dynamodb.get({
              TableName: CHATROOM_TABLE,
              Key: { id: roomId }
            }).promise();
            
            return room.Item;
          }
          
          async function leaveChatRoom(roomId, userId, userName) {
            await dynamodb.update({
              TableName: CHATROOM_TABLE,
              Key: { id: roomId },
              UpdateExpression: 'DELETE members :userId SET lastActivity = :timestamp',
              ExpressionAttributeValues: {
                ':userId': dynamodb.createSet([userId]),
                ':timestamp': new Date().toISOString()
              }
            }).promise();
            
            await updateUserPresence(userId, userName, 'ONLINE', null);
            
            const room = await dynamodb.get({
              TableName: CHATROOM_TABLE,
              Key: { id: roomId }
            }).promise();
            
            return room.Item;
          }
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-realtime-handler"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName

  FileProcessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ApplicationName}-file-processing"
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt FileProcessingLambdaRole.Arn
      MemorySize: !Ref LambdaMemorySize
      Timeout: 300
      Environment:
        Variables:
          APPSYNC_API_ID: !GetAtt GraphQLAPI.ApiId
          APPSYNC_API_URL: !GetAtt GraphQLAPI.GraphQLUrl
          S3_BUCKET: !Ref S3Bucket
          REGION: !Ref AWS::Region
      TracingConfig: !If
        - EnableXRayTracingCondition
        - Mode: Active
        - !Ref "AWS::NoValue"
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();
          
          exports.handler = async (event) => {
            console.log('File processing event:', JSON.stringify(event, null, 2));
            
            for (const record of event.Records) {
              const bucket = record.s3.bucket.name;
              const key = record.s3.object.key;
              
              try {
                // Get file metadata
                const objectInfo = await s3.headObject({
                  Bucket: bucket,
                  Key: key
                }).promise();
                
                console.log(`Processing file: ${key}, Size: ${objectInfo.ContentLength}`);
                
                // Process different file types
                if (key.includes('/images/')) {
                  await processImageFile(bucket, key, objectInfo);
                } else if (key.includes('/documents/')) {
                  await processDocumentFile(bucket, key, objectInfo);
                } else {
                  console.log(`Unknown file type: ${key}`);
                }
                
              } catch (error) {
                console.error(`Error processing file ${key}:`, error);
              }
            }
            
            return { statusCode: 200, body: 'File processing completed' };
          };
          
          async function processImageFile(bucket, key, objectInfo) {
            console.log(`Processing image: ${key}`);
            // Add image processing logic here
            // e.g., resize, generate thumbnails, extract metadata
          }
          
          async function processDocumentFile(bucket, key, objectInfo) {
            console.log(`Processing document: ${key}`);
            // Add document processing logic here
            // e.g., extract text, generate previews, scan for viruses
          }
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-file-processing"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName

  # Lambda permission for S3 to invoke file processing
  FileProcessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FileProcessingLambda.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub "${S3Bucket.Arn}"

  # ============================================================================
  # IAM Roles for Lambda Functions
  # ============================================================================
  RealtimeHandlerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ApplicationName}-realtime-handler-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !If
          - EnableXRayTracingCondition
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
          - !Ref "AWS::NoValue"
      Policies:
        - PolicyName: RealtimeHandlerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ChatRoomTable.Arn
                  - !GetAtt MessageTable.Arn
                  - !GetAtt ReactionTable.Arn
                  - !GetAtt UserPresenceTable.Arn
                  - !GetAtt NotificationTable.Arn
                  - !Sub "${ChatRoomTable.Arn}/index/*"
                  - !Sub "${MessageTable.Arn}/index/*"
                  - !Sub "${ReactionTable.Arn}/index/*"
                  - !Sub "${UserPresenceTable.Arn}/index/*"
                  - !Sub "${NotificationTable.Arn}/index/*"
              - Effect: Allow
                Action:
                  - appsync:GraphQL
                Resource: !Sub "${GraphQLAPI.Arn}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - !If
                - EnableEncryptionCondition
                - Effect: Allow
                  Action:
                    - kms:Decrypt
                    - kms:GenerateDataKey
                  Resource: !GetAtt EncryptionKey.Arn
                - !Ref "AWS::NoValue"

  FileProcessingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ApplicationName}-file-processing-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !If
          - EnableXRayTracingCondition
          - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
          - !Ref "AWS::NoValue"
      Policies:
        - PolicyName: FileProcessingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:HeadObject
                Resource: !Sub "${S3Bucket.Arn}/*"
              - Effect: Allow
                Action:
                  - appsync:GraphQL
                Resource: !Sub "${GraphQLAPI.Arn}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - !If
                - EnableEncryptionCondition
                - Effect: Allow
                  Action:
                    - kms:Decrypt
                    - kms:GenerateDataKey
                  Resource: !GetAtt EncryptionKey.Arn
                - !Ref "AWS::NoValue"

  # ============================================================================
  # IAM Roles for AppSync
  # ============================================================================
  AppSyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ApplicationName}-appsync-service-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppSyncServicePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt ChatRoomTable.Arn
                  - !GetAtt MessageTable.Arn
                  - !GetAtt ReactionTable.Arn
                  - !GetAtt UserPresenceTable.Arn
                  - !GetAtt NotificationTable.Arn
                  - !Sub "${ChatRoomTable.Arn}/index/*"
                  - !Sub "${MessageTable.Arn}/index/*"
                  - !Sub "${ReactionTable.Arn}/index/*"
                  - !Sub "${UserPresenceTable.Arn}/index/*"
                  - !Sub "${NotificationTable.Arn}/index/*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt RealtimeHandlerLambda.Arn
              - !If
                - EnableEncryptionCondition
                - Effect: Allow
                  Action:
                    - kms:Decrypt
                    - kms:GenerateDataKey
                  Resource: !GetAtt EncryptionKey.Arn
                - !Ref "AWS::NoValue"

  AppSyncLogsRole:
    Type: AWS::IAM::Role
    Condition: EnableDetailedMonitoringCondition
    Properties:
      RoleName: !Sub "${ApplicationName}-appsync-logs-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs

  # ============================================================================
  # CloudWatch Resources
  # ============================================================================
  AppSyncLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: EnableDetailedMonitoringCondition
    Properties:
      LogGroupName: !Sub "/aws/appsync/apis/${GraphQLAPI.ApiId}"
      RetentionInDays: 30
      KmsKeyId: !If
        - EnableEncryptionCondition
        - !GetAtt EncryptionKey.Arn
        - !Ref "AWS::NoValue"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-appsync-logs"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName

  RealtimeHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${RealtimeHandlerLambda}"
      RetentionInDays: 30
      KmsKeyId: !If
        - EnableEncryptionCondition
        - !GetAtt EncryptionKey.Arn
        - !Ref "AWS::NoValue"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-realtime-handler-logs"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName

  FileProcessingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${FileProcessingLambda}"
      RetentionInDays: 30
      KmsKeyId: !If
        - EnableEncryptionCondition
        - !GetAtt EncryptionKey.Arn
        - !Ref "AWS::NoValue"
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-file-processing-logs"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName

  # CloudWatch Alarms for Monitoring
  AppSyncErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableDetailedMonitoringCondition
    Properties:
      AlarmName: !Sub "${ApplicationName}-appsync-error-rate"
      AlarmDescription: "AppSync error rate is too high"
      MetricName: "4XXError"
      Namespace: "AWS/AppSync"
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: GraphQLAPIId
          Value: !GetAtt GraphQLAPI.ApiId
      TreatMissingData: notBreaching

  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableDetailedMonitoringCondition
    Properties:
      AlarmName: !Sub "${ApplicationName}-lambda-error-rate"
      AlarmDescription: "Lambda function error rate is too high"
      MetricName: "Errors"
      Namespace: "AWS/Lambda"
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref RealtimeHandlerLambda
      TreatMissingData: notBreaching

  DynamoDBThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableDetailedMonitoringCondition
    Properties:
      AlarmName: !Sub "${ApplicationName}-dynamodb-throttling"
      AlarmDescription: "DynamoDB throttling detected"
      MetricName: "ThrottledRequests"
      Namespace: "AWS/DynamoDB"
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: TableName
          Value: !Ref MessageTable
      TreatMissingData: notBreaching

  # ============================================================================
  # Backup Configuration
  # ============================================================================
  BackupVault:
    Type: AWS::Backup::BackupVault
    Condition: EnableBackupsCondition
    Properties:
      BackupVaultName: !Sub "${ApplicationName}-backup-vault"
      EncryptionKeyArn: !If
        - EnableEncryptionCondition
        - !GetAtt EncryptionKey.Arn
        - !Ref "AWS::NoValue"
      BackupVaultTags:
        Name: !Sub "${ApplicationName}-backup-vault"
        Environment: !Ref Environment
        Application: !Ref ApplicationName

  BackupPlan:
    Type: AWS::Backup::BackupPlan
    Condition: EnableBackupsCondition
    Properties:
      BackupPlan:
        BackupPlanName: !Sub "${ApplicationName}-backup-plan"
        BackupPlanRule:
          - RuleName: DailyBackups
            TargetBackupVault: !Ref BackupVault
            ScheduleExpression: "cron(0 2 ? * * *)"
            StartWindowMinutes: 60
            CompletionWindowMinutes: 120
            Lifecycle:
              DeleteAfterDays: !Ref BackupRetentionDays
            RecoveryPointTags:
              Environment: !Ref Environment
              Application: !Ref ApplicationName
      BackupPlanTags:
        Name: !Sub "${ApplicationName}-backup-plan"
        Environment: !Ref Environment
        Application: !Ref ApplicationName

  BackupRole:
    Type: AWS::IAM::Role
    Condition: EnableBackupsCondition
    Properties:
      RoleName: !Sub "${ApplicationName}-backup-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: backup.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores

  BackupSelection:
    Type: AWS::Backup::BackupSelection
    Condition: EnableBackupsCondition
    Properties:
      BackupPlanId: !Ref BackupPlan
      BackupSelection:
        SelectionName: !Sub "${ApplicationName}-backup-selection"
        IamRoleArn: !GetAtt BackupRole.Arn
        Resources:
          - !GetAtt ChatRoomTable.Arn
          - !GetAtt MessageTable.Arn
          - !GetAtt ReactionTable.Arn
          - !GetAtt UserPresenceTable.Arn
          - !GetAtt NotificationTable.Arn

# ============================================================================
# Outputs
# ============================================================================
Outputs:
  # Authentication Outputs
  UserPoolId:
    Description: "Cognito User Pool ID for authentication"
    Value: !Ref UserPool
    Export:
      Name: !Sub "${ApplicationName}-user-pool-id"

  UserPoolClientId:
    Description: "Cognito User Pool Client ID for web applications"
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${ApplicationName}-user-pool-client-id"

  IdentityPoolId:
    Description: "Cognito Identity Pool ID for federated identities"
    Value: !Ref IdentityPool
    Export:
      Name: !Sub "${ApplicationName}-identity-pool-id"

  UserPoolDomain:
    Description: "Cognito User Pool Domain for hosted UI"
    Value: !Sub "https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
    Export:
      Name: !Sub "${ApplicationName}-user-pool-domain"

  # GraphQL API Outputs
  GraphQLAPIEndpoint:
    Description: "GraphQL API endpoint for queries and mutations"
    Value: !GetAtt GraphQLAPI.GraphQLUrl
    Export:
      Name: !Sub "${ApplicationName}-graphql-endpoint"

  GraphQLAPIId:
    Description: "GraphQL API ID for AppSync"
    Value: !GetAtt GraphQLAPI.ApiId
    Export:
      Name: !Sub "${ApplicationName}-graphql-api-id"

  GraphQLAPIKey:
    Description: "GraphQL API Key for public access"
    Value: !GetAtt GraphQLAPIKey.ApiKey
    Export:
      Name: !Sub "${ApplicationName}-graphql-api-key"

  RealtimeEndpoint:
    Description: "Real-time WebSocket endpoint for subscriptions"
    Value: !Sub "wss://${GraphQLAPI.ApiId}.appsync-realtime-api.${AWS::Region}.amazonaws.com/graphql"
    Export:
      Name: !Sub "${ApplicationName}-realtime-endpoint"

  # Storage Outputs
  S3BucketName:
    Description: "S3 bucket name for file storage"
    Value: !Ref S3Bucket
    Export:
      Name: !Sub "${ApplicationName}-s3-bucket-name"

  S3BucketArn:
    Description: "S3 bucket ARN for file storage"
    Value: !GetAtt S3Bucket.Arn
    Export:
      Name: !Sub "${ApplicationName}-s3-bucket-arn"

  S3BucketDomainName:
    Description: "S3 bucket domain name for file access"
    Value: !GetAtt S3Bucket.DomainName
    Export:
      Name: !Sub "${ApplicationName}-s3-bucket-domain"

  # Database Outputs
  ChatRoomTableName:
    Description: "DynamoDB table name for chat rooms"
    Value: !Ref ChatRoomTable
    Export:
      Name: !Sub "${ApplicationName}-chatroom-table-name"

  MessageTableName:
    Description: "DynamoDB table name for messages"
    Value: !Ref MessageTable
    Export:
      Name: !Sub "${ApplicationName}-message-table-name"

  ReactionTableName:
    Description: "DynamoDB table name for reactions"
    Value: !Ref ReactionTable
    Export:
      Name: !Sub "${ApplicationName}-reaction-table-name"

  UserPresenceTableName:
    Description: "DynamoDB table name for user presence"
    Value: !Ref UserPresenceTable
    Export:
      Name: !Sub "${ApplicationName}-user-presence-table-name"

  NotificationTableName:
    Description: "DynamoDB table name for notifications"
    Value: !Ref NotificationTable
    Export:
      Name: !Sub "${ApplicationName}-notification-table-name"

  # Lambda Function Outputs
  RealtimeHandlerLambdaArn:
    Description: "Real-time handler Lambda function ARN"
    Value: !GetAtt RealtimeHandlerLambda.Arn
    Export:
      Name: !Sub "${ApplicationName}-realtime-handler-arn"

  FileProcessingLambdaArn:
    Description: "File processing Lambda function ARN"
    Value: !GetAtt FileProcessingLambda.Arn
    Export:
      Name: !Sub "${ApplicationName}-file-processing-arn"

  # Security Outputs
  EncryptionKeyId:
    Condition: EnableEncryptionCondition
    Description: "KMS encryption key ID for data encryption"
    Value: !Ref EncryptionKey
    Export:
      Name: !Sub "${ApplicationName}-encryption-key-id"

  EncryptionKeyArn:
    Condition: EnableEncryptionCondition
    Description: "KMS encryption key ARN for data encryption"
    Value: !GetAtt EncryptionKey.Arn
    Export:
      Name: !Sub "${ApplicationName}-encryption-key-arn"

  # Monitoring Outputs
  AppSyncLogGroupName:
    Condition: EnableDetailedMonitoringCondition
    Description: "CloudWatch log group name for AppSync"
    Value: !Ref AppSyncLogGroup
    Export:
      Name: !Sub "${ApplicationName}-appsync-log-group"

  # Region and Account Information
  DeploymentRegion:
    Description: "AWS region where the application is deployed"
    Value: !Ref AWS::Region
    Export:
      Name: !Sub "${ApplicationName}-deployment-region"

  AccountId:
    Description: "AWS account ID where the application is deployed"
    Value: !Ref AWS::AccountId
    Export:
      Name: !Sub "${ApplicationName}-account-id"

  # Application Configuration
  ApplicationName:
    Description: "Name of the real-time application"
    Value: !Ref ApplicationName
    Export:
      Name: !Sub "${ApplicationName}-application-name"

  Environment:
    Description: "Environment for the application deployment"
    Value: !Ref Environment
    Export:
      Name: !Sub "${ApplicationName}-environment"

  # Cost Optimization Information
  EstimatedMonthlyCost:
    Description: "Estimated monthly cost for the real-time application"
    Value: "$15-30 (depends on usage: real-time API requests, DynamoDB reads/writes, Lambda executions)"

  # Quick Start Information
  QuickStartGuide:
    Description: "Quick start guide for using the real-time application"
    Value: !Sub |
      1. Configure your frontend application with these endpoints:
         - GraphQL API: ${GraphQLAPI.GraphQLUrl}
         - Real-time WebSocket: wss://${GraphQLAPI.ApiId}.appsync-realtime-api.${AWS::Region}.amazonaws.com/graphql
         - User Pool: ${UserPool}
         - Identity Pool: ${IdentityPool}
      2. Use the API Key for public access: ${GraphQLAPIKey.ApiKey}
      3. Install AWS Amplify CLI: npm install -g @aws-amplify/cli
      4. Configure authentication in your app using the User Pool settings
      5. Set up GraphQL subscriptions for real-time features
      6. Enable file uploads using the S3 bucket: ${S3Bucket}
      7. Monitor usage in CloudWatch and adjust scaling as needed

  # Security Best Practices
  SecurityRecommendations:
    Description: "Security best practices for the real-time application"
    Value: !Sub |
      1. Enable MFA for production environments
      2. Use HTTPS only for all connections
      3. Implement proper user authorization rules
      4. Monitor CloudWatch alarms for security events
      5. Regularly rotate API keys and credentials
      6. Use VPC endpoints for private connectivity
      7. Enable encryption at rest and in transit
      8. Implement proper backup and recovery procedures
      9. Use AWS WAF for additional API protection
      10. Monitor AWS CloudTrail for audit logging