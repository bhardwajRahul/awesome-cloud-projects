# AWS Amplify Build Specification for Real-Time Chat Application
# This build spec configures the build process for a React-based real-time chat application
# with AWS Amplify, AppSync, and Cognito integration

version: 1
applications:
  - frontend:
      phases:
        preBuild:
          commands:
            - echo "Installing dependencies..."
            - npm ci
            - echo "Creating aws-exports.js configuration file..."
            - |
              cat > src/aws-exports.js << 'EOF'
              const awsConfig = {
                aws_project_region: '${appsync_region}',
                aws_appsync_graphqlEndpoint: '${appsync_graphql_endpoint}',
                aws_appsync_region: '${appsync_region}',
                aws_appsync_authenticationType: 'AMAZON_COGNITO_USER_POOLS',
                aws_appsync_additionalAuthenticationTypes: ['API_KEY'],
                aws_cognito_region: '${appsync_region}',
                aws_user_pools_id: '${cognito_user_pool_id}',
                aws_user_pools_web_client_id: '${cognito_user_pool_client_id}',
                aws_cognito_identity_pool_id: '${cognito_identity_pool_id}',
                aws_cognito_signup_attributes: ['EMAIL'],
                aws_cognito_social_providers: [],
                aws_cognito_username_attributes: ['EMAIL'],
                aws_cognito_verification_mechanisms: ['EMAIL'],
                aws_cognito_mfa_configuration: 'OFF',
                aws_cognito_mfa_types: ['SMS'],
                aws_cognito_password_protection_settings: {
                  passwordPolicyMinLength: 8,
                  passwordPolicyCharacters: []
                },
                aws_cognito_login_mechanisms: ['EMAIL'],
                aws_appsync_dangerouslyConnectToHTTPEndpointUsingApiKey: true,
                aws_appsync_apiKey: process.env.REACT_APP_APPSYNC_API_KEY || 'da2-xxxxxxxxxxxxxxxxxxxxxxxxxx',
                oauth: {},
                federationTarget: 'COGNITO_USER_POOLS',
                aws_mobile_analytics_app_id: '',
                aws_mobile_analytics_app_region: '${appsync_region}',
                aws_storage_bucket: '',
                aws_storage_region: '${appsync_region}',
                aws_content_delivery_bucket: '',
                aws_content_delivery_bucket_region: '${appsync_region}',
                aws_content_delivery_url: ''
              };
              
              export default awsConfig;
              EOF
        build:
          commands:
            - echo "Building the React application..."
            - npm run build
        postBuild:
          commands:
            - echo "Build completed successfully!"
            - echo "Generating GraphQL queries and mutations..."
            - |
              if [ ! -d "src/graphql" ]; then
                mkdir -p src/graphql
              fi
            - |
              cat > src/graphql/queries.js << 'EOF'
              /* eslint-disable */
              // this is an auto generated file. This will be overwritten
              
              export const getChatRoom = /* GraphQL */ `
                query GetChatRoom($id: ID!) {
                  getChatRoom(id: $id) {
                    id
                    name
                    description
                    isPrivate
                    createdBy
                    members
                    lastActivity
                    messageCount
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const listChatRooms = /* GraphQL */ `
                query ListChatRooms(
                  $filter: TableChatRoomFilterInput
                  $limit: Int
                  $nextToken: String
                ) {
                  listChatRooms(filter: $filter, limit: $limit, nextToken: $nextToken) {
                    items {
                      id
                      name
                      description
                      isPrivate
                      createdBy
                      members
                      lastActivity
                      messageCount
                      createdAt
                      updatedAt
                    }
                    nextToken
                  }
                }
              `;
              
              export const messagesByRoom = /* GraphQL */ `
                query MessagesByRoom(
                  $chatRoomId: ID!
                  $sortDirection: ModelSortDirection
                  $filter: ModelMessageFilterInput
                  $limit: Int
                  $nextToken: String
                ) {
                  messagesByRoom(
                    chatRoomId: $chatRoomId
                    sortDirection: $sortDirection
                    filter: $filter
                    limit: $limit
                    nextToken: $nextToken
                  ) {
                    items {
                      id
                      content
                      messageType
                      author
                      authorName
                      chatRoomId
                      replyToId
                      attachments
                      editedAt
                      isEdited
                      createdAt
                      updatedAt
                    }
                    nextToken
                  }
                }
              `;
              
              export const reactionsByMessage = /* GraphQL */ `
                query ReactionsByMessage(
                  $messageId: ID!
                  $sortDirection: ModelSortDirection
                  $filter: ModelReactionFilterInput
                  $limit: Int
                  $nextToken: String
                ) {
                  reactionsByMessage(
                    messageId: $messageId
                    sortDirection: $sortDirection
                    filter: $filter
                    limit: $limit
                    nextToken: $nextToken
                  ) {
                    items {
                      id
                      emoji
                      author
                      authorName
                      messageId
                      createdAt
                      updatedAt
                    }
                    nextToken
                  }
                }
              `;
              
              export const listUserPresence = /* GraphQL */ `
                query ListUserPresence(
                  $filter: TableUserPresenceFilterInput
                  $limit: Int
                  $nextToken: String
                ) {
                  listUserPresence(filter: $filter, limit: $limit, nextToken: $nextToken) {
                    id
                    userId
                    userName
                    status
                    lastSeen
                    currentRoom
                    deviceInfo
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const notificationsByUser = /* GraphQL */ `
                query NotificationsByUser(
                  $userId: String!
                  $sortDirection: ModelSortDirection
                  $filter: ModelNotificationFilterInput
                  $limit: Int
                  $nextToken: String
                ) {
                  notificationsByUser(
                    userId: $userId
                    sortDirection: $sortDirection
                    filter: $filter
                    limit: $limit
                    nextToken: $nextToken
                  ) {
                    items {
                      id
                      type
                      title
                      message
                      userId
                      isRead
                      relatedId
                      actionUrl
                      createdAt
                      updatedAt
                    }
                    nextToken
                  }
                }
              `;
              EOF
            - |
              cat > src/graphql/mutations.js << 'EOF'
              /* eslint-disable */
              // this is an auto generated file. This will be overwritten
              
              export const createChatRoom = /* GraphQL */ `
                mutation CreateChatRoom($input: CreateChatRoomInput!) {
                  createChatRoom(input: $input) {
                    id
                    name
                    description
                    isPrivate
                    createdBy
                    members
                    lastActivity
                    messageCount
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const updateChatRoom = /* GraphQL */ `
                mutation UpdateChatRoom($input: UpdateChatRoomInput!) {
                  updateChatRoom(input: $input) {
                    id
                    name
                    description
                    isPrivate
                    createdBy
                    members
                    lastActivity
                    messageCount
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const deleteChatRoom = /* GraphQL */ `
                mutation DeleteChatRoom($id: ID!) {
                  deleteChatRoom(id: $id) {
                    id
                    name
                    description
                    isPrivate
                    createdBy
                    members
                    lastActivity
                    messageCount
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const createMessage = /* GraphQL */ `
                mutation CreateMessage($input: CreateMessageInput!) {
                  createMessage(input: $input) {
                    id
                    content
                    messageType
                    author
                    authorName
                    chatRoomId
                    replyToId
                    attachments
                    editedAt
                    isEdited
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const updateMessage = /* GraphQL */ `
                mutation UpdateMessage($input: UpdateMessageInput!) {
                  updateMessage(input: $input) {
                    id
                    content
                    messageType
                    author
                    authorName
                    chatRoomId
                    replyToId
                    attachments
                    editedAt
                    isEdited
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const deleteMessage = /* GraphQL */ `
                mutation DeleteMessage($id: ID!) {
                  deleteMessage(id: $id) {
                    id
                    content
                    messageType
                    author
                    authorName
                    chatRoomId
                    replyToId
                    attachments
                    editedAt
                    isEdited
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const createReaction = /* GraphQL */ `
                mutation CreateReaction($input: CreateReactionInput!) {
                  createReaction(input: $input) {
                    id
                    emoji
                    author
                    authorName
                    messageId
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const deleteReaction = /* GraphQL */ `
                mutation DeleteReaction($id: ID!) {
                  deleteReaction(id: $id) {
                    id
                    emoji
                    author
                    authorName
                    messageId
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const updateUserPresence = /* GraphQL */ `
                mutation UpdateUserPresence($input: UpdateUserPresenceInput!) {
                  updateUserPresence(input: $input) {
                    id
                    userId
                    userName
                    status
                    lastSeen
                    currentRoom
                    deviceInfo
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const createNotification = /* GraphQL */ `
                mutation CreateNotification($input: CreateNotificationInput!) {
                  createNotification(input: $input) {
                    id
                    type
                    title
                    message
                    userId
                    isRead
                    relatedId
                    actionUrl
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const updateNotification = /* GraphQL */ `
                mutation UpdateNotification($id: ID!, $isRead: Boolean!) {
                  updateNotification(id: $id, isRead: $isRead) {
                    id
                    type
                    title
                    message
                    userId
                    isRead
                    relatedId
                    actionUrl
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const deleteNotification = /* GraphQL */ `
                mutation DeleteNotification($id: ID!) {
                  deleteNotification(id: $id) {
                    id
                    type
                    title
                    message
                    userId
                    isRead
                    relatedId
                    actionUrl
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const startTyping = /* GraphQL */ `
                mutation StartTyping($chatRoomId: ID!) {
                  startTyping(chatRoomId: $chatRoomId) {
                    userId
                    userName
                    chatRoomId
                    timestamp
                  }
                }
              `;
              
              export const stopTyping = /* GraphQL */ `
                mutation StopTyping($chatRoomId: ID!) {
                  stopTyping(chatRoomId: $chatRoomId) {
                    userId
                    userName
                    chatRoomId
                    timestamp
                  }
                }
              `;
              
              export const joinRoom = /* GraphQL */ `
                mutation JoinRoom($roomId: ID!) {
                  joinRoom(roomId: $roomId) {
                    id
                    name
                    description
                    isPrivate
                    createdBy
                    members
                    lastActivity
                    messageCount
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const leaveRoom = /* GraphQL */ `
                mutation LeaveRoom($roomId: ID!) {
                  leaveRoom(roomId: $roomId) {
                    id
                    name
                    description
                    isPrivate
                    createdBy
                    members
                    lastActivity
                    messageCount
                    createdAt
                    updatedAt
                  }
                }
              `;
              EOF
            - |
              cat > src/graphql/subscriptions.js << 'EOF'
              /* eslint-disable */
              // this is an auto generated file. This will be overwritten
              
              export const onMessageCreated = /* GraphQL */ `
                subscription OnMessageCreated($chatRoomId: ID!) {
                  onMessageCreated(chatRoomId: $chatRoomId) {
                    id
                    content
                    messageType
                    author
                    authorName
                    chatRoomId
                    replyToId
                    attachments
                    editedAt
                    isEdited
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const onMessageUpdated = /* GraphQL */ `
                subscription OnMessageUpdated($chatRoomId: ID!) {
                  onMessageUpdated(chatRoomId: $chatRoomId) {
                    id
                    content
                    messageType
                    author
                    authorName
                    chatRoomId
                    replyToId
                    attachments
                    editedAt
                    isEdited
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const onMessageDeleted = /* GraphQL */ `
                subscription OnMessageDeleted($chatRoomId: ID!) {
                  onMessageDeleted(chatRoomId: $chatRoomId) {
                    id
                    content
                    messageType
                    author
                    authorName
                    chatRoomId
                    replyToId
                    attachments
                    editedAt
                    isEdited
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const onReactionCreated = /* GraphQL */ `
                subscription OnReactionCreated($messageId: ID!) {
                  onReactionCreated(messageId: $messageId) {
                    id
                    emoji
                    author
                    authorName
                    messageId
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const onReactionDeleted = /* GraphQL */ `
                subscription OnReactionDeleted($messageId: ID!) {
                  onReactionDeleted(messageId: $messageId) {
                    id
                    emoji
                    author
                    authorName
                    messageId
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const onUserPresenceUpdated = /* GraphQL */ `
                subscription OnUserPresenceUpdated {
                  onUserPresenceUpdated {
                    id
                    userId
                    userName
                    status
                    lastSeen
                    currentRoom
                    deviceInfo
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const onNotificationCreated = /* GraphQL */ `
                subscription OnNotificationCreated($userId: String!) {
                  onNotificationCreated(userId: $userId) {
                    id
                    type
                    title
                    message
                    userId
                    isRead
                    relatedId
                    actionUrl
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const onTypingStarted = /* GraphQL */ `
                subscription OnTypingStarted($chatRoomId: ID!) {
                  onTypingStarted(chatRoomId: $chatRoomId) {
                    userId
                    userName
                    chatRoomId
                    timestamp
                  }
                }
              `;
              
              export const onTypingEnded = /* GraphQL */ `
                subscription OnTypingEnded($chatRoomId: ID!) {
                  onTypingEnded(chatRoomId: $chatRoomId) {
                    userId
                    userName
                    chatRoomId
                    timestamp
                  }
                }
              `;
              
              export const onRoomJoined = /* GraphQL */ `
                subscription OnRoomJoined($roomId: ID!) {
                  onRoomJoined(roomId: $roomId) {
                    id
                    name
                    description
                    isPrivate
                    createdBy
                    members
                    lastActivity
                    messageCount
                    createdAt
                    updatedAt
                  }
                }
              `;
              
              export const onRoomLeft = /* GraphQL */ `
                subscription OnRoomLeft($roomId: ID!) {
                  onRoomLeft(roomId: $roomId) {
                    id
                    name
                    description
                    isPrivate
                    createdBy
                    members
                    lastActivity
                    messageCount
                    createdAt
                    updatedAt
                  }
                }
              `;
              EOF
            - echo "GraphQL files generated successfully!"
      artifacts:
        baseDirectory: build
        files:
          - '**/*'
      cache:
        paths:
          - node_modules/**/*
          - .next/cache/**/*
    appRoot: frontend