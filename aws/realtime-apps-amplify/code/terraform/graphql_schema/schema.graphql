# GraphQL Schema for Real-Time Chat Application
# This schema defines the complete data model for a real-time chat application
# with support for chat rooms, messages, reactions, user presence, and notifications

# Chat Room Type - Represents a chat room/channel
type ChatRoom @aws_auth(cognito_groups: ["Admins", "Moderators", "Users"]) {
  id: ID!
  name: String!
  description: String
  isPrivate: Boolean!
  createdBy: String! @aws_auth(cognito_groups: ["Admins"])
  members: [String]
  lastActivity: AWSDateTime
  messageCount: Int
  messages: [Message] @aws_auth(cognito_groups: ["Users"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Message Type - Represents a chat message
type Message @aws_auth(cognito_groups: ["Users"]) {
  id: ID!
  content: String!
  messageType: MessageType!
  author: String! @aws_auth(cognito_groups: ["Admins"])
  authorName: String!
  chatRoomId: ID!
  chatRoom: ChatRoom
  replyToId: ID
  replyTo: Message
  replies: [Message]
  reactions: [Reaction]
  attachments: [String]
  editedAt: AWSDateTime
  isEdited: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Reaction Type - Represents emoji reactions to messages
type Reaction @aws_auth(cognito_groups: ["Users"]) {
  id: ID!
  emoji: String!
  author: String! @aws_auth(cognito_groups: ["Admins"])
  authorName: String!
  messageId: ID!
  message: Message
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# User Presence Type - Tracks user online status
type UserPresence @aws_auth(cognito_groups: ["Users"]) {
  id: ID!
  userId: String!
  userName: String!
  status: PresenceStatus!
  lastSeen: AWSDateTime!
  currentRoom: String
  deviceInfo: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Notification Type - User notifications
type Notification @aws_auth(cognito_groups: ["Users"]) {
  id: ID!
  type: NotificationType!
  title: String!
  message: String!
  userId: String! @aws_auth(cognito_groups: ["Admins"])
  isRead: Boolean
  relatedId: String
  actionUrl: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Typing Indicator Type - Ephemeral typing status
type TypingIndicator {
  userId: String!
  userName: String!
  chatRoomId: ID!
  timestamp: AWSDateTime!
}

# Enums
enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
  TYPING
}

enum PresenceStatus {
  ONLINE
  AWAY
  BUSY
  OFFLINE
}

enum NotificationType {
  MESSAGE
  MENTION
  ROOM_INVITE
  SYSTEM
}

# Input Types for Mutations
input CreateChatRoomInput {
  name: String!
  description: String
  isPrivate: Boolean!
}

input UpdateChatRoomInput {
  id: ID!
  name: String
  description: String
  isPrivate: Boolean
}

input CreateMessageInput {
  content: String!
  messageType: MessageType!
  chatRoomId: ID!
  replyToId: ID
  attachments: [String]
}

input UpdateMessageInput {
  id: ID!
  content: String
  attachments: [String]
}

input CreateReactionInput {
  emoji: String!
  messageId: ID!
}

input UpdateUserPresenceInput {
  status: PresenceStatus!
  currentRoom: String
}

input CreateNotificationInput {
  type: NotificationType!
  title: String!
  message: String!
  userId: String!
  relatedId: String
  actionUrl: String
}

# Connection Types for Pagination
type ChatRoomConnection {
  items: [ChatRoom]
  nextToken: String
}

type MessageConnection {
  items: [Message]
  nextToken: String
}

type ReactionConnection {
  items: [Reaction]
  nextToken: String
}

type NotificationConnection {
  items: [Notification]
  nextToken: String
}

# Query Type - Read operations
type Query {
  # Chat Room Queries
  getChatRoom(id: ID!): ChatRoom
    @aws_auth(cognito_groups: ["Users"])
  
  listChatRooms(
    filter: TableChatRoomFilterInput
    limit: Int
    nextToken: String
  ): ChatRoomConnection
    @aws_auth(cognito_groups: ["Users"])
  
  # Message Queries
  getMessage(id: ID!): Message
    @aws_auth(cognito_groups: ["Users"])
  
  listMessages(
    filter: TableMessageFilterInput
    limit: Int
    nextToken: String
  ): MessageConnection
    @aws_auth(cognito_groups: ["Users"])
  
  messagesByRoom(
    chatRoomId: ID!
    sortDirection: ModelSortDirection
    filter: ModelMessageFilterInput
    limit: Int
    nextToken: String
  ): MessageConnection
    @aws_auth(cognito_groups: ["Users"])
  
  # Reaction Queries
  getReaction(id: ID!): Reaction
    @aws_auth(cognito_groups: ["Users"])
  
  listReactions(
    filter: TableReactionFilterInput
    limit: Int
    nextToken: String
  ): ReactionConnection
    @aws_auth(cognito_groups: ["Users"])
  
  reactionsByMessage(
    messageId: ID!
    sortDirection: ModelSortDirection
    filter: ModelReactionFilterInput
    limit: Int
    nextToken: String
  ): ReactionConnection
    @aws_auth(cognito_groups: ["Users"])
  
  # User Presence Queries
  getUserPresence(id: ID!): UserPresence
    @aws_auth(cognito_groups: ["Users"])
  
  listUserPresence(
    filter: TableUserPresenceFilterInput
    limit: Int
    nextToken: String
  ): [UserPresence]
    @aws_auth(cognito_groups: ["Users"])
  
  # Notification Queries
  getNotification(id: ID!): Notification
    @aws_auth(cognito_groups: ["Users"])
  
  listNotifications(
    filter: TableNotificationFilterInput
    limit: Int
    nextToken: String
  ): NotificationConnection
    @aws_auth(cognito_groups: ["Users"])
  
  notificationsByUser(
    userId: String!
    sortDirection: ModelSortDirection
    filter: ModelNotificationFilterInput
    limit: Int
    nextToken: String
  ): NotificationConnection
    @aws_auth(cognito_groups: ["Users"])
}

# Mutation Type - Write operations
type Mutation {
  # Chat Room Mutations
  createChatRoom(input: CreateChatRoomInput!): ChatRoom
    @aws_auth(cognito_groups: ["Admins", "Moderators", "Users"])
  
  updateChatRoom(input: UpdateChatRoomInput!): ChatRoom
    @aws_auth(cognito_groups: ["Admins", "Moderators"])
  
  deleteChatRoom(id: ID!): ChatRoom
    @aws_auth(cognito_groups: ["Admins", "Moderators"])
  
  # Message Mutations
  createMessage(input: CreateMessageInput!): Message
    @aws_auth(cognito_groups: ["Users"])
  
  updateMessage(input: UpdateMessageInput!): Message
    @aws_auth(cognito_groups: ["Users"])
  
  deleteMessage(id: ID!): Message
    @aws_auth(cognito_groups: ["Users", "Moderators", "Admins"])
  
  # Reaction Mutations
  createReaction(input: CreateReactionInput!): Reaction
    @aws_auth(cognito_groups: ["Users"])
  
  deleteReaction(id: ID!): Reaction
    @aws_auth(cognito_groups: ["Users"])
  
  # User Presence Mutations
  updateUserPresence(input: UpdateUserPresenceInput!): UserPresence
    @aws_auth(cognito_groups: ["Users"])
  
  # Notification Mutations
  createNotification(input: CreateNotificationInput!): Notification
    @aws_auth(cognito_groups: ["Admins", "Moderators"])
  
  updateNotification(id: ID!, isRead: Boolean!): Notification
    @aws_auth(cognito_groups: ["Users"])
  
  deleteNotification(id: ID!): Notification
    @aws_auth(cognito_groups: ["Users"])
  
  # Real-time Custom Mutations (handled by Lambda)
  startTyping(chatRoomId: ID!): TypingIndicator
    @aws_auth(cognito_groups: ["Users"])
  
  stopTyping(chatRoomId: ID!): TypingIndicator
    @aws_auth(cognito_groups: ["Users"])
  
  joinRoom(roomId: ID!): ChatRoom
    @aws_auth(cognito_groups: ["Users"])
  
  leaveRoom(roomId: ID!): ChatRoom
    @aws_auth(cognito_groups: ["Users"])
}

# Subscription Type - Real-time updates
type Subscription {
  # Message Subscriptions
  onMessageCreated(chatRoomId: ID!): Message
    @aws_subscribe(mutations: ["createMessage"])
    @aws_auth(cognito_groups: ["Users"])
  
  onMessageUpdated(chatRoomId: ID!): Message
    @aws_subscribe(mutations: ["updateMessage"])
    @aws_auth(cognito_groups: ["Users"])
  
  onMessageDeleted(chatRoomId: ID!): Message
    @aws_subscribe(mutations: ["deleteMessage"])
    @aws_auth(cognito_groups: ["Users"])
  
  # Reaction Subscriptions
  onReactionCreated(messageId: ID!): Reaction
    @aws_subscribe(mutations: ["createReaction"])
    @aws_auth(cognito_groups: ["Users"])
  
  onReactionDeleted(messageId: ID!): Reaction
    @aws_subscribe(mutations: ["deleteReaction"])
    @aws_auth(cognito_groups: ["Users"])
  
  # User Presence Subscriptions
  onUserPresenceUpdated: UserPresence
    @aws_subscribe(mutations: ["updateUserPresence"])
    @aws_auth(cognito_groups: ["Users"])
  
  # Notification Subscriptions
  onNotificationCreated(userId: String!): Notification
    @aws_subscribe(mutations: ["createNotification"])
    @aws_auth(cognito_groups: ["Users"])
  
  # Typing Indicator Subscriptions
  onTypingStarted(chatRoomId: ID!): TypingIndicator
    @aws_subscribe(mutations: ["startTyping"])
    @aws_auth(cognito_groups: ["Users"])
  
  onTypingEnded(chatRoomId: ID!): TypingIndicator
    @aws_subscribe(mutations: ["stopTyping"])
    @aws_auth(cognito_groups: ["Users"])
  
  # Room Activity Subscriptions
  onRoomJoined(roomId: ID!): ChatRoom
    @aws_subscribe(mutations: ["joinRoom"])
    @aws_auth(cognito_groups: ["Users"])
  
  onRoomLeft(roomId: ID!): ChatRoom
    @aws_subscribe(mutations: ["leaveRoom"])
    @aws_auth(cognito_groups: ["Users"])
}

# Filter Input Types
input TableChatRoomFilterInput {
  id: TableIDFilterInput
  name: TableStringFilterInput
  isPrivate: TableBooleanFilterInput
  createdBy: TableStringFilterInput
  createdAt: TableStringFilterInput
}

input TableMessageFilterInput {
  id: TableIDFilterInput
  content: TableStringFilterInput
  messageType: TableStringFilterInput
  author: TableStringFilterInput
  chatRoomId: TableIDFilterInput
  createdAt: TableStringFilterInput
}

input TableReactionFilterInput {
  id: TableIDFilterInput
  emoji: TableStringFilterInput
  author: TableStringFilterInput
  messageId: TableIDFilterInput
  createdAt: TableStringFilterInput
}

input TableUserPresenceFilterInput {
  id: TableIDFilterInput
  userId: TableStringFilterInput
  userName: TableStringFilterInput
  status: TableStringFilterInput
  currentRoom: TableStringFilterInput
}

input TableNotificationFilterInput {
  id: TableIDFilterInput
  type: TableStringFilterInput
  title: TableStringFilterInput
  userId: TableStringFilterInput
  isRead: TableBooleanFilterInput
  createdAt: TableStringFilterInput
}

# Model Filter Input Types
input ModelMessageFilterInput {
  id: ModelIDInput
  content: ModelStringInput
  messageType: ModelStringInput
  author: ModelStringInput
  chatRoomId: ModelIDInput
  createdAt: ModelStringInput
  and: [ModelMessageFilterInput]
  or: [ModelMessageFilterInput]
  not: ModelMessageFilterInput
}

input ModelReactionFilterInput {
  id: ModelIDInput
  emoji: ModelStringInput
  author: ModelStringInput
  messageId: ModelIDInput
  createdAt: ModelStringInput
  and: [ModelReactionFilterInput]
  or: [ModelReactionFilterInput]
  not: ModelReactionFilterInput
}

input ModelNotificationFilterInput {
  id: ModelIDInput
  type: ModelStringInput
  title: ModelStringInput
  userId: ModelStringInput
  isRead: ModelBooleanInput
  createdAt: ModelStringInput
  and: [ModelNotificationFilterInput]
  or: [ModelNotificationFilterInput]
  not: ModelNotificationFilterInput
}

# Basic Filter Input Types
input TableIDFilterInput {
  eq: ID
  ne: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input TableStringFilterInput {
  eq: String
  ne: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input ModelIDInput {
  eq: ID
  ne: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelStringInput {
  eq: String
  ne: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelBooleanInput {
  eq: Boolean
  ne: Boolean
}

# Sort Direction Enum
enum ModelSortDirection {
  ASC
  DESC
}