AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Resource Groups for Automated Resource Management - Complete infrastructure for automated resource organization, monitoring, and cost tracking'

# =============================================================================
# METADATA
# =============================================================================
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Resource Group Configuration"
        Parameters:
          - ResourceGroupName
          - EnvironmentTag
          - ApplicationTag
      - Label:
          default: "Notification Configuration"
        Parameters:
          - NotificationEmail
          - EnableSMSAlerts
          - SMSPhoneNumber
      - Label:
          default: "Monitoring Configuration"
        Parameters:
          - DashboardName
          - CPUThreshold
          - EnableDetailedMonitoring
      - Label:
          default: "Cost Management Configuration"
        Parameters:
          - MonthlyBudgetAmount
          - BudgetThreshold
          - EnableCostAnomalyDetection
      - Label:
          default: "Automation Configuration"
        Parameters:
          - EnableAutomatedTagging
          - AutomationSchedule
    ParameterLabels:
      ResourceGroupName:
        default: "Resource Group Name"
      EnvironmentTag:
        default: "Environment Tag Value"
      ApplicationTag:
        default: "Application Tag Value"
      NotificationEmail:
        default: "Email Address for Notifications"
      EnableSMSAlerts:
        default: "Enable SMS Alerts"
      SMSPhoneNumber:
        default: "SMS Phone Number"
      DashboardName:
        default: "CloudWatch Dashboard Name"
      CPUThreshold:
        default: "CPU Utilization Alarm Threshold (%)"
      EnableDetailedMonitoring:
        default: "Enable Detailed CloudWatch Monitoring"
      MonthlyBudgetAmount:
        default: "Monthly Budget Amount (USD)"
      BudgetThreshold:
        default: "Budget Alert Threshold (%)"
      EnableCostAnomalyDetection:
        default: "Enable Cost Anomaly Detection"
      EnableAutomatedTagging:
        default: "Enable Automated Resource Tagging"
      AutomationSchedule:
        default: "Automation Schedule"

# =============================================================================
# PARAMETERS
# =============================================================================
Parameters:
  # Resource Group Configuration
  ResourceGroupName:
    Type: String
    Default: 'production-web-app-rg'
    Description: 'Name for the resource group that will organize your resources'
    MinLength: 1
    MaxLength: 256
    AllowedPattern: '[a-zA-Z0-9._-]+'
    ConstraintDescription: 'Resource group name must contain only alphanumeric characters, dots, underscores, and hyphens'
  
  EnvironmentTag:
    Type: String
    Default: 'production'
    Description: 'Environment tag value to filter resources (e.g., production, staging, development)'
    AllowedValues:
      - 'production'
      - 'staging'
      - 'development'
      - 'testing'
  
  ApplicationTag:
    Type: String
    Default: 'web-app'
    Description: 'Application tag value to filter resources'
    MinLength: 1
    MaxLength: 128
  
  # Notification Configuration
  NotificationEmail:
    Type: String
    Description: 'Email address for receiving notifications and alerts'
    AllowedPattern: '^[^\s@]+@[^\s@]+\.[^\s@]+$'
    ConstraintDescription: 'Must be a valid email address'
  
  EnableSMSAlerts:
    Type: String
    Default: 'No'
    Description: 'Enable SMS notifications in addition to email'
    AllowedValues:
      - 'Yes'
      - 'No'
  
  SMSPhoneNumber:
    Type: String
    Default: ''
    Description: 'Phone number for SMS alerts (include country code, e.g., +1234567890)'
    AllowedPattern: '^(\+[1-9]\d{1,14})?$'
    ConstraintDescription: 'Must be a valid phone number with country code (optional if SMS disabled)'
  
  # Monitoring Configuration
  DashboardName:
    Type: String
    Default: 'ResourceGroupDashboard'
    Description: 'Name for the CloudWatch dashboard'
    MinLength: 1
    MaxLength: 255
  
  CPUThreshold:
    Type: Number
    Default: 80
    Description: 'CPU utilization threshold for alarms (percentage)'
    MinValue: 1
    MaxValue: 100
  
  EnableDetailedMonitoring:
    Type: String
    Default: 'Yes'
    Description: 'Enable detailed CloudWatch monitoring for better granularity'
    AllowedValues:
      - 'Yes'
      - 'No'
  
  # Cost Management Configuration
  MonthlyBudgetAmount:
    Type: Number
    Default: 100
    Description: 'Monthly budget amount in USD for the resource group'
    MinValue: 1
    MaxValue: 1000000
  
  BudgetThreshold:
    Type: Number
    Default: 80
    Description: 'Budget alert threshold as percentage of budget amount'
    MinValue: 1
    MaxValue: 100
  
  EnableCostAnomalyDetection:
    Type: String
    Default: 'Yes'
    Description: 'Enable automated cost anomaly detection'
    AllowedValues:
      - 'Yes'
      - 'No'
  
  # Automation Configuration
  EnableAutomatedTagging:
    Type: String
    Default: 'Yes'
    Description: 'Enable automated resource tagging for new resources'
    AllowedValues:
      - 'Yes'
      - 'No'
  
  AutomationSchedule:
    Type: String
    Default: 'rate(24 hours)'
    Description: 'Schedule for automated maintenance tasks'
    AllowedValues:
      - 'rate(1 hour)'
      - 'rate(6 hours)'
      - 'rate(24 hours)'
      - 'rate(7 days)'

# =============================================================================
# CONDITIONS
# =============================================================================
Conditions:
  # Notification Conditions
  EnableSMS: !Equals [!Ref EnableSMSAlerts, 'Yes']
  HasSMSNumber: !And
    - !Condition EnableSMS
    - !Not [!Equals [!Ref SMSPhoneNumber, '']]
  
  # Monitoring Conditions
  EnableDetailedMonitoringCondition: !Equals [!Ref EnableDetailedMonitoring, 'Yes']
  
  # Cost Management Conditions
  EnableCostAnomalyCondition: !Equals [!Ref EnableCostAnomalyDetection, 'Yes']
  
  # Automation Conditions
  EnableAutomatedTaggingCondition: !Equals [!Ref EnableAutomatedTagging, 'Yes']

# =============================================================================
# RESOURCES
# =============================================================================
Resources:

  # =============================================================================
  # IAM ROLES AND POLICIES
  # =============================================================================
  
  # Systems Manager Automation Role
  SystemsManagerAutomationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'ResourceGroupAutomationRole-${AWS::StackName}'
      Description: 'IAM role for Systems Manager automation on resource groups'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
                - events.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMAutomationRole
      Policies:
        - PolicyName: ResourceGroupManagementPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - resource-groups:*
                  - resourcegroupstaggingapi:*
                  - cloudwatch:PutMetricData
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - tag:GetResources
                  - tag:TagResources
                  - tag:UntagResources
                Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentTag
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Purpose
          Value: 'resource-management'

  # CloudWatch Events Role for EventBridge
  EventBridgeRole:
    Type: AWS::IAM::Role
    Condition: EnableAutomatedTaggingCondition
    Properties:
      RoleName: !Sub 'EventBridgeAutomationRole-${AWS::StackName}'
      Description: 'IAM role for EventBridge to trigger automation'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AutomationExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                Resource: 
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/*'

  # =============================================================================
  # SNS TOPIC AND SUBSCRIPTIONS
  # =============================================================================
  
  # SNS Topic for Notifications
  ResourceGroupNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-resource-alerts'
      DisplayName: 'Resource Group Management Alerts'
      Description: 'SNS topic for resource group monitoring and management alerts'
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentTag
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Purpose
          Value: 'notifications'

  # Email Subscription
  EmailNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref ResourceGroupNotificationTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # SMS Subscription (conditional)
  SMSNotificationSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasSMSNumber
    Properties:
      TopicArn: !Ref ResourceGroupNotificationTopic
      Protocol: sms
      Endpoint: !Ref SMSPhoneNumber

  # =============================================================================
  # RESOURCE GROUPS
  # =============================================================================
  
  # Primary Resource Group
  PrimaryResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Ref ResourceGroupName
      Description: !Sub 'Resource group for ${ApplicationTag} ${EnvironmentTag} resources'
      ResourceQuery:
        Type: TAG_FILTERS_1_0
        Query:
          ResourceTypeFilters:
            - 'AWS::AllSupported'
          TagFilters:
            - Key: Environment
              Values:
                - !Ref EnvironmentTag
            - Key: Application
              Values:
                - !Ref ApplicationTag
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentTag
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Purpose
          Value: 'resource-management'
        - Key: ManagedBy
          Value: 'CloudFormation'

  # =============================================================================
  # SYSTEMS MANAGER AUTOMATION DOCUMENTS
  # =============================================================================
  
  # Resource Group Maintenance Automation Document
  ResourceGroupMaintenanceDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      DocumentFormat: YAML
      Name: !Sub 'ResourceGroupMaintenance-${AWS::StackName}'
      Description: 'Automated maintenance tasks for resource groups'
      Content:
        schemaVersion: '0.3'
        description: 'Automated maintenance for resource group'
        assumeRole: !GetAtt SystemsManagerAutomationRole.Arn
        parameters:
          ResourceGroupName:
            type: String
            description: 'Name of the resource group to process'
            default: !Ref ResourceGroupName
        mainSteps:
          - name: GetResourceGroupResources
            action: 'aws:executeAwsApi'
            description: 'List all resources in the resource group'
            inputs:
              Service: resource-groups
              Api: ListGroupResources
              GroupName: '{{ ResourceGroupName }}'
            outputs:
              - Name: ResourceList
                Selector: $.ResourceIdentifiers
                Type: MapList
          - name: PublishResourceMetrics
            action: 'aws:executeAwsApi'
            description: 'Publish custom metrics for resource group'
            inputs:
              Service: cloudwatch
              Api: PutMetricData
              Namespace: 'AWS/ResourceGroups'
              MetricData:
                - MetricName: 'ResourceCount'
                  Value: '{{ GetResourceGroupResources.ResourceList | length }}'
                  Unit: Count
                  Dimensions:
                    - Name: ResourceGroupName
                      Value: '{{ ResourceGroupName }}'
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentTag
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Purpose
          Value: 'automation'

  # Automated Resource Tagging Document
  AutomatedResourceTaggingDocument:
    Type: AWS::SSM::Document
    Condition: EnableAutomatedTaggingCondition
    Properties:
      DocumentType: Automation
      DocumentFormat: YAML
      Name: !Sub 'AutomatedResourceTagging-${AWS::StackName}'
      Description: 'Automated resource tagging for resource groups'
      Content:
        schemaVersion: '0.3'
        description: 'Automated resource tagging for resource groups'
        assumeRole: !GetAtt SystemsManagerAutomationRole.Arn
        parameters:
          ResourceType:
            type: String
            description: 'Type of AWS resource to tag'
            default: 'AWS::AllSupported'
          TagKey:
            type: String
            description: 'Tag key to apply'
            default: 'ManagedBy'
          TagValue:
            type: String
            description: 'Tag value to apply'
            default: 'ResourceGroupAutomation'
        mainSteps:
          - name: GetUntaggedResources
            action: 'aws:executeAwsApi'
            description: 'Find resources missing required tags'
            inputs:
              Service: resourcegroupstaggingapi
              Api: GetResources
              ResourceTypeFilters:
                - '{{ ResourceType }}'
              TagFilters:
                - Key: '{{ TagKey }}'
                  Values: []
            outputs:
              - Name: UntaggedResources
                Selector: $.ResourceTagMappingList
                Type: MapList
          - name: TagResources
            action: 'aws:executeAwsApi'
            description: 'Apply tags to untagged resources'
            inputs:
              Service: resourcegroupstaggingapi
              Api: TagResources
              ResourceARNList:
                - '{{ GetUntaggedResources.UntaggedResources[0].ResourceARN }}'
              Tags:
                '{{ TagKey }}': '{{ TagValue }}'
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentTag
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Purpose
          Value: 'automation'

  # =============================================================================
  # EVENTBRIDGE RULES
  # =============================================================================
  
  # Automated Tagging EventBridge Rule
  AutoTagEventRule:
    Type: AWS::Events::Rule
    Condition: EnableAutomatedTaggingCondition
    Properties:
      Name: !Sub 'AutoTagNewResources-${AWS::StackName}'
      Description: 'Automatically tag new AWS resources'
      EventPattern:
        source:
          - 'aws.ec2'
          - 'aws.s3'
          - 'aws.rds'
          - 'aws.lambda'
        detail-type:
          - 'AWS API Call via CloudTrail'
        detail:
          eventSource:
            - 'ec2.amazonaws.com'
            - 's3.amazonaws.com'
            - 'rds.amazonaws.com'
            - 'lambda.amazonaws.com'
          eventName:
            - 'RunInstances'
            - 'CreateBucket'
            - 'CreateDBInstance'
            - 'CreateFunction'
      State: ENABLED
      Targets:
        - Arn: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${AutomatedResourceTaggingDocument}'
          Id: 'AutoTagTarget'
          RoleArn: !GetAtt EventBridgeRole.Arn

  # Scheduled Maintenance EventBridge Rule
  ScheduledMaintenanceRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'ResourceGroupScheduledMaintenance-${AWS::StackName}'
      Description: 'Scheduled maintenance for resource groups'
      ScheduleExpression: !Ref AutomationSchedule
      State: ENABLED
      Targets:
        - Arn: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${ResourceGroupMaintenanceDocument}'
          Id: 'MaintenanceTarget'
          RoleArn: !GetAtt SystemsManagerAutomationRole.Arn

  # =============================================================================
  # CLOUDWATCH RESOURCES
  # =============================================================================
  
  # CloudWatch Dashboard
  ResourceGroupDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${DashboardName}-${AWS::StackName}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/EC2", "CPUUtilization", {"stat": "Average"}],
                  ["AWS/RDS", "CPUUtilization", {"stat": "Average"}],
                  ["AWS/Lambda", "Duration", {"stat": "Average"}]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Resource Group Performance Metrics",
                "yAxis": {
                  "left": {
                    "min": 0,
                    "max": 100
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Billing", "EstimatedCharges", "Currency", "USD"]
                ],
                "period": 86400,
                "stat": "Maximum",
                "region": "us-east-1",
                "title": "Estimated Monthly Charges"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 12,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/ResourceGroups", "ResourceCount", "ResourceGroupName", "${ResourceGroupName}"]
                ],
                "period": 3600,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Resource Group Resource Count"
              }
            }
          ]
        }

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'ResourceGroup-HighCPU-${AWS::StackName}'
      AlarmDescription: 'High CPU usage across resource group'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref CPUThreshold
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ResourceGroupNotificationTopic
      OKActions:
        - !Ref ResourceGroupNotificationTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentTag
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Purpose
          Value: 'monitoring'

  # Resource Health Check Alarm
  ResourceHealthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'ResourceGroup-HealthCheck-${AWS::StackName}'
      AlarmDescription: 'Overall health monitoring for resource group'
      MetricName: StatusCheckFailed
      Namespace: AWS/EC2
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ResourceGroupNotificationTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentTag
        - Key: Application
          Value: !Ref ApplicationTag
        - Key: Purpose
          Value: 'health-monitoring'

  # =============================================================================
  # BUDGET RESOURCES
  # =============================================================================
  
  # Budget for Resource Group
  ResourceGroupBudget:
    Type: AWS::Budgets::Budget
    Properties:
      Budget:
        BudgetName: !Sub 'ResourceGroup-Budget-${AWS::StackName}'
        BudgetLimit:
          Amount: !Ref MonthlyBudgetAmount
          Unit: USD
        TimeUnit: MONTHLY
        BudgetType: COST
        CostFilters:
          TagKey:
            - Environment
            - Application
          TagValue:
            - !Ref EnvironmentTag
            - !Ref ApplicationTag
      NotificationsWithSubscribers:
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            Threshold: !Ref BudgetThreshold
            ThresholdType: PERCENTAGE
          Subscribers:
            - SubscriptionType: SNS
              Address: !Ref ResourceGroupNotificationTopic
        - Notification:
            NotificationType: FORECASTED
            ComparisonOperator: GREATER_THAN
            Threshold: !Ref BudgetThreshold
            ThresholdType: PERCENTAGE
          Subscribers:
            - SubscriptionType: SNS
              Address: !Ref ResourceGroupNotificationTopic

  # =============================================================================
  # COST ANOMALY DETECTION
  # =============================================================================
  
  # Cost Anomaly Detector
  ResourceGroupAnomalyDetector:
    Type: AWS::CE::AnomalyDetector
    Condition: EnableCostAnomalyCondition
    Properties:
      AnomalyDetectorName: !Sub 'ResourceGroupAnomalyDetector-${AWS::StackName}'
      MonitorType: DIMENSIONAL
      MonitorSpecification: !Sub |
        {
          "DimensionKey": "SERVICE",
          "MatchOptions": ["EQUALS"],
          "Values": ["Amazon Elastic Compute Cloud - Compute"]
        }

  # Cost Anomaly Subscription
  CostAnomalySubscription:
    Type: AWS::CE::AnomalySubscription
    Condition: EnableCostAnomalyCondition
    Properties:
      SubscriptionName: !Sub 'ResourceGroupAnomalySubscription-${AWS::StackName}'
      Frequency: DAILY
      MonitorArnList:
        - !Ref ResourceGroupAnomalyDetector
      Subscribers:
        - Type: SNS
          Address: !Ref ResourceGroupNotificationTopic

# =============================================================================
# OUTPUTS
# =============================================================================
Outputs:
  
  # Resource Group Information
  ResourceGroupName:
    Description: 'Name of the created resource group'
    Value: !Ref PrimaryResourceGroup
    Export:
      Name: !Sub '${AWS::StackName}-ResourceGroupName'

  ResourceGroupArn:
    Description: 'ARN of the created resource group'
    Value: !GetAtt PrimaryResourceGroup.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ResourceGroupArn'

  # SNS Topic Information
  NotificationTopicArn:
    Description: 'ARN of the SNS topic for notifications'
    Value: !Ref ResourceGroupNotificationTopic
    Export:
      Name: !Sub '${AWS::StackName}-NotificationTopicArn'

  # CloudWatch Dashboard
  DashboardURL:
    Description: 'URL to the CloudWatch dashboard'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${DashboardName}-${AWS::StackName}'

  # IAM Role Information
  AutomationRoleArn:
    Description: 'ARN of the Systems Manager automation role'
    Value: !GetAtt SystemsManagerAutomationRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AutomationRoleArn'

  # Budget Information
  BudgetName:
    Description: 'Name of the created budget'
    Value: !Sub 'ResourceGroup-Budget-${AWS::StackName}'

  # Systems Manager Documents
  MaintenanceDocumentName:
    Description: 'Name of the resource group maintenance automation document'
    Value: !Ref ResourceGroupMaintenanceDocument
    Export:
      Name: !Sub '${AWS::StackName}-MaintenanceDocument'

  # Conditional Outputs
  TaggingDocumentName:
    Condition: EnableAutomatedTaggingCondition
    Description: 'Name of the automated resource tagging document'
    Value: !Ref AutomatedResourceTaggingDocument
    Export:
      Name: !Sub '${AWS::StackName}-TaggingDocument'

  CostAnomalyDetectorArn:
    Condition: EnableCostAnomalyCondition
    Description: 'ARN of the cost anomaly detector'
    Value: !Ref ResourceGroupAnomalyDetector
    Export:
      Name: !Sub '${AWS::StackName}-AnomalyDetectorArn'

  # Management URLs
  ResourceGroupURL:
    Description: 'URL to view the resource group in AWS Console'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/resource-groups/group/${ResourceGroupName}'

  BudgetURL:
    Description: 'URL to view the budget in AWS Console'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/billing/home#/budgets'

  # Configuration Summary
  ConfigurationSummary:
    Description: 'Summary of the deployed configuration'
    Value: !Sub |
      Resource Group: ${ResourceGroupName}
      Environment: ${EnvironmentTag}
      Application: ${ApplicationTag}
      Monthly Budget: $${MonthlyBudgetAmount}
      CPU Alert Threshold: ${CPUThreshold}%
      Automation Schedule: ${AutomationSchedule}
      Automated Tagging: ${EnableAutomatedTagging}
      Cost Anomaly Detection: ${EnableCostAnomalyDetection}