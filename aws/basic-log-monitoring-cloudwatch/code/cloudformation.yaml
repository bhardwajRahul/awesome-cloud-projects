AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Infrastructure as Code for Basic Log Monitoring with CloudWatch.
  This template creates an automated log monitoring system using CloudWatch Logs metric filters,
  CloudWatch Alarms, SNS topic for notifications, and a Lambda function for log processing.
  Based on the AWS recipe: Basic Log Monitoring with CloudWatch.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Notification Configuration"
        Parameters:
          - NotificationEmail
          - EnableEmailNotifications
      - Label:
          default: "Log Configuration"
        Parameters:
          - LogGroupName
          - LogRetentionDays
          - MetricFilterPattern
      - Label:
          default: "Alarm Configuration"
        Parameters:
          - ErrorThreshold
          - EvaluationPeriods
          - AlarmPeriod
          - TreatMissingData
      - Label:
          default: "Lambda Configuration"
        Parameters:
          - LambdaMemorySize
          - LambdaTimeout
      - Label:
          default: "Resource Naming"
        Parameters:
          - ResourcePrefix
          - Environment
    ParameterLabels:
      NotificationEmail:
        default: "Email Address for Notifications"
      EnableEmailNotifications:
        default: "Enable Email Notifications"
      LogGroupName:
        default: "CloudWatch Log Group Name"
      LogRetentionDays:
        default: "Log Retention Period (Days)"
      MetricFilterPattern:
        default: "Error Detection Pattern"
      ErrorThreshold:
        default: "Error Count Threshold"
      EvaluationPeriods:
        default: "Evaluation Periods"
      AlarmPeriod:
        default: "Alarm Period (Seconds)"
      TreatMissingData:
        default: "Missing Data Treatment"
      LambdaMemorySize:
        default: "Lambda Memory Size (MB)"
      LambdaTimeout:
        default: "Lambda Timeout (Seconds)"
      ResourcePrefix:
        default: "Resource Name Prefix"
      Environment:
        default: "Environment Name"

Parameters:
  NotificationEmail:
    Type: String
    Description: Email address to receive log monitoring alerts
    AllowedPattern: ^[^\s@]+@[^\s@]+\.[^\s@]+$
    ConstraintDescription: Must be a valid email address

  EnableEmailNotifications:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Whether to create email subscription to SNS topic

  LogGroupName:
    Type: String
    Default: '/aws/application/monitoring-demo'
    Description: Name for the CloudWatch Log Group
    AllowedPattern: ^[\.\-_/#A-Za-z0-9]+$
    ConstraintDescription: Must be a valid CloudWatch Log Group name

  LogRetentionDays:
    Type: Number
    Default: 7
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: Number of days to retain log events in the log group

  MetricFilterPattern:
    Type: String
    Default: '{ ($.level = "ERROR") || ($.message = "*ERROR*") || ($.message = "*FAILED*") || ($.message = "*EXCEPTION*") || ($.message = "*TIMEOUT*") }'
    Description: CloudWatch Logs filter pattern to detect error events
    MaxLength: 1024

  ErrorThreshold:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 100
    Description: Number of errors that trigger the alarm

  EvaluationPeriods:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 5
    Description: Number of evaluation periods for the alarm

  AlarmPeriod:
    Type: Number
    Default: 300
    AllowedValues: [60, 300, 900, 3600]
    Description: Period in seconds for alarm evaluation

  TreatMissingData:
    Type: String
    Default: 'notBreaching'
    AllowedValues: ['breaching', 'notBreaching', 'ignore', 'missing']
    Description: How the alarm treats missing data points

  LambdaMemorySize:
    Type: Number
    Default: 256
    MinValue: 128
    MaxValue: 10240
    Description: Memory size for the Lambda function in MB

  LambdaTimeout:
    Type: Number
    Default: 60
    MinValue: 3
    MaxValue: 900
    Description: Timeout for the Lambda function in seconds

  ResourcePrefix:
    Type: String
    Default: 'log-monitoring'
    Description: Prefix for resource names
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9-]*$
    ConstraintDescription: Must start with a letter and contain only alphanumeric characters and hyphens
    MaxLength: 20

  Environment:
    Type: String
    Default: 'demo'
    Description: Environment name for resource tagging
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9-]*$
    ConstraintDescription: Must start with a letter and contain only alphanumeric characters and hyphens
    MaxLength: 10

Conditions:
  CreateEmailSubscription: !Equals [!Ref EnableEmailNotifications, 'true']

Resources:
  # CloudWatch Log Group for Application Logs
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-log-group'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Application log monitoring'
        - Key: ManagedBy
          Value: 'CloudFormation'

  # SNS Topic for Alert Notifications
  LogMonitoringTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ResourcePrefix}-alerts-${Environment}'
      DisplayName: !Sub 'Log Monitoring Alerts - ${Environment}'
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-sns-topic'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Log monitoring notifications'
        - Key: ManagedBy
          Value: 'CloudFormation'

  # SNS Topic Policy for CloudWatch Alarms
  LogMonitoringTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref LogMonitoringTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudWatchAlarmsToPublish
            Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action:
              - sns:Publish
            Resource: !Ref LogMonitoringTopic
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref 'AWS::AccountId'

  # Email Subscription to SNS Topic
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Condition: CreateEmailSubscription
    Properties:
      TopicArn: !Ref LogMonitoringTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ResourcePrefix}-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:FilterLogEvents
                  - logs:GetLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupName}:*'
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-lambda-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Lambda execution role for log processing'
        - Key: ManagedBy
          Value: 'CloudFormation'

  # Lambda Function for Log Processing
  LogProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ResourcePrefix}-processor-${Environment}'
      Description: 'Process CloudWatch alarm notifications and enrich alert data'
      Runtime: python3.9
      Handler: index.lambda_handler
      MemorySize: !Ref LambdaMemorySize
      Timeout: !Ref LambdaTimeout
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          LOG_GROUP_NAME: !Ref LogGroupName
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import os
          from datetime import datetime

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              """
              Process CloudWatch alarm notifications and enrich alert data
              """
              
              try:
                  # Get environment variables
                  log_group_name = os.environ.get('LOG_GROUP_NAME', 'Unknown')
                  environment = os.environ.get('ENVIRONMENT', 'Unknown')
                  
                  logger.info(f"Processing event for environment: {environment}")
                  logger.info(f"Monitoring log group: {log_group_name}")
                  
                  # Parse SNS message
                  for record in event['Records']:
                      sns_message = json.loads(record['Sns']['Message'])
                      
                      # Extract alarm details
                      alarm_name = sns_message.get('AlarmName', 'Unknown')
                      alarm_reason = sns_message.get('NewStateReason', 'No reason provided')
                      alarm_state = sns_message.get('NewStateValue', 'Unknown')
                      timestamp = sns_message.get('StateChangeTime', datetime.now().isoformat())
                      metric_name = sns_message.get('MetricName', 'Unknown')
                      namespace = sns_message.get('Namespace', 'Unknown')
                      
                      # Log processing details
                      logger.info(f"Processing alarm: {alarm_name}")
                      logger.info(f"State: {alarm_state}")
                      logger.info(f"Reason: {alarm_reason}")
                      logger.info(f"Timestamp: {timestamp}")
                      logger.info(f"Metric: {namespace}/{metric_name}")
                      
                      # Additional processing can be added here:
                      # - Query CloudWatch Logs for error context
                      # - Send notifications to external systems
                      # - Trigger automated remediation
                      # - Create support tickets
                      # - Update dashboards or status pages
                      
                      if alarm_state == 'ALARM':
                          logger.warning(f"ALERT: {alarm_name} is in ALARM state")
                          # Add custom alerting logic here
                      elif alarm_state == 'OK':
                          logger.info(f"RECOVERY: {alarm_name} has returned to OK state")
                          # Add recovery notification logic here
                      
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'Log processing completed successfully',
                          'processedRecords': len(event['Records']),
                          'timestamp': datetime.now().isoformat()
                      })
                  }
                  
              except Exception as e:
                  logger.error(f"Error processing log event: {str(e)}")
                  logger.error(f"Event data: {json.dumps(event, default=str)}")
                  
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'error': str(e),
                          'timestamp': datetime.now().isoformat()
                      })
                  }
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-lambda-function'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Log processing and alert enrichment'
        - Key: ManagedBy
          Value: 'CloudFormation'

  # Lambda Permission for SNS to Invoke Function
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LogProcessorFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref LogMonitoringTopic

  # SNS Subscription for Lambda Function
  LambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref LogMonitoringTopic
      Protocol: lambda
      Endpoint: !GetAtt LogProcessorFunction.Arn

  # CloudWatch Metric Filter for Error Detection
  ErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ApplicationLogGroup
      FilterName: !Sub '${ResourcePrefix}-error-filter'
      FilterPattern: !Ref MetricFilterPattern
      MetricTransformations:
        - MetricNamespace: 'CustomApp/Monitoring'
          MetricName: 'ApplicationErrors'
          MetricValue: '1'
          DefaultValue: 0
          Unit: 'Count'

  # CloudWatch Alarm for Error Threshold
  ApplicationErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ResourcePrefix}-errors-${Environment}'
      AlarmDescription: !Sub 'Alert when application errors in ${LogGroupName} exceed threshold'
      ActionsEnabled: true
      AlarmActions:
        - !Ref LogMonitoringTopic
      OKActions:
        - !Ref LogMonitoringTopic
      MetricName: 'ApplicationErrors'
      Namespace: 'CustomApp/Monitoring'
      Statistic: Sum
      Period: !Ref AlarmPeriod
      EvaluationPeriods: !Ref EvaluationPeriods
      DatapointsToAlarm: !Ref EvaluationPeriods
      Threshold: !Ref ErrorThreshold
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: !Ref TreatMissingData
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-cloudwatch-alarm'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Application error monitoring'
        - Key: ManagedBy
          Value: 'CloudFormation'

  # Custom CloudWatch Dashboard (Optional)
  LogMonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ResourcePrefix}-monitoring-${Environment}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "CustomApp/Monitoring", "ApplicationErrors" ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Application Errors Over Time",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LogGroupName}'\n| fields @timestamp, @message\n| filter @message like /ERROR|FAILED|EXCEPTION|TIMEOUT/\n| sort @timestamp desc\n| limit 100",
                "region": "${AWS::Region}",
                "title": "Recent Error Logs",
                "view": "table"
              }
            }
          ]
        }

Outputs:
  LogGroupName:
    Description: Name of the CloudWatch Log Group
    Value: !Ref ApplicationLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroup'

  LogGroupArn:
    Description: ARN of the CloudWatch Log Group
    Value: !GetAtt ApplicationLogGroup.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LogGroupArn'

  SNSTopicArn:
    Description: ARN of the SNS Topic for notifications
    Value: !Ref LogMonitoringTopic
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopic'

  SNSTopicName:
    Description: Name of the SNS Topic
    Value: !GetAtt LogMonitoringTopic.TopicName
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopicName'

  LambdaFunctionArn:
    Description: ARN of the Lambda function for log processing
    Value: !GetAtt LogProcessorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'

  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref LogProcessorFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'

  MetricFilterName:
    Description: Name of the CloudWatch Logs metric filter
    Value: !Ref ErrorMetricFilter
    Export:
      Name: !Sub '${AWS::StackName}-MetricFilter'

  CloudWatchAlarmName:
    Description: Name of the CloudWatch alarm
    Value: !Ref ApplicationErrorsAlarm
    Export:
      Name: !Sub '${AWS::StackName}-Alarm'

  CloudWatchAlarmArn:
    Description: ARN of the CloudWatch alarm
    Value: !Sub 'arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${ApplicationErrorsAlarm}'
    Export:
      Name: !Sub '${AWS::StackName}-AlarmArn'

  DashboardURL:
    Description: URL to the CloudWatch Dashboard
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${LogMonitoringDashboard}'
    Export:
      Name: !Sub '${AWS::StackName}-Dashboard'

  DeploymentRegion:
    Description: AWS Region where the stack is deployed
    Value: !Ref 'AWS::Region'
    Export:
      Name: !Sub '${AWS::StackName}-Region'

  Environment:
    Description: Environment name for this deployment
    Value: !Ref Environment
    Export:
      Name: !Sub '${AWS::StackName}-Environment'

  NotificationEmail:
    Description: Email address configured for notifications
    Value: !Ref NotificationEmail
    Condition: CreateEmailSubscription
    Export:
      Name: !Sub '${AWS::StackName}-NotificationEmail'