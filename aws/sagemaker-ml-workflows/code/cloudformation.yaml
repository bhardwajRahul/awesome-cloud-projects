AWSTemplateFormatVersion: '2010-09-09'
Description: 'Machine Learning Pipeline with SageMaker and Step Functions - Complete infrastructure for automated ML workflows with data preprocessing, model training, evaluation, and deployment'

Parameters:
  # General Configuration
  ProjectName:
    Type: String
    Default: ml-pipeline
    Description: Name prefix for all resources
    MinLength: 3
    MaxLength: 20
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    ConstraintDescription: Must start with a letter and contain only alphanumeric characters and hyphens
  
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment for deployment
  
  # S3 Configuration
  S3BucketName:
    Type: String
    Default: ''
    Description: Name of S3 bucket for ML artifacts (leave empty for auto-generated name)
    AllowedPattern: '^$|^[a-z0-9][a-z0-9.-]*[a-z0-9]$'
    ConstraintDescription: Must be a valid S3 bucket name or empty
  
  # SageMaker Configuration
  ProcessingInstanceType:
    Type: String
    Default: ml.m5.large
    AllowedValues: 
      - ml.m5.large
      - ml.m5.xlarge
      - ml.m5.2xlarge
      - ml.m5.4xlarge
    Description: Instance type for SageMaker processing jobs
  
  TrainingInstanceType:
    Type: String
    Default: ml.m5.large
    AllowedValues:
      - ml.m5.large
      - ml.m5.xlarge
      - ml.m5.2xlarge
      - ml.m5.4xlarge
      - ml.c5.xlarge
      - ml.c5.2xlarge
    Description: Instance type for SageMaker training jobs
  
  InferenceInstanceType:
    Type: String
    Default: ml.t2.medium
    AllowedValues:
      - ml.t2.medium
      - ml.t2.large
      - ml.m5.large
      - ml.m5.xlarge
      - ml.c5.large
      - ml.c5.xlarge
    Description: Instance type for SageMaker inference endpoints
  
  # Model Performance Thresholds
  ModelPerformanceThreshold:
    Type: Number
    Default: 0.7
    MinValue: 0.0
    MaxValue: 1.0
    Description: Minimum RÂ² score threshold for model deployment
  
  # Training Configuration
  MaxTrainingTimeMinutes:
    Type: Number
    Default: 60
    MinValue: 10
    MaxValue: 720
    Description: Maximum training time in minutes
  
  VolumeSize:
    Type: Number
    Default: 30
    MinValue: 10
    MaxValue: 100
    Description: EBS volume size in GB for training instances
  
  # Notification Configuration
  NotificationEmail:
    Type: String
    Default: ''
    Description: Email address for pipeline notifications (optional)
    AllowedPattern: '^$|^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    ConstraintDescription: Must be a valid email address or empty

Conditions:
  # Condition to create auto-generated S3 bucket name
  CreateS3Bucket: !Equals [!Ref S3BucketName, '']
  
  # Condition to create SNS topic for notifications
  CreateNotifications: !Not [!Equals [!Ref NotificationEmail, '']]
  
  # Condition for production environment
  IsProduction: !Equals [!Ref Environment, 'prod']

Resources:
  # S3 Bucket for ML Pipeline Artifacts
  MLPipelineS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If
        - CreateS3Bucket
        - !Sub '${ProjectName}-ml-pipeline-${AWS::AccountId}-${AWS::Region}'
        - !Ref S3BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
          - Id: TransitionToGlacier
            Status: Enabled
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 90
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-ml-pipeline-bucket'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: ML Pipeline Artifacts
  
  # SNS Topic for Pipeline Notifications
  MLPipelineNotificationsTopic:
    Type: AWS::SNS::Topic
    Condition: CreateNotifications
    Properties:
      TopicName: !Sub '${ProjectName}-ml-pipeline-notifications'
      DisplayName: ML Pipeline Notifications
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-ml-pipeline-notifications'
        - Key: Environment
          Value: !Ref Environment
  
  # SNS Subscription for Email Notifications
  MLPipelineNotificationsSubscription:
    Type: AWS::SNS::Subscription
    Condition: CreateNotifications
    Properties:
      TopicArn: !Ref MLPipelineNotificationsTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail
  
  # IAM Role for SageMaker Execution
  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-SageMaker-ExecutionRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Policies:
        - PolicyName: S3BucketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${MLPipelineS3Bucket}'
                  - !Sub '${MLPipelineS3Bucket}/*'
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/sagemaker/*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-SageMaker-ExecutionRole'
        - Key: Environment
          Value: !Ref Environment
  
  # IAM Role for Step Functions Execution
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-StepFunctions-ExecutionRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SageMakerIntegration
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sagemaker:CreateProcessingJob
                  - sagemaker:CreateTrainingJob
                  - sagemaker:CreateModel
                  - sagemaker:CreateEndpointConfig
                  - sagemaker:CreateEndpoint
                  - sagemaker:UpdateEndpoint
                  - sagemaker:DeleteEndpoint
                  - sagemaker:DescribeProcessingJob
                  - sagemaker:DescribeTrainingJob
                  - sagemaker:DescribeModel
                  - sagemaker:DescribeEndpoint
                  - sagemaker:ListTags
                  - sagemaker:AddTags
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt SageMakerExecutionRole.Arn
        - PolicyName: S3BucketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${MLPipelineS3Bucket}'
                  - !Sub '${MLPipelineS3Bucket}/*'
        - PolicyName: LambdaInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt ModelEvaluationFunction.Arn
        - PolicyName: SNSPublish
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !If
                  - CreateNotifications
                  - !Ref MLPipelineNotificationsTopic
                  - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-StepFunctions-ExecutionRole'
        - Key: Environment
          Value: !Ref Environment
  
  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-Lambda-ExecutionRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3BucketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${MLPipelineS3Bucket}'
                  - !Sub '${MLPipelineS3Bucket}/*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-Lambda-ExecutionRole'
        - Key: Environment
          Value: !Ref Environment
  
  # Lambda Function for Model Evaluation
  ModelEvaluationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-ModelEvaluation-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          S3_BUCKET: !Ref MLPipelineS3Bucket
          PERFORMANCE_THRESHOLD: !Ref ModelPerformanceThreshold
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          
          def lambda_handler(event, context):
              s3 = boto3.client('s3')
              
              # Get training job name and S3 bucket from event
              training_job_name = event['TrainingJobName']
              s3_bucket = event.get('S3Bucket', os.environ['S3_BUCKET'])
              
              try:
                  # Download evaluation metrics from S3
                  evaluation_key = f"model-artifacts/{training_job_name}/output/evaluation.json"
                  
                  response = s3.get_object(Bucket=s3_bucket, Key=evaluation_key)
                  evaluation_data = json.loads(response['Body'].read())
                  
                  # Add deployment decision based on threshold
                  threshold = float(os.environ.get('PERFORMANCE_THRESHOLD', 0.7))
                  evaluation_data['deploy_model'] = evaluation_data.get('test_r2', 0) >= threshold
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps(evaluation_data),
                      **evaluation_data
                  }
              
              except Exception as e:
                  print(f"Error evaluating model: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': str(e)}),
                      'deploy_model': False
                  }
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-ModelEvaluation'
        - Key: Environment
          Value: !Ref Environment
  
  # Step Functions State Machine for ML Pipeline
  MLPipelineStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${ProjectName}-ML-Pipeline-${Environment}'
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "ML Pipeline with SageMaker and Step Functions - Automated data preprocessing, training, evaluation, and deployment",
          "StartAt": "DataPreprocessing",
          "States": {
            "DataPreprocessing": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sagemaker:createProcessingJob.sync",
              "Parameters": {
                "ProcessingJobName.$": "$.PreprocessingJobName",
                "RoleArn": "${SageMakerExecutionRole.Arn}",
                "AppSpecification": {
                  "ImageUri": "683313688378.dkr.ecr.${AWS::Region}.amazonaws.com/sagemaker-scikit-learn:1.0-1-cpu-py3",
                  "ContainerEntrypoint": [
                    "python3",
                    "/opt/ml/processing/input/code/preprocessing.py"
                  ],
                  "ContainerArguments": [
                    "--input-data",
                    "/opt/ml/processing/input/data/train.csv",
                    "--output-data",
                    "/opt/ml/processing/output/train_processed.csv"
                  ]
                },
                "ProcessingInputs": [
                  {
                    "InputName": "data",
                    "S3Input": {
                      "S3Uri": "s3://${MLPipelineS3Bucket}/raw-data",
                      "LocalPath": "/opt/ml/processing/input/data",
                      "S3DataType": "S3Prefix"
                    }
                  },
                  {
                    "InputName": "code",
                    "S3Input": {
                      "S3Uri": "s3://${MLPipelineS3Bucket}/code",
                      "LocalPath": "/opt/ml/processing/input/code",
                      "S3DataType": "S3Prefix"
                    }
                  }
                ],
                "ProcessingOutputs": [
                  {
                    "OutputName": "processed_data",
                    "S3Output": {
                      "S3Uri": "s3://${MLPipelineS3Bucket}/processed-data",
                      "LocalPath": "/opt/ml/processing/output"
                    }
                  }
                ],
                "ProcessingResources": {
                  "ClusterConfig": {
                    "InstanceCount": 1,
                    "InstanceType": "${ProcessingInstanceType}",
                    "VolumeSizeInGB": ${VolumeSize}
                  }
                },
                "Tags": {
                  "Environment": "${Environment}",
                  "Project": "${ProjectName}",
                  "Stage": "preprocessing"
                }
              },
              "Next": "ModelTraining",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "NotifyFailure",
                  "ResultPath": "$.error"
                }
              ]
            },
            "ModelTraining": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sagemaker:createTrainingJob.sync",
              "Parameters": {
                "TrainingJobName.$": "$.TrainingJobName",
                "RoleArn": "${SageMakerExecutionRole.Arn}",
                "AlgorithmSpecification": {
                  "TrainingImage": "683313688378.dkr.ecr.${AWS::Region}.amazonaws.com/sagemaker-scikit-learn:1.0-1-cpu-py3",
                  "TrainingInputMode": "File"
                },
                "InputDataConfig": [
                  {
                    "ChannelName": "train",
                    "DataSource": {
                      "S3DataSource": {
                        "S3DataType": "S3Prefix",
                        "S3Uri": "s3://${MLPipelineS3Bucket}/processed-data",
                        "S3DataDistributionType": "FullyReplicated"
                      }
                    }
                  },
                  {
                    "ChannelName": "test",
                    "DataSource": {
                      "S3DataSource": {
                        "S3DataType": "S3Prefix",
                        "S3Uri": "s3://${MLPipelineS3Bucket}/raw-data",
                        "S3DataDistributionType": "FullyReplicated"
                      }
                    }
                  },
                  {
                    "ChannelName": "code",
                    "DataSource": {
                      "S3DataSource": {
                        "S3DataType": "S3Prefix",
                        "S3Uri": "s3://${MLPipelineS3Bucket}/code",
                        "S3DataDistributionType": "FullyReplicated"
                      }
                    }
                  }
                ],
                "OutputDataConfig": {
                  "S3OutputPath": "s3://${MLPipelineS3Bucket}/model-artifacts"
                },
                "ResourceConfig": {
                  "InstanceType": "${TrainingInstanceType}",
                  "InstanceCount": 1,
                  "VolumeSizeInGB": ${VolumeSize}
                },
                "StoppingCondition": {
                  "MaxRuntimeInSeconds": ${MaxTrainingTimeMinutes * 60}
                },
                "HyperParameters": {
                  "sagemaker_program": "training.py",
                  "sagemaker_submit_directory": "/opt/ml/input/data/code"
                },
                "Tags": {
                  "Environment": "${Environment}",
                  "Project": "${ProjectName}",
                  "Stage": "training"
                }
              },
              "Next": "ModelEvaluation",
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "NotifyFailure",
                  "ResultPath": "$.error"
                }
              ]
            },
            "ModelEvaluation": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ModelEvaluationFunction}",
                "Payload": {
                  "TrainingJobName.$": "$.TrainingJobName",
                  "S3Bucket": "${MLPipelineS3Bucket}"
                }
              },
              "Next": "CheckModelPerformance",
              "ResultPath": "$.EvaluationResult"
            },
            "CheckModelPerformance": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.EvaluationResult.Payload.test_r2",
                  "NumericGreaterThan": ${ModelPerformanceThreshold},
                  "Next": "CreateModel"
                }
              ],
              "Default": "ModelPerformanceInsufficient"
            },
            "CreateModel": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sagemaker:createModel",
              "Parameters": {
                "ModelName.$": "$.ModelName",
                "ExecutionRoleArn": "${SageMakerExecutionRole.Arn}",
                "PrimaryContainer": {
                  "Image": "683313688378.dkr.ecr.${AWS::Region}.amazonaws.com/sagemaker-scikit-learn:1.0-1-cpu-py3",
                  "ModelDataUrl.$": "$.ModelDataUrl",
                  "Environment": {
                    "SAGEMAKER_PROGRAM": "inference.py",
                    "SAGEMAKER_SUBMIT_DIRECTORY": "/opt/ml/code"
                  }
                },
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "${Environment}"
                  },
                  {
                    "Key": "Project",
                    "Value": "${ProjectName}"
                  },
                  {
                    "Key": "Stage",
                    "Value": "model"
                  }
                ]
              },
              "Next": "CreateEndpointConfig"
            },
            "CreateEndpointConfig": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sagemaker:createEndpointConfig",
              "Parameters": {
                "EndpointConfigName.$": "$.EndpointConfigName",
                "ProductionVariants": [
                  {
                    "VariantName": "primary",
                    "ModelName.$": "$.ModelName",
                    "InitialInstanceCount": 1,
                    "InstanceType": "${InferenceInstanceType}",
                    "InitialVariantWeight": 1
                  }
                ],
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "${Environment}"
                  },
                  {
                    "Key": "Project",
                    "Value": "${ProjectName}"
                  },
                  {
                    "Key": "Stage",
                    "Value": "endpoint-config"
                  }
                ]
              },
              "Next": "CreateEndpoint"
            },
            "CreateEndpoint": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sagemaker:createEndpoint",
              "Parameters": {
                "EndpointName.$": "$.EndpointName",
                "EndpointConfigName.$": "$.EndpointConfigName",
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "${Environment}"
                  },
                  {
                    "Key": "Project",
                    "Value": "${ProjectName}"
                  },
                  {
                    "Key": "Stage",
                    "Value": "endpoint"
                  }
                ]
              },
              "Next": "NotifySuccess"
            },
            "NotifySuccess": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "TopicArn": "${!If [CreateNotifications, !Ref MLPipelineNotificationsTopic, '']}",
                "Message": {
                  "pipeline_status": "SUCCESS",
                  "training_job.$": "$.TrainingJobName",
                  "endpoint_name.$": "$.EndpointName",
                  "model_performance.$": "$.EvaluationResult.Payload.test_r2",
                  "timestamp.$": "$$.State.EnteredTime"
                },
                "Subject": "ML Pipeline Deployment Successful"
              },
              "Next": "MLPipelineComplete"
            },
            "MLPipelineComplete": {
              "Type": "Succeed",
              "Result": "ML Pipeline completed successfully"
            },
            "ModelPerformanceInsufficient": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "TopicArn": "${!If [CreateNotifications, !Ref MLPipelineNotificationsTopic, '']}",
                "Message": {
                  "pipeline_status": "FAILED",
                  "reason": "Model performance insufficient",
                  "training_job.$": "$.TrainingJobName",
                  "model_performance.$": "$.EvaluationResult.Payload.test_r2",
                  "threshold": ${ModelPerformanceThreshold},
                  "timestamp.$": "$$.State.EnteredTime"
                },
                "Subject": "ML Pipeline Failed - Model Performance Insufficient"
              },
              "Next": "MLPipelineFailed"
            },
            "NotifyFailure": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "TopicArn": "${!If [CreateNotifications, !Ref MLPipelineNotificationsTopic, '']}",
                "Message": {
                  "pipeline_status": "FAILED",
                  "error.$": "$.error",
                  "timestamp.$": "$$.State.EnteredTime"
                },
                "Subject": "ML Pipeline Failed - Execution Error"
              },
              "Next": "MLPipelineFailed"
            },
            "MLPipelineFailed": {
              "Type": "Fail",
              "Error": "MLPipelineFailed",
              "Cause": "The ML pipeline failed during execution"
            }
          }
        }
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-ML-Pipeline'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: ML Pipeline Orchestration
  
  # CloudWatch Log Group for Step Functions
  StepFunctionsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/stepfunctions/${ProjectName}-ML-Pipeline-${Environment}'
      RetentionInDays: !If [IsProduction, 90, 30]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-StepFunctions-Logs'
        - Key: Environment
          Value: !Ref Environment
  
  # CloudWatch Log Group for Lambda
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-ModelEvaluation-${Environment}'
      RetentionInDays: !If [IsProduction, 90, 30]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-Lambda-Logs'
        - Key: Environment
          Value: !Ref Environment

Outputs:
  # S3 Bucket Information
  S3BucketName:
    Description: Name of the S3 bucket for ML pipeline artifacts
    Value: !Ref MLPipelineS3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'
  
  S3BucketArn:
    Description: ARN of the S3 bucket for ML pipeline artifacts
    Value: !GetAtt MLPipelineS3Bucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketArn'
  
  # IAM Role Information
  SageMakerExecutionRoleArn:
    Description: ARN of the SageMaker execution role
    Value: !GetAtt SageMakerExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SageMakerRole'
  
  StepFunctionsExecutionRoleArn:
    Description: ARN of the Step Functions execution role
    Value: !GetAtt StepFunctionsExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-StepFunctionsRole'
  
  # Lambda Function Information
  ModelEvaluationFunctionArn:
    Description: ARN of the model evaluation Lambda function
    Value: !GetAtt ModelEvaluationFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ModelEvaluationFunction'
  
  ModelEvaluationFunctionName:
    Description: Name of the model evaluation Lambda function
    Value: !Ref ModelEvaluationFunction
    Export:
      Name: !Sub '${AWS::StackName}-ModelEvaluationFunctionName'
  
  # Step Functions Information
  StateMachineArn:
    Description: ARN of the ML pipeline Step Functions state machine
    Value: !Ref MLPipelineStateMachine
    Export:
      Name: !Sub '${AWS::StackName}-StateMachine'
  
  StateMachineName:
    Description: Name of the ML pipeline Step Functions state machine
    Value: !Ref MLPipelineStateMachine
    Export:
      Name: !Sub '${AWS::StackName}-StateMachineName'
  
  # SNS Topic Information
  NotificationTopicArn:
    Description: ARN of the SNS topic for pipeline notifications
    Value: !If [CreateNotifications, !Ref MLPipelineNotificationsTopic, 'Not Created']
    Export:
      Name: !Sub '${AWS::StackName}-NotificationTopic'
  
  # CloudWatch Log Groups
  StepFunctionsLogGroupName:
    Description: Name of the CloudWatch log group for Step Functions
    Value: !Ref StepFunctionsLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-StepFunctionsLogGroup'
  
  LambdaLogGroupName:
    Description: Name of the CloudWatch log group for Lambda
    Value: !Ref LambdaLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LambdaLogGroup'
  
  # Deployment Information
  StackName:
    Description: Name of the CloudFormation stack
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub '${AWS::StackName}-StackName'
  
  Environment:
    Description: Environment for this deployment
    Value: !Ref Environment
    Export:
      Name: !Sub '${AWS::StackName}-Environment'
  
  # Quick Start Information
  QuickStartCommand:
    Description: Command to execute the ML pipeline
    Value: !Sub |
      aws stepfunctions start-execution \
        --state-machine-arn ${MLPipelineStateMachine} \
        --name "execution-$(date +%Y%m%d%H%M%S)" \
        --input '{
          "PreprocessingJobName": "preprocessing-$(date +%Y%m%d%H%M%S)",
          "TrainingJobName": "training-$(date +%Y%m%d%H%M%S)",
          "ModelName": "model-$(date +%Y%m%d%H%M%S)",
          "EndpointConfigName": "endpoint-config-$(date +%Y%m%d%H%M%S)",
          "EndpointName": "endpoint-$(date +%Y%m%d%H%M%S)",
          "ModelDataUrl": "s3://${MLPipelineS3Bucket}/model-artifacts/training-$(date +%Y%m%d%H%M%S)/output/model.tar.gz"
        }'