AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation StackSets for Multi-Account Multi-Region Management - Complete governance and security infrastructure'

# Template metadata
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Organization Configuration"
        Parameters:
          - OrganizationId
          - Environment
          - ComplianceLevel
      - Label:
          default: "Resource Configuration"
        Parameters:
          - ResourcePrefix
          - RetentionPeriod
          - NotificationEmail
      - Label:
          default: "Security Configuration"
        Parameters:
          - EnableKMSEncryption
          - EnableVPCFlowLogs
          - EnableGuardDuty
      - Label:
          default: "Monitoring Configuration"
        Parameters:
          - CloudWatchRetentionDays
          - EnableDetailedMonitoring
          - AlertingThreshold
    ParameterLabels:
      OrganizationId:
        default: "AWS Organization ID"
      Environment:
        default: "Environment Type"
      ComplianceLevel:
        default: "Compliance Level"
      ResourcePrefix:
        default: "Resource Prefix"
      RetentionPeriod:
        default: "Log Retention Period (Days)"
      NotificationEmail:
        default: "Notification Email Address"
      EnableKMSEncryption:
        default: "Enable KMS Encryption"
      EnableVPCFlowLogs:
        default: "Enable VPC Flow Logs"
      EnableGuardDuty:
        default: "Enable GuardDuty"
      CloudWatchRetentionDays:
        default: "CloudWatch Log Retention (Days)"
      EnableDetailedMonitoring:
        default: "Enable Detailed Monitoring"
      AlertingThreshold:
        default: "Alerting Threshold (Percentage)"

Parameters:
  # Organization Configuration
  OrganizationId:
    Type: String
    Description: 'AWS Organizations ID for multi-account governance'
    AllowedPattern: '^o-[0-9a-z]{10}$'
    ConstraintDescription: 'Must be a valid AWS Organizations ID (e.g., o-1234567890)'
    Default: 'o-1234567890'

  Environment:
    Type: String
    Description: 'Environment for which policies apply'
    Default: 'all'
    AllowedValues: 
      - 'development'
      - 'staging' 
      - 'production'
      - 'all'

  ComplianceLevel:
    Type: String
    Description: 'Compliance level for security policies and controls'
    Default: 'standard'
    AllowedValues:
      - 'basic'
      - 'standard'
      - 'strict'

  # Resource Configuration
  ResourcePrefix:
    Type: String
    Description: 'Prefix for resource names to ensure uniqueness'
    Default: 'org-governance'
    MinLength: 3
    MaxLength: 20
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    ConstraintDescription: 'Must start with letter and contain only alphanumeric characters and hyphens'

  RetentionPeriod:
    Type: Number
    Description: 'Number of days to retain audit logs'
    Default: 2555
    MinValue: 1
    MaxValue: 3653
    ConstraintDescription: 'Must be between 1 and 3653 days (10 years)'

  NotificationEmail:
    Type: String
    Description: 'Email address for security alerts and notifications'
    AllowedPattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    ConstraintDescription: 'Must be a valid email address'
    Default: 'security@example.com'

  # Security Configuration
  EnableKMSEncryption:
    Type: String
    Description: 'Enable KMS encryption for audit logs and sensitive data'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  EnableVPCFlowLogs:
    Type: String
    Description: 'Enable VPC Flow Logs for network monitoring'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  EnableGuardDuty:
    Type: String
    Description: 'Enable GuardDuty for threat detection'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  # Monitoring Configuration
  CloudWatchRetentionDays:
    Type: Number
    Description: 'CloudWatch log retention period in days'
    Default: 365
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653

  EnableDetailedMonitoring:
    Type: String
    Description: 'Enable detailed CloudWatch monitoring'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  AlertingThreshold:
    Type: Number
    Description: 'Percentage threshold for alerting on failed operations'
    Default: 10
    MinValue: 1
    MaxValue: 100
    ConstraintDescription: 'Must be between 1 and 100'

# Configuration mappings for different compliance levels
Mappings:
  ComplianceConfig:
    basic:
      PasswordMinLength: 8
      PasswordReusePrevention: 5
      MaxPasswordAge: 120
      RequireMFA: 'false'
      S3PublicReadBlock: 'true'
      S3PublicWriteBlock: 'true'
      CloudTrailLogLevel: 'ReadOnly'
      ConfigRecordingAll: 'false'
      EnableSecurityHub: 'false'
    standard:
      PasswordMinLength: 12
      PasswordReusePrevention: 12
      MaxPasswordAge: 90
      RequireMFA: 'true'
      S3PublicReadBlock: 'true'
      S3PublicWriteBlock: 'true'
      CloudTrailLogLevel: 'All'
      ConfigRecordingAll: 'true'
      EnableSecurityHub: 'true'
    strict:
      PasswordMinLength: 16
      PasswordReusePrevention: 24
      MaxPasswordAge: 60
      RequireMFA: 'true'
      S3PublicReadBlock: 'true'
      S3PublicWriteBlock: 'true'
      CloudTrailLogLevel: 'All'
      ConfigRecordingAll: 'true'
      EnableSecurityHub: 'true'

  RegionConfig:
    us-east-1:
      IsGlobalRegion: 'true'
      ConfigDeliveryFrequency: 'TwentyFour_Hours'
    us-west-2:
      IsGlobalRegion: 'false'
      ConfigDeliveryFrequency: 'TwentyFour_Hours'
    eu-west-1:
      IsGlobalRegion: 'false'
      ConfigDeliveryFrequency: 'TwentyFour_Hours'
    ap-southeast-1:
      IsGlobalRegion: 'false'
      ConfigDeliveryFrequency: 'TwentyFour_Hours'

# Conditions for conditional resource creation
Conditions:
  # Compliance level conditions
  IsBasicCompliance: !Equals [!Ref ComplianceLevel, 'basic']
  IsStandardCompliance: !Equals [!Ref ComplianceLevel, 'standard']
  IsStrictCompliance: !Equals [!Ref ComplianceLevel, 'strict']
  
  # Feature enablement conditions
  EnableKMS: !Equals [!Ref EnableKMSEncryption, 'true']
  EnableVPCLogs: !Equals [!Ref EnableVPCFlowLogs, 'true']
  EnableGuardDutyDetection: !Equals [!Ref EnableGuardDuty, 'true']
  EnableDetailedCloudWatchMonitoring: !Equals [!Ref EnableDetailedMonitoring, 'true']
  
  # Security features based on compliance level
  EnableSecurityHub: !Not [!Equals [!FindInMap [ComplianceConfig, !Ref ComplianceLevel, EnableSecurityHub], 'false']]
  RequireMFAForUsers: !Not [!Equals [!FindInMap [ComplianceConfig, !Ref ComplianceLevel, RequireMFA], 'false']]
  
  # Global region check
  IsGlobalRegion: !Equals [!FindInMap [RegionConfig, !Ref 'AWS::Region', IsGlobalRegion], 'true']

Resources:
  # =================================================================
  # KMS KEY FOR ENCRYPTION
  # =================================================================
  
  # Master KMS key for encrypting audit logs and sensitive data
  AuditMasterKey:
    Type: AWS::KMS::Key
    Condition: EnableKMS
    Properties:
      Description: 'Master KMS key for organization-wide audit log encryption'
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow CloudTrail to encrypt logs
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action:
              - 'kms:Decrypt'
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
              - 'kms:ReEncrypt*'
            Resource: '*'
          - Sid: Allow Config to encrypt configuration items
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action:
              - 'kms:Decrypt'
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
              - 'kms:ReEncrypt*'
            Resource: '*'
          - Sid: Allow GuardDuty to encrypt findings
            Effect: Allow
            Principal:
              Service: guardduty.amazonaws.com
            Action:
              - 'kms:Decrypt'
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
              - 'kms:ReEncrypt*'
            Resource: '*'
          - Sid: Allow VPC Flow Logs to encrypt logs
            Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action:
              - 'kms:Decrypt'
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
              - 'kms:ReEncrypt*'
            Resource: '*'
      KeyUsage: ENCRYPT_DECRYPT
      KeySpec: SYMMETRIC_DEFAULT
      EnableKeyRotation: true
      MultiRegion: true
      PendingWindowInDays: 30
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-audit-master-key'
        - Key: Purpose
          Value: 'AuditLogEncryption'
        - Key: Environment
          Value: !Ref Environment
        - Key: ComplianceLevel
          Value: !Ref ComplianceLevel
        - Key: ManagedBy
          Value: 'CloudFormation-StackSets'

  # KMS key alias for easier reference
  AuditMasterKeyAlias:
    Type: AWS::KMS::Alias
    Condition: EnableKMS
    Properties:
      AliasName: !Sub 'alias/${ResourcePrefix}-audit-master-key'
      TargetKeyId: !Ref AuditMasterKey

  # =================================================================
  # IAM POLICIES AND ROLES
  # =================================================================
  
  # Organization-wide IAM password policy
  OrganizationPasswordPolicy:
    Type: AWS::IAM::AccountPasswordPolicy
    Properties:
      MinimumPasswordLength: !FindInMap [ComplianceConfig, !Ref ComplianceLevel, PasswordMinLength]
      RequireUppercaseCharacters: true
      RequireLowercaseCharacters: true
      RequireNumbers: true
      RequireSymbols: true
      MaxPasswordAge: !FindInMap [ComplianceConfig, !Ref ComplianceLevel, MaxPasswordAge]
      PasswordReusePrevention: !FindInMap [ComplianceConfig, !Ref ComplianceLevel, PasswordReusePrevention]
      HardExpiry: false
      AllowUsersToChangePassword: true

  # IAM role for CloudTrail
  CloudTrailRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ResourcePrefix}-cloudtrail-role-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CloudTrailLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/cloudtrail/*'
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-cloudtrail-role'
        - Key: Purpose
          Value: 'CloudTrailExecution'
        - Key: Environment
          Value: !Ref Environment

  # IAM role for AWS Config
  ConfigRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ResourcePrefix}-config-role-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/ConfigRole'
      Policies:
        - PolicyName: ConfigDeliveryPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                  - 's3:ListBucket'
                Resource: !GetAtt ConfigBucket.Arn
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:DeleteObject'
                Resource: !Sub '${ConfigBucket.Arn}/*'
                Condition:
                  StringEquals:
                    's3:x-amz-acl': 'bucket-owner-full-control'
              - !If
                - EnableKMS
                - Effect: Allow
                  Action:
                    - 'kms:Decrypt'
                    - 'kms:DescribeKey'
                    - 'kms:Encrypt'
                    - 'kms:GenerateDataKey'
                    - 'kms:GenerateDataKeyWithoutPlaintext'
                    - 'kms:ReEncrypt*'
                  Resource: !GetAtt AuditMasterKey.Arn
                - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-config-role'
        - Key: Purpose
          Value: 'ConfigExecution'
        - Key: Environment
          Value: !Ref Environment

  # IAM role for VPC Flow Logs
  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Condition: EnableVPCLogs
    Properties:
      RoleName: !Sub '${ResourcePrefix}-vpc-flow-logs-role-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: VPCFlowLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/vpc/flowlogs/*'
              - !If
                - EnableKMS
                - Effect: Allow
                  Action:
                    - 'kms:Decrypt'
                    - 'kms:DescribeKey'
                    - 'kms:Encrypt'
                    - 'kms:GenerateDataKey'
                    - 'kms:GenerateDataKeyWithoutPlaintext'
                    - 'kms:ReEncrypt*'
                  Resource: !GetAtt AuditMasterKey.Arn
                - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-vpc-flow-logs-role'
        - Key: Purpose
          Value: 'VPCFlowLogsExecution'
        - Key: Environment
          Value: !Ref Environment

  # =================================================================
  # S3 BUCKETS FOR AUDIT LOGS
  # =================================================================
  
  # S3 bucket for CloudTrail audit logs
  AuditBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ResourcePrefix}-audit-logs-${AWS::AccountId}-${AWS::Region}-${OrganizationId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: !FindInMap [ComplianceConfig, !Ref ComplianceLevel, S3PublicReadBlock]
        BlockPublicPolicy: !FindInMap [ComplianceConfig, !Ref ComplianceLevel, S3PublicWriteBlock]
        IgnorePublicAcls: !FindInMap [ComplianceConfig, !Ref ComplianceLevel, S3PublicReadBlock]
        RestrictPublicBuckets: !FindInMap [ComplianceConfig, !Ref ComplianceLevel, S3PublicWriteBlock]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: !If
                - EnableKMS
                - 'aws:kms'
                - 'AES256'
              KMSMasterKeyID: !If
                - EnableKMS
                - !Ref AuditMasterKey
                - !Ref 'AWS::NoValue'
            BucketKeyEnabled: !If
              - EnableKMS
              - true
              - !Ref 'AWS::NoValue'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: !Ref RetentionPeriod
            NoncurrentVersionExpirationInDays: 365
          - Id: TransitionToIA
            Status: Enabled
            TransitionInDays: 30
            StorageClass: STANDARD_IA
          - Id: TransitionToGlacier
            Status: Enabled
            TransitionInDays: 90
            StorageClass: GLACIER
          - Id: TransitionToDeepArchive
            Status: Enabled
            TransitionInDays: 365
            StorageClass: DEEP_ARCHIVE
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogBucket
        LogFilePrefix: 'audit-bucket-access-logs/'
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref SecurityAlertTopic
            Event: 's3:ObjectCreated:*'
          - Topic: !Ref SecurityAlertTopic
            Event: 's3:ObjectRemoved:*'
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-audit-logs-bucket'
        - Key: Purpose
          Value: 'AuditLogs'
        - Key: Environment
          Value: !Ref Environment
        - Key: ComplianceLevel
          Value: !Ref ComplianceLevel
        - Key: RetentionPeriod
          Value: !Ref RetentionPeriod

  # S3 bucket policy for CloudTrail
  AuditBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AuditBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 's3:GetBucketAcl'
            Resource: !GetAtt AuditBucket.Arn
            Condition:
              StringEquals:
                'aws:SourceArn': !Sub 'arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${ResourcePrefix}-organization-trail'
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 's3:PutObject'
            Resource: !Sub '${AuditBucket.Arn}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'
                'aws:SourceArn': !Sub 'arn:aws:cloudtrail:${AWS::Region}:${AWS::AccountId}:trail/${ResourcePrefix}-organization-trail'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: 
              - !GetAtt AuditBucket.Arn
              - !Sub '${AuditBucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'
          - Sid: DenyPublicAccess
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !GetAtt AuditBucket.Arn
              - !Sub '${AuditBucket.Arn}/*'
            Condition:
              StringNotEquals:
                'aws:PrincipalServiceName':
                  - 'cloudtrail.amazonaws.com'
                  - 'config.amazonaws.com'

  # S3 bucket for AWS Config
  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ResourcePrefix}-config-logs-${AWS::AccountId}-${AWS::Region}-${OrganizationId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: !If
                - EnableKMS
                - 'aws:kms'
                - 'AES256'
              KMSMasterKeyID: !If
                - EnableKMS
                - !Ref AuditMasterKey
                - !Ref 'AWS::NoValue'
            BucketKeyEnabled: !If
              - EnableKMS
              - true
              - !Ref 'AWS::NoValue'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldConfigLogs
            Status: Enabled
            ExpirationInDays: !Ref RetentionPeriod
            NoncurrentVersionExpirationInDays: 365
          - Id: TransitionConfigToIA
            Status: Enabled
            TransitionInDays: 30
            StorageClass: STANDARD_IA
          - Id: TransitionConfigToGlacier
            Status: Enabled
            TransitionInDays: 90
            StorageClass: GLACIER
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-config-logs-bucket'
        - Key: Purpose
          Value: 'ConfigLogs'
        - Key: Environment
          Value: !Ref Environment
        - Key: ComplianceLevel
          Value: !Ref ComplianceLevel

  # S3 bucket policy for AWS Config
  ConfigBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ConfigBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSConfigBucketPermissionsCheck
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: 's3:GetBucketAcl'
            Resource: !GetAtt ConfigBucket.Arn
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref 'AWS::AccountId'
          - Sid: AWSConfigBucketExistenceCheck
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: 's3:ListBucket'
            Resource: !GetAtt ConfigBucket.Arn
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref 'AWS::AccountId'
          - Sid: AWSConfigBucketDelivery
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: 's3:PutObject'
            Resource: !Sub '${ConfigBucket.Arn}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'
                'aws:SourceAccount': !Ref 'AWS::AccountId'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !GetAtt ConfigBucket.Arn
              - !Sub '${ConfigBucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  # S3 bucket for access logs
  AccessLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ResourcePrefix}-access-logs-${AWS::AccountId}-${AWS::Region}-${OrganizationId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: !If
                - EnableKMS
                - 'aws:kms'
                - 'AES256'
              KMSMasterKeyID: !If
                - EnableKMS
                - !Ref AuditMasterKey
                - !Ref 'AWS::NoValue'
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldAccessLogs
            Status: Enabled
            ExpirationInDays: 90
            NoncurrentVersionExpirationInDays: 30
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-access-logs-bucket'
        - Key: Purpose
          Value: 'AccessLogs'
        - Key: Environment
          Value: !Ref Environment

  # =================================================================
  # CLOUDWATCH LOG GROUPS
  # =================================================================
  
  # CloudWatch log group for CloudTrail
  CloudTrailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/cloudtrail/${ResourcePrefix}-${AWS::AccountId}'
      RetentionInDays: !Ref CloudWatchRetentionDays
      KmsKeyId: !If
        - EnableKMS
        - !GetAtt AuditMasterKey.Arn
        - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-cloudtrail-logs'
        - Key: Purpose
          Value: 'CloudTrailLogs'
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch log group for VPC Flow Logs
  VPCFlowLogsGroup:
    Type: AWS::Logs::LogGroup
    Condition: EnableVPCLogs
    Properties:
      LogGroupName: !Sub '/aws/vpc/flowlogs/${ResourcePrefix}-${AWS::AccountId}'
      RetentionInDays: !Ref CloudWatchRetentionDays
      KmsKeyId: !If
        - EnableKMS
        - !GetAtt AuditMasterKey.Arn
        - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-vpc-flow-logs'
        - Key: Purpose
          Value: 'VPCFlowLogs'
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch log group for organization events
  OrganizationEventsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/organizations/${ResourcePrefix}-events'
      RetentionInDays: !Ref CloudWatchRetentionDays
      KmsKeyId: !If
        - EnableKMS
        - !GetAtt AuditMasterKey.Arn
        - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-org-events'
        - Key: Purpose
          Value: 'OrganizationEvents'
        - Key: Environment
          Value: !Ref Environment

  # =================================================================
  # CLOUDTRAIL CONFIGURATION
  # =================================================================
  
  # Organization-wide CloudTrail for comprehensive auditing
  OrganizationCloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: !Sub '${ResourcePrefix}-organization-trail'
      S3BucketName: !Ref AuditBucket
      S3KeyPrefix: !Sub 'cloudtrail-logs/${AWS::AccountId}/'
      CloudWatchLogsLogGroupArn: !GetAtt CloudTrailLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt CloudTrailRole.Arn
      IncludeGlobalServiceEvents: !If
        - IsGlobalRegion
        - true
        - false
      IsMultiRegionTrail: true
      EnableLogFileValidation: true
      KMSKeyId: !If
        - EnableKMS
        - !Ref AuditMasterKey
        - !Ref 'AWS::NoValue'
      InsightSelectors:
        - InsightType: ApiCallRateInsight
        - InsightType: ApiErrorRateInsight
      EventSelectors:
        - ReadWriteType: !FindInMap [ComplianceConfig, !Ref ComplianceLevel, CloudTrailLogLevel]
          IncludeManagementEvents: true
          DataResources:
            - Type: 'AWS::S3::Object'
              Values:
                - 'arn:aws:s3:::*/*'
            - Type: 'AWS::Lambda::Function'
              Values:
                - 'arn:aws:lambda:*:*:function:*'
            - Type: 'AWS::DynamoDB::Table'
              Values:
                - 'arn:aws:dynamodb:*:*:table/*'
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-organization-trail'
        - Key: Purpose
          Value: 'OrganizationAudit'
        - Key: Environment
          Value: !Ref Environment
        - Key: ComplianceLevel
          Value: !Ref ComplianceLevel

  # =================================================================
  # AWS CONFIG CONFIGURATION
  # =================================================================
  
  # AWS Config configuration recorder
  ConfigurationRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      Name: !Sub '${ResourcePrefix}-config-recorder'
      RoleARN: !GetAtt ConfigRole.Arn
      RecordingGroup:
        AllSupported: !FindInMap [ComplianceConfig, !Ref ComplianceLevel, ConfigRecordingAll]
        IncludeGlobalResourceTypes: !If
          - IsGlobalRegion
          - true
          - false
        ResourceTypes: !If
          - IsBasicCompliance
          - - 'AWS::IAM::Role'
            - 'AWS::IAM::Policy'
            - 'AWS::S3::Bucket'
            - 'AWS::EC2::SecurityGroup'
            - 'AWS::EC2::Instance'
            - 'AWS::Lambda::Function'
          - !Ref 'AWS::NoValue'
      RecordingMode:
        RecordingFrequency: CONTINUOUS
        RecordingModeOverrides:
          - Description: 'Override for global resources'
            RecordingFrequency: DAILY
            ResourceTypes:
              - 'AWS::IAM::Role'
              - 'AWS::IAM::Policy'
              - 'AWS::IAM::User'

  # AWS Config delivery channel
  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Properties:
      Name: !Sub '${ResourcePrefix}-config-delivery'
      S3BucketName: !Ref ConfigBucket
      S3KeyPrefix: !Sub 'config-logs/${AWS::AccountId}/'
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: !FindInMap [RegionConfig, !Ref 'AWS::Region', ConfigDeliveryFrequency]
      S3KmsKeyArn: !If
        - EnableKMS
        - !GetAtt AuditMasterKey.Arn
        - !Ref 'AWS::NoValue'

  # =================================================================
  # SECURITY SERVICES
  # =================================================================
  
  # GuardDuty detector for threat detection
  GuardDutyDetector:
    Type: AWS::GuardDuty::Detector
    Condition: EnableGuardDutyDetection
    Properties:
      Enable: true
      FindingPublishingFrequency: FIFTEEN_MINUTES
      DataSources:
        S3Logs:
          Enable: true
        KubernetesConfiguration:
          AuditLogs:
            Enable: true
        MalwareProtection:
          ScanEc2InstanceWithFindings:
            EbsVolumes: true
      Features:
        - Name: S3_DATA_EVENTS
          Status: ENABLED
        - Name: EKS_AUDIT_LOGS
          Status: ENABLED
        - Name: EBS_MALWARE_PROTECTION
          Status: ENABLED
        - Name: RDS_LOGIN_EVENTS
          Status: ENABLED
        - Name: LAMBDA_NETWORK_LOGS
          Status: ENABLED
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-guardduty-detector'
        - Key: Purpose
          Value: 'ThreatDetection'
        - Key: Environment
          Value: !Ref Environment
        - Key: ComplianceLevel
          Value: !Ref ComplianceLevel

  # Security Hub for centralized security findings
  SecurityHub:
    Type: AWS::SecurityHub::Hub
    Condition: EnableSecurityHub
    Properties:
      EnableDefaultStandards: true
      ControlFindingGenerator: SECURITY_CONTROL
      AutoEnableControls: true
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-security-hub'
        - Key: Purpose
          Value: 'SecurityFindings'
        - Key: Environment
          Value: !Ref Environment

  # =================================================================
  # NOTIFICATIONS AND ALERTING
  # =================================================================
  
  # SNS topic for security alerts
  SecurityAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ResourcePrefix}-security-alerts'
      DisplayName: 'Organization Security Alerts'
      KmsMasterKeyId: !If
        - EnableKMS
        - !Ref AuditMasterKey
        - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-security-alerts'
        - Key: Purpose
          Value: 'SecurityAlerting'
        - Key: Environment
          Value: !Ref Environment

  # SNS topic policy
  SecurityAlertTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SecurityAlertTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudWatchAlarmsToPublish
            Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action: 'sns:Publish'
            Resource: !Ref SecurityAlertTopic
          - Sid: AllowGuardDutyToPublish
            Effect: Allow
            Principal:
              Service: guardduty.amazonaws.com
            Action: 'sns:Publish'
            Resource: !Ref SecurityAlertTopic
          - Sid: AllowS3ToPublish
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: 'sns:Publish'
            Resource: !Ref SecurityAlertTopic
          - Sid: AllowConfigToPublish
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: 'sns:Publish'
            Resource: !Ref SecurityAlertTopic

  # Email subscription for security alerts
  SecurityAlertSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref SecurityAlertTopic
      Endpoint: !Ref NotificationEmail

  # =================================================================
  # CLOUDWATCH ALARMS AND MONITORING
  # =================================================================
  
  # CloudWatch alarm for failed CloudTrail operations
  CloudTrailErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ResourcePrefix}-cloudtrail-errors'
      AlarmDescription: 'Monitor CloudTrail for errors and failures'
      MetricName: ErrorCount
      Namespace: CloudTrailMetrics
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref SecurityAlertTopic
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-cloudtrail-errors'
        - Key: Purpose
          Value: 'CloudTrailMonitoring'
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch alarm for GuardDuty findings
  GuardDutyFindingsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: EnableGuardDutyDetection
    Properties:
      AlarmName: !Sub '${ResourcePrefix}-guardduty-findings'
      AlarmDescription: 'Monitor GuardDuty for security findings'
      MetricName: FindingCount
      Namespace: AWS/GuardDuty
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref SecurityAlertTopic
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-guardduty-findings'
        - Key: Purpose
          Value: 'ThreatDetectionMonitoring'
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch alarm for Config compliance
  ConfigComplianceAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ResourcePrefix}-config-compliance'
      AlarmDescription: 'Monitor AWS Config for compliance violations'
      MetricName: ComplianceByConfigRule
      Namespace: AWS/Config
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 0.95
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching
      AlarmActions:
        - !Ref SecurityAlertTopic
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-config-compliance'
        - Key: Purpose
          Value: 'ComplianceMonitoring'
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch alarm for audit bucket access
  AuditBucketAccessAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ResourcePrefix}-audit-bucket-access'
      AlarmDescription: 'Monitor audit bucket for unauthorized access attempts'
      MetricName: 4xxError
      Namespace: AWS/S3
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Dimensions:
        - Name: BucketName
          Value: !Ref AuditBucket
      AlarmActions:
        - !Ref SecurityAlertTopic
      Tags:
        - Key: Name
          Value: !Sub '${ResourcePrefix}-audit-bucket-access'
        - Key: Purpose
          Value: 'AuditBucketMonitoring'
        - Key: Environment
          Value: !Ref Environment

  # =================================================================
  # CLOUDWATCH DASHBOARD
  # =================================================================
  
  # CloudWatch dashboard for governance monitoring
  GovernanceDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ResourcePrefix}-governance-dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/CloudTrail", "DataEvents", "TrailName", "${OrganizationCloudTrail}"],
                  [".", "ManagementEvents", ".", "."]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "CloudTrail Events",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Config", "ComplianceByConfigRule", "ConfigRuleName", "ALL"],
                  [".", "ComplianceByResourceType", "ResourceType", "ALL"]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Config Compliance",
                "yAxis": {
                  "left": {
                    "min": 0,
                    "max": 1
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/GuardDuty", "FindingCount", "DetectorId", "${GuardDutyDetector}"]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "GuardDuty Findings",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/S3", "BucketSizeBytes", "BucketName", "${AuditBucket}", "StorageType", "StandardStorage"],
                  [".", "NumberOfObjects", ".", ".", ".", "AllStorageTypes"]
                ],
                "period": 86400,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Audit Bucket Usage",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 12,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '${CloudTrailLogGroup}' | fields @timestamp, eventName, sourceIPAddress, userIdentity.type, errorCode, errorMessage\n| filter ispresent(errorCode)\n| sort @timestamp desc\n| limit 20",
                "region": "${AWS::Region}",
                "title": "Recent CloudTrail Errors"
              }
            }
          ]
        }

# =================================================================
# OUTPUTS
# =================================================================

Outputs:
  # Template information
  TemplateVersion:
    Description: 'CloudFormation template version'
    Value: '1.0'
    Export:
      Name: !Sub '${AWS::StackName}-TemplateVersion'

  ComplianceLevel:
    Description: 'Configured compliance level'
    Value: !Ref ComplianceLevel
    Export:
      Name: !Sub '${AWS::StackName}-ComplianceLevel'

  # KMS Key outputs
  AuditMasterKeyId:
    Condition: EnableKMS
    Description: 'KMS key ID for audit log encryption'
    Value: !Ref AuditMasterKey
    Export:
      Name: !Sub '${AWS::StackName}-AuditMasterKeyId'

  AuditMasterKeyArn:
    Condition: EnableKMS
    Description: 'KMS key ARN for audit log encryption'
    Value: !GetAtt AuditMasterKey.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AuditMasterKeyArn'

  # S3 Bucket outputs
  AuditBucketName:
    Description: 'S3 bucket name for audit logs'
    Value: !Ref AuditBucket
    Export:
      Name: !Sub '${AWS::StackName}-AuditBucketName'

  AuditBucketArn:
    Description: 'S3 bucket ARN for audit logs'
    Value: !GetAtt AuditBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AuditBucketArn'

  ConfigBucketName:
    Description: 'S3 bucket name for Config logs'
    Value: !Ref ConfigBucket
    Export:
      Name: !Sub '${AWS::StackName}-ConfigBucketName'

  ConfigBucketArn:
    Description: 'S3 bucket ARN for Config logs'
    Value: !GetAtt ConfigBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ConfigBucketArn'

  # CloudTrail outputs
  CloudTrailArn:
    Description: 'CloudTrail ARN for organization auditing'
    Value: !GetAtt OrganizationCloudTrail.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CloudTrailArn'

  CloudTrailLogGroupArn:
    Description: 'CloudWatch log group ARN for CloudTrail'
    Value: !GetAtt CloudTrailLogGroup.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CloudTrailLogGroupArn'

  # AWS Config outputs
  ConfigurationRecorderName:
    Description: 'AWS Config recorder name'
    Value: !Ref ConfigurationRecorder
    Export:
      Name: !Sub '${AWS::StackName}-ConfigurationRecorderName'

  ConfigDeliveryChannelName:
    Description: 'AWS Config delivery channel name'
    Value: !Ref ConfigDeliveryChannel
    Export:
      Name: !Sub '${AWS::StackName}-ConfigDeliveryChannelName'

  # Security service outputs
  GuardDutyDetectorId:
    Condition: EnableGuardDutyDetection
    Description: 'GuardDuty detector ID'
    Value: !Ref GuardDutyDetector
    Export:
      Name: !Sub '${AWS::StackName}-GuardDutyDetectorId'

  SecurityHubArn:
    Condition: EnableSecurityHub
    Description: 'Security Hub ARN'
    Value: !Ref SecurityHub
    Export:
      Name: !Sub '${AWS::StackName}-SecurityHubArn'

  # Notification outputs
  SecurityAlertTopicArn:
    Description: 'SNS topic ARN for security alerts'
    Value: !Ref SecurityAlertTopic
    Export:
      Name: !Sub '${AWS::StackName}-SecurityAlertTopicArn'

  # IAM role outputs
  CloudTrailRoleArn:
    Description: 'IAM role ARN for CloudTrail'
    Value: !GetAtt CloudTrailRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CloudTrailRoleArn'

  ConfigRoleArn:
    Description: 'IAM role ARN for AWS Config'
    Value: !GetAtt ConfigRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ConfigRoleArn'

  VPCFlowLogsRoleArn:
    Condition: EnableVPCLogs
    Description: 'IAM role ARN for VPC Flow Logs'
    Value: !GetAtt VPCFlowLogsRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-VPCFlowLogsRoleArn'

  # Dashboard outputs
  DashboardURL:
    Description: 'CloudWatch dashboard URL for governance monitoring'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ResourcePrefix}-governance-dashboard'
    Export:
      Name: !Sub '${AWS::StackName}-DashboardURL'

  # Monitoring outputs
  CloudTrailErrorAlarmArn:
    Description: 'CloudWatch alarm ARN for CloudTrail errors'
    Value: !GetAtt CloudTrailErrorAlarm.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CloudTrailErrorAlarmArn'

  GuardDutyFindingsAlarmArn:
    Condition: EnableGuardDutyDetection
    Description: 'CloudWatch alarm ARN for GuardDuty findings'
    Value: !GetAtt GuardDutyFindingsAlarm.Arn
    Export:
      Name: !Sub '${AWS::StackName}-GuardDutyFindingsAlarmArn'

  ConfigComplianceAlarmArn:
    Description: 'CloudWatch alarm ARN for Config compliance'
    Value: !GetAtt ConfigComplianceAlarm.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ConfigComplianceAlarmArn'

  # Usage instructions
  DeploymentInstructions:
    Description: 'Instructions for deploying this template as a StackSet'
    Value: !Sub |
      To deploy this template as a StackSet:
      1. Create StackSet: aws cloudformation create-stack-set --stack-set-name ${ResourcePrefix}-governance --template-body file://cloudformation.yaml --capabilities CAPABILITY_IAM --permission-model SERVICE_MANAGED
      2. Deploy to OUs: aws cloudformation create-stack-instances --stack-set-name ${ResourcePrefix}-governance --deployment-targets OrganizationalUnitIds=ou-root-xxxxxxxxx --regions us-east-1,us-west-2,eu-west-1
      3. Monitor: aws cloudformation describe-stack-set-operation --stack-set-name ${ResourcePrefix}-governance --operation-id <operation-id>