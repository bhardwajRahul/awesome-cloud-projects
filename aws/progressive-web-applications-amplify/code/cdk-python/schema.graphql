# GraphQL Schema for Progressive Web Application Task Manager
# This schema defines the data types and operations for the PWA task management system

# Task priority enumeration
enum Priority {
  LOW
  MEDIUM
  HIGH
}

# Task status enumeration
enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

# Task type definition
type Task {
  id: ID!
  owner: String!
  title: String!
  description: String
  completed: Boolean!
  priority: Priority!
  status: TaskStatus
  dueDate: AWSDate
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  attachments: [String]
  tags: [String]
  estimatedHours: Int
  actualHours: Int
}

# Input type for creating tasks
input CreateTaskInput {
  title: String!
  description: String
  completed: Boolean
  priority: Priority!
  status: TaskStatus
  dueDate: AWSDate
  attachments: [String]
  tags: [String]
  estimatedHours: Int
}

# Input type for updating tasks
input UpdateTaskInput {
  id: ID!
  title: String
  description: String
  completed: Boolean
  priority: Priority
  status: TaskStatus
  dueDate: AWSDate
  attachments: [String]
  tags: [String]
  estimatedHours: Int
  actualHours: Int
}

# Input type for deleting tasks
input DeleteTaskInput {
  id: ID!
}

# Filter input for listing tasks
input TaskFilterInput {
  priority: Priority
  status: TaskStatus
  completed: Boolean
  dueBefore: AWSDate
  dueAfter: AWSDate
  tags: [String]
}

# Sort input for listing tasks
input TaskSortInput {
  field: TaskSortField!
  direction: SortDirection!
}

# Task sort fields
enum TaskSortField {
  createdAt
  updatedAt
  dueDate
  priority
  title
}

# Sort direction
enum SortDirection {
  ASC
  DESC
}

# Paginated task list response
type TaskConnection {
  items: [Task!]!
  nextToken: String
  total: Int
}

# File upload information
type FileUpload {
  key: String!
  url: String!
  contentType: String
  size: Int
}

# Input for file upload
input FileUploadInput {
  key: String!
  contentType: String!
  size: Int
}

# User profile type
type UserProfile {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  avatar: String
  preferences: UserPreferences
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# User preferences
type UserPreferences {
  theme: String
  notifications: NotificationPreferences
  defaultPriority: Priority
  timezone: String
}

# Notification preferences
type NotificationPreferences {
  email: Boolean
  push: Boolean
  dueDateReminders: Boolean
  taskAssignments: Boolean
}

# Input for updating user profile
input UpdateUserProfileInput {
  firstName: String
  lastName: String
  avatar: String
  preferences: UserPreferencesInput
}

# Input for user preferences
input UserPreferencesInput {
  theme: String
  notifications: NotificationPreferencesInput
  defaultPriority: Priority
  timezone: String
}

# Input for notification preferences
input NotificationPreferencesInput {
  email: Boolean
  push: Boolean
  dueDateReminders: Boolean
  taskAssignments: Boolean
}

# Analytics data
type TaskAnalytics {
  totalTasks: Int!
  completedTasks: Int!
  pendingTasks: Int!
  overdueTasks: Int!
  completionRate: Float!
  averageCompletionTime: Float
  tasksByPriority: [PriorityCount!]!
  tasksByStatus: [StatusCount!]!
  productivity: ProductivityMetrics!
}

# Priority count for analytics
type PriorityCount {
  priority: Priority!
  count: Int!
}

# Status count for analytics
type StatusCount {
  status: TaskStatus!
  count: Int!
}

# Productivity metrics
type ProductivityMetrics {
  tasksCompletedToday: Int!
  tasksCompletedThisWeek: Int!
  tasksCompletedThisMonth: Int!
  averageTasksPerDay: Float!
  streak: Int!
}

# Query type - defines all read operations
type Query {
  # Get a single task by ID
  getTask(id: ID!): Task

  # List tasks with optional filtering, sorting, and pagination
  listTasks(
    filter: TaskFilterInput
    sort: TaskSortInput
    limit: Int
    nextToken: String
  ): TaskConnection!

  # Get user profile
  getUserProfile: UserProfile

  # Get task analytics
  getTaskAnalytics(
    startDate: AWSDate
    endDate: AWSDate
  ): TaskAnalytics!

  # Get presigned URL for file upload
  getUploadUrl(input: FileUploadInput!): FileUpload!

  # Search tasks by text
  searchTasks(
    query: String!
    limit: Int
    nextToken: String
  ): TaskConnection!
}

# Mutation type - defines all write operations
type Mutation {
  # Create a new task
  createTask(input: CreateTaskInput!): Task!

  # Update an existing task
  updateTask(input: UpdateTaskInput!): Task!

  # Delete a task
  deleteTask(input: DeleteTaskInput!): Task!

  # Bulk create tasks
  batchCreateTasks(input: [CreateTaskInput!]!): [Task!]!

  # Bulk update tasks
  batchUpdateTasks(input: [UpdateTaskInput!]!): [Task!]!

  # Bulk delete tasks
  batchDeleteTasks(input: [DeleteTaskInput!]!): [Task!]!

  # Update user profile
  updateUserProfile(input: UpdateUserProfileInput!): UserProfile!

  # Mark task as completed
  completeTask(id: ID!): Task!

  # Mark task as incomplete
  uncompleteTask(id: ID!): Task!

  # Duplicate a task
  duplicateTask(id: ID!): Task!
}

# Subscription type - defines real-time operations
type Subscription {
  # Subscribe to task updates for the authenticated user
  onTaskUpdate(owner: String!): Task
    @aws_subscribe(mutations: ["createTask", "updateTask", "deleteTask"])

  # Subscribe to task creation
  onTaskCreate(owner: String!): Task
    @aws_subscribe(mutations: ["createTask"])

  # Subscribe to task deletion
  onTaskDelete(owner: String!): Task
    @aws_subscribe(mutations: ["deleteTask"])

  # Subscribe to task completion
  onTaskComplete(owner: String!): Task
    @aws_subscribe(mutations: ["completeTask"])

  # Subscribe to user profile updates
  onUserProfileUpdate(id: ID!): UserProfile
    @aws_subscribe(mutations: ["updateUserProfile"])
}

# Custom scalar types
scalar AWSDate
scalar AWSDateTime
scalar AWSJSON
scalar AWSTimestamp
scalar AWSEmail
scalar AWSURL
scalar AWSPhone
scalar AWSIPAddress