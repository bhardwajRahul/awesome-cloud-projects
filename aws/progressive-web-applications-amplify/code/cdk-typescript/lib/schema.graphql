# GraphQL Schema for Progressive Web Application Task Manager
# This schema defines the data model and operations for a task management PWA
# with real-time synchronization and offline-first capabilities

# Task Priority Enumeration
enum Priority {
  LOW
  MEDIUM
  HIGH
}

# Task Status Enumeration
enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

# Task Type - Core data model for the application
type Task {
  id: ID!
  title: String!
  description: String
  completed: Boolean!
  priority: Priority!
  status: TaskStatus!
  dueDate: AWSDate
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  
  # User ownership
  owner: String!
  
  # Additional metadata
  tags: [String]
  attachments: [String]
  estimatedHours: Float
  actualHours: Float
  
  # Collaboration fields
  assignedTo: String
  collaborators: [String]
  
  # Task hierarchy
  parentTaskId: String
  subtasks: [Task]
  
  # Version control for offline sync
  version: Int!
}

# Input type for creating new tasks
input CreateTaskInput {
  title: String!
  description: String
  priority: Priority!
  status: TaskStatus
  dueDate: AWSDate
  tags: [String]
  estimatedHours: Float
  assignedTo: String
  collaborators: [String]
  parentTaskId: String
}

# Input type for updating existing tasks
input UpdateTaskInput {
  id: ID!
  title: String
  description: String
  completed: Boolean
  priority: Priority
  status: TaskStatus
  dueDate: AWSDate
  tags: [String]
  estimatedHours: Float
  actualHours: Float
  assignedTo: String
  collaborators: [String]
  parentTaskId: String
  version: Int!
}

# Input type for deleting tasks
input DeleteTaskInput {
  id: ID!
  version: Int!
}

# Filter input for querying tasks
input TaskFilter {
  completed: Boolean
  priority: Priority
  status: TaskStatus
  owner: String
  assignedTo: String
  dueDate: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [TaskFilter]
  or: [TaskFilter]
  not: TaskFilter
}

# Sort input for ordering tasks
input TaskSort {
  field: TaskSortField!
  direction: SortDirection!
}

# Task sort fields
enum TaskSortField {
  title
  priority
  status
  dueDate
  createdAt
  updatedAt
}

# Sort direction
enum SortDirection {
  ASC
  DESC
}

# Connection type for paginated results
type TaskConnection {
  items: [Task]!
  nextToken: String
  total: Int
}

# String input for filtering
input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

# Model size input
input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

# Model attribute types
enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

# User Profile Type
type UserProfile {
  id: ID!
  username: String!
  email: String!
  firstName: String
  lastName: String
  avatar: String
  role: String
  preferences: UserPreferences
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# User Preferences
type UserPreferences {
  theme: String
  notifications: Boolean
  timezone: String
  language: String
  defaultPriority: Priority
}

# Input for updating user profile
input UpdateUserProfileInput {
  firstName: String
  lastName: String
  avatar: String
  role: String
  preferences: UserPreferencesInput
}

# Input for user preferences
input UserPreferencesInput {
  theme: String
  notifications: Boolean
  timezone: String
  language: String
  defaultPriority: Priority
}

# Analytics and Reporting Types
type TaskAnalytics {
  totalTasks: Int!
  completedTasks: Int!
  pendingTasks: Int!
  overdueTasks: Int!
  completionRate: Float!
  averageCompletionTime: Float
  tasksByPriority: [TaskPriorityCount]!
  tasksByStatus: [TaskStatusCount]!
  productivityTrends: [ProductivityTrend]!
}

type TaskPriorityCount {
  priority: Priority!
  count: Int!
}

type TaskStatusCount {
  status: TaskStatus!
  count: Int!
}

type ProductivityTrend {
  date: AWSDate!
  completedTasks: Int!
  createdTasks: Int!
}

# File Upload Type
type FileUpload {
  id: ID!
  filename: String!
  contentType: String!
  size: Int!
  url: String!
  createdAt: AWSDateTime!
  owner: String!
}

# Input for file upload
input FileUploadInput {
  filename: String!
  contentType: String!
  size: Int!
}

# Notification Type
type Notification {
  id: ID!
  type: String!
  title: String!
  message: String!
  read: Boolean!
  createdAt: AWSDateTime!
  data: String # JSON string for additional data
}

# Root Query Type
type Query {
  # Task queries
  getTask(id: ID!): Task
  listTasks(filter: TaskFilter, sort: TaskSort, limit: Int, nextToken: String): TaskConnection
  searchTasks(query: String!, limit: Int, nextToken: String): TaskConnection
  
  # User queries
  getUserProfile: UserProfile
  
  # Analytics queries
  getTaskAnalytics(startDate: AWSDate, endDate: AWSDate): TaskAnalytics
  
  # File queries
  listFiles(limit: Int, nextToken: String): [FileUpload]
  
  # Notification queries
  listNotifications(limit: Int, nextToken: String): [Notification]
}

# Root Mutation Type
type Mutation {
  # Task mutations
  createTask(input: CreateTaskInput!): Task
  updateTask(input: UpdateTaskInput!): Task
  deleteTask(input: DeleteTaskInput!): Task
  
  # Batch operations
  batchCreateTasks(inputs: [CreateTaskInput!]!): [Task]
  batchUpdateTasks(inputs: [UpdateTaskInput!]!): [Task]
  batchDeleteTasks(inputs: [DeleteTaskInput!]!): [Task]
  
  # User mutations
  updateUserProfile(input: UpdateUserProfileInput!): UserProfile
  
  # File mutations
  createFileUpload(input: FileUploadInput!): FileUpload
  deleteFile(id: ID!): Boolean
  
  # Notification mutations
  markNotificationAsRead(id: ID!): Notification
  markAllNotificationsAsRead: Boolean
}

# Real-time Subscriptions
type Subscription {
  # Task subscriptions
  onTaskCreated(owner: String): Task
    @aws_subscribe(mutations: ["createTask"])
  
  onTaskUpdated(owner: String): Task
    @aws_subscribe(mutations: ["updateTask"])
  
  onTaskDeleted(owner: String): Task
    @aws_subscribe(mutations: ["deleteTask"])
  
  # User subscriptions
  onUserProfileUpdated(id: String): UserProfile
    @aws_subscribe(mutations: ["updateUserProfile"])
  
  # Notification subscriptions
  onNotificationCreated(owner: String): Notification
    @aws_subscribe(mutations: ["createNotification"])
}

# AWS Scalars
scalar AWSDate
scalar AWSDateTime
scalar AWSJSON
scalar AWSTimestamp
scalar AWSEmail
scalar AWSURL
scalar AWSPhone
scalar AWSIPAddress

# Schema definition
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}