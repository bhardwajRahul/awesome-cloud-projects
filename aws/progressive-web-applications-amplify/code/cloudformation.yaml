AWSTemplateFormatVersion: '2010-09-09'
Description: 'Progressive Web Application Infrastructure with AWS Amplify, Cognito, AppSync, DynamoDB, and S3'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Application Configuration"
        Parameters:
          - ApplicationName
          - Environment
          - ProjectName
      - Label:
          default: "Authentication Configuration"
        Parameters:
          - UserPoolDomainPrefix
          - EnableMFA
          - PasswordPolicy
      - Label:
          default: "API Configuration"
        Parameters:
          - GraphQLAPIAuthMode
          - EnableDataStore
          - EnableConflictResolution
      - Label:
          default: "Storage Configuration"
        Parameters:
          - S3BucketPrefix
          - EnableS3Versioning
          - S3StorageClass
      - Label:
          default: "Hosting Configuration"
        Parameters:
          - GitHubRepositoryURL
          - GitHubBranch
          - GitHubAccessToken
          - BuildSpec
      - Label:
          default: "Monitoring and Logging"
        Parameters:
          - EnableCloudWatchLogs
          - LogRetentionInDays
          - EnableXRayTracing
    ParameterLabels:
      ApplicationName:
        default: "Application Name"
      Environment:
        default: "Environment"
      ProjectName:
        default: "Project Name"
      UserPoolDomainPrefix:
        default: "User Pool Domain Prefix"
      EnableMFA:
        default: "Enable Multi-Factor Authentication"
      PasswordPolicy:
        default: "Password Policy Strength"
      GraphQLAPIAuthMode:
        default: "GraphQL API Authentication Mode"
      EnableDataStore:
        default: "Enable Amplify DataStore"
      EnableConflictResolution:
        default: "Enable Conflict Resolution"
      S3BucketPrefix:
        default: "S3 Bucket Prefix"
      EnableS3Versioning:
        default: "Enable S3 Versioning"
      S3StorageClass:
        default: "S3 Storage Class"
      GitHubRepositoryURL:
        default: "GitHub Repository URL"
      GitHubBranch:
        default: "GitHub Branch"
      GitHubAccessToken:
        default: "GitHub Access Token"
      BuildSpec:
        default: "Build Specification"
      EnableCloudWatchLogs:
        default: "Enable CloudWatch Logs"
      LogRetentionInDays:
        default: "Log Retention Period (Days)"
      EnableXRayTracing:
        default: "Enable X-Ray Tracing"

Parameters:
  ApplicationName:
    Type: String
    Description: 'Name of the Progressive Web Application'
    Default: 'FullStackPWA'
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    ConstraintDescription: 'Must begin with a letter and contain only alphanumeric characters and hyphens'
    MinLength: 3
    MaxLength: 50

  Environment:
    Type: String
    Description: 'Environment stage (dev, staging, prod)'
    Default: 'dev'
    AllowedValues:
      - dev
      - staging
      - prod
    ConstraintDescription: 'Must be dev, staging, or prod'

  ProjectName:
    Type: String
    Description: 'Project identifier used for resource naming'
    Default: 'fullstack-pwa'
    AllowedPattern: '^[a-z][a-z0-9-]*$'
    ConstraintDescription: 'Must begin with lowercase letter and contain only lowercase letters, numbers, and hyphens'
    MinLength: 3
    MaxLength: 50

  UserPoolDomainPrefix:
    Type: String
    Description: 'Prefix for Cognito User Pool domain (must be globally unique)'
    Default: 'fullstack-pwa-auth'
    AllowedPattern: '^[a-z][a-z0-9-]*$'
    ConstraintDescription: 'Must begin with lowercase letter and contain only lowercase letters, numbers, and hyphens'
    MinLength: 3
    MaxLength: 63

  EnableMFA:
    Type: String
    Description: 'Enable Multi-Factor Authentication for user sign-in'
    Default: 'OPTIONAL'
    AllowedValues:
      - 'OFF'
      - 'OPTIONAL'
      - 'ON'
    ConstraintDescription: 'Must be OFF, OPTIONAL, or ON'

  PasswordPolicy:
    Type: String
    Description: 'Password policy strength level'
    Default: 'Medium'
    AllowedValues:
      - 'Low'
      - 'Medium'
      - 'High'
    ConstraintDescription: 'Must be Low, Medium, or High'

  GraphQLAPIAuthMode:
    Type: String
    Description: 'Primary authentication mode for GraphQL API'
    Default: 'AMAZON_COGNITO_USER_POOLS'
    AllowedValues:
      - 'AMAZON_COGNITO_USER_POOLS'
      - 'AWS_IAM'
      - 'API_KEY'
      - 'OPENID_CONNECT'
    ConstraintDescription: 'Must be a valid AppSync authentication mode'

  EnableDataStore:
    Type: String
    Description: 'Enable Amplify DataStore for offline-first functionality'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: 'Must be true or false'

  EnableConflictResolution:
    Type: String
    Description: 'Enable automatic conflict resolution for DataStore'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: 'Must be true or false'

  S3BucketPrefix:
    Type: String
    Description: 'Prefix for S3 bucket names (must be globally unique)'
    Default: 'fullstack-pwa-storage'
    AllowedPattern: '^[a-z][a-z0-9-]*$'
    ConstraintDescription: 'Must begin with lowercase letter and contain only lowercase letters, numbers, and hyphens'
    MinLength: 3
    MaxLength: 50

  EnableS3Versioning:
    Type: String
    Description: 'Enable versioning for S3 storage bucket'
    Default: 'Enabled'
    AllowedValues:
      - 'Enabled'
      - 'Suspended'
    ConstraintDescription: 'Must be Enabled or Suspended'

  S3StorageClass:
    Type: String
    Description: 'Default storage class for S3 objects'
    Default: 'STANDARD'
    AllowedValues:
      - 'STANDARD'
      - 'STANDARD_IA'
      - 'INTELLIGENT_TIERING'
    ConstraintDescription: 'Must be a valid S3 storage class'

  GitHubRepositoryURL:
    Type: String
    Description: 'GitHub repository URL for Amplify hosting (optional)'
    Default: ''
    AllowedPattern: '^$|^https://github\.com/[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+$'
    ConstraintDescription: 'Must be a valid GitHub repository URL or empty'

  GitHubBranch:
    Type: String
    Description: 'GitHub branch to deploy (when using GitHub integration)'
    Default: 'main'
    AllowedPattern: '^[a-zA-Z0-9_.-]+$'
    ConstraintDescription: 'Must be a valid Git branch name'

  GitHubAccessToken:
    Type: String
    Description: 'GitHub personal access token for repository access (optional)'
    Default: ''
    NoEcho: true
    ConstraintDescription: 'GitHub personal access token with repo permissions'

  BuildSpec:
    Type: String
    Description: 'Build specification for Amplify application'
    Default: |
      version: 1
      frontend:
        phases:
          preBuild:
            commands:
              - npm ci
          build:
            commands:
              - npm run build
        artifacts:
          baseDirectory: build
          files:
            - '**/*'
        cache:
          paths:
            - node_modules/**/*

  EnableCloudWatchLogs:
    Type: String
    Description: 'Enable CloudWatch logging for Lambda functions'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: 'Must be true or false'

  LogRetentionInDays:
    Type: Number
    Description: 'CloudWatch log retention period in days'
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1096
      - 1827
      - 2192
      - 2557
      - 2922
      - 3288
      - 3653
    ConstraintDescription: 'Must be a valid CloudWatch log retention period'

  EnableXRayTracing:
    Type: String
    Description: 'Enable AWS X-Ray tracing for distributed tracing'
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: 'Must be true or false'

Conditions:
  HasGitHubIntegration: !Not [!Equals [!Ref GitHubRepositoryURL, '']]
  HasGitHubToken: !Not [!Equals [!Ref GitHubAccessToken, '']]
  EnableAmplifyHosting: !And [!Condition HasGitHubIntegration, !Condition HasGitHubToken]
  EnableCloudWatchLogsCondition: !Equals [!Ref EnableCloudWatchLogs, 'true']
  EnableXRayTracingCondition: !Equals [!Ref EnableXRayTracing, 'true']
  EnableS3VersioningCondition: !Equals [!Ref EnableS3Versioning, 'Enabled']
  IsHighPasswordPolicy: !Equals [!Ref PasswordPolicy, 'High']
  IsMediumPasswordPolicy: !Equals [!Ref PasswordPolicy, 'Medium']
  IsProductionEnvironment: !Equals [!Ref Environment, 'prod']

Mappings:
  PasswordPolicyMap:
    Low:
      MinimumLength: 8
      RequireUppercase: false
      RequireLowercase: false
      RequireNumbers: false
      RequireSymbols: false
    Medium:
      MinimumLength: 8
      RequireUppercase: true
      RequireLowercase: true
      RequireNumbers: true
      RequireSymbols: false
    High:
      MinimumLength: 12
      RequireUppercase: true
      RequireLowercase: true
      RequireNumbers: true
      RequireSymbols: true

Resources:
  # ===============================
  # Amazon Cognito User Pool
  # ===============================
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Sub '${ProjectName}-${Environment}-user-pool'
      AliasAttributes:
        - email
        - preferred_username
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      MfaConfiguration: !Ref EnableMFA
      EnabledMfas:
        - SMS_MFA
        - SOFTWARE_TOKEN_MFA
      Policies:
        PasswordPolicy:
          MinimumLength: !FindInMap [PasswordPolicyMap, !Ref PasswordPolicy, MinimumLength]
          RequireUppercase: !FindInMap [PasswordPolicyMap, !Ref PasswordPolicy, RequireUppercase]
          RequireLowercase: !FindInMap [PasswordPolicyMap, !Ref PasswordPolicy, RequireLowercase]
          RequireNumbers: !FindInMap [PasswordPolicyMap, !Ref PasswordPolicy, RequireNumbers]
          RequireSymbols: !FindInMap [PasswordPolicyMap, !Ref PasswordPolicy, RequireSymbols]
          TemporaryPasswordValidityDays: 1
      UserPoolTags:
        Name: !Sub '${ProjectName}-${Environment}-user-pool'
        Environment: !Ref Environment
        Application: !Ref ApplicationName
        ManagedBy: 'CloudFormation'
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: preferred_username
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: false
      UsernameConfiguration:
        CaseSensitive: false
      UserPoolAddOns:
        AdvancedSecurityMode: !If [IsProductionEnvironment, 'ENFORCED', 'OFF']
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageAction: EMAIL
        TemporaryPasswordValidityDays: 1
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
          - Name: verified_phone_number
            Priority: 2

  # Cognito User Pool Client
  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub '${ProjectName}-${Environment}-client'
      GenerateSecret: false
      RefreshTokenValidity: 30
      IdTokenValidity: 24
      AccessTokenValidity: 24
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - 'http://localhost:3000'
        - !If 
          - EnableAmplifyHosting
          - !Sub 'https://${AmplifyApp.DefaultDomain}'
          - 'http://localhost:3000'
      LogoutURLs:
        - 'http://localhost:3000'
        - !If 
          - EnableAmplifyHosting
          - !Sub 'https://${AmplifyApp.DefaultDomain}'
          - 'http://localhost:3000'
      ReadAttributes:
        - email
        - email_verified
        - preferred_username
        - given_name
        - family_name
      WriteAttributes:
        - email
        - preferred_username
        - given_name
        - family_name

  # Cognito User Pool Domain
  UserPoolDomain:
    Type: 'AWS::Cognito::UserPoolDomain'
    Properties:
      Domain: !Sub '${UserPoolDomainPrefix}-${Environment}-${AWS::AccountId}'
      UserPoolId: !Ref UserPool

  # Identity Pool for unauthenticated access
  IdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      IdentityPoolName: !Sub '${ProjectName}_${Environment}_identity_pool'
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
          ServerSideTokenCheck: true

  # Identity Pool Role Attachment
  IdentityPoolRoleAttachment:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn
        unauthenticated: !GetAtt UnauthenticatedRole.Arn

  # Authenticated Role
  AuthenticatedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-authenticated-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSAppSyncInvokeFullAccess
      Policies:
        - PolicyName: AuthenticatedUserPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'appsync:GraphQL'
                Resource: !Sub '${GraphQLAPI.Arn}/*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource: !Sub '${S3Bucket.Arn}/public/*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource: !Sub '${S3Bucket.Arn}/protected/${!cognito-identity.amazonaws.com:sub}/*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource: !Sub '${S3Bucket.Arn}/private/${!cognito-identity.amazonaws.com:sub}/*'
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                Resource: !GetAtt S3Bucket.Arn
                Condition:
                  StringLike:
                    's3:prefix':
                      - 'public/'
                      - 'public/*'
                      - 'protected/'
                      - 'protected/*'
                      - 'private/${cognito-identity.amazonaws.com:sub}/'
                      - 'private/${cognito-identity.amazonaws.com:sub}/*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-authenticated-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: 'CloudFormation'

  # Unauthenticated Role
  UnauthenticatedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-unauthenticated-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: UnauthenticatedUserPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub '${S3Bucket.Arn}/public/*'
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                Resource: !GetAtt S3Bucket.Arn
                Condition:
                  StringLike:
                    's3:prefix':
                      - 'public/'
                      - 'public/*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-unauthenticated-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: 'CloudFormation'

  # ===============================
  # AWS AppSync GraphQL API
  # ===============================
  GraphQLAPI:
    Type: 'AWS::AppSync::GraphQLApi'
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-api'
      AuthenticationType: !Ref GraphQLAPIAuthMode
      UserPoolConfig:
        UserPoolId: !Ref UserPool
        DefaultAction: ALLOW
        AwsRegion: !Ref 'AWS::Region'
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncServiceRole.Arn
        ExcludeVerboseContent: false
        FieldLogLevel: !If [IsProductionEnvironment, 'ERROR', 'ALL']
      XrayEnabled: !Ref EnableXRayTracingCondition
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-api'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: 'CloudFormation'

  # GraphQL Schema
  GraphQLSchema:
    Type: 'AWS::AppSync::GraphQLSchema'
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      Definition: |
        type Task @model @auth(rules: [{allow: owner}]) {
          id: ID!
          title: String!
          description: String
          completed: Boolean!
          priority: Priority!
          dueDate: AWSDate
          createdAt: AWSDateTime!
          updatedAt: AWSDateTime!
        }
        
        enum Priority {
          LOW
          MEDIUM
          HIGH
        }
        
        type Subscription {
          onTaskUpdate: Task @aws_subscribe(mutations: ["updateTask"])
          onTaskCreate: Task @aws_subscribe(mutations: ["createTask"])
          onTaskDelete: Task @aws_subscribe(mutations: ["deleteTask"])
        }
        
        type Query {
          listTasks(filter: ModelTaskFilterInput, limit: Int, nextToken: String): ModelTaskConnection
          getTask(id: ID!): Task
        }
        
        type Mutation {
          createTask(input: CreateTaskInput!): Task
          updateTask(input: UpdateTaskInput!): Task
          deleteTask(input: DeleteTaskInput!): Task
        }
        
        input CreateTaskInput {
          title: String!
          description: String
          completed: Boolean!
          priority: Priority!
          dueDate: AWSDate
        }
        
        input UpdateTaskInput {
          id: ID!
          title: String
          description: String
          completed: Boolean
          priority: Priority
          dueDate: AWSDate
        }
        
        input DeleteTaskInput {
          id: ID!
        }
        
        input ModelTaskFilterInput {
          id: ModelIDInput
          title: ModelStringInput
          description: ModelStringInput
          completed: ModelBooleanInput
          priority: ModelPriorityInput
          dueDate: ModelStringInput
          and: [ModelTaskFilterInput]
          or: [ModelTaskFilterInput]
          not: ModelTaskFilterInput
        }
        
        input ModelIDInput {
          ne: ID
          eq: ID
          le: ID
          lt: ID
          ge: ID
          gt: ID
          contains: ID
          notContains: ID
          between: [ID]
          beginsWith: ID
          attributeExists: Boolean
          attributeType: ModelAttributeTypes
          size: ModelSizeInput
        }
        
        input ModelStringInput {
          ne: String
          eq: String
          le: String
          lt: String
          ge: String
          gt: String
          contains: String
          notContains: String
          between: [String]
          beginsWith: String
          attributeExists: Boolean
          attributeType: ModelAttributeTypes
          size: ModelSizeInput
        }
        
        input ModelBooleanInput {
          ne: Boolean
          eq: Boolean
          attributeExists: Boolean
          attributeType: ModelAttributeTypes
        }
        
        input ModelPriorityInput {
          eq: Priority
          ne: Priority
        }
        
        input ModelSizeInput {
          ne: Int
          eq: Int
          le: Int
          lt: Int
          ge: Int
          gt: Int
          between: [Int]
        }
        
        enum ModelAttributeTypes {
          binary
          binarySet
          bool
          list
          map
          number
          numberSet
          string
          stringSet
          _null
        }
        
        type ModelTaskConnection {
          items: [Task]!
          nextToken: String
        }

  # AppSync Service Role
  AppSyncServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-appsync-service-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AppSyncPushToCloudWatchLogs
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                Resource: !GetAtt TaskTable.Arn
              - Effect: Allow
                Action:
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource: !Sub '${TaskTable.Arn}/index/*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-appsync-service-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: 'CloudFormation'

  # DynamoDB Data Source
  TaskTableDataSource:
    Type: 'AWS::AppSync::DataSource'
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      Name: TaskTableDataSource
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn
      DynamoDBConfig:
        TableName: !Ref TaskTable
        AwsRegion: !Ref 'AWS::Region'
        UseCallerCredentials: false

  # GraphQL Resolvers
  ListTasksResolver:
    Type: 'AWS::AppSync::Resolver'
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      TypeName: Query
      FieldName: listTasks
      DataSourceName: !GetAtt TaskTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          "filter": #if($context.args.filter) $util.transform.toDynamoDBFilterExpression($context.args.filter) #else null #end,
          "limit": #if($context.args.limit) $context.args.limit #else 20 #end,
          "nextToken": #if($context.args.nextToken) "$context.args.nextToken" #else null #end
        }
      ResponseMappingTemplate: |
        {
          "items": $util.toJson($context.result.items),
          "nextToken": #if($context.result.nextToken) "$context.result.nextToken" #else null #end
        }

  GetTaskResolver:
    Type: 'AWS::AppSync::Resolver'
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      TypeName: Query
      FieldName: getTask
      DataSourceName: !GetAtt TaskTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($context.args.id)
          }
        }
      ResponseMappingTemplate: |
        #if($context.result)
          $util.toJson($context.result)
        #else
          null
        #end

  CreateTaskResolver:
    Type: 'AWS::AppSync::Resolver'
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      TypeName: Mutation
      FieldName: createTask
      DataSourceName: !GetAtt TaskTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($util.autoId())
          },
          "attributeValues": {
            "title": $util.dynamodb.toDynamoDBJson($context.args.input.title),
            "description": #if($context.args.input.description) $util.dynamodb.toDynamoDBJson($context.args.input.description) #else null #end,
            "completed": $util.dynamodb.toDynamoDBJson($context.args.input.completed),
            "priority": $util.dynamodb.toDynamoDBJson($context.args.input.priority),
            "dueDate": #if($context.args.input.dueDate) $util.dynamodb.toDynamoDBJson($context.args.input.dueDate) #else null #end,
            "createdAt": $util.dynamodb.toDynamoDBJson($util.time.nowISO8601()),
            "updatedAt": $util.dynamodb.toDynamoDBJson($util.time.nowISO8601()),
            "owner": $util.dynamodb.toDynamoDBJson($context.identity.username)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result)

  UpdateTaskResolver:
    Type: 'AWS::AppSync::Resolver'
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      TypeName: Mutation
      FieldName: updateTask
      DataSourceName: !GetAtt TaskTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($context.args.input.id)
          },
          "update": {
            "expression": "SET #updatedAt = :updatedAt",
            "expressionNames": {
              "#updatedAt": "updatedAt"
            },
            "expressionValues": {
              ":updatedAt": $util.dynamodb.toDynamoDBJson($util.time.nowISO8601())
            }
          }
        }
        #if($context.args.input.title)
          $util.qr($context.args.input.update.expression = "$context.args.input.update.expression, #title = :title")
          $util.qr($context.args.input.update.expressionNames.put("#title", "title"))
          $util.qr($context.args.input.update.expressionValues.put(":title", $util.dynamodb.toDynamoDBJson($context.args.input.title)))
        #end
        #if($context.args.input.description)
          $util.qr($context.args.input.update.expression = "$context.args.input.update.expression, #description = :description")
          $util.qr($context.args.input.update.expressionNames.put("#description", "description"))
          $util.qr($context.args.input.update.expressionValues.put(":description", $util.dynamodb.toDynamoDBJson($context.args.input.description)))
        #end
        #if($context.args.input.completed != null)
          $util.qr($context.args.input.update.expression = "$context.args.input.update.expression, completed = :completed")
          $util.qr($context.args.input.update.expressionValues.put(":completed", $util.dynamodb.toDynamoDBJson($context.args.input.completed)))
        #end
        #if($context.args.input.priority)
          $util.qr($context.args.input.update.expression = "$context.args.input.update.expression, priority = :priority")
          $util.qr($context.args.input.update.expressionValues.put(":priority", $util.dynamodb.toDynamoDBJson($context.args.input.priority)))
        #end
        #if($context.args.input.dueDate)
          $util.qr($context.args.input.update.expression = "$context.args.input.update.expression, dueDate = :dueDate")
          $util.qr($context.args.input.update.expressionValues.put(":dueDate", $util.dynamodb.toDynamoDBJson($context.args.input.dueDate)))
        #end
      ResponseMappingTemplate: |
        $util.toJson($context.result)

  DeleteTaskResolver:
    Type: 'AWS::AppSync::Resolver'
    Properties:
      ApiId: !GetAtt GraphQLAPI.ApiId
      TypeName: Mutation
      FieldName: deleteTask
      DataSourceName: !GetAtt TaskTableDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($context.args.input.id)
          }
        }
      ResponseMappingTemplate: |
        $util.toJson($context.result)

  # ===============================
  # Amazon DynamoDB Table
  # ===============================
  TaskTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-tasks'
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: owner
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: owner-index
          KeySchema:
            - AttributeName: owner
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProductionEnvironment, true, false]
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-tasks'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: 'CloudFormation'

  # ===============================
  # Amazon S3 Storage Bucket
  # ===============================
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${S3BucketPrefix}-${Environment}-${AWS::AccountId}-${AWS::Region}'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      VersioningConfiguration:
        Status: !Ref EnableS3Versioning
      LifecycleConfiguration:
        Rules:
          - Id: IntelligentTiering
            Status: Enabled
            Transitions:
              - StorageClass: !Ref S3StorageClass
                TransitionInDays: 30
              - StorageClass: GLACIER
                TransitionInDays: 90
              - StorageClass: DEEP_ARCHIVE
                TransitionInDays: 365
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
            AllowedHeaders:
              - '*'
            ExposedHeaders:
              - 'x-amz-server-side-encryption'
              - 'x-amz-request-id'
              - 'x-amz-id-2'
            MaxAge: 3000
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: 's3:ObjectCreated:*'
            CloudWatchConfiguration:
              LogGroupName: !Ref S3LogGroup
      Tags:
        - Key: Name
          Value: !Sub '${S3BucketPrefix}-${Environment}-storage'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: 'CloudFormation'

  # S3 Bucket Policy
  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub '${S3Bucket.Arn}/*'
              - !GetAtt S3Bucket.Arn
            Condition:
              Bool:
                'aws:SecureTransport': 'false'
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: 's3:GetObject'
            Resource: !Sub '${S3Bucket.Arn}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !If 
                  - EnableAmplifyHosting
                  - !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/*'
                  - !Ref 'AWS::NoValue'

  # ===============================
  # AWS Amplify Hosting
  # ===============================
  AmplifyApp:
    Type: 'AWS::Amplify::App'
    Condition: EnableAmplifyHosting
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-app'
      Repository: !Ref GitHubRepositoryURL
      AccessToken: !Ref GitHubAccessToken
      BuildSpec: !Ref BuildSpec
      Platform: WEB
      IAMServiceRole: !GetAtt AmplifyServiceRole.Arn
      EnvironmentVariables:
        - Name: AMPLIFY_DIFF_DEPLOY
          Value: 'false'
        - Name: AMPLIFY_MONOREPO_APP_ROOT
          Value: '.'
        - Name: REACT_APP_AWS_REGION
          Value: !Ref 'AWS::Region'
        - Name: REACT_APP_USER_POOL_ID
          Value: !Ref UserPool
        - Name: REACT_APP_USER_POOL_CLIENT_ID
          Value: !Ref UserPoolClient
        - Name: REACT_APP_IDENTITY_POOL_ID
          Value: !Ref IdentityPool
        - Name: REACT_APP_GRAPHQL_ENDPOINT
          Value: !GetAtt GraphQLAPI.GraphQLUrl
        - Name: REACT_APP_S3_BUCKET
          Value: !Ref S3Bucket
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-app'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: 'CloudFormation'

  # Amplify Branch
  AmplifyBranch:
    Type: 'AWS::Amplify::Branch'
    Condition: EnableAmplifyHosting
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: !Ref GitHubBranch
      EnableAutoBuild: true
      EnablePerformanceMode: !If [IsProductionEnvironment, true, false]
      EnablePullRequestPreview: !If [IsProductionEnvironment, false, true]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-branch'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: 'CloudFormation'

  # Amplify Domain
  AmplifyDomain:
    Type: 'AWS::Amplify::Domain'
    Condition: EnableAmplifyHosting
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      DomainName: !Sub '${ProjectName}-${Environment}.amplifyapp.com'
      SubDomainSettings:
        - BranchName: !Ref GitHubBranch
          Prefix: !Ref Environment
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-domain'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: 'CloudFormation'

  # Amplify Service Role
  AmplifyServiceRole:
    Type: 'AWS::IAM::Role'
    Condition: EnableAmplifyHosting
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-amplify-service-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: amplify.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess-Amplify
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-amplify-service-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: 'CloudFormation'

  # ===============================
  # CloudWatch Logging
  # ===============================
  S3LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Condition: EnableCloudWatchLogsCondition
    Properties:
      LogGroupName: !Sub '/aws/s3/${ProjectName}-${Environment}-storage'
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-s3-logs'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: 'CloudFormation'

  AppSyncLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Condition: EnableCloudWatchLogsCondition
    Properties:
      LogGroupName: !Sub '/aws/appsync/apis/${GraphQLAPI.ApiId}'
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-appsync-logs'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: 'CloudFormation'

  # ===============================
  # CloudWatch Alarms
  # ===============================
  HighDynamoDBReadThrottleAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-dynamodb-high-read-throttle'
      AlarmDescription: 'DynamoDB read throttle events are too high'
      MetricName: ReadThrottleEvents
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: TableName
          Value: !Ref TaskTable
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-dynamodb-read-throttle-alarm'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: 'CloudFormation'

  HighDynamoDBWriteThrottleAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-dynamodb-high-write-throttle'
      AlarmDescription: 'DynamoDB write throttle events are too high'
      MetricName: WriteThrottleEvents
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: TableName
          Value: !Ref TaskTable
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-dynamodb-write-throttle-alarm'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: 'CloudFormation'

  AppSyncErrorRateAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-appsync-high-error-rate'
      AlarmDescription: 'AppSync API error rate is too high'
      MetricName: 4XXError
      Namespace: AWS/AppSync
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: GraphQLAPIId
          Value: !GetAtt GraphQLAPI.ApiId
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-appsync-error-rate-alarm'
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref ApplicationName
        - Key: ManagedBy
          Value: 'CloudFormation'

# ===============================
# Outputs
# ===============================
Outputs:
  UserPoolId:
    Description: 'ID of the Cognito User Pool'
    Value: !Ref UserPool
    Export:
      Name: !Sub '${ProjectName}-${Environment}-user-pool-id'

  UserPoolClientId:
    Description: 'ID of the Cognito User Pool Client'
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${ProjectName}-${Environment}-user-pool-client-id'

  IdentityPoolId:
    Description: 'ID of the Cognito Identity Pool'
    Value: !Ref IdentityPool
    Export:
      Name: !Sub '${ProjectName}-${Environment}-identity-pool-id'

  UserPoolDomain:
    Description: 'Domain name of the Cognito User Pool'
    Value: !Sub '${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-user-pool-domain'

  GraphQLAPIId:
    Description: 'ID of the AppSync GraphQL API'
    Value: !GetAtt GraphQLAPI.ApiId
    Export:
      Name: !Sub '${ProjectName}-${Environment}-graphql-api-id'

  GraphQLAPIUrl:
    Description: 'URL of the AppSync GraphQL API'
    Value: !GetAtt GraphQLAPI.GraphQLUrl
    Export:
      Name: !Sub '${ProjectName}-${Environment}-graphql-api-url'

  GraphQLAPIKey:
    Description: 'API Key for the AppSync GraphQL API (if using API_KEY auth)'
    Value: !If 
      - EnableAmplifyHosting
      - !GetAtt GraphQLAPI.ApiId
      - 'Not applicable for current auth mode'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-graphql-api-key'

  DynamoDBTableName:
    Description: 'Name of the DynamoDB table'
    Value: !Ref TaskTable
    Export:
      Name: !Sub '${ProjectName}-${Environment}-dynamodb-table-name'

  DynamoDBTableArn:
    Description: 'ARN of the DynamoDB table'
    Value: !GetAtt TaskTable.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-dynamodb-table-arn'

  S3BucketName:
    Description: 'Name of the S3 storage bucket'
    Value: !Ref S3Bucket
    Export:
      Name: !Sub '${ProjectName}-${Environment}-s3-bucket-name'

  S3BucketArn:
    Description: 'ARN of the S3 storage bucket'
    Value: !GetAtt S3Bucket.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-s3-bucket-arn'

  S3BucketDomainName:
    Description: 'Domain name of the S3 storage bucket'
    Value: !GetAtt S3Bucket.DomainName
    Export:
      Name: !Sub '${ProjectName}-${Environment}-s3-bucket-domain-name'

  AmplifyAppId:
    Description: 'ID of the Amplify Application'
    Value: !If [EnableAmplifyHosting, !GetAtt AmplifyApp.AppId, 'Not configured']
    Export:
      Name: !Sub '${ProjectName}-${Environment}-amplify-app-id'

  AmplifyAppUrl:
    Description: 'URL of the Amplify Application'
    Value: !If [EnableAmplifyHosting, !Sub 'https://${AmplifyBranch.BranchName}.${AmplifyApp.DefaultDomain}', 'Not configured']
    Export:
      Name: !Sub '${ProjectName}-${Environment}-amplify-app-url'

  AmplifyDomainName:
    Description: 'Custom domain name for the Amplify Application'
    Value: !If [EnableAmplifyHosting, !Ref AmplifyDomain, 'Not configured']
    Export:
      Name: !Sub '${ProjectName}-${Environment}-amplify-domain-name'

  Region:
    Description: 'AWS Region where resources are deployed'
    Value: !Ref 'AWS::Region'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-region'

  Environment:
    Description: 'Environment name'
    Value: !Ref Environment
    Export:
      Name: !Sub '${ProjectName}-${Environment}-environment'

  ApplicationName:
    Description: 'Application name'
    Value: !Ref ApplicationName
    Export:
      Name: !Sub '${ProjectName}-${Environment}-application-name'

  AuthenticatedRoleArn:
    Description: 'ARN of the authenticated user role'
    Value: !GetAtt AuthenticatedRole.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-authenticated-role-arn'

  UnauthenticatedRoleArn:
    Description: 'ARN of the unauthenticated user role'
    Value: !GetAtt UnauthenticatedRole.Arn
    Export:
      Name: !Sub '${ProjectName}-${Environment}-unauthenticated-role-arn'

  CloudWatchLogGroups:
    Description: 'CloudWatch Log Groups created'
    Value: !If 
      - EnableCloudWatchLogsCondition
      - !Sub '${S3LogGroup}, ${AppSyncLogGroup}'
      - 'CloudWatch logging not enabled'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-cloudwatch-log-groups'

  StackName:
    Description: 'Name of the CloudFormation stack'
    Value: !Ref 'AWS::StackName'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-stack-name'

  StackId:
    Description: 'ID of the CloudFormation stack'
    Value: !Ref 'AWS::StackId'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-stack-id'

  DeploymentTimestamp:
    Description: 'Timestamp of the deployment'
    Value: !Sub '${AWS::Region}-${AWS::AccountId}-${AWS::StackName}'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-deployment-timestamp'