# Example Terraform Variables for AWS Cost Optimization Hub and Budgets
# Copy this file to terraform.tfvars and customize the values for your environment

#############################################
# Required Variables
#############################################

# Email address to receive budget and cost optimization notifications
# This email will receive SNS notifications for budget alerts and anomalies
notification_email = "your-email@example.com"

#############################################
# Infrastructure Configuration
#############################################

# AWS region where resources will be created
# Note: Cost Optimization Hub may not be available in all regions
aws_region = "us-east-1"

# Environment name (dev, staging, prod)
# Used for tagging and resource naming
environment = "prod"

# Owner of the resources for tagging and cost allocation
owner = "cost-optimization-team"

#############################################
# Budget Configuration
#############################################

# Monthly budget amount in USD
# This sets the overall spending limit for cost monitoring
monthly_budget_amount = 1000

# Budget alert threshold percentage (1-100)
# Notifications will be sent when spending exceeds this percentage
monthly_budget_threshold = 80

# Monthly EC2 usage budget in hours
# Monitors compute capacity consumption
ec2_usage_budget_hours = 2000

# Reserved Instance utilization threshold percentage
# Alerts when RI utilization falls below this level
ri_utilization_threshold = 80

#############################################
# Cost Anomaly Detection Configuration
#############################################

# Cost anomaly detection threshold in USD
# Anomalies above this amount will trigger alerts
anomaly_detection_threshold = 100

# List of AWS services to monitor for cost anomalies
# Add or remove services based on your infrastructure
monitored_services = [
  "EC2-Instance",
  "RDS",
  "S3",
  "Lambda",
  "CloudFront",
  "EBS"
]

#############################################
# Cost Optimization Hub Configuration
#############################################

# Enable Cost Optimization Hub preferences
cost_optimization_hub_enabled = true

# Savings estimation mode for Cost Optimization Hub
# Options: "AFTER_DISCOUNTS" or "BEFORE_DISCOUNTS"
savings_estimation_mode = "AFTER_DISCOUNTS"

# Member account discount visibility for Cost Optimization Hub
# Options: "ALL", "STANDARD", "NONE"
member_account_discount_visibility = "STANDARD"

#############################################
# Automation Configuration
#############################################

# Enable automated budget actions when thresholds are exceeded
# WARNING: This will automatically restrict resource provisioning
enable_budget_actions = false

# Lambda function timeout in seconds (1-900)
lambda_timeout = 60

# Lambda function memory size in MB (128-10240)
lambda_memory_size = 256

#############################################
# Example Configurations for Different Environments
#############################################

# Development Environment Example:
# environment = "dev"
# monthly_budget_amount = 500
# monthly_budget_threshold = 70
# ec2_usage_budget_hours = 1000
# anomaly_detection_threshold = 50
# enable_budget_actions = false

# Staging Environment Example:
# environment = "staging"
# monthly_budget_amount = 1500
# monthly_budget_threshold = 75
# ec2_usage_budget_hours = 2500
# anomaly_detection_threshold = 75
# enable_budget_actions = false

# Production Environment Example:
# environment = "prod"
# monthly_budget_amount = 5000
# monthly_budget_threshold = 85
# ec2_usage_budget_hours = 10000
# anomaly_detection_threshold = 200
# enable_budget_actions = true

#############################################
# Advanced Service Monitoring Examples
#############################################

# Comprehensive service monitoring (includes more services):
# monitored_services = [
#   "EC2-Instance",
#   "RDS",
#   "S3",
#   "Lambda",
#   "CloudFront",
#   "EBS",
#   "ElastiCache",
#   "Redshift",
#   "EMR",
#   "API Gateway"
# ]

# Basic service monitoring (fewer services for smaller infrastructures):
# monitored_services = [
#   "EC2-Instance",
#   "S3",
#   "Lambda"
# ]

#############################################
# Notes and Best Practices
#############################################

# 1. Start with conservative budget amounts and adjust based on actual usage
# 2. Use lower thresholds (70-80%) in development environments
# 3. Only enable budget_actions after thorough testing
# 4. Monitor the first month closely to calibrate thresholds
# 5. Consider seasonal variations in your budget planning
# 6. Use descriptive owner names for better cost allocation
# 7. Test email notifications by triggering a manual budget alert