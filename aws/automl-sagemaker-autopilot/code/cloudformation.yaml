AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for AutoML Solutions with Amazon SageMaker Autopilot - Complete MLOps pipeline with automated model training, deployment, and monitoring'

# ==============================================================================
# PARAMETERS
# ==============================================================================

Parameters:
  ProjectName:
    Type: String
    Default: 'autopilot-ml'
    Description: 'Name prefix for all resources created by this template'
    MinLength: 3
    MaxLength: 20
    AllowedPattern: '[a-z][a-z0-9-]*'
    ConstraintDescription: 'Must start with lowercase letter and contain only lowercase letters, numbers, and hyphens'

  Environment:
    Type: String
    Default: 'dev'
    AllowedValues:
      - dev
      - staging
      - prod
    Description: 'Environment name for resource tagging and naming'

  SageMakerExecutionRoleName:
    Type: String
    Default: 'SageMakerAutopilotExecutionRole'
    Description: 'Name for the SageMaker execution role'
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9_+=,.@-]*'

  DataBucketName:
    Type: String
    Default: ''
    Description: 'Name for S3 bucket (leave empty to auto-generate unique name)'
    MaxLength: 63
    AllowedPattern: '[a-z0-9][a-z0-9-]*[a-z0-9]|^$'
    ConstraintDescription: 'Must be a valid S3 bucket name or empty for auto-generation'

  AutoMLJobMaxCandidates:
    Type: Number
    Default: 10
    MinValue: 1
    MaxValue: 250
    Description: 'Maximum number of model candidates to evaluate during AutoML job'

  AutoMLJobMaxRuntimeHours:
    Type: Number
    Default: 4
    MinValue: 1
    MaxValue: 30
    Description: 'Maximum runtime in hours for the AutoML job'

  EndpointInstanceType:
    Type: String
    Default: 'ml.m5.large'
    AllowedValues:
      - ml.t2.medium
      - ml.m5.large
      - ml.m5.xlarge
      - ml.m5.2xlarge
      - ml.c5.large
      - ml.c5.xlarge
      - ml.c5.2xlarge
    Description: 'Instance type for SageMaker real-time endpoint'

  EnableEndpointAutoScaling:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable auto-scaling for the SageMaker endpoint'

  NotificationEmail:
    Type: String
    Default: ''
    Description: 'Email address for AutoML job notifications (optional)'
    AllowedPattern: '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}|^$'
    ConstraintDescription: 'Must be a valid email address or empty'

# ==============================================================================
# CONDITIONS
# ==============================================================================

Conditions:
  CreateCustomBucketName: !Not [!Equals [!Ref DataBucketName, '']]
  EnableNotifications: !Not [!Equals [!Ref NotificationEmail, '']]
  EnableAutoScaling: !Equals [!Ref EnableEndpointAutoScaling, 'true']
  IsProductionEnvironment: !Equals [!Ref Environment, 'prod']

# ==============================================================================
# RESOURCES
# ==============================================================================

Resources:
  # S3 Bucket for storing training data and model artifacts
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If
        - CreateCustomBucketName
        - !Sub '${DataBucketName}-${AWS::AccountId}-${AWS::Region}'
        - !Sub '${ProjectName}-autopilot-data-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
          - Id: TransitionToGlacier
            Status: Enabled
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 90
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref S3AccessLogGroup
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-autopilot-data-bucket'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'SageMaker AutoML data storage'

  # S3 Bucket Policy for secure access
  DataBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DataBucket
      PolicyDocument:
        Statement:
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub '${DataBucket}/*'
              - !Sub '${DataBucket}'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'
          - Sid: AllowSageMakerAccess
            Effect: Allow
            Principal:
              AWS: !GetAtt SageMakerExecutionRole.Arn
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
              - 's3:ListBucket'
            Resource:
              - !Sub '${DataBucket}/*'
              - !Sub '${DataBucket}'

  # CloudWatch Log Group for S3 access logs
  S3AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/s3/${ProjectName}-autopilot-access-logs'
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-s3-access-logs'
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for SageMaker Autopilot execution
  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${SageMakerExecutionRoleName}-${Environment}-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${DataBucket}/*'
                  - !Sub '${DataBucket}'
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:ListAllMyBuckets
                Resource: '*'
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/sagemaker/*'
        - PolicyName: ECRAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
        - PolicyName: AutoMLSpecificPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sagemaker:CreateAutoMLJob
                  - sagemaker:DescribeAutoMLJob
                  - sagemaker:StopAutoMLJob
                  - sagemaker:CreateModel
                  - sagemaker:CreateEndpointConfig
                  - sagemaker:CreateEndpoint
                  - sagemaker:DescribeModel
                  - sagemaker:DescribeEndpointConfig
                  - sagemaker:DescribeEndpoint
                  - sagemaker:InvokeEndpoint
                  - sagemaker:UpdateEndpoint
                  - sagemaker:DeleteEndpoint
                  - sagemaker:DeleteEndpointConfig
                  - sagemaker:DeleteModel
                  - sagemaker:CreateTransformJob
                  - sagemaker:DescribeTransformJob
                  - sagemaker:StopTransformJob
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-sagemaker-execution-role'
        - Key: Environment
          Value: !Ref Environment

  # SNS Topic for AutoML job notifications
  AutoMLNotificationTopic:
    Type: AWS::SNS::Topic
    Condition: EnableNotifications
    Properties:
      TopicName: !Sub '${ProjectName}-automl-notifications'
      DisplayName: 'SageMaker AutoML Job Notifications'
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-automl-notifications'
        - Key: Environment
          Value: !Ref Environment

  # SNS Subscription for email notifications
  AutoMLNotificationSubscription:
    Type: AWS::SNS::Subscription
    Condition: EnableNotifications
    Properties:
      Protocol: email
      TopicArn: !Ref AutoMLNotificationTopic
      Endpoint: !Ref NotificationEmail

  # CloudWatch Log Group for SageMaker training jobs
  SageMakerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/sagemaker/TrainingJobs/${ProjectName}'
      RetentionInDays: !If [IsProductionEnvironment, 90, 30]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-sagemaker-training-logs'
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Log Group for SageMaker endpoints
  SageMakerEndpointLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/sagemaker/Endpoints/${ProjectName}'
      RetentionInDays: !If [IsProductionEnvironment, 90, 30]
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-sagemaker-endpoint-logs'
        - Key: Environment
          Value: !Ref Environment

  # Lambda function for AutoML job management
  AutoMLJobManagerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-automl-job-manager'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt AutoMLJobManagerRole.Arn
      Timeout: 300
      Environment:
        Variables:
          S3_BUCKET: !Ref DataBucket
          SAGEMAKER_ROLE: !GetAtt SageMakerExecutionRole.Arn
          PROJECT_NAME: !Ref ProjectName
          ENVIRONMENT: !Ref Environment
          MAX_CANDIDATES: !Ref AutoMLJobMaxCandidates
          MAX_RUNTIME_HOURS: !Ref AutoMLJobMaxRuntimeHours
          SNS_TOPIC_ARN: !If [EnableNotifications, !Ref AutoMLNotificationTopic, !Ref 'AWS::NoValue']
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import uuid
          from datetime import datetime
          
          def lambda_handler(event, context):
              """
              Lambda function to manage SageMaker AutoML jobs
              """
              sagemaker = boto3.client('sagemaker')
              sns = boto3.client('sns')
              
              try:
                  # Generate unique job name
                  job_name = f"{os.environ['PROJECT_NAME']}-automl-{uuid.uuid4().hex[:8]}"
                  
                  # Create AutoML job configuration
                  job_config = {
                      'AutoMLJobName': job_name,
                      'InputDataConfig': [{
                          'ChannelType': 'training',
                          'ContentType': 'text/csv;header=present',
                          'CompressionType': 'None',
                          'DataSource': {
                              'S3DataSource': {
                                  'S3DataType': 'S3Prefix',
                                  'S3Uri': f"s3://{os.environ['S3_BUCKET']}/input/"
                              }
                          }
                      }],
                      'OutputDataConfig': {
                          'S3OutputPath': f"s3://{os.environ['S3_BUCKET']}/output/"
                      },
                      'ProblemType': event.get('ProblemType', 'Auto'),
                      'AutoMLJobObjective': {
                          'MetricName': event.get('MetricName', 'Accuracy')
                      },
                      'AutoMLJobConfig': {
                          'CompletionCriteria': {
                              'MaxCandidates': int(os.environ['MAX_CANDIDATES']),
                              'MaxRuntimePerTrainingJobInSeconds': 3600,
                              'MaxAutoMLJobRuntimeInSeconds': int(os.environ['MAX_RUNTIME_HOURS']) * 3600
                          }
                      },
                      'RoleArn': os.environ['SAGEMAKER_ROLE'],
                      'Tags': [
                          {
                              'Key': 'Project',
                              'Value': os.environ['PROJECT_NAME']
                          },
                          {
                              'Key': 'Environment',
                              'Value': os.environ['ENVIRONMENT']
                          },
                          {
                              'Key': 'CreatedBy',
                              'Value': 'AutoML-Manager-Lambda'
                          }
                      ]
                  }
                  
                  # Create the AutoML job
                  response = sagemaker.create_auto_ml_job(**job_config)
                  
                  # Send notification if SNS topic is configured
                  if 'SNS_TOPIC_ARN' in os.environ:
                      sns.publish(
                          TopicArn=os.environ['SNS_TOPIC_ARN'],
                          Message=f"AutoML job '{job_name}' has been created successfully.",
                          Subject=f"AutoML Job Created - {job_name}"
                      )
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'AutoML job created successfully',
                          'jobName': job_name,
                          'jobArn': response['AutoMLJobArn']
                      })
                  }
                  
              except Exception as e:
                  error_message = f"Error creating AutoML job: {str(e)}"
                  
                  # Send error notification if SNS topic is configured
                  if 'SNS_TOPIC_ARN' in os.environ:
                      sns.publish(
                          TopicArn=os.environ['SNS_TOPIC_ARN'],
                          Message=error_message,
                          Subject="AutoML Job Creation Failed"
                      )
                  
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'error': error_message
                      })
                  }
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-automl-job-manager'
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for Lambda function
  AutoMLJobManagerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-automl-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SageMakerAutoMLPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sagemaker:CreateAutoMLJob
                  - sagemaker:DescribeAutoMLJob
                  - sagemaker:StopAutoMLJob
                  - sagemaker:ListAutoMLJobs
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${DataBucket}/*'
                  - !Sub '${DataBucket}'
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !If [EnableNotifications, !Ref AutoMLNotificationTopic, !Ref 'AWS::NoValue']
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-automl-lambda-role'
        - Key: Environment
          Value: !Ref Environment

  # EventBridge Rule for AutoML job state changes
  AutoMLJobEventRule:
    Type: AWS::Events::Rule
    Condition: EnableNotifications
    Properties:
      Name: !Sub '${ProjectName}-automl-job-state-change'
      Description: 'Captures SageMaker AutoML job state changes'
      EventPattern:
        source:
          - aws.sagemaker
        detail-type:
          - SageMaker AutoML Job State Change
        detail:
          AutoMLJobName:
            - prefix: !Sub '${ProjectName}-automl'
      State: ENABLED
      Targets:
        - Arn: !Ref AutoMLNotificationTopic
          Id: AutoMLNotificationTarget
          InputTransformer:
            InputPathsMap:
              jobName: $.detail.AutoMLJobName
              jobStatus: $.detail.AutoMLJobStatus
            InputTemplate: |
              {
                "AutoML Job": "<jobName>",
                "Status": "<jobStatus>",
                "Timestamp": "<aws.events.event.ingestion-time>"
              }

  # EventBridge Rule permissions for SNS
  AutoMLJobEventRulePermission:
    Type: AWS::SNS::TopicPolicy
    Condition: EnableNotifications
    Properties:
      Topics:
        - !Ref AutoMLNotificationTopic
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: SNS:Publish
            Resource: !Ref AutoMLNotificationTopic

  # Application Auto Scaling Target for SageMaker Endpoint
  EndpointAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: EnableAutoScaling
    Properties:
      ServiceNamespace: sagemaker
      ResourceId: !Sub 'endpoint/${ProjectName}-autopilot-endpoint/variant/primary'
      ScalableDimension: sagemaker:variant:DesiredInstanceCount
      MinCapacity: 1
      MaxCapacity: 10
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/application-autoscaling-sagemaker-role'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-endpoint-autoscaling'
        - Key: Environment
          Value: !Ref Environment

  # Application Auto Scaling Policy for SageMaker Endpoint
  EndpointAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: EnableAutoScaling
    Properties:
      PolicyName: !Sub '${ProjectName}-endpoint-scaling-policy'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref EndpointAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: SageMakerVariantInvocationsPerInstance
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

  # CloudWatch Dashboard for monitoring
  AutoMLDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-automl-dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SageMaker", "ModelLatency", "EndpointName", "${ProjectName}-autopilot-endpoint", "VariantName", "primary" ],
                  [ ".", "ModelInvocations", ".", ".", ".", "." ],
                  [ ".", "ModelInvocation4XXErrors", ".", ".", ".", "." ],
                  [ ".", "ModelInvocation5XXErrors", ".", ".", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "SageMaker Endpoint Metrics",
                "period": 300
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '${SageMakerLogGroup}'\n| fields @timestamp, @message\n| sort @timestamp desc\n| limit 100",
                "region": "${AWS::Region}",
                "title": "SageMaker Training Logs"
              }
            }
          ]
        }

# ==============================================================================
# OUTPUTS
# ==============================================================================

Outputs:
  DataBucketName:
    Description: 'Name of the S3 bucket for storing training data and model artifacts'
    Value: !Ref DataBucket
    Export:
      Name: !Sub '${AWS::StackName}-DataBucket'

  DataBucketArn:
    Description: 'ARN of the S3 bucket for storing training data and model artifacts'
    Value: !GetAtt DataBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DataBucketArn'

  SageMakerExecutionRoleArn:
    Description: 'ARN of the SageMaker execution role'
    Value: !GetAtt SageMakerExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SageMakerExecutionRole'

  AutoMLJobManagerFunctionArn:
    Description: 'ARN of the Lambda function for managing AutoML jobs'
    Value: !GetAtt AutoMLJobManagerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AutoMLJobManagerFunction'

  AutoMLJobManagerFunctionName:
    Description: 'Name of the Lambda function for managing AutoML jobs'
    Value: !Ref AutoMLJobManagerFunction
    Export:
      Name: !Sub '${AWS::StackName}-AutoMLJobManagerFunctionName'

  SageMakerLogGroupName:
    Description: 'Name of the CloudWatch log group for SageMaker training jobs'
    Value: !Ref SageMakerLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-SageMakerLogGroup'

  SageMakerEndpointLogGroupName:
    Description: 'Name of the CloudWatch log group for SageMaker endpoints'
    Value: !Ref SageMakerEndpointLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-SageMakerEndpointLogGroup'

  AutoMLNotificationTopicArn:
    Description: 'ARN of the SNS topic for AutoML job notifications'
    Value: !If [EnableNotifications, !Ref AutoMLNotificationTopic, 'Not Created']
    Export:
      Name: !Sub '${AWS::StackName}-AutoMLNotificationTopic'

  DashboardURL:
    Description: 'URL of the CloudWatch dashboard for monitoring AutoML resources'
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-automl-dashboard'
    Export:
      Name: !Sub '${AWS::StackName}-DashboardURL'

  S3InputDataPath:
    Description: 'S3 path for uploading training data'
    Value: !Sub 's3://${DataBucket}/input/'
    Export:
      Name: !Sub '${AWS::StackName}-S3InputDataPath'

  S3OutputDataPath:
    Description: 'S3 path where AutoML job outputs will be stored'
    Value: !Sub 's3://${DataBucket}/output/'
    Export:
      Name: !Sub '${AWS::StackName}-S3OutputDataPath'

  QuickStartInstructions:
    Description: 'Quick start instructions for using the AutoML infrastructure'
    Value: !Sub |
      1. Upload your training data (CSV format) to: s3://${DataBucket}/input/
      2. Invoke the Lambda function to start an AutoML job: aws lambda invoke --function-name ${AutoMLJobManagerFunction} --payload '{"ProblemType": "BinaryClassification", "MetricName": "Accuracy"}' response.json
      3. Monitor job progress in the SageMaker console or CloudWatch dashboard
      4. Deploy the best model to an endpoint using the SageMaker console or CLI
      5. Test predictions using the invoke-endpoint API
    Export:
      Name: !Sub '${AWS::StackName}-QuickStartInstructions'