"""
Setup configuration for Enterprise Video Streaming Platform CDK Application

This setup.py file configures the Python package for the AWS CDK application
that deploys a comprehensive video streaming platform using AWS Elemental MediaLive,
MediaPackage, and CloudFront services.

Author: Generated by Claude Code
Version: 1.0.0
"""

from setuptools import setup, find_packages
import os
import sys

# Ensure we're using Python 3.8 or later
if sys.version_info < (3, 8):
    raise RuntimeError("This package requires Python 3.8 or later")

# Read the long description from README if it exists
def read_long_description():
    """Read the long description from README.md if available"""
    readme_path = os.path.join(os.path.dirname(__file__), "README.md")
    if os.path.exists(readme_path):
        with open(readme_path, "r", encoding="utf-8") as f:
            return f.read()
    return "Enterprise Video Streaming Platform CDK Application"

# Read requirements from requirements.txt
def read_requirements():
    """Read requirements from requirements.txt file"""
    requirements_path = os.path.join(os.path.dirname(__file__), "requirements.txt")
    requirements = []
    
    if os.path.exists(requirements_path):
        with open(requirements_path, "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                # Skip comments and empty lines
                if line and not line.startswith("#"):
                    # Remove inline comments
                    requirement = line.split("#")[0].strip()
                    if requirement:
                        requirements.append(requirement)
    
    return requirements

# Package metadata
PACKAGE_NAME = "video-streaming-platform-cdk"
VERSION = "1.0.0"
DESCRIPTION = "AWS CDK application for enterprise video streaming platform"
AUTHOR = "Media Platform Team"
AUTHOR_EMAIL = "media-platform@company.com"
URL = "https://github.com/company/video-streaming-platform-cdk"
LICENSE = "MIT"

# Classification metadata
CLASSIFIERS = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Multimedia :: Video",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Framework :: AWS CDK",
    "Environment :: Console",
]

# Keywords for package discovery
KEYWORDS = [
    "aws",
    "cdk",
    "video-streaming",
    "medialive",
    "mediapackage",
    "cloudfront",
    "adaptive-bitrate",
    "live-streaming",
    "video-platform",
    "media-services",
    "infrastructure-as-code",
    "cloud-computing"
]

# Package configuration
setup(
    name=PACKAGE_NAME,
    version=VERSION,
    description=DESCRIPTION,
    long_description=read_long_description(),
    long_description_content_type="text/markdown",
    author=AUTHOR,
    author_email=AUTHOR_EMAIL,
    url=URL,
    license=LICENSE,
    
    # Package discovery
    packages=find_packages(
        exclude=["tests", "tests.*", "docs", "docs.*"]
    ),
    
    # Include non-Python files
    include_package_data=True,
    
    # Package data files
    package_data={
        "": [
            "*.md",
            "*.txt", 
            "*.json",
            "*.yaml",
            "*.yml"
        ]
    },
    
    # Python version requirement
    python_requires=">=3.8",
    
    # Dependencies
    install_requires=read_requirements(),
    
    # Optional dependencies for development
    extras_require={
        "dev": [
            "pytest>=7.4.0",
            "pytest-cov>=4.1.0",
            "black>=23.0.0",
            "flake8>=6.0.0",
            "mypy>=1.5.0",
            "pre-commit>=3.4.0",
            "bandit>=1.7.5",
            "safety>=2.3.5",
        ],
        "docs": [
            "sphinx>=7.1.0",
            "sphinx-rtd-theme>=1.3.0",
        ],
        "testing": [
            "pytest>=7.4.0",
            "pytest-cov>=4.1.0",
            "moto>=4.2.0",  # Mock AWS services for testing
            "boto3-stubs>=1.34.0",  # Type stubs for boto3
        ],
    },
    
    # Entry points for command-line scripts
    entry_points={
        "console_scripts": [
            "deploy-streaming-platform=app:main",
        ],
    },
    
    # Package classification
    classifiers=CLASSIFIERS,
    keywords=" ".join(KEYWORDS),
    
    # Project URLs
    project_urls={
        "Documentation": f"{URL}/docs",
        "Source": URL,
        "Tracker": f"{URL}/issues",
        "Changelog": f"{URL}/CHANGELOG.md",
    },
    
    # Zip safe configuration
    zip_safe=False,
    
    # Platform compatibility
    platforms=["any"],
    
    # CDK-specific metadata
    options={
        "bdist_wheel": {
            "universal": "0"  # Not universal because we require Python 3.8+
        }
    },
)

# Post-installation message
def print_post_install_message():
    """Print helpful information after installation"""
    print("\n" + "="*60)
    print("Enterprise Video Streaming Platform CDK Application")
    print("="*60)
    print("\nSuccessfully installed! To get started:")
    print("\n1. Configure AWS credentials:")
    print("   aws configure")
    print("\n2. Set required environment variables:")
    print("   export CDK_DEFAULT_ACCOUNT=<your-aws-account-id>")
    print("   export CDK_DEFAULT_REGION=<your-aws-region>")
    print("   export PLATFORM_NAME=<your-platform-name>")
    print("\n3. Bootstrap CDK (if not already done):")
    print("   cdk bootstrap")
    print("\n4. Deploy the platform:")
    print("   cdk deploy")
    print("\n5. Monitor the deployment:")
    print("   aws medialive describe-channel --channel-id <channel-id>")
    print("\nFor more information, see the documentation at:")
    print(f"{URL}/docs")
    print("\n" + "="*60 + "\n")

# Development workflow commands
if __name__ == "__main__":
    import subprocess
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "install":
            print_post_install_message()
        elif sys.argv[1] == "develop":
            print("\nSetting up development environment...")
            print("Installing package in development mode...")
        elif sys.argv[1] == "test":
            print("\nRunning tests...")
            subprocess.run(["python", "-m", "pytest", "tests/"], check=True)
        elif sys.argv[1] == "lint":
            print("\nRunning code quality checks...")
            subprocess.run(["python", "-m", "flake8", "."], check=False)
            subprocess.run(["python", "-m", "black", "--check", "."], check=False)
            subprocess.run(["python", "-m", "mypy", "."], check=False)
        elif sys.argv[1] == "format":
            print("\nFormatting code...")
            subprocess.run(["python", "-m", "black", "."], check=False)
            subprocess.run(["python", "-m", "isort", "."], check=False)
        elif sys.argv[1] == "security":
            print("\nRunning security checks...")
            subprocess.run(["python", "-m", "bandit", "-r", "."], check=False)
            subprocess.run(["python", "-m", "safety", "check"], check=False)

# Additional metadata for CDK applications
CDK_METADATA = {
    "cdk_version": ">=2.110.0",
    "constructs_version": ">=10.3.0",
    "supported_languages": ["python"],
    "aws_services": [
        "medialive",
        "mediapackage", 
        "cloudfront",
        "s3",
        "iam",
        "cloudwatch",
        "sns",
        "secretsmanager"
    ],
    "deployment_targets": [
        "aws-cloud"
    ],
    "architecture_patterns": [
        "media-streaming",
        "adaptive-bitrate",
        "global-distribution",
        "live-broadcasting"
    ]
}