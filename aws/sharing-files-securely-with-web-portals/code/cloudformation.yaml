AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Secure File Sharing with AWS Transfer Family Web Apps
  Creates a complete secure file sharing solution with web-based interface,
  IAM Identity Center integration, S3 storage, and comprehensive audit logging.
  
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "General Configuration"
        Parameters:
          - Environment
          - ProjectName
      - Label:
          default: "Storage Configuration"
        Parameters:
          - BucketName
          - EnableVersioning
          - LifecyclePolicyEnabled
      - Label:
          default: "Transfer Family Configuration"
        Parameters:
          - WebAppUnits
          - EndpointType
          - EnableSFTPAccess
      - Label:
          default: "Security Configuration"
        Parameters:
          - EnableCloudTrailLogging
          - MultiRegionTrail
          - LogRetentionDays
      - Label:
          default: "User Management"
        Parameters:
          - CreateTestUser
          - TestUserName
    ParameterLabels:
      Environment:
        default: "Environment Name"
      ProjectName:
        default: "Project Name"
      BucketName:
        default: "S3 Bucket Name"
      EnableVersioning:
        default: "Enable S3 Versioning"
      LifecyclePolicyEnabled:
        default: "Enable Lifecycle Policy"
      WebAppUnits:
        default: "Web App Capacity Units"
      EndpointType:
        default: "Transfer Endpoint Type"
      EnableSFTPAccess:
        default: "Enable SFTP Protocol"
      EnableCloudTrailLogging:
        default: "Enable CloudTrail Logging"
      MultiRegionTrail:
        default: "Multi-Region Trail"
      LogRetentionDays:
        default: "Log Retention Period (Days)"
      CreateTestUser:
        default: "Create Test User"
      TestUserName:
        default: "Test User Name"

Parameters:
  Environment:
    Type: String
    Default: 'Development'
    AllowedValues:
      - Development
      - Testing
      - Staging
      - Production
    Description: Environment for resource deployment and tagging

  ProjectName:
    Type: String
    Default: 'SecureFileSharing'
    MinLength: 3
    MaxLength: 50
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    Description: Project name for resource naming and tagging
    ConstraintDescription: Must start with a letter and contain only letters, numbers, and hyphens

  BucketName:
    Type: String
    Default: ''
    Description: S3 bucket name for file storage (leave empty for auto-generated name)
    AllowedPattern: '^$|^[a-z0-9][a-z0-9-]*[a-z0-9]$'
    ConstraintDescription: Must be a valid S3 bucket name (lowercase, no underscores)

  EnableVersioning:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable S3 bucket versioning for data protection

  LifecyclePolicyEnabled:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable lifecycle policy for cost optimization

  WebAppUnits:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 10
    Description: Number of web app capacity units (affects performance and cost)

  EndpointType:
    Type: String
    Default: 'PUBLIC'
    AllowedValues:
      - PUBLIC
      - VPC
    Description: Transfer Family endpoint type

  EnableSFTPAccess:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable SFTP protocol access alongside web interface

  EnableCloudTrailLogging:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable CloudTrail for comprehensive audit logging

  MultiRegionTrail:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable multi-region CloudTrail logging

  LogRetentionDays:
    Type: Number
    Default: 90
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: CloudWatch Logs retention period in days

  CreateTestUser:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Create a test user for validation purposes

  TestUserName:
    Type: String
    Default: 'testuser'
    MinLength: 3
    MaxLength: 100
    AllowedPattern: '^[a-zA-Z0-9._-]+$'
    Description: Username for the test user (if enabled)

Conditions:
  # Resource creation conditions
  CreateBucketName: !Equals [!Ref BucketName, '']
  EnableS3Versioning: !Equals [!Ref EnableVersioning, 'true']
  EnableLifecyclePolicy: !Equals [!Ref LifecyclePolicyEnabled, 'true']
  EnableSFTP: !Equals [!Ref EnableSFTPAccess, 'true']
  EnableCloudTrail: !Equals [!Ref EnableCloudTrailLogging, 'true']
  EnableMultiRegionTrail: !And [!Condition EnableCloudTrail, !Equals [!Ref MultiRegionTrail, 'true']]
  ShouldCreateTestUser: !Equals [!Ref CreateTestUser, 'true']
  IsProduction: !Equals [!Ref Environment, 'Production']

Resources:
  # S3 Bucket for secure file storage
  SecureFileStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If
        - CreateBucketName
        - !Sub '${ProjectName}-secure-files-${AWS::AccountId}-${AWS::Region}'
        - !Ref BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      VersioningConfiguration: !If
        - EnableS3Versioning
        - Status: Enabled
        - Status: Suspended
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration: !If
        - EnableLifecyclePolicy
        - Rules:
            - Id: ArchiveRule
              Status: Enabled
              Filter:
                Prefix: 'archive/'
              Transitions:
                - TransitionInDays: 30
                  StorageClass: STANDARD_IA
                - TransitionInDays: 90
                  StorageClass: GLACIER
            - Id: UploadsCleanup
              Status: Enabled
              Filter:
                Prefix: 'uploads/temp/'
              ExpirationInDays: 7
        - !Ref AWS::NoValue
      NotificationConfiguration: !If
        - EnableCloudTrail
        - CloudWatchConfigurations:
            - Event: s3:ObjectCreated:*
              CloudWatchConfiguration:
                LogGroupName: !Ref FileActivityLogGroup
        - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-secure-storage'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'SecureFileSharing'
        - Key: DataClassification
          Value: !If [IsProduction, 'Confidential', 'Internal']

  # CloudWatch Log Group for file activities
  FileActivityLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/transfer-family/${ProjectName}/file-activities'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-file-activity-logs'
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for Transfer Family service
  TransferFamilyServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-TransferFamily-ServiceRole-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: transfer.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSTransferLoggingAccess
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                  - s3:ListBucket
                  - s3:ListBucketVersions
                Resource:
                  - !GetAtt SecureFileStorageBucket.Arn
                  - !Sub '${SecureFileStorageBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !GetAtt FileActivityLogGroup.Arn
                  - !Sub '${FileActivityLogGroup.Arn}:*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-transfer-service-role'
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for Transfer Family users
  TransferFamilyUserRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-TransferFamily-UserRole-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: transfer.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
      Policies:
        - PolicyName: UserS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt SecureFileStorageBucket.Arn
                  - !Sub '${SecureFileStorageBucket.Arn}/*'
                Condition:
                  StringLike:
                    's3:prefix': 
                      - 'uploads/${transfer:UserName}/*'
                      - 'shared/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt SecureFileStorageBucket.Arn
                Condition:
                  StringLike:
                    's3:prefix':
                      - 'uploads/${transfer:UserName}/*'
                      - 'shared/*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-transfer-user-role'
        - Key: Environment
          Value: !Ref Environment

  # CloudTrail for audit logging
  FileAccessAuditTrail:
    Type: AWS::CloudTrail::Trail
    Condition: EnableCloudTrail
    Properties:
      TrailName: !Sub '${ProjectName}-file-access-audit'
      S3BucketName: !Ref SecureFileStorageBucket
      S3KeyPrefix: 'audit-logs/'
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: !If [EnableMultiRegionTrail, true, false]
      EnableLogFileValidation: true
      EventSelectors:
        - ReadWriteType: All
          IncludeManagementEvents: true
          DataResources:
            - Type: 'AWS::S3::Object'
              Values: 
                - !Sub '${SecureFileStorageBucket}/*'
            - Type: 'AWS::S3::Bucket'
              Values:
                - !GetAtt SecureFileStorageBucket.Arn
      InsightSelectors:
        - InsightType: ApiCallRateInsight
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-audit-trail'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'FileAccessAuditing'

  # Transfer Family Server (for SFTP access if enabled)
  TransferFamilyServer:
    Type: AWS::Transfer::Server
    Condition: EnableSFTP
    Properties:
      EndpointType: !Ref EndpointType
      IdentityProviderType: SERVICE_MANAGED
      LoggingRole: !GetAtt TransferFamilyServiceRole.Arn
      Protocols:
        - SFTP
      SecurityPolicyName: 'TransferSecurityPolicy-2023-05'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-sftp-server'
        - Key: Environment
          Value: !Ref Environment
        - Key: Protocol
          Value: 'SFTP'

  # Transfer Family Web App
  TransferFamilyWebApp:
    Type: AWS::Transfer::WebApp
    Properties:
      AccessEndpointType: !Ref EndpointType
      IdentityProviderType: SERVICE_MANAGED
      WebAppUnits: !Ref WebAppUnits
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-web-portal'
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'SecureFileSharing'

  # Test User (if enabled)
  TestTransferUser:
    Type: AWS::Transfer::User
    Condition: ShouldCreateTestUser
    DependsOn: TransferFamilyServer
    Properties:
      ServerId: !If [EnableSFTP, !GetAtt TransferFamilyServer.ServerId, !Ref AWS::NoValue]
      UserName: !Ref TestUserName
      Role: !GetAtt TransferFamilyUserRole.Arn
      HomeDirectoryType: LOGICAL
      HomeDirectoryMappings:
        - Entry: '/'
          Target: !Sub '/${SecureFileStorageBucket}/uploads/${TestUserName}'
        - Entry: '/shared'
          Target: !Sub '/${SecureFileStorageBucket}/shared'
        - Entry: '/archive'
          Target: !Sub '/${SecureFileStorageBucket}/archive'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${TestUserName}'
        - Key: Environment
          Value: !Ref Environment
        - Key: UserType
          Value: 'TestUser'

  # CloudWatch Dashboard for monitoring
  FileShareDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-FileSharing-Dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/S3", "BucketSizeBytes", "BucketName", "${SecureFileStorageBucket}", "StorageType", "StandardStorage" ],
                  [ ".", "NumberOfObjects", ".", ".", ".", "AllStorageTypes" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "S3 Storage Metrics",
                "period": 86400
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '${FileActivityLogGroup}' | fields @timestamp, @message\n| filter @message like /UPLOAD\\|DOWNLOAD\\|DELETE/\n| sort @timestamp desc\n| limit 50",
                "region": "${AWS::Region}",
                "title": "Recent File Activities",
                "view": "table"
              }
            }
          ]
        }

  # Sample files creation (using Lambda custom resource)
  SampleFilesFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-sample-files-creator'
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt SampleFilesLambdaRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def handler(event, context):
              try:
                  s3 = boto3.client('s3')
                  bucket_name = event['ResourceProperties']['BucketName']
                  
                  if event['RequestType'] == 'Create':
                      # Create sample files
                      sample_files = {
                          'welcome.txt': 'Welcome to Secure File Sharing Portal\n\nThis is a secure file sharing solution built with AWS Transfer Family Web Apps.',
                          'uploads/README.txt': 'Upload your files to this directory.\n\nFiles uploaded here are automatically organized and monitored.',
                          'shared/collaboration-guide.txt': 'Shared Resources\n\nThis directory contains files accessible to all authorized users.',
                          'archive/archive-info.txt': 'Archive Directory\n\nFiles in this directory are automatically transitioned to lower-cost storage classes.'
                      }
                      
                      for file_path, content in sample_files.items():
                          s3.put_object(
                              Bucket=bucket_name,
                              Key=file_path,
                              Body=content,
                              ServerSideEncryption='AES256'
                          )
                      
                      logger.info(f'Successfully created sample files in bucket {bucket_name}')
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Message': 'Sample files created successfully'})
                  
                  elif event['RequestType'] == 'Delete':
                      # Clean up sample files
                      try:
                          response = s3.list_objects_v2(Bucket=bucket_name, Prefix='')
                          if 'Contents' in response:
                              delete_keys = [{'Key': obj['Key']} for obj in response['Contents']]
                              if delete_keys:
                                  s3.delete_objects(
                                      Bucket=bucket_name,
                                      Delete={'Objects': delete_keys}
                                  )
                          logger.info(f'Cleaned up sample files from bucket {bucket_name}')
                      except Exception as e:
                          logger.warning(f'Error cleaning up files: {str(e)}')
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Message': 'Sample files cleanup completed'})
                  
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Message': 'No action required'})
              
              except Exception as e:
                  logger.error(f'Error: {str(e)}')
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Message': str(e)})

  # IAM Role for sample files Lambda function
  SampleFilesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3SampleFilesAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt SecureFileStorageBucket.Arn
                  - !Sub '${SecureFileStorageBucket.Arn}/*'

  # Custom resource to create sample files
  SampleFilesResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SampleFilesFunction.Arn
      BucketName: !Ref SecureFileStorageBucket

Outputs:
  # Storage outputs
  S3BucketName:
    Description: Name of the S3 bucket for secure file storage
    Value: !Ref SecureFileStorageBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketName'

  S3BucketArn:
    Description: ARN of the S3 bucket for secure file storage
    Value: !GetAtt SecureFileStorageBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketArn'

  # Transfer Family outputs
  WebAppId:
    Description: Transfer Family Web App ID
    Value: !Ref TransferFamilyWebApp
    Export:
      Name: !Sub '${AWS::StackName}-WebAppId'

  WebAppAccessEndpoint:
    Description: Transfer Family Web App access endpoint URL
    Value: !GetAtt TransferFamilyWebApp.AccessEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-WebAppEndpoint'

  SFTPServerId:
    Description: Transfer Family SFTP Server ID (if enabled)
    Value: !If [EnableSFTP, !GetAtt TransferFamilyServer.ServerId, 'SFTP not enabled']
    Condition: EnableSFTP
    Export:
      Name: !Sub '${AWS::StackName}-SFTPServerId'

  SFTPEndpoint:
    Description: Transfer Family SFTP Server endpoint (if enabled)
    Value: !If [EnableSFTP, !Sub '${TransferFamilyServer.ServerId}.server.transfer.${AWS::Region}.amazonaws.com', 'SFTP not enabled']
    Condition: EnableSFTP
    Export:
      Name: !Sub '${AWS::StackName}-SFTPEndpoint'

  # Security and monitoring outputs
  TransferServiceRoleArn:
    Description: ARN of the Transfer Family service role
    Value: !GetAtt TransferFamilyServiceRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TransferServiceRoleArn'

  TransferUserRoleArn:
    Description: ARN of the Transfer Family user role
    Value: !GetAtt TransferFamilyUserRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TransferUserRoleArn'

  CloudTrailArn:
    Description: ARN of the CloudTrail for audit logging (if enabled)
    Value: !If [EnableCloudTrail, !GetAtt FileAccessAuditTrail.Arn, 'CloudTrail not enabled']
    Condition: EnableCloudTrail
    Export:
      Name: !Sub '${AWS::StackName}-CloudTrailArn'

  FileActivityLogGroup:
    Description: CloudWatch Log Group for file activities
    Value: !Ref FileActivityLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-FileActivityLogGroup'

  # Test user outputs
  TestUserName:
    Description: Test user name (if created)
    Value: !If [ShouldCreateTestUser, !Ref TestUserName, 'Test user not created']
    Condition: ShouldCreateTestUser
    Export:
      Name: !Sub '${AWS::StackName}-TestUserName'

  # Dashboard and monitoring
  DashboardURL:
    Description: CloudWatch Dashboard URL for monitoring file sharing activities
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-FileSharing-Dashboard'
    Export:
      Name: !Sub '${AWS::StackName}-DashboardURL'

  # Quick access links
  S3ConsoleURL:
    Description: AWS S3 Console URL for bucket management
    Value: !Sub 'https://s3.console.aws.amazon.com/s3/buckets/${SecureFileStorageBucket}?region=${AWS::Region}'
    Export:
      Name: !Sub '${AWS::StackName}-S3ConsoleURL'

  TransferConsoleURL:
    Description: AWS Transfer Family Console URL for management
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/transfer/home?region=${AWS::Region}'
    Export:
      Name: !Sub '${AWS::StackName}-TransferConsoleURL'

  # Cost and resource information
  EstimatedMonthlyCost:
    Description: Estimated monthly cost for resources (USD, approximate)
    Value: !Sub 
      - 'Web App: $${WebAppCost}, S3: $5-50, CloudTrail: $2-10, Total: $${TotalCost}-70'
      - WebAppCost: !Sub '${WebAppUnits}0'
        TotalCost: !Sub 
          - '${MinCost}'
          - MinCost: !If [EnableCloudTrail, '17', '15']
    Export:
      Name: !Sub '${AWS::StackName}-EstimatedMonthlyCost'