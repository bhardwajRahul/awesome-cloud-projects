# ===================================
# TERRAFORM VARIABLES EXAMPLE
# ===================================
#
# Copy this file to terraform.tfvars and customize the values for your environment.
# terraform.tfvars is in .gitignore to prevent sensitive data from being committed.
#
# Usage: cp terraform.tfvars.example terraform.tfvars

# ===================================
# CORE CONFIGURATION
# ===================================

# Base name for the Lambda function (suffix will be added automatically)
function_name = "config-manager"

# Parameter Store prefix for configuration parameters
# parameter_prefix = "/myapp/config"

# ===================================
# LAMBDA CONFIGURATION
# ===================================

# Lambda runtime version (python3.8, python3.9, python3.10, python3.11, python3.12)
# lambda_runtime = "python3.9"

# Memory allocation in MB (128-10240)
# lambda_memory_size = 256

# Function timeout in seconds (1-900)
# lambda_timeout = 30

# Parameters extension cache TTL in seconds (0-3600)
# parameters_extension_ttl = 300

# ===================================
# APPLICATION CONFIGURATION
# ===================================

# Database configuration
database_host     = "myapp-prod-db.cluster-abc123.us-east-1.rds.amazonaws.com"
database_port     = "5432"
database_password = "your-secure-database-password-here"

# API configuration
api_timeout = "45"

# Feature flags
feature_new_ui = "true"

# ===================================
# MONITORING THRESHOLDS
# ===================================

# Error count threshold for alarms
# error_threshold = 3

# Duration threshold in milliseconds
# duration_threshold = 8000

# Parameter retrieval failure threshold
# failure_threshold = 2

# ===================================
# ENVIRONMENT AND TAGGING
# ===================================

# Environment name
environment = "prod"

# Resource owner
owner = "DevOps-Team"

# Common tags for all resources
tags = {
  Project      = "ConfigManager"
  Environment  = "prod"
  Owner        = "DevOps-Team"
  CostCenter   = "Engineering"
  Application  = "ConfigurationManagement"
  ManagedBy    = "terraform"
  Repository   = "recipes"
  Team         = "platform-engineering"
  Compliance   = "required"
}

# ===================================
# FEATURE TOGGLES
# ===================================

# Enable detailed monitoring
# enable_detailed_monitoring = true

# Enable X-Ray tracing
# enable_x_ray_tracing = false

# Create CloudWatch dashboard
# create_dashboard = true

# Create CloudWatch alarms
# create_alarms = true

# ===================================
# ADVANCED CONFIGURATION
# ===================================

# CloudWatch log retention in days
# log_retention_days = 30

# Reserved concurrent executions (null for unreserved)
# reserved_concurrent_executions = null

# Enable dead letter queue
# dead_letter_config_enabled = false

# ===================================
# EXAMPLE CONFIGURATIONS BY ENVIRONMENT
# ===================================

# Development Environment Example:
# environment = "dev"
# lambda_memory_size = 128
# parameters_extension_ttl = 60
# log_retention_days = 7
# create_alarms = false
# tags = {
#   Environment = "dev"
#   Owner = "dev-team"
#   CostCenter = "development"
# }

# Staging Environment Example:
# environment = "staging"
# lambda_memory_size = 256
# parameters_extension_ttl = 300
# log_retention_days = 14
# error_threshold = 5
# tags = {
#   Environment = "staging"
#   Owner = "qa-team"
#   CostCenter = "testing"
# }

# Production Environment Example:
# environment = "prod"
# lambda_memory_size = 512
# parameters_extension_ttl = 600
# log_retention_days = 90
# error_threshold = 3
# enable_x_ray_tracing = true
# reserved_concurrent_executions = 100
# tags = {
#   Environment = "prod"
#   Owner = "sre-team"
#   CostCenter = "production"
#   Compliance = "sox-required"
# }

# ===================================
# SECURITY NOTES
# ===================================

# IMPORTANT SECURITY CONSIDERATIONS:
#
# 1. Never commit terraform.tfvars to version control
# 2. Use strong passwords for database_password
# 3. Consider using AWS Secrets Manager for sensitive values
# 4. Rotate passwords regularly
# 5. Use least privilege IAM policies
# 6. Enable encryption for Parameter Store SecureString parameters
# 7. Monitor access patterns and set up alerts
#
# For production deployments:
# - Use separate AWS accounts for different environments
# - Implement proper CI/CD pipelines
# - Use remote state backend with encryption
# - Enable CloudTrail for audit logging
# - Set up proper backup and disaster recovery procedures

# ===================================
# VALIDATION
# ===================================

# Before applying changes, validate your configuration:
# terraform validate
# terraform plan
# terraform fmt -check
# terraform init -upgrade

# Test the configuration after deployment:
# aws lambda invoke --function-name <function-name> --payload '{}' response.json