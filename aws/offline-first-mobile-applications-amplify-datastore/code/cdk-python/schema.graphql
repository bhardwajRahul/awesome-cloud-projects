type Task @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  title: String!
  description: String
  priority: Priority!
  status: Status!
  dueDate: AWSDateTime
  tags: [String]
  projectId: ID @index(name: "byProject")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String @auth(rules: [{ allow: owner, operations: [read] }])
}

type Project @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  name: String!
  description: String
  color: String
  tasks: [Task] @hasMany(indexName: "byProject", fields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String @auth(rules: [{ allow: owner, operations: [read] }])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

type Mutation {
  createTask(input: CreateTaskInput!): Task
  updateTask(input: UpdateTaskInput!): Task
  deleteTask(input: DeleteTaskInput!): Task
  createProject(input: CreateProjectInput!): Project
  updateProject(input: UpdateProjectInput!): Project
  deleteProject(input: DeleteProjectInput!): Project
}

type Query {
  getTask(id: ID!): Task
  listTasks(filter: ModelTaskFilterInput, limit: Int, nextToken: String): ModelTaskConnection
  getProject(id: ID!): Project
  listProjects(filter: ModelProjectFilterInput, limit: Int, nextToken: String): ModelProjectConnection
}

type Subscription {
  onCreateTask(owner: String): Task @aws_subscribe(mutations: ["createTask"])
  onUpdateTask(owner: String): Task @aws_subscribe(mutations: ["updateTask"])
  onDeleteTask(owner: String): Task @aws_subscribe(mutations: ["deleteTask"])
  onCreateProject(owner: String): Project @aws_subscribe(mutations: ["createProject"])
  onUpdateProject(owner: String): Project @aws_subscribe(mutations: ["updateProject"])
  onDeleteProject(owner: String): Project @aws_subscribe(mutations: ["deleteProject"])
}

input CreateTaskInput {
  title: String!
  description: String
  priority: Priority!
  status: Status
  dueDate: AWSDateTime
  tags: [String]
  projectId: ID
}

input UpdateTaskInput {
  id: ID!
  title: String
  description: String
  priority: Priority
  status: Status
  dueDate: AWSDateTime
  tags: [String]
  projectId: ID
}

input DeleteTaskInput {
  id: ID!
}

input CreateProjectInput {
  name: String!
  description: String
  color: String
}

input UpdateProjectInput {
  id: ID!
  name: String
  description: String
  color: String
}

input DeleteProjectInput {
  id: ID!
}

input ModelTaskFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  description: ModelStringInput
  priority: ModelPriorityInput
  status: ModelStatusInput
  dueDate: ModelStringInput
  projectId: ModelIDInput
  and: [ModelTaskFilterInput]
  or: [ModelTaskFilterInput]
  not: ModelTaskFilterInput
}

input ModelProjectFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  color: ModelStringInput
  and: [ModelProjectFilterInput]
  or: [ModelProjectFilterInput]
  not: ModelProjectFilterInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelPriorityInput {
  eq: Priority
  ne: Priority
}

input ModelStatusInput {
  eq: Status
  ne: Status
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type ModelTaskConnection {
  items: [Task]
  nextToken: String
}

type ModelProjectConnection {
  items: [Project]
  nextToken: String
}