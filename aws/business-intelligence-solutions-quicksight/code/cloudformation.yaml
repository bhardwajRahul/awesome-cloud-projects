AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Comprehensive CloudFormation template for implementing Business Intelligence Solutions with Amazon QuickSight.
  This template creates the complete infrastructure for a scalable BI platform including data sources,
  QuickSight setup, IAM roles, S3 data lake, and optional RDS database for multi-source analytics.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Project Configuration"
        Parameters:
          - ProjectName
          - Environment
      - Label:
          default: "QuickSight Configuration"
        Parameters:
          - QuickSightEdition
          - QuickSightNamespace
          - CreateSampleData
      - Label:
          default: "Data Source Configuration"
        Parameters:
          - CreateRDSInstance
          - DBInstanceClass
          - DBAllocatedStorage
          - DBMasterUsername
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
      - Label:
          default: "Security Configuration"
        Parameters:
          - EnableEncryption
          - DataRetentionDays
    ParameterLabels:
      ProjectName:
        default: "Project Name"
      Environment:
        default: "Environment"
      QuickSightEdition:
        default: "QuickSight Edition"
      QuickSightNamespace:
        default: "QuickSight Namespace"
      CreateSampleData:
        default: "Create Sample Data"
      CreateRDSInstance:
        default: "Create RDS Instance"
      DBInstanceClass:
        default: "DB Instance Class"
      DBAllocatedStorage:
        default: "DB Allocated Storage"
      DBMasterUsername:
        default: "DB Master Username"
      VpcCIDR:
        default: "VPC CIDR"
      PublicSubnet1CIDR:
        default: "Public Subnet 1 CIDR"
      PublicSubnet2CIDR:
        default: "Public Subnet 2 CIDR"
      PrivateSubnet1CIDR:
        default: "Private Subnet 1 CIDR"
      PrivateSubnet2CIDR:
        default: "Private Subnet 2 CIDR"
      EnableEncryption:
        default: "Enable Encryption"
      DataRetentionDays:
        default: "Data Retention Days"

Parameters:
  ProjectName:
    Type: String
    Default: "QuickSight-BI-Platform"
    Description: "Name of the project for resource naming and tagging"
    AllowedPattern: "^[a-zA-Z0-9-]*$"
    ConstraintDescription: "Must contain only alphanumeric characters and hyphens"
    MaxLength: 50

  Environment:
    Type: String
    Default: "dev"
    AllowedValues:
      - "dev"
      - "staging" 
      - "prod"
    Description: "Environment name for resource tagging and configuration"

  QuickSightEdition:
    Type: String
    Default: "STANDARD"
    AllowedValues:
      - "STANDARD"
      - "ENTERPRISE"
    Description: "QuickSight edition to use (Standard or Enterprise)"

  QuickSightNamespace:
    Type: String
    Default: "default"
    Description: "QuickSight namespace for user and asset organization"
    AllowedPattern: "^[a-zA-Z0-9-]*$"
    ConstraintDescription: "Must contain only alphanumeric characters and hyphens"

  CreateSampleData:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "Whether to create sample sales data in S3 for demonstration"

  CreateRDSInstance:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "Whether to create an RDS MySQL instance for multi-source analytics"

  DBInstanceClass:
    Type: String
    Default: "db.t3.micro"
    AllowedValues:
      - "db.t3.micro"
      - "db.t3.small"
      - "db.t3.medium"
      - "db.r5.large"
      - "db.r5.xlarge"
    Description: "RDS instance class for the database"

  DBAllocatedStorage:
    Type: Number
    Default: 20
    MinValue: 20
    MaxValue: 1000
    Description: "Initial database storage allocation in GB"

  DBMasterUsername:
    Type: String
    Default: "admin"
    Description: "Master username for the RDS instance"
    AllowedPattern: "^[a-zA-Z][a-zA-Z0-9]*$"
    ConstraintDescription: "Must begin with a letter and contain only alphanumeric characters"

  VpcCIDR:
    Type: String
    Default: "10.0.0.0/16"
    Description: "CIDR block for the VPC"
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"

  PublicSubnet1CIDR:
    Type: String
    Default: "10.0.1.0/24"
    Description: "CIDR block for public subnet 1"
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"

  PublicSubnet2CIDR:
    Type: String
    Default: "10.0.2.0/24"
    Description: "CIDR block for public subnet 2"
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"

  PrivateSubnet1CIDR:
    Type: String
    Default: "10.0.3.0/24"
    Description: "CIDR block for private subnet 1"
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"

  PrivateSubnet2CIDR:
    Type: String
    Default: "10.0.4.0/24"
    Description: "CIDR block for private subnet 2"
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"

  EnableEncryption:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "Enable encryption for S3 and RDS"

  DataRetentionDays:
    Type: Number
    Default: 365
    MinValue: 30
    MaxValue: 2555  # ~7 years
    Description: "Number of days to retain data in S3 (for lifecycle policies)"

Conditions:
  CreateRDS: !Equals [!Ref CreateRDSInstance, "true"]
  CreateSamples: !Equals [!Ref CreateSampleData, "true"]
  EnableS3Encryption: !Equals [!Ref EnableEncryption, "true"]
  IsProduction: !Equals [!Ref Environment, "prod"]

Mappings:
  # QuickSight service principal varies by region
  QuickSightServicePrincipal:
    us-east-1:
      Principal: "quicksight.amazonaws.com"
    us-west-2:
      Principal: "quicksight.amazonaws.com"
    eu-west-1:
      Principal: "quicksight.amazonaws.com"
    ap-southeast-1:
      Principal: "quicksight.amazonaws.com"
    # Add more regions as needed

Resources:
  # =============================================================================
  # NETWORKING INFRASTRUCTURE
  # =============================================================================
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-vpc"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-igw"
        - Key: Environment
          Value: !Ref Environment

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets for NAT Gateways and ALB
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-public-subnet-1"
        - Key: Environment
          Value: !Ref Environment

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-public-subnet-2"
        - Key: Environment
          Value: !Ref Environment

  # Private Subnets for RDS
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateRDS
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-private-subnet-1"
        - Key: Environment
          Value: !Ref Environment

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateRDS
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-private-subnet-2"
        - Key: Environment
          Value: !Ref Environment

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-public-rt"
        - Key: Environment
          Value: !Ref Environment

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # =============================================================================
  # S3 DATA LAKE INFRASTRUCTURE
  # =============================================================================
  
  # KMS Key for S3 encryption
  S3EncryptionKey:
    Type: AWS::KMS::Key
    Condition: EnableS3Encryption
    Properties:
      Description: "KMS key for QuickSight S3 bucket encryption"
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Sid: Allow QuickSight Service
            Effect: Allow
            Principal:
              Service: !FindInMap [QuickSightServicePrincipal, !Ref "AWS::Region", Principal]
            Action:
              - "kms:Decrypt"
              - "kms:GenerateDataKey"
            Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-s3-kms-key"
        - Key: Environment
          Value: !Ref Environment

  S3EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Condition: EnableS3Encryption
    Properties:
      AliasName: !Sub "alias/${ProjectName}-${Environment}-s3-encryption"
      TargetKeyId: !Ref S3EncryptionKey

  # S3 Bucket for data lake
  DataLakeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-${Environment}-data-lake-${AWS::AccountId}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: !If [EnableS3Encryption, "aws:kms", "AES256"]
              KMSMasterKeyID: !If [EnableS3Encryption, !Ref S3EncryptionKey, !Ref "AWS::NoValue"]
            BucketKeyEnabled: !If [EnableS3Encryption, true, false]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DataRetentionRule
            Status: Enabled
            ExpirationInDays: !Ref DataRetentionDays
            NoncurrentVersionExpirationInDays: 30
          - Id: IncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: "s3:ObjectCreated:*"
            CloudWatchConfiguration:
              LogGroupName: !Ref S3AccessLogGroup
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-data-lake"
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "QuickSight Data Source"

  # S3 Bucket Policy for QuickSight Access
  DataLakeBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DataLakeBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: QuickSightServiceAccess
            Effect: Allow
            Principal:
              AWS: !GetAtt QuickSightServiceRole.Arn
            Action:
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:ListBucket"
            Resource:
              - !Sub "${DataLakeBucket}/*"
              - !GetAtt DataLakeBucket.Arn
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "${DataLakeBucket}/*"
              - !GetAtt DataLakeBucket.Arn
            Condition:
              Bool:
                "aws:SecureTransport": "false"

  # CloudWatch Log Group for S3 access logging
  S3AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/s3/${ProjectName}-${Environment}-access-logs"
      RetentionInDays: 14
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "S3 Access Logging"

  # =============================================================================
  # IAM ROLES AND POLICIES
  # =============================================================================

  # QuickSight Service Role
  QuickSightServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${Environment}-quicksight-service-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: !FindInMap [QuickSightServicePrincipal, !Ref "AWS::Region", Principal]
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSQuickSightRDSRole"
      Policies:
        - PolicyName: S3DataLakeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                  - "s3:GetBucketLocation"
                Resource:
                  - !GetAtt DataLakeBucket.Arn
                  - !Sub "${DataLakeBucket}/*"
              - !If
                - EnableS3Encryption
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                    - "kms:GenerateDataKey"
                  Resource: !GetAtt S3EncryptionKey.Arn
                - !Ref "AWS::NoValue"
        - PolicyName: RDSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "rds:DescribeDBInstances"
                  - "rds:DescribeDBClusters"
                  - "rds:DescribeDBSubnetGroups"
                  - "rds:DescribeDBParameterGroups"
                  - "rds:DescribeDBClusterParameterGroups"
                Resource: "*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "QuickSight Service Access"

  # Lambda Execution Role for Custom Resources
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${Environment}-lambda-execution-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: S3SampleDataAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:DeleteObject"
                Resource: !Sub "${DataLakeBucket}/*"
              - !If
                - EnableS3Encryption
                - Effect: Allow
                  Action:
                    - "kms:Encrypt"
                    - "kms:Decrypt"
                    - "kms:GenerateDataKey"
                  Resource: !GetAtt S3EncryptionKey.Arn
                - !Ref "AWS::NoValue"

  # =============================================================================
  # RDS DATABASE (OPTIONAL)
  # =============================================================================

  # RDS Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Condition: CreateRDS
    Properties:
      DBSubnetGroupName: !Sub "${ProjectName}-${Environment}-db-subnet-group"
      DBSubnetGroupDescription: "Subnet group for QuickSight demo database"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-db-subnet-group"
        - Key: Environment
          Value: !Ref Environment

  # RDS Security Group
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateRDS
    Properties:
      GroupName: !Sub "${ProjectName}-${Environment}-rds-sg"
      GroupDescription: "Security group for RDS database"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref QuickSightSecurityGroup
          Description: "MySQL access from QuickSight"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: "All outbound traffic"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-rds-sg"
        - Key: Environment
          Value: !Ref Environment

  # QuickSight Security Group (placeholder for RDS connectivity)
  QuickSightSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateRDS
    Properties:
      GroupName: !Sub "${ProjectName}-${Environment}-quicksight-sg"
      GroupDescription: "Security group for QuickSight service"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          DestinationSecurityGroupId: !Ref DBSecurityGroup
          Description: "MySQL access to RDS"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-quicksight-sg"
        - Key: Environment
          Value: !Ref Environment

  # RDS Database Password (stored in Secrets Manager)
  DBPassword:
    Type: AWS::SecretsManager::Secret
    Condition: CreateRDS
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-db-password"
      Description: "Password for QuickSight demo database"
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBMasterUsername}"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "RDS Database Credentials"

  # RDS Database Instance
  DBInstance:
    Type: AWS::RDS::DBInstance
    Condition: CreateRDS
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub "${ProjectName}-${Environment}-demo-db"
      DBInstanceClass: !Ref DBInstanceClass
      Engine: mysql
      EngineVersion: "8.0.35"
      AllocatedStorage: !Ref DBAllocatedStorage
      StorageType: gp2
      StorageEncrypted: !Ref EnableEncryption
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Sub "{{resolve:secretsmanager:${DBPassword}:SecretString:password}}"
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      BackupRetentionPeriod: !If [IsProduction, 7, 1]
      DeleteAutomatedBackups: !If [IsProduction, false, true]
      DeletionProtection: !If [IsProduction, true, false]
      MonitoringInterval: !If [IsProduction, 60, 0]
      MonitoringRoleArn: !If 
        - IsProduction
        - !Sub "arn:aws:iam::${AWS::AccountId}:role/rds-monitoring-role"
        - !Ref "AWS::NoValue"
      EnablePerformanceInsights: !If [IsProduction, true, false]
      PerformanceInsightsRetentionPeriod: !If [IsProduction, 7, !Ref "AWS::NoValue"]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-demo-db"
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "QuickSight Data Source"

  # =============================================================================
  # LAMBDA FUNCTION FOR SAMPLE DATA CREATION
  # =============================================================================

  # Lambda function to create sample data in S3
  SampleDataFunction:
    Type: AWS::Lambda::Function
    Condition: CreateSamples
    Properties:
      FunctionName: !Sub "${ProjectName}-${Environment}-sample-data-creator"
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      Environment:
        Variables:
          BUCKET_NAME: !Ref DataLakeBucket
          KMS_KEY_ID: !If [EnableS3Encryption, !Ref S3EncryptionKey, ""]
      Code:
        ZipFile: |
          import json
          import boto3
          import csv
          import io
          import cfnresponse
          from datetime import datetime, timedelta
          import random

          def lambda_handler(event, context):
              try:
                  s3 = boto3.client('s3')
                  bucket_name = event['ResourceProperties']['BucketName']
                  kms_key_id = event['ResourceProperties'].get('KmsKeyId', '')
                  
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      # Generate sample sales data
                      sample_data = generate_sample_data()
                      
                      # Upload to S3
                      csv_buffer = io.StringIO()
                      writer = csv.DictWriter(csv_buffer, fieldnames=sample_data[0].keys())
                      writer.writeheader()
                      writer.writerows(sample_data)
                      
                      put_object_args = {
                          'Bucket': bucket_name,
                          'Key': 'sales/sales_data.csv',
                          'Body': csv_buffer.getvalue(),
                          'ContentType': 'text/csv'
                      }
                      
                      if kms_key_id:
                          put_object_args['ServerSideEncryption'] = 'aws:kms'
                          put_object_args['SSEKMSKeyId'] = kms_key_id
                      
                      s3.put_object(**put_object_args)
                      
                      # Also upload to historical folder
                      put_object_args['Key'] = 'sales/historical/sales_data.csv'
                      s3.put_object(**put_object_args)
                      
                      print(f"Successfully uploaded sample data to {bucket_name}")
                      
                  elif event['RequestType'] == 'Delete':
                      # Clean up sample data
                      try:
                          s3.delete_object(Bucket=bucket_name, Key='sales/sales_data.csv')
                          s3.delete_object(Bucket=bucket_name, Key='sales/historical/sales_data.csv')
                      except Exception as e:
                          print(f"Error deleting objects: {str(e)}")
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

          def generate_sample_data():
              """Generate sample sales data for demonstration"""
              regions = ["North America", "Europe", "Asia Pacific", "Latin America"]
              products = ["Product A", "Product B", "Product C", "Product D"]
              segments = ["Enterprise", "SMB", "Consumer"]
              
              data = []
              start_date = datetime.now() - timedelta(days=90)
              
              for i in range(200):  # Generate 200 sample records
                  date = start_date + timedelta(days=random.randint(0, 90))
                  region = random.choice(regions)
                  product = random.choice(products)
                  segment = random.choice(segments)
                  
                  # Generate realistic sales amounts based on segment
                  if segment == "Enterprise":
                      base_amount = random.uniform(5000, 25000)
                  elif segment == "SMB":
                      base_amount = random.uniform(1000, 8000)
                  else:  # Consumer
                      base_amount = random.uniform(100, 2000)
                  
                  quantity = random.randint(1, 100)
                  sales_amount = round(base_amount, 2)
                  
                  data.append({
                      'date': date.strftime('%Y-%m-%d'),
                      'region': region,
                      'product': product,
                      'sales_amount': sales_amount,
                      'quantity': quantity,
                      'customer_segment': segment
                  })
              
              return data

      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "Sample Data Generation"

  # Custom Resource to trigger sample data creation
  SampleDataResource:
    Type: AWS::CloudFormation::CustomResource
    Condition: CreateSamples
    Properties:
      ServiceToken: !GetAtt SampleDataFunction.Arn
      BucketName: !Ref DataLakeBucket
      KmsKeyId: !If [EnableS3Encryption, !Ref S3EncryptionKey, ""]

  # =============================================================================
  # CLOUDWATCH MONITORING AND ALERTING
  # =============================================================================

  # CloudWatch Log Group for QuickSight API calls
  QuickSightLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/quicksight/${ProjectName}-${Environment}"
      RetentionInDays: 30
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: "QuickSight API Logging"

  # CloudWatch Alarm for failed QuickSight operations
  QuickSightErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-quicksight-errors"
      AlarmDescription: "Alert when QuickSight operations fail"
      MetricName: "ErrorCount"
      Namespace: "AWS/QuickSight"
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket Metrics
  S3BucketMetrics:
    Type: AWS::S3::Bucket
    Properties:
      MetricsConfigurations:
        - Id: EntireBucket
          Status: Enabled
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: "s3:ObjectCreated:*"
            CloudWatchConfiguration:
              LogGroupName: !Ref S3AccessLogGroup

# =============================================================================
# OUTPUTS
# =============================================================================

Outputs:
  VPCId:
    Description: "ID of the VPC"
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC-ID"

  DataLakeBucketName:
    Description: "Name of the S3 data lake bucket"
    Value: !Ref DataLakeBucket
    Export:
      Name: !Sub "${AWS::StackName}-DataLake-Bucket"

  DataLakeBucketArn:
    Description: "ARN of the S3 data lake bucket"
    Value: !GetAtt DataLakeBucket.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DataLake-Bucket-ARN"

  QuickSightServiceRoleArn:
    Description: "ARN of the QuickSight service role"
    Value: !GetAtt QuickSightServiceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-QuickSight-Role-ARN"

  KMSKeyId:
    Condition: EnableS3Encryption
    Description: "ID of the KMS key for encryption"
    Value: !Ref S3EncryptionKey
    Export:
      Name: !Sub "${AWS::StackName}-KMS-Key-ID"

  KMSKeyArn:
    Condition: EnableS3Encryption
    Description: "ARN of the KMS key for encryption"
    Value: !GetAtt S3EncryptionKey.Arn
    Export:
      Name: !Sub "${AWS::StackName}-KMS-Key-ARN"

  DBInstanceEndpoint:
    Condition: CreateRDS
    Description: "Endpoint of the RDS database instance"
    Value: !GetAtt DBInstance.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-DB-Endpoint"

  DBInstancePort:
    Condition: CreateRDS
    Description: "Port of the RDS database instance"
    Value: !GetAtt DBInstance.Endpoint.Port
    Export:
      Name: !Sub "${AWS::StackName}-DB-Port"

  DBSecretArn:
    Condition: CreateRDS
    Description: "ARN of the database credentials secret"
    Value: !Ref DBPassword
    Export:
      Name: !Sub "${AWS::StackName}-DB-Secret-ARN"

  QuickSightRegion:
    Description: "AWS Region for QuickSight operations"
    Value: !Ref "AWS::Region"
    Export:
      Name: !Sub "${AWS::StackName}-QuickSight-Region"

  ProjectName:
    Description: "Project name for resource identification"
    Value: !Ref ProjectName
    Export:
      Name: !Sub "${AWS::StackName}-Project-Name"

  Environment:
    Description: "Environment name"
    Value: !Ref Environment
    Export:
      Name: !Sub "${AWS::StackName}-Environment"

  SampleDataLocation:
    Condition: CreateSamples
    Description: "S3 location of sample data files"
    Value: !Sub "s3://${DataLakeBucket}/sales/"
    Export:
      Name: !Sub "${AWS::StackName}-Sample-Data-Location"

  DeploymentGuide:
    Description: "Next steps for QuickSight configuration"
    Value: !Sub |
      1. Enable QuickSight in the AWS Console: https://quicksight.aws.amazon.com/
      2. Create QuickSight data source using S3 bucket: ${DataLakeBucket}
      3. Use IAM role ARN: ${QuickSightServiceRole.Arn}
      4. ${!If [CreateRDS, !Sub "Configure RDS data source: ${DBInstance.Endpoint.Address}:${DBInstance.Endpoint.Port}", "RDS instance not created"]}
      5. ${!If [CreateSamples, !Sub "Sample data available at: s3://${DataLakeBucket}/sales/", "Sample data not created"]}