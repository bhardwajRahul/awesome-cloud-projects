AWSTemplateFormatVersion: '2010-09-09'
Description: 'Centralized SaaS Security Monitoring with AWS AppFabric and EventBridge - Complete infrastructure for monitoring security events across SaaS applications'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Naming Configuration"
        Parameters:
          - ResourcePrefix
      - Label:
          default: "Security Configuration"
        Parameters:
          - NotificationEmail
          - EnableEncryption
          - LogRetentionDays
      - Label:
          default: "Lambda Configuration"
        Parameters:
          - LambdaMemorySize
          - LambdaTimeout
    ParameterLabels:
      ResourcePrefix:
        default: "Resource Prefix"
      NotificationEmail:
        default: "Security Alert Email"
      EnableEncryption:
        default: "Enable S3 Encryption"
      LogRetentionDays:
        default: "CloudWatch Log Retention (Days)"
      LambdaMemorySize:
        default: "Lambda Memory Size (MB)"
      LambdaTimeout:
        default: "Lambda Timeout (Seconds)"

Parameters:
  ResourcePrefix:
    Type: String
    Default: 'saas-security'
    Description: 'Prefix for all resource names'
    AllowedPattern: '^[a-z][a-z0-9-]*[a-z0-9]$'
    ConstraintDescription: 'Must start with a letter, contain only lowercase letters, numbers, and hyphens, and end with a letter or number'
    MinLength: 3
    MaxLength: 20

  NotificationEmail:
    Type: String
    Description: 'Email address for security alert notifications'
    AllowedPattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    ConstraintDescription: 'Must be a valid email address'

  EnableEncryption:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable S3 bucket encryption for security logs'

  LogRetentionDays:
    Type: Number
    Default: 30
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: 'Number of days to retain Lambda function logs'

  LambdaMemorySize:
    Type: Number
    Default: 256
    MinValue: 128
    MaxValue: 10240
    Description: 'Memory allocation for Lambda function in MB'

  LambdaTimeout:
    Type: Number
    Default: 60
    MinValue: 3
    MaxValue: 900
    Description: 'Timeout for Lambda function in seconds'

Conditions:
  EnableEncryptionCondition: !Equals [!Ref EnableEncryption, 'true']

Resources:
  # ================================
  # S3 Bucket for Security Logs
  # ================================
  SecurityLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ResourcePrefix}-logs-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        !If
          - EnableEncryptionCondition
          - ServerSideEncryptionConfiguration:
              - ServerSideEncryptionByDefault:
                  SSEAlgorithm: AES256
                BucketKeyEnabled: true
          - !Ref AWS::NoValue
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: SecurityLogLifecycle
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
              - TransitionInDays: 365
                StorageClass: DEEP_ARCHIVE
            NoncurrentVersionTransitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
            NoncurrentVersionExpirationInDays: 730
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      Tags:
        - Key: Purpose
          Value: SecurityMonitoring
        - Key: Environment
          Value: Production
        - Key: ManagedBy
          Value: CloudFormation

  # ================================
  # Custom EventBridge Bus
  # ================================
  SecurityEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub '${ResourcePrefix}-monitoring-bus'
      Description: 'Custom EventBridge bus for security event processing'
      Tags:
        - Key: Purpose
          Value: SecurityMonitoring
        - Key: Environment
          Value: Production
        - Key: ManagedBy
          Value: CloudFormation

  # ================================
  # SNS Topic for Security Alerts
  # ================================
  SecurityAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ResourcePrefix}-alerts'
      DisplayName: 'Security Alerts from SaaS Monitoring'
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Purpose
          Value: SecurityMonitoring
        - Key: Environment
          Value: Production
        - Key: ManagedBy
          Value: CloudFormation

  # Email subscription for security alerts
  SecurityAlertsEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref SecurityAlertsTopic
      Endpoint: !Ref NotificationEmail

  # ================================
  # IAM Roles and Policies
  # ================================
  # AppFabric Service Role
  AppFabricServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ResourcePrefix}-AppFabricServiceRole'
      Description: 'Service role for AWS AppFabric to access S3 and other resources'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appfabric.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetBucketLocation
                Resource:
                  - !Sub '${SecurityLogsBucket}/*'
                  - !GetAtt SecurityLogsBucket.Arn
      Tags:
        - Key: Purpose
          Value: SecurityMonitoring
        - Key: Environment
          Value: Production
        - Key: ManagedBy
          Value: CloudFormation

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ResourcePrefix}-LambdaExecutionRole'
      Description: 'Execution role for security processing Lambda function'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecurityProcessingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref SecurityAlertsTopic
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub '${SecurityLogsBucket}/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
      Tags:
        - Key: Purpose
          Value: SecurityMonitoring
        - Key: Environment
          Value: Production
        - Key: ManagedBy
          Value: CloudFormation

  # ================================
  # Lambda Function for Security Processing
  # ================================
  SecurityProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ResourcePrefix}-security-processor'
      Description: 'Processes security events from AppFabric and generates alerts'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: !Ref LambdaMemorySize
      Timeout: !Ref LambdaTimeout
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SecurityAlertsTopic
          LOG_LEVEL: INFO
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import os
          import re
          from datetime import datetime
          
          logger = logging.getLogger()
          logger.setLevel(os.environ.get('LOG_LEVEL', 'INFO'))
          
          sns = boto3.client('sns')
          
          def lambda_handler(event, context):
              """Process security events from AppFabric and generate alerts"""
              
              try:
                  # Parse S3 event from EventBridge
                  for record in event.get('Records', []):
                      if record.get('eventSource') == 'aws:s3':
                          process_s3_security_log(record)
                  
                  # Process direct EventBridge events
                  if 'source' in event:
                      process_eventbridge_event(event)
                      
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Security events processed successfully')
                  }
                  
              except Exception as e:
                  logger.error(f"Error processing security event: {str(e)}")
                  raise
          
          def process_s3_security_log(s3_record):
              """Process security logs uploaded to S3 by AppFabric"""
              
              bucket = s3_record['s3']['bucket']['name']
              key = s3_record['s3']['object']['key']
              
              logger.info(f"Processing security log: s3://{bucket}/{key}")
              
              # Extract application name from S3 key path
              app_name = extract_app_name(key)
              
              # Generate alert for new security log
              alert_message = {
                  'alert_type': 'NEW_SECURITY_LOG',
                  'application': app_name,
                  'timestamp': datetime.utcnow().isoformat(),
                  's3_location': f"s3://{bucket}/{key}",
                  'severity': 'INFO'
              }
              
              send_security_alert(alert_message)
          
          def process_eventbridge_event(event):
              """Process custom security events from EventBridge"""
              
              event_type = event.get('detail-type', 'Unknown')
              source = event.get('source', 'Unknown')
              
              logger.info(f"Processing EventBridge event: {event_type} from {source}")
              
              # Apply threat detection logic based on event patterns
              if is_suspicious_activity(event):
                  alert_message = {
                      'alert_type': 'SUSPICIOUS_ACTIVITY',
                      'event_type': event_type,
                      'source': source,
                      'timestamp': datetime.utcnow().isoformat(),
                      'severity': 'HIGH',
                      'details': event.get('detail', {})
                  }
                  
                  send_security_alert(alert_message)
          
          def is_suspicious_activity(event):
              """Apply threat detection logic to identify suspicious activities"""
              
              detail = event.get('detail', {})
              
              # Example threat detection rules
              suspicious_indicators = [
                  'failed_login_attempt',
                  'privilege_escalation',
                  'unusual_access_pattern',
                  'data_exfiltration'
              ]
              
              event_text = json.dumps(detail).lower()
              return any(indicator in event_text for indicator in suspicious_indicators)
          
          def extract_app_name(s3_key):
              """Extract application name from S3 key path"""
              
              # AppFabric S3 key format: app-bundle-id/app-name/yyyy/mm/dd/file
              path_parts = s3_key.split('/')
              return path_parts[1] if len(path_parts) > 1 else 'unknown'
          
          def send_security_alert(alert_message):
              """Send security alert via SNS"""
              
              topic_arn = os.environ['SNS_TOPIC_ARN']
              
              message = {
                  'default': json.dumps(alert_message, indent=2),
                  'email': format_email_alert(alert_message),
                  'sms': format_sms_alert(alert_message)
              }
              
              sns.publish(
                  TopicArn=topic_arn,
                  Message=json.dumps(message),
                  MessageStructure='json',
                  Subject=f"Security Alert: {alert_message['alert_type']}"
              )
              
              logger.info(f"Security alert sent: {alert_message['alert_type']}")
          
          def format_email_alert(alert):
              """Format security alert for email delivery"""
              
              return f"""
          Security Alert: {alert['alert_type']}
          
          Severity: {alert['severity']}
          Timestamp: {alert['timestamp']}
          Application: {alert.get('application', 'N/A')}
          Source: {alert.get('source', 'N/A')}
          
          Details:
          {json.dumps(alert.get('details', {}), indent=2)}
          
          This is an automated security alert from your SaaS monitoring system.
          """
          
          def format_sms_alert(alert):
              """Format security alert for SMS delivery"""
              
              return f"SECURITY ALERT: {alert['alert_type']} - {alert['severity']} severity detected at {alert['timestamp']}"
      Tags:
        - Key: Purpose
          Value: SecurityMonitoring
        - Key: Environment
          Value: Production
        - Key: ManagedBy
          Value: CloudFormation

  # CloudWatch Log Group for Lambda function
  SecurityProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SecurityProcessorFunction}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Purpose
          Value: SecurityMonitoring
        - Key: Environment
          Value: Production
        - Key: ManagedBy
          Value: CloudFormation

  # ================================
  # EventBridge Rules
  # ================================
  SecurityLogProcessingRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ResourcePrefix}-log-processing-rule'
      Description: 'Route S3 security log events to Lambda processor'
      EventBusName: !Ref SecurityEventBus
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - !Ref SecurityLogsBucket
      Targets:
        - Arn: !GetAtt SecurityProcessorFunction.Arn
          Id: "SecurityProcessorTarget"
      State: ENABLED

  # Permission for EventBridge to invoke Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SecurityProcessorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SecurityLogProcessingRule.Arn

  # ================================
  # AppFabric App Bundle
  # ================================
  AppFabricBundle:
    Type: AWS::AppFabric::AppBundle
    Properties:
      CustomerManagedKeyIdentifier: alias/aws/s3
      Tags:
        - Key: Purpose
          Value: SecurityMonitoring
        - Key: Environment
          Value: Production
        - Key: ManagedBy
          Value: CloudFormation

  # ================================
  # CloudWatch Dashboard
  # ================================
  SecurityMonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ResourcePrefix}-security-monitoring'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", "FunctionName", "${SecurityProcessorFunction}"],
                  [".", "Errors", ".", "."],
                  [".", "Duration", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Security Processor Lambda Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/S3", "BucketSizeBytes", "BucketName", "${SecurityLogsBucket}", "StorageType", "StandardStorage"],
                  [".", "NumberOfObjects", ".", ".", ".", "AllStorageTypes"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Security Logs S3 Metrics",
                "period": 86400
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Events", "SuccessfulInvocations", "RuleName", "${SecurityLogProcessingRule}"],
                  [".", "FailedInvocations", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "EventBridge Rule Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/SNS", "NumberOfMessagesPublished", "TopicName", "${SecurityAlertsTopic}"],
                  [".", "NumberOfNotificationsFailed", ".", "."],
                  [".", "NumberOfNotificationsDelivered", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Security Alerts SNS Metrics",
                "period": 300
              }
            }
          ]
        }

Outputs:
  SecurityLogsBucketName:
    Description: 'Name of the S3 bucket for security logs'
    Value: !Ref SecurityLogsBucket
    Export:
      Name: !Sub '${AWS::StackName}-SecurityLogsBucket'

  SecurityLogsBucketArn:
    Description: 'ARN of the S3 bucket for security logs'
    Value: !GetAtt SecurityLogsBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SecurityLogsBucketArn'

  AppFabricBundleArn:
    Description: 'ARN of the AppFabric App Bundle'
    Value: !GetAtt AppFabricBundle.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AppFabricBundleArn'

  SecurityEventBusName:
    Description: 'Name of the custom EventBridge bus'
    Value: !Ref SecurityEventBus
    Export:
      Name: !Sub '${AWS::StackName}-SecurityEventBus'

  SecurityEventBusArn:
    Description: 'ARN of the custom EventBridge bus'
    Value: !GetAtt SecurityEventBus.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SecurityEventBusArn'

  SecurityProcessorFunctionName:
    Description: 'Name of the security processor Lambda function'
    Value: !Ref SecurityProcessorFunction
    Export:
      Name: !Sub '${AWS::StackName}-SecurityProcessorFunction'

  SecurityProcessorFunctionArn:
    Description: 'ARN of the security processor Lambda function'
    Value: !GetAtt SecurityProcessorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SecurityProcessorFunctionArn'

  SecurityAlertsTopicArn:
    Description: 'ARN of the SNS topic for security alerts'
    Value: !Ref SecurityAlertsTopic
    Export:
      Name: !Sub '${AWS::StackName}-SecurityAlertsTopicArn'

  AppFabricServiceRoleArn:
    Description: 'ARN of the IAM role for AppFabric service'
    Value: !GetAtt AppFabricServiceRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AppFabricServiceRoleArn'

  SecurityMonitoringDashboardURL:
    Description: 'URL of the CloudWatch dashboard for security monitoring'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${SecurityMonitoringDashboard}'

  NextSteps:
    Description: 'Next steps to complete the setup'
    Value: !Sub |
      1. Navigate to AWS AppFabric console and create ingestions for your SaaS applications
      2. Authorize AppFabric to access SaaS application APIs
      3. Configure S3 destination: s3://${SecurityLogsBucket}/security-logs/
      4. Test the monitoring pipeline by generating security events in connected applications
      5. Review CloudWatch dashboard: ${SecurityMonitoringDashboard}