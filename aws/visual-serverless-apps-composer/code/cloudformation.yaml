AWSTemplateFormatVersion: '2010-09-09'
Description: 'Visual Serverless Application with AWS Application Composer and CodeCatalyst - Complete infrastructure for building and deploying serverless applications using visual design tools and automated CI/CD workflows'

# ==============================================================================
# METADATA
# ==============================================================================
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: 'Application Configuration'
        Parameters:
          - ApplicationName
          - Environment
          - DeploymentStage
      - Label:
          default: 'API Gateway Configuration'
        Parameters:
          - ApiGatewayStage
          - EnableCORS
          - EnableTracing
          - EnableThrottling
      - Label:
          default: 'Lambda Configuration'
        Parameters:
          - LambdaRuntime
          - LambdaMemorySize
          - LambdaTimeout
          - ReservedConcurrency
      - Label:
          default: 'DynamoDB Configuration'
        Parameters:
          - DynamoDBBillingMode
          - DynamoDBPointInTimeRecovery
          - DynamoDBEncryption
      - Label:
          default: 'CodeCatalyst Configuration'
        Parameters:
          - CodeCatalystSpace
          - CodeCatalystProject
          - GitRepositoryName
      - Label:
          default: 'Monitoring and Logging'
        Parameters:
          - EnableXRayTracing
          - LogRetentionDays
          - EnableDetailedMonitoring
      - Label:
          default: 'Security Configuration'
        Parameters:
          - EnableWAF
          - KMSKeyRotation
    ParameterLabels:
      ApplicationName:
        default: 'Application Name'
      Environment:
        default: 'Environment Type'
      DeploymentStage:
        default: 'Deployment Stage'
      ApiGatewayStage:
        default: 'API Gateway Stage'
      EnableCORS:
        default: 'Enable CORS'
      EnableTracing:
        default: 'Enable API Tracing'
      EnableThrottling:
        default: 'Enable API Throttling'
      LambdaRuntime:
        default: 'Lambda Runtime'
      LambdaMemorySize:
        default: 'Lambda Memory Size'
      LambdaTimeout:
        default: 'Lambda Timeout'
      ReservedConcurrency:
        default: 'Reserved Concurrency'
      DynamoDBBillingMode:
        default: 'DynamoDB Billing Mode'
      DynamoDBPointInTimeRecovery:
        default: 'Point-in-Time Recovery'
      DynamoDBEncryption:
        default: 'DynamoDB Encryption'
      CodeCatalystSpace:
        default: 'CodeCatalyst Space'
      CodeCatalystProject:
        default: 'CodeCatalyst Project'
      GitRepositoryName:
        default: 'Git Repository Name'
      EnableXRayTracing:
        default: 'Enable X-Ray Tracing'
      LogRetentionDays:
        default: 'Log Retention Days'
      EnableDetailedMonitoring:
        default: 'Enable Detailed Monitoring'
      EnableWAF:
        default: 'Enable WAF Protection'
      KMSKeyRotation:
        default: 'KMS Key Rotation'

# ==============================================================================
# PARAMETERS
# ==============================================================================
Parameters:
  ApplicationName:
    Type: String
    Default: 'visual-serverless-app'
    Description: 'Name of the serverless application'
    MinLength: 3
    MaxLength: 63
    AllowedPattern: '^[a-z0-9][a-z0-9-]*[a-z0-9]$'
    ConstraintDescription: 'Must be 3-63 characters, lowercase letters, numbers, and hyphens only'

  Environment:
    Type: String
    Default: 'dev'
    AllowedValues:
      - 'dev'
      - 'staging'
      - 'prod'
    Description: 'Environment type for resource tagging and configuration'

  DeploymentStage:
    Type: String
    Default: 'v1'
    Description: 'API deployment stage name'
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '^[a-zA-Z0-9_-]+$'

  ApiGatewayStage:
    Type: String
    Default: 'api'
    Description: 'API Gateway stage name'
    MinLength: 1
    MaxLength: 64
    AllowedPattern: '^[a-zA-Z0-9_-]+$'

  EnableCORS:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable CORS for API Gateway'

  EnableTracing:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable X-Ray tracing for API Gateway'

  EnableThrottling:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable API throttling for rate limiting'

  LambdaRuntime:
    Type: String
    Default: 'python3.11'
    AllowedValues:
      - 'python3.11'
      - 'python3.10'
      - 'python3.9'
      - 'nodejs18.x'
      - 'nodejs16.x'
    Description: 'Lambda function runtime'

  LambdaMemorySize:
    Type: Number
    Default: 256
    MinValue: 128
    MaxValue: 10240
    Description: 'Lambda function memory size in MB'

  LambdaTimeout:
    Type: Number
    Default: 30
    MinValue: 1
    MaxValue: 900
    Description: 'Lambda function timeout in seconds'

  ReservedConcurrency:
    Type: Number
    Default: 100
    MinValue: 0
    MaxValue: 1000
    Description: 'Reserved concurrency for Lambda function'

  DynamoDBBillingMode:
    Type: String
    Default: 'PAY_PER_REQUEST'
    AllowedValues:
      - 'PAY_PER_REQUEST'
      - 'PROVISIONED'
    Description: 'DynamoDB billing mode'

  DynamoDBPointInTimeRecovery:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable DynamoDB Point-in-Time Recovery'

  DynamoDBEncryption:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable DynamoDB encryption at rest'

  CodeCatalystSpace:
    Type: String
    Default: 'my-dev-space'
    Description: 'CodeCatalyst space name'
    MinLength: 3
    MaxLength: 63

  CodeCatalystProject:
    Type: String
    Default: 'serverless-visual-app'
    Description: 'CodeCatalyst project name'
    MinLength: 3
    MaxLength: 63

  GitRepositoryName:
    Type: String
    Default: 'visual-serverless-app-repo'
    Description: 'Git repository name for source code'
    MinLength: 1
    MaxLength: 100

  EnableXRayTracing:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable X-Ray tracing for Lambda functions'

  LogRetentionDays:
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: 'CloudWatch log retention period in days'

  EnableDetailedMonitoring:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable detailed CloudWatch monitoring'

  EnableWAF:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable WAF protection for API Gateway'

  KMSKeyRotation:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable automatic KMS key rotation'

# ==============================================================================
# CONDITIONS
# ==============================================================================
Conditions:
  IsProduction: !Equals [!Ref Environment, 'prod']
  IsStaging: !Equals [!Ref Environment, 'staging']
  IsDevelopment: !Equals [!Ref Environment, 'dev']
  EnableCORSCondition: !Equals [!Ref EnableCORS, 'true']
  EnableTracingCondition: !Equals [!Ref EnableTracing, 'true']
  EnableThrottlingCondition: !Equals [!Ref EnableThrottling, 'true']
  EnableXRayTracingCondition: !Equals [!Ref EnableXRayTracing, 'true']
  EnableDetailedMonitoringCondition: !Equals [!Ref EnableDetailedMonitoring, 'true']
  EnableWAFCondition: !Equals [!Ref EnableWAF, 'true']
  EnableKMSKeyRotationCondition: !Equals [!Ref KMSKeyRotation, 'true']
  EnableDynamoDBEncryptionCondition: !Equals [!Ref DynamoDBEncryption, 'true']
  EnableDynamoDBPITRCondition: !Equals [!Ref DynamoDBPointInTimeRecovery, 'true']
  IsProvisionedBilling: !Equals [!Ref DynamoDBBillingMode, 'PROVISIONED']

# ==============================================================================
# RESOURCES
# ==============================================================================
Resources:
  
  # ------------------------------------------------------------------------------
  # KMS Key for Encryption
  # ------------------------------------------------------------------------------
  ApplicationKMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: !Sub 'KMS key for ${ApplicationName} application encryption'
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: 'Enable IAM User Permissions'
            Effect: 'Allow'
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: 'Allow CloudWatch Logs'
            Effect: 'Allow'
            Principal:
              Service: !Sub 'logs.${AWS::Region}.amazonaws.com'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:CreateGrant'
              - 'kms:DescribeKey'
            Resource: '*'
          - Sid: 'Allow Lambda Service'
            Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey'
            Resource: '*'
          - Sid: 'Allow DynamoDB Service'
            Effect: 'Allow'
            Principal:
              Service: 'dynamodb.amazonaws.com'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:CreateGrant'
              - 'kms:DescribeKey'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService': !Sub 'dynamodb.${AWS::Region}.amazonaws.com'
      EnableKeyRotation: !If [EnableKMSKeyRotationCondition, true, false]
      KeySpec: 'SYMMETRIC_DEFAULT'
      KeyUsage: 'ENCRYPT_DECRYPT'
      MultiRegion: false
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-kms-key'
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Application'
          Value: !Ref ApplicationName
        - Key: 'ManagedBy'
          Value: 'CloudFormation'

  ApplicationKMSKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${ApplicationName}-${Environment}'
      TargetKeyId: !Ref ApplicationKMSKey

  # ------------------------------------------------------------------------------
  # DynamoDB Table for User Data
  # ------------------------------------------------------------------------------
  UsersTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${ApplicationName}-${Environment}-users'
      BillingMode: !Ref DynamoDBBillingMode
      AttributeDefinitions:
        - AttributeName: 'id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'id'
          KeyType: 'HASH'
      StreamSpecification:
        StreamViewType: 'NEW_AND_OLD_IMAGES'
      SSESpecification:
        SSEEnabled: !If [EnableDynamoDBEncryptionCondition, true, false]
        KMSMasterKeyId: !If
          - EnableDynamoDBEncryptionCondition
          - !Ref ApplicationKMSKey
          - !Ref 'AWS::NoValue'
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [EnableDynamoDBPITRCondition, true, false]
      BackupPolicy:
        PointInTimeRecoveryEnabled: !If [EnableDynamoDBPITRCondition, true, false]
      DeletionProtectionEnabled: !If [IsProduction, true, false]
      ContributorInsightsSpecification:
        Enabled: !If [EnableDetailedMonitoringCondition, true, false]
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-${Environment}-users'
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Application'
          Value: !Ref ApplicationName
        - Key: 'ManagedBy'
          Value: 'CloudFormation'
        - Key: 'DataClassification'
          Value: 'Internal'

  # ------------------------------------------------------------------------------
  # Lambda Execution Role
  # ------------------------------------------------------------------------------
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ApplicationName}-${Environment}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - !If
          - EnableXRayTracingCondition
          - 'arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess'
          - !Ref 'AWS::NoValue'
      Policies:
        - PolicyName: 'DynamoDBAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:DescribeTable'
                Resource:
                  - !GetAtt UsersTable.Arn
                  - !Sub '${UsersTable.Arn}/index/*'
        - PolicyName: 'KMSAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                Resource:
                  - !GetAtt ApplicationKMSKey.Arn
        - PolicyName: 'CloudWatchLogs'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ApplicationName}-*'
        - PolicyName: 'SQSAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'sqs:SendMessage'
                  - 'sqs:GetQueueAttributes'
                Resource:
                  - !GetAtt UsersDeadLetterQueue.Arn
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-${Environment}-lambda-role'
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Application'
          Value: !Ref ApplicationName
        - Key: 'ManagedBy'
          Value: 'CloudFormation'

  # ------------------------------------------------------------------------------
  # Dead Letter Queue for Lambda
  # ------------------------------------------------------------------------------
  UsersDeadLetterQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: !Sub '${ApplicationName}-${Environment}-users-dlq'
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeoutSeconds: 60
      KmsMasterKeyId: !Ref ApplicationKMSKey
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-${Environment}-users-dlq'
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Application'
          Value: !Ref ApplicationName
        - Key: 'ManagedBy'
          Value: 'CloudFormation'

  # ------------------------------------------------------------------------------
  # CloudWatch Log Group for Lambda
  # ------------------------------------------------------------------------------
  UsersLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ApplicationName}-${Environment}-users'
      RetentionInDays: !Ref LogRetentionDays
      KmsKeyId: !GetAtt ApplicationKMSKey.Arn
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-${Environment}-users-logs'
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Application'
          Value: !Ref ApplicationName
        - Key: 'ManagedBy'
          Value: 'CloudFormation'

  # ------------------------------------------------------------------------------
  # Lambda Function for User Operations
  # ------------------------------------------------------------------------------
  UsersFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: UsersLogGroup
    Properties:
      FunctionName: !Sub '${ApplicationName}-${Environment}-users'
      Runtime: !Ref LambdaRuntime
      Handler: 'users.lambda_handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from decimal import Decimal
          from botocore.exceptions import ClientError
          
          # Initialize DynamoDB resource with error handling
          try:
              dynamodb = boto3.resource('dynamodb')
              table_name = os.environ.get('TABLE_NAME', 'UsersTable')
              table = dynamodb.Table(table_name)
          except Exception as e:
              print(f"Error initializing DynamoDB: {str(e)}")
              raise
          
          def lambda_handler(event, context):
              """
              Lambda function to handle CRUD operations for users
              Supports GET (list users) and POST (create user) operations
              """
              try:
                  http_method = event.get('httpMethod', '')
                  
                  if http_method == 'GET':
                      # Retrieve all users from DynamoDB
                      response = table.scan()
                      items = response.get('Items', [])
                      
                      # Convert Decimal objects to float for JSON serialization
                      for item in items:
                          for key, value in item.items():
                              if isinstance(value, Decimal):
                                  item[key] = float(value)
                      
                      return {
                          'statusCode': 200,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({
                              'users': items,
                              'count': len(items)
                          })
                      }
                  
                  elif http_method == 'POST':
                      # Create new user in DynamoDB
                      body = json.loads(event.get('body', '{}'))
                      
                      # Validate required fields
                      if not body.get('id') or not body.get('name'):
                          return {
                              'statusCode': 400,
                              'headers': {'Content-Type': 'application/json'},
                              'body': json.dumps({
                                  'error': 'Missing required fields: id and name'
                              })
                          }
                      
                      # Store user data
                      table.put_item(Item=body)
                      
                      return {
                          'statusCode': 201,
                          'headers': {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin': '*'
                          },
                          'body': json.dumps({
                              'message': 'User created successfully',
                              'user': body
                          })
                      }
                  
                  else:
                      return {
                          'statusCode': 405,
                          'headers': {'Content-Type': 'application/json'},
                          'body': json.dumps({
                              'error': f'Method {http_method} not allowed'
                          })
                      }
                      
              except ClientError as e:
                  print(f"DynamoDB error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {'Content-Type': 'application/json'},
                      'body': json.dumps({
                          'error': 'Database operation failed'
                      })
                  }
              except json.JSONDecodeError:
                  return {
                      'statusCode': 400,
                      'headers': {'Content-Type': 'application/json'},
                      'body': json.dumps({
                          'error': 'Invalid JSON in request body'
                      })
                  }
              except Exception as e:
                  print(f"Unexpected error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {'Content-Type': 'application/json'},
                      'body': json.dumps({
                          'error': 'Internal server error'
                      })
                  }
      MemorySize: !Ref LambdaMemorySize
      Timeout: !Ref LambdaTimeout
      ReservedConcurrencyLimit: !Ref ReservedConcurrency
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
          LOG_LEVEL: !If [IsDevelopment, 'DEBUG', 'INFO']
          ENVIRONMENT: !Ref Environment
          APPLICATION_NAME: !Ref ApplicationName
      TracingConfig:
        Mode: !If [EnableXRayTracingCondition, 'Active', 'PassThrough']
      DeadLetterConfig:
        TargetArn: !GetAtt UsersDeadLetterQueue.Arn
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-${Environment}-users'
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Application'
          Value: !Ref ApplicationName
        - Key: 'ManagedBy'
          Value: 'CloudFormation'

  # ------------------------------------------------------------------------------
  # API Gateway REST API
  # ------------------------------------------------------------------------------
  ServerlessAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${ApplicationName}-${Environment}-api'
      Description: !Sub 'Serverless API for ${ApplicationName} ${Environment} environment'
      EndpointConfiguration:
        Types:
          - 'REGIONAL'
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal: '*'
            Action: 'execute-api:Invoke'
            Resource: '*'
          - Effect: 'Deny'
            Principal: '*'
            Action: 'execute-api:Invoke'
            Resource: '*'
            Condition:
              StringNotEquals:
                'aws:SourceVpce': !If [IsProduction, !Ref VPCEndpoint, !Ref 'AWS::NoValue']
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-${Environment}-api'
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Application'
          Value: !Ref ApplicationName
        - Key: 'ManagedBy'
          Value: 'CloudFormation'

  # ------------------------------------------------------------------------------
  # API Gateway Resources and Methods
  # ------------------------------------------------------------------------------
  UsersResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ServerlessAPI
      ParentId: !GetAtt ServerlessAPI.RootResourceId
      PathPart: 'users'

  # OPTIONS method for CORS preflight
  UsersOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Condition: EnableCORSCondition
    Properties:
      RestApiId: !Ref ServerlessAPI
      ResourceId: !Ref UsersResource
      HttpMethod: 'OPTIONS'
      AuthorizationType: 'NONE'
      Integration:
        Type: 'MOCK'
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Headers': "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              'method.response.header.Access-Control-Allow-Methods': "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              'method.response.header.Access-Control-Allow-Origin': "'*'"
            ResponseTemplates:
              'application/json': ''
        PassthroughBehavior: 'WHEN_NO_MATCH'
        RequestTemplates:
          'application/json': '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            'method.response.header.Access-Control-Allow-Headers': true
            'method.response.header.Access-Control-Allow-Methods': true
            'method.response.header.Access-Control-Allow-Origin': true
          ResponseModels:
            'application/json': 'Empty'

  # GET method for retrieving users
  UsersGetMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ServerlessAPI
      ResourceId: !Ref UsersResource
      HttpMethod: 'GET'
      AuthorizationType: 'NONE'
      Integration:
        Type: 'AWS_PROXY'
        IntegrationHttpMethod: 'POST'
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin': !If [EnableCORSCondition, "'*'", !Ref 'AWS::NoValue']
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            'method.response.header.Access-Control-Allow-Origin': !If [EnableCORSCondition, true, false]
          ResponseModels:
            'application/json': 'Empty'
        - StatusCode: '400'
          ResponseModels:
            'application/json': 'Error'
        - StatusCode: '500'
          ResponseModels:
            'application/json': 'Error'

  # POST method for creating users
  UsersPostMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ServerlessAPI
      ResourceId: !Ref UsersResource
      HttpMethod: 'POST'
      AuthorizationType: 'NONE'
      RequestValidatorId: !Ref RequestValidator
      RequestModels:
        'application/json': !Ref UserRequestModel
      Integration:
        Type: 'AWS_PROXY'
        IntegrationHttpMethod: 'POST'
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: '201'
            ResponseParameters:
              'method.response.header.Access-Control-Allow-Origin': !If [EnableCORSCondition, "'*'", !Ref 'AWS::NoValue']
      MethodResponses:
        - StatusCode: '201'
          ResponseParameters:
            'method.response.header.Access-Control-Allow-Origin': !If [EnableCORSCondition, true, false]
          ResponseModels:
            'application/json': 'Empty'
        - StatusCode: '400'
          ResponseModels:
            'application/json': 'Error'
        - StatusCode: '500'
          ResponseModels:
            'application/json': 'Error'

  # ------------------------------------------------------------------------------
  # API Gateway Models and Validators
  # ------------------------------------------------------------------------------
  UserRequestModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      RestApiId: !Ref ServerlessAPI
      ContentType: 'application/json'
      Name: 'UserRequest'
      Schema:
        type: 'object'
        properties:
          id:
            type: 'string'
            minLength: 1
            maxLength: 255
          name:
            type: 'string'
            minLength: 1
            maxLength: 255
          email:
            type: 'string'
            format: 'email'
          age:
            type: 'integer'
            minimum: 0
            maximum: 150
        required:
          - 'id'
          - 'name'
        additionalProperties: false

  RequestValidator:
    Type: 'AWS::ApiGateway::RequestValidator'
    Properties:
      RestApiId: !Ref ServerlessAPI
      Name: 'RequestValidator'
      ValidateRequestBody: true
      ValidateRequestParameters: true

  # ------------------------------------------------------------------------------
  # Lambda Permissions for API Gateway
  # ------------------------------------------------------------------------------
  LambdaApiGatewayInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref UsersFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessAPI}/*/*/*'

  # ------------------------------------------------------------------------------
  # API Gateway Deployment
  # ------------------------------------------------------------------------------
  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - UsersGetMethod
      - UsersPostMethod
    Properties:
      RestApiId: !Ref ServerlessAPI
      Description: !Sub 'Deployment for ${ApplicationName} ${Environment} API'

  # ------------------------------------------------------------------------------
  # API Gateway Stage
  # ------------------------------------------------------------------------------
  ApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      RestApiId: !Ref ServerlessAPI
      DeploymentId: !Ref ApiDeployment
      StageName: !Ref ApiGatewayStage
      Description: !Sub '${Environment} stage for ${ApplicationName} API'
      Variables:
        environment: !Ref Environment
        application: !Ref ApplicationName
      TracingEnabled: !If [EnableTracingCondition, true, false]
      ThrottleSettings:
        BurstLimit: !If [EnableThrottlingCondition, 1000, !Ref 'AWS::NoValue']
        RateLimit: !If [EnableThrottlingCondition, 500, !Ref 'AWS::NoValue']
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: !If [IsProduction, 'ERROR', 'INFO']
          DataTraceEnabled: !If [EnableDetailedMonitoringCondition, true, false]
          MetricsEnabled: !If [EnableDetailedMonitoringCondition, true, false]
          ThrottlingBurstLimit: !If [EnableThrottlingCondition, 1000, !Ref 'AWS::NoValue']
          ThrottlingRateLimit: !If [EnableThrottlingCondition, 500, !Ref 'AWS::NoValue']
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '$context.requestId $context.status $context.error.message $context.error.messageString'
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-${Environment}-api-stage'
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Application'
          Value: !Ref ApplicationName
        - Key: 'ManagedBy'
          Value: 'CloudFormation'

  # ------------------------------------------------------------------------------
  # API Gateway CloudWatch Log Group
  # ------------------------------------------------------------------------------
  ApiGatewayLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${ApplicationName}-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      KmsKeyId: !GetAtt ApplicationKMSKey.Arn
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-${Environment}-api-logs'
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Application'
          Value: !Ref ApplicationName
        - Key: 'ManagedBy'
          Value: 'CloudFormation'

  # ------------------------------------------------------------------------------
  # API Gateway Account Configuration
  # ------------------------------------------------------------------------------
  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

  ApiGatewayCloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'apigateway.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-${Environment}-api-cw-role'
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Application'
          Value: !Ref ApplicationName
        - Key: 'ManagedBy'
          Value: 'CloudFormation'

  # ------------------------------------------------------------------------------
  # WAF Web ACL for API Gateway (Production only)
  # ------------------------------------------------------------------------------
  WebACL:
    Type: 'AWS::WAFv2::WebACL'
    Condition: EnableWAFCondition
    Properties:
      Name: !Sub '${ApplicationName}-${Environment}-web-acl'
      Scope: 'REGIONAL'
      DefaultAction:
        Allow: {}
      Rules:
        - Name: 'AWSManagedRulesCommonRuleSet'
          Priority: 1
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: 'AWS'
              Name: 'AWSManagedRulesCommonRuleSet'
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: 'CommonRuleSetMetric'
        - Name: 'AWSManagedRulesKnownBadInputsRuleSet'
          Priority: 2
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: 'AWS'
              Name: 'AWSManagedRulesKnownBadInputsRuleSet'
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: 'KnownBadInputsMetric'
        - Name: 'RateLimitRule'
          Priority: 3
          Action:
            Block: {}
          Statement:
            RateBasedStatement:
              Limit: 2000
              AggregateKeyType: 'IP'
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: 'RateLimitMetric'
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${ApplicationName}-${Environment}-web-acl'
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-${Environment}-web-acl'
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Application'
          Value: !Ref ApplicationName
        - Key: 'ManagedBy'
          Value: 'CloudFormation'

  # ------------------------------------------------------------------------------
  # WAF Association with API Gateway
  # ------------------------------------------------------------------------------
  WebACLAssociation:
    Type: 'AWS::WAFv2::WebACLAssociation'
    Condition: EnableWAFCondition
    Properties:
      ResourceArn: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${ServerlessAPI}/stages/${ApiGatewayStage}'
      WebACLArn: !GetAtt WebACL.Arn

  # ------------------------------------------------------------------------------
  # VPC Endpoint for API Gateway (Production only)
  # ------------------------------------------------------------------------------
  VPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: IsProduction
    Properties:
      VpcId: !Ref DefaultVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.execute-api'
      VpcEndpointType: 'Interface'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal: '*'
            Action:
              - 'execute-api:Invoke'
            Resource:
              - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessAPI}/*'

  # ------------------------------------------------------------------------------
  # CloudWatch Alarms for Monitoring
  # ------------------------------------------------------------------------------
  LambdaErrorAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: EnableDetailedMonitoringCondition
    Properties:
      AlarmName: !Sub '${ApplicationName}-${Environment}-lambda-errors'
      AlarmDescription: 'Lambda function error rate is too high'
      MetricName: 'Errors'
      Namespace: 'AWS/Lambda'
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: 'GreaterThanThreshold'
      Dimensions:
        - Name: 'FunctionName'
          Value: !Ref UsersFunction
      AlarmActions:
        - !Ref SNSTopic
      TreatMissingData: 'notBreaching'

  LambdaDurationAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: EnableDetailedMonitoringCondition
    Properties:
      AlarmName: !Sub '${ApplicationName}-${Environment}-lambda-duration'
      AlarmDescription: 'Lambda function duration is too high'
      MetricName: 'Duration'
      Namespace: 'AWS/Lambda'
      Statistic: 'Average'
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10000  # 10 seconds
      ComparisonOperator: 'GreaterThanThreshold'
      Dimensions:
        - Name: 'FunctionName'
          Value: !Ref UsersFunction
      AlarmActions:
        - !Ref SNSTopic
      TreatMissingData: 'notBreaching'

  ApiGateway4XXErrorAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: EnableDetailedMonitoringCondition
    Properties:
      AlarmName: !Sub '${ApplicationName}-${Environment}-api-4xx-errors'
      AlarmDescription: 'API Gateway 4XX error rate is too high'
      MetricName: '4XXError'
      Namespace: 'AWS/ApiGateway'
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: 'GreaterThanThreshold'
      Dimensions:
        - Name: 'ApiName'
          Value: !Ref ServerlessAPI
        - Name: 'Stage'
          Value: !Ref ApiGatewayStage
      AlarmActions:
        - !Ref SNSTopic
      TreatMissingData: 'notBreaching'

  ApiGateway5XXErrorAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: EnableDetailedMonitoringCondition
    Properties:
      AlarmName: !Sub '${ApplicationName}-${Environment}-api-5xx-errors'
      AlarmDescription: 'API Gateway 5XX error rate is too high'
      MetricName: '5XXError'
      Namespace: 'AWS/ApiGateway'
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: 'GreaterThanThreshold'
      Dimensions:
        - Name: 'ApiName'
          Value: !Ref ServerlessAPI
        - Name: 'Stage'
          Value: !Ref ApiGatewayStage
      AlarmActions:
        - !Ref SNSTopic
      TreatMissingData: 'notBreaching'

  DynamoDBThrottleAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: EnableDetailedMonitoringCondition
    Properties:
      AlarmName: !Sub '${ApplicationName}-${Environment}-dynamodb-throttles'
      AlarmDescription: 'DynamoDB throttling events detected'
      MetricName: 'ThrottledRequests'
      Namespace: 'AWS/DynamoDB'
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      Dimensions:
        - Name: 'TableName'
          Value: !Ref UsersTable
      AlarmActions:
        - !Ref SNSTopic
      TreatMissingData: 'notBreaching'

  # ------------------------------------------------------------------------------
  # SNS Topic for Notifications
  # ------------------------------------------------------------------------------
  SNSTopic:
    Type: 'AWS::SNS::Topic'
    Condition: EnableDetailedMonitoringCondition
    Properties:
      TopicName: !Sub '${ApplicationName}-${Environment}-alerts'
      DisplayName: !Sub '${ApplicationName} ${Environment} Alerts'
      KmsMasterKeyId: !Ref ApplicationKMSKey
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-${Environment}-alerts'
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Application'
          Value: !Ref ApplicationName
        - Key: 'ManagedBy'
          Value: 'CloudFormation'

  # ------------------------------------------------------------------------------
  # CloudWatch Dashboard
  # ------------------------------------------------------------------------------
  CloudWatchDashboard:
    Type: 'AWS::CloudWatch::Dashboard'
    Condition: EnableDetailedMonitoringCondition
    Properties:
      DashboardName: !Sub '${ApplicationName}-${Environment}-dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${UsersFunction}" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Invocations", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Lambda Metrics"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Count", "ApiName", "${ServerlessAPI}", "Stage", "${ApiGatewayStage}" ],
                  [ ".", "Latency", ".", ".", ".", "." ],
                  [ ".", "4XXError", ".", ".", ".", "." ],
                  [ ".", "5XXError", ".", ".", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "API Gateway Metrics"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${UsersTable}" ],
                  [ ".", "ConsumedWriteCapacityUnits", ".", "." ],
                  [ ".", "ThrottledRequests", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "DynamoDB Metrics"
              }
            }
          ]
        }

  # ------------------------------------------------------------------------------
  # Default VPC and Subnets (Production only)
  # ------------------------------------------------------------------------------
  DefaultVPC:
    Type: 'AWS::EC2::VPC'
    Condition: IsProduction
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-${Environment}-vpc'
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Application'
          Value: !Ref ApplicationName
        - Key: 'ManagedBy'
          Value: 'CloudFormation'

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Condition: IsProduction
    Properties:
      VpcId: !Ref DefaultVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-${Environment}-private-subnet-1'
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Application'
          Value: !Ref ApplicationName
        - Key: 'ManagedBy'
          Value: 'CloudFormation'

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Condition: IsProduction
    Properties:
      VpcId: !Ref DefaultVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-${Environment}-private-subnet-2'
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Application'
          Value: !Ref ApplicationName
        - Key: 'ManagedBy'
          Value: 'CloudFormation'

  VPCEndpointSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Condition: IsProduction
    Properties:
      GroupName: !Sub '${ApplicationName}-${Environment}-vpc-endpoint-sg'
      GroupDescription: 'Security group for VPC endpoint'
      VpcId: !Ref DefaultVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: '10.0.0.0/16'
          Description: 'HTTPS access from VPC'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
          Description: 'All outbound traffic'
      Tags:
        - Key: 'Name'
          Value: !Sub '${ApplicationName}-${Environment}-vpc-endpoint-sg'
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Application'
          Value: !Ref ApplicationName
        - Key: 'ManagedBy'
          Value: 'CloudFormation'

# ==============================================================================
# OUTPUTS
# ==============================================================================
Outputs:
  
  # API Gateway Outputs
  ApiEndpoint:
    Description: 'API Gateway endpoint URL for the serverless application'
    Value: !Sub 'https://${ServerlessAPI}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStage}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  ApiGatewayId:
    Description: 'API Gateway REST API ID'
    Value: !Ref ServerlessAPI
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayId'

  ApiGatewayStage:
    Description: 'API Gateway deployment stage'
    Value: !Ref ApiGatewayStage
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayStage'

  # Lambda Function Outputs
  LambdaFunctionName:
    Description: 'Lambda function name for user operations'
    Value: !Ref UsersFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'

  LambdaFunctionArn:
    Description: 'Lambda function ARN for user operations'
    Value: !GetAtt UsersFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'

  LambdaRoleArn:
    Description: 'Lambda execution role ARN'
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaRoleArn'

  # DynamoDB Outputs
  DynamoDBTableName:
    Description: 'DynamoDB table name for user data'
    Value: !Ref UsersTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTableName'

  DynamoDBTableArn:
    Description: 'DynamoDB table ARN for user data'
    Value: !GetAtt UsersTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTableArn'

  # Security Outputs
  KMSKeyId:
    Description: 'KMS key ID for encryption'
    Value: !Ref ApplicationKMSKey
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyId'

  KMSKeyArn:
    Description: 'KMS key ARN for encryption'
    Value: !GetAtt ApplicationKMSKey.Arn
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyArn'

  # Queue Outputs
  DeadLetterQueueName:
    Description: 'Dead letter queue name for failed Lambda invocations'
    Value: !GetAtt UsersDeadLetterQueue.QueueName
    Export:
      Name: !Sub '${AWS::StackName}-DeadLetterQueueName'

  DeadLetterQueueArn:
    Description: 'Dead letter queue ARN for failed Lambda invocations'
    Value: !GetAtt UsersDeadLetterQueue.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DeadLetterQueueArn'

  # Log Group Outputs
  LambdaLogGroupName:
    Description: 'CloudWatch log group name for Lambda function'
    Value: !Ref UsersLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LambdaLogGroupName'

  ApiGatewayLogGroupName:
    Description: 'CloudWatch log group name for API Gateway'
    Value: !Ref ApiGatewayLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayLogGroupName'

  # WAF Outputs (conditional)
  WebACLArn:
    Condition: EnableWAFCondition
    Description: 'WAF Web ACL ARN for API protection'
    Value: !GetAtt WebACL.Arn
    Export:
      Name: !Sub '${AWS::StackName}-WebACLArn'

  WebACLId:
    Condition: EnableWAFCondition
    Description: 'WAF Web ACL ID for API protection'
    Value: !Ref WebACL
    Export:
      Name: !Sub '${AWS::StackName}-WebACLId'

  # Monitoring Outputs (conditional)
  SNSTopicArn:
    Condition: EnableDetailedMonitoringCondition
    Description: 'SNS topic ARN for alerts and notifications'
    Value: !Ref SNSTopic
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopicArn'

  CloudWatchDashboardURL:
    Condition: EnableDetailedMonitoringCondition
    Description: 'CloudWatch dashboard URL for monitoring'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ApplicationName}-${Environment}-dashboard'
    Export:
      Name: !Sub '${AWS::StackName}-CloudWatchDashboardURL'

  # Application Configuration Outputs
  ApplicationName:
    Description: 'Application name used for resource naming'
    Value: !Ref ApplicationName
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationName'

  Environment:
    Description: 'Environment type for the deployed application'
    Value: !Ref Environment
    Export:
      Name: !Sub '${AWS::StackName}-Environment'

  Region:
    Description: 'AWS region where the application is deployed'
    Value: !Ref 'AWS::Region'
    Export:
      Name: !Sub '${AWS::StackName}-Region'

  # CodeCatalyst Configuration Outputs
  CodeCatalystSpace:
    Description: 'CodeCatalyst space name for the project'
    Value: !Ref CodeCatalystSpace
    Export:
      Name: !Sub '${AWS::StackName}-CodeCatalystSpace'

  CodeCatalystProject:
    Description: 'CodeCatalyst project name'
    Value: !Ref CodeCatalystProject
    Export:
      Name: !Sub '${AWS::StackName}-CodeCatalystProject'

  # VPC Outputs (Production only)
  VPCId:
    Condition: IsProduction
    Description: 'VPC ID for production environment'
    Value: !Ref DefaultVPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCId'

  VPCEndpointId:
    Condition: IsProduction
    Description: 'VPC endpoint ID for API Gateway'
    Value: !Ref VPCEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-VPCEndpointId'

  # Testing and Development Outputs
  CurlTestCommand:
    Description: 'Sample curl command to test the API'
    Value: !Sub |
      # Test GET endpoint
      curl -X GET "${ServerlessAPI}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStage}/users" -H "Content-Type: application/json"
      
      # Test POST endpoint
      curl -X POST "${ServerlessAPI}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStage}/users" \
        -H "Content-Type: application/json" \
        -d '{"id": "test-user", "name": "Test User", "email": "test@example.com"}'

  StackInfo:
    Description: 'CloudFormation stack information and next steps'
    Value: !Sub |
      Stack Name: ${AWS::StackName}
      Region: ${AWS::Region}
      Environment: ${Environment}
      
      Next Steps:
      1. Test the API endpoints using the provided curl commands
      2. Set up CodeCatalyst workflows for CI/CD automation
      3. Configure Application Composer for visual development
      4. Set up monitoring and alerting for production workloads
      5. Review security settings and apply additional hardening as needed
      
      For detailed implementation guide, refer to the recipe documentation.