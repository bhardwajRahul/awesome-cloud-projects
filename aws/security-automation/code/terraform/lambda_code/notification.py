import json
import boto3
import logging
import os
from datetime import datetime

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    """
    Send contextual notifications for security findings
    """
    try:
        detail = event.get('detail', {})
        findings = detail.get('findings', [])
        
        if not findings:
            logger.warning("No findings in event")
            return {'statusCode': 200, 'body': 'No findings to process'}
        
        # Process each finding for notification
        for finding in findings:
            send_security_notification(finding)
        
        return {
            'statusCode': 200,
            'body': json.dumps(f'Sent notifications for {len(findings)} findings')
        }
        
    except Exception as e:
        logger.error(f"Error in notification function: {str(e)}")
        raise

def send_security_notification(finding):
    """
    Send detailed security notification
    """
    try:
        # Extract key information
        severity = finding.get('Severity', {}).get('Label', 'INFORMATIONAL')
        title = finding.get('Title', 'Security Finding')
        description = finding.get('Description', 'No description available')
        finding_id = finding.get('Id', 'unknown')
        
        # Create rich notification message
        message = create_notification_message(finding, severity, title, description)
        
        # Send to SNS topic
        sns = boto3.client('sns')
        sns.publish(
            TopicArn=os.environ.get('SNS_TOPIC_ARN'),
            Subject=f'Security Alert: {severity} - {title}',
            Message=message,
            MessageAttributes={
                'severity': {
                    'DataType': 'String',
                    'StringValue': severity
                },
                'finding_id': {
                    'DataType': 'String',
                    'StringValue': finding_id
                }
            }
        )
        
        logger.info(f"Notification sent for finding {finding_id}")
        
    except Exception as e:
        logger.error(f"Error sending notification: {str(e)}")

def create_notification_message(finding, severity, title, description):
    """
    Create structured notification message
    """
    resources = finding.get('Resources', [])
    resource_list = [r.get('Id', 'Unknown') for r in resources[:3]]
    
    message = f"""
ðŸš¨ Security Finding Alert

Severity: {severity}
Title: {title}

Description: {description}

Affected Resources:
{chr(10).join(f'â€¢ {r}' for r in resource_list)}

Finding ID: {finding.get('Id', 'unknown')}
Account: {finding.get('AwsAccountId', 'unknown')}
Region: {finding.get('Region', 'unknown')}

Created: {finding.get('CreatedAt', 'unknown')}
Updated: {finding.get('UpdatedAt', 'unknown')}

Compliance Status: {finding.get('Compliance', {}).get('Status', 'UNKNOWN')}

ðŸ”— View in Security Hub Console:
https://console.aws.amazon.com/securityhub/home?region={finding.get('Region', 'us-east-1')}#/findings?search=Id%3D{finding.get('Id', '')}

This alert was generated by automated security monitoring.
"""
    
    return message