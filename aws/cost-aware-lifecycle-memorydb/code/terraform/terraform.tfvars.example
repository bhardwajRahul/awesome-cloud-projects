# Example Terraform Variables for Cost-Aware MemoryDB Lifecycle Management
# Copy this file to terraform.tfvars and customize the values for your environment

# =============================================================================
# BASIC CONFIGURATION
# =============================================================================

# AWS region where resources will be deployed
aws_region = "us-east-1"

# Environment designation (dev, staging, prod)
environment = "dev"

# Cost center for billing and resource allocation
cost_center = "engineering"

# =============================================================================
# MEMORYDB CLUSTER CONFIGURATION  
# =============================================================================

# Initial node type for the MemoryDB cluster (cost-aware scaling will modify this)
# Options: db.t4g.nano, db.t4g.micro, db.t4g.small, db.t4g.medium, db.t4g.large, etc.
memorydb_node_type = "db.t4g.small"

# Number of shards in the cluster (affects storage capacity and throughput)
memorydb_num_shards = 1

# Number of replicas per shard (affects availability and read performance)
memorydb_num_replicas_per_shard = 0

# Preferred maintenance window for cluster updates (UTC format)
memorydb_maintenance_window = "sun:03:00-sun:04:00"

# =============================================================================
# LAMBDA FUNCTION CONFIGURATION
# =============================================================================

# Lambda runtime version
lambda_runtime = "python3.9"

# Lambda function memory allocation (MB)
lambda_memory_size = 256

# Lambda function timeout (seconds)
lambda_timeout = 300

# Logging level for the cost optimization function
lambda_log_level = "INFO"

# =============================================================================
# EVENTBRIDGE SCHEDULER CONFIGURATION
# =============================================================================

# Business hours start time - when to scale up for performance (UTC cron format)
# Default: 8 AM weekdays
business_hours_start_cron = "0 8 ? * MON-FRI *"

# Business hours end time - when to scale down for cost savings (UTC cron format)  
# Default: 6 PM weekdays
business_hours_end_cron = "0 18 ? * MON-FRI *"

# Weekly cost analysis schedule (UTC cron format)
# Default: 9 AM Mondays
weekly_analysis_cron = "0 9 ? * MON *"

# =============================================================================
# COST MANAGEMENT CONFIGURATION
# =============================================================================

# Monthly budget limit for MemoryDB costs (USD)
monthly_budget_limit = 200

# Budget alert threshold for actual costs (percentage)
budget_alert_threshold_actual = 80

# Budget alert threshold for forecasted costs (percentage)
budget_alert_threshold_forecasted = 90

# Email address for cost alerts and budget notifications
cost_alert_email = "admin@example.com"

# =============================================================================
# COST OPTIMIZATION THRESHOLDS
# =============================================================================

# Cost threshold for scale-up decisions during business hours (USD)
scale_up_cost_threshold = 100

# Cost threshold for scale-down decisions during off-hours (USD)
scale_down_cost_threshold = 50

# Cost threshold for triggering weekly analysis actions (USD)
weekly_analysis_cost_threshold = 150

# =============================================================================
# CLOUDWATCH MONITORING CONFIGURATION
# =============================================================================

# Alarm threshold for weekly MemoryDB costs (USD)
weekly_cost_alarm_threshold = 150

# Error count threshold for Lambda function alarms
lambda_error_alarm_threshold = 1

# =============================================================================
# NETWORKING CONFIGURATION
# =============================================================================

# Whether to use the default VPC (recommended for testing)
use_default_vpc = true

# VPC ID (only required if use_default_vpc = false)
# vpc_id = "vpc-xxxxxxxxxxxxxxxxx"

# Subnet IDs for MemoryDB cluster (only required if use_default_vpc = false)
# subnet_ids = [
#   "subnet-xxxxxxxxxxxxxxxxx",
#   "subnet-yyyyyyyyyyyyyyyyy"
# ]

# CIDR blocks allowed to access the MemoryDB cluster
allowed_cidr_blocks = [
  "10.0.0.0/8",    # Private network range A
  "172.16.0.0/12", # Private network range B  
  "192.168.0.0/16" # Private network range C
]

# =============================================================================
# RESOURCE NAMING AND TAGGING
# =============================================================================

# Prefix for resource names (must be lowercase with hyphens only)
resource_prefix = "cost-aware-memorydb"

# Enable deletion protection for critical resources (recommended for production)
enable_deletion_protection = false

# =============================================================================
# FEATURE FLAGS
# =============================================================================

# Enable EventBridge Scheduler automation for cost optimization
enable_scheduler_automation = true

# Enable detailed CloudWatch monitoring with dashboards and alarms
enable_detailed_monitoring = true

# Enable AWS Budgets for proactive cost monitoring
enable_cost_budget = true

# =============================================================================
# EXAMPLE CONFIGURATIONS FOR DIFFERENT ENVIRONMENTS
# =============================================================================

# Development Environment Example:
# aws_region = "us-east-1"
# environment = "dev"
# memorydb_node_type = "db.t4g.micro"
# monthly_budget_limit = 50
# enable_deletion_protection = false
# enable_scheduler_automation = true

# Staging Environment Example:
# aws_region = "us-west-2"
# environment = "staging"
# memorydb_node_type = "db.t4g.small"
# memorydb_num_replicas_per_shard = 1
# monthly_budget_limit = 200
# enable_deletion_protection = false
# use_default_vpc = false
# vpc_id = "vpc-staging123456789"

# Production Environment Example:
# aws_region = "us-west-2"
# environment = "prod"
# memorydb_node_type = "db.r6g.large"
# memorydb_num_shards = 2
# memorydb_num_replicas_per_shard = 2
# monthly_budget_limit = 1000
# weekly_cost_alarm_threshold = 200
# enable_deletion_protection = true
# use_default_vpc = false
# allowed_cidr_blocks = ["10.0.0.0/16"]  # Restrict to application subnet

# =============================================================================
# ADVANCED CONFIGURATION OPTIONS
# =============================================================================

# Custom business hours for different time zones:
# Pacific Time business hours (8 AM - 6 PM PST = 16:00 - 02:00 UTC next day)
# business_hours_start_cron = "0 16 ? * MON-FRI *"
# business_hours_end_cron = "0 2 ? * TUE-SAT *"

# European business hours (9 AM - 5 PM CET = 8:00 - 16:00 UTC)
# business_hours_start_cron = "0 8 ? * MON-FRI *"
# business_hours_end_cron = "0 16 ? * MON-FRI *"

# Cost-aggressive scaling for maximum savings:
# scale_up_cost_threshold = 50
# scale_down_cost_threshold = 25
# weekly_analysis_cost_threshold = 75

# Performance-focused configuration with higher cost tolerance:
# scale_up_cost_threshold = 200
# scale_down_cost_threshold = 100
# memorydb_node_type = "db.r6g.medium"