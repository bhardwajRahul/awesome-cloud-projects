AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AWS CodeArtifact Infrastructure for Artifact Management
  Creates a comprehensive artifact management system with hierarchical repositories,
  external connections to public registries, and fine-grained access controls.
  Based on the "Artifact Management with CodeArtifact" recipe.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Domain Configuration"
        Parameters:
          - DomainName
          - KMSKeyId
      - Label:
          default: "Repository Configuration"
        Parameters:
          - NpmStoreRepositoryName
          - PypiStoreRepositoryName
          - TeamRepositoryName
          - ProductionRepositoryName
      - Label:
          default: "Access Control"
        Parameters:
          - DeveloperRoleName
          - ProductionRoleName
          - CreateIAMRoles
      - Label:
          default: "Tags"
        Parameters:
          - Environment
          - CostCenter
    ParameterLabels:
      DomainName:
        default: "CodeArtifact Domain Name"
      KMSKeyId:
        default: "KMS Key for Encryption"
      NpmStoreRepositoryName:
        default: "NPM Store Repository"
      PypiStoreRepositoryName:
        default: "PyPI Store Repository"
      TeamRepositoryName:
        default: "Team Development Repository"
      ProductionRepositoryName:
        default: "Production Repository"
      DeveloperRoleName:
        default: "Developer IAM Role Name"
      ProductionRoleName:
        default: "Production IAM Role Name"
      CreateIAMRoles:
        default: "Create IAM Roles"
      Environment:
        default: "Environment"
      CostCenter:
        default: "Cost Center"

Parameters:
  DomainName:
    Type: String
    Description: Name for the CodeArtifact domain (must be unique within your account)
    Default: my-company-domain
    MinLength: 2
    MaxLength: 50
    AllowedPattern: ^[a-z][a-z0-9\-]{0,48}[a-z0-9]$
    ConstraintDescription: >
      Domain name must be 2-50 characters, start with a lowercase letter,
      and contain only lowercase letters, numbers, and hyphens.

  KMSKeyId:
    Type: String
    Description: >
      KMS Key ID for encrypting packages (leave empty to use AWS managed key).
      Must be a valid KMS key ID, ARN, alias, or alias ARN.
    Default: ""

  NpmStoreRepositoryName:
    Type: String
    Description: Name for the npm store repository (connected to public npmjs)
    Default: npm-store
    MinLength: 2
    MaxLength: 100
    AllowedPattern: ^[A-Za-z0-9][A-Za-z0-9._\-]{0,98}[A-Za-z0-9]$

  PypiStoreRepositoryName:
    Type: String
    Description: Name for the PyPI store repository (connected to public pypi)
    Default: pypi-store
    MinLength: 2
    MaxLength: 100
    AllowedPattern: ^[A-Za-z0-9][A-Za-z0-9._\-]{0,98}[A-Za-z0-9]$

  TeamRepositoryName:
    Type: String
    Description: Name for the team development repository
    Default: team-dev
    MinLength: 2
    MaxLength: 100
    AllowedPattern: ^[A-Za-z0-9][A-Za-z0-9._\-]{0,98}[A-Za-z0-9]$

  ProductionRepositoryName:
    Type: String
    Description: Name for the production repository
    Default: production
    MinLength: 2
    MaxLength: 100
    AllowedPattern: ^[A-Za-z0-9][A-Za-z0-9._\-]{0,98}[A-Za-z0-9]$

  DeveloperRoleName:
    Type: String
    Description: Name for the developer IAM role (only created if CreateIAMRoles is true)
    Default: CodeArtifactDeveloperRole
    MinLength: 1
    MaxLength: 64
    AllowedPattern: ^[\w+=,.@-]+$

  ProductionRoleName:
    Type: String
    Description: Name for the production IAM role (only created if CreateIAMRoles is true)
    Default: CodeArtifactProductionRole
    MinLength: 1
    MaxLength: 64
    AllowedPattern: ^[\w+=,.@-]+$

  CreateIAMRoles:
    Type: String
    Description: Whether to create IAM roles for developer and production access
    Default: "true"
    AllowedValues:
      - "true"
      - "false"

  Environment:
    Type: String
    Description: Environment name for resource tagging
    Default: development
    AllowedValues:
      - development
      - staging
      - production

  CostCenter:
    Type: String
    Description: Cost center for resource tagging and billing allocation
    Default: engineering
    MinLength: 1
    MaxLength: 50

Conditions:
  # Condition to check if KMS key is provided
  UseCustomKMSKey: !Not [!Equals [!Ref KMSKeyId, ""]]
  
  # Condition to check if IAM roles should be created
  ShouldCreateIAMRoles: !Equals [!Ref CreateIAMRoles, "true"]

Resources:
  # CodeArtifact Domain
  CodeArtifactDomain:
    Type: AWS::CodeArtifact::Domain
    Properties:
      DomainName: !Ref DomainName
      EncryptionKey: !If
        - UseCustomKMSKey
        - !Ref KMSKeyId
        - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "${DomainName}-domain"
        - Key: Environment
          Value: !Ref Environment
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: ManagedBy
          Value: CloudFormation
        - Key: Purpose
          Value: Artifact Management

  # NPM Store Repository (connected to public npmjs)
  NpmStoreRepository:
    Type: AWS::CodeArtifact::Repository
    Properties:
      RepositoryName: !Ref NpmStoreRepositoryName
      DomainName: !Ref CodeArtifactDomain
      Description: NPM packages from public registry with external connection
      ExternalConnections:
        - public:npmjs
      Tags:
        - Key: Name
          Value: !Sub "${DomainName}-${NpmStoreRepositoryName}"
        - Key: Environment
          Value: !Ref Environment
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: RepositoryType
          Value: npm-store
        - Key: Purpose
          Value: Public NPM Package Cache

  # PyPI Store Repository (connected to public pypi)
  PypiStoreRepository:
    Type: AWS::CodeArtifact::Repository
    Properties:
      RepositoryName: !Ref PypiStoreRepositoryName
      DomainName: !Ref CodeArtifactDomain
      Description: Python packages from PyPI with external connection
      ExternalConnections:
        - public:pypi
      Tags:
        - Key: Name
          Value: !Sub "${DomainName}-${PypiStoreRepositoryName}"
        - Key: Environment
          Value: !Ref Environment
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: RepositoryType
          Value: pypi-store
        - Key: Purpose
          Value: Public PyPI Package Cache

  # Team Development Repository (upstream to store repositories)
  TeamRepository:
    Type: AWS::CodeArtifact::Repository
    DependsOn:
      - NpmStoreRepository
      - PypiStoreRepository
    Properties:
      RepositoryName: !Ref TeamRepositoryName
      DomainName: !Ref CodeArtifactDomain
      Description: Team development artifacts with upstream connections
      Upstreams:
        - !Ref NpmStoreRepositoryName
        - !Ref PypiStoreRepositoryName
      Tags:
        - Key: Name
          Value: !Sub "${DomainName}-${TeamRepositoryName}"
        - Key: Environment
          Value: !Ref Environment
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: RepositoryType
          Value: development
        - Key: Purpose
          Value: Team Development Packages

  # Production Repository (upstream to team repository)
  ProductionRepository:
    Type: AWS::CodeArtifact::Repository
    DependsOn: TeamRepository
    Properties:
      RepositoryName: !Ref ProductionRepositoryName
      DomainName: !Ref CodeArtifactDomain
      Description: Production-ready artifacts with controlled access
      Upstreams:
        - !Ref TeamRepositoryName
      Tags:
        - Key: Name
          Value: !Sub "${DomainName}-${ProductionRepositoryName}"
        - Key: Environment
          Value: !Ref Environment
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: RepositoryType
          Value: production
        - Key: Purpose
          Value: Production Package Distribution

  # IAM Role for Developers (read/write access to development repositories)
  DeveloperRole:
    Type: AWS::IAM::Role
    Condition: ShouldCreateIAMRoles
    Properties:
      RoleName: !Ref DeveloperRoleName
      Description: IAM role for developers with CodeArtifact access
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'sts:ExternalId': 'CodeArtifactDeveloper'
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
      Tags:
        - Key: Name
          Value: !Sub "${DomainName}-developer-role"
        - Key: Environment
          Value: !Ref Environment
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: Purpose
          Value: Developer CodeArtifact Access

  # IAM Policy for Developer Role
  DeveloperPolicy:
    Type: AWS::IAM::Policy
    Condition: ShouldCreateIAMRoles
    Properties:
      PolicyName: CodeArtifactDeveloperPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Domain access permissions
          - Effect: Allow
            Action:
              - codeartifact:GetAuthorizationToken
              - codeartifact:GetRepositoryEndpoint
            Resource:
              - !Sub "${CodeArtifactDomain.Arn}"
          
          # Repository read/write permissions for development repositories
          - Effect: Allow
            Action:
              - codeartifact:ReadFromRepository
              - codeartifact:PublishPackageVersion
              - codeartifact:PutPackageMetadata
              - codeartifact:DescribePackageVersion
              - codeartifact:ListPackageVersions
              - codeartifact:DescribeRepository
              - codeartifact:ListPackages
            Resource:
              - !Sub "${TeamRepository.Arn}"
              - !Sub "${NpmStoreRepository.Arn}"
              - !Sub "${PypiStoreRepository.Arn}"
          
          # Package-level permissions for development repositories
          - Effect: Allow
            Action:
              - codeartifact:ReadFromRepository
              - codeartifact:PublishPackageVersion
              - codeartifact:PutPackageMetadata
              - codeartifact:DescribePackageVersion
              - codeartifact:ListPackageVersions
            Resource:
              - !Sub "${TeamRepository.Arn}/*"
              - !Sub "${NpmStoreRepository.Arn}/*"
              - !Sub "${PypiStoreRepository.Arn}/*"
          
          # STS permissions for service bearer tokens
          - Effect: Allow
            Action: sts:GetServiceBearerToken
            Resource: "*"
            Condition:
              StringEquals:
                'sts:AWSServiceName': codeartifact.amazonaws.com
      Roles:
        - !Ref DeveloperRole

  # IAM Role for Production (read-only access to production repository)
  ProductionRole:
    Type: AWS::IAM::Role
    Condition: ShouldCreateIAMRoles
    Properties:
      RoleName: !Ref ProductionRoleName
      Description: IAM role for production with read-only CodeArtifact access
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'sts:ExternalId': 'CodeArtifactProduction'
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - codebuild.amazonaws.com
                - codedeploy.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Tags:
        - Key: Name
          Value: !Sub "${DomainName}-production-role"
        - Key: Environment
          Value: !Ref Environment
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: Purpose
          Value: Production CodeArtifact Access

  # IAM Policy for Production Role
  ProductionPolicy:
    Type: AWS::IAM::Policy
    Condition: ShouldCreateIAMRoles
    Properties:
      PolicyName: CodeArtifactProductionPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Domain access permissions
          - Effect: Allow
            Action:
              - codeartifact:GetAuthorizationToken
              - codeartifact:GetRepositoryEndpoint
            Resource:
              - !Sub "${CodeArtifactDomain.Arn}"
          
          # Read-only permissions for production repository
          - Effect: Allow
            Action:
              - codeartifact:ReadFromRepository
              - codeartifact:DescribePackageVersion
              - codeartifact:ListPackageVersions
              - codeartifact:DescribeRepository
              - codeartifact:ListPackages
            Resource:
              - !Sub "${ProductionRepository.Arn}"
              - !Sub "${ProductionRepository.Arn}/*"
          
          # STS permissions for service bearer tokens
          - Effect: Allow
            Action: sts:GetServiceBearerToken
            Resource: "*"
            Condition:
              StringEquals:
                'sts:AWSServiceName': codeartifact.amazonaws.com
      Roles:
        - !Ref ProductionRole

Outputs:
  # Domain Information
  DomainName:
    Description: CodeArtifact domain name
    Value: !Ref CodeArtifactDomain
    Export:
      Name: !Sub "${AWS::StackName}-DomainName"

  DomainArn:
    Description: CodeArtifact domain ARN
    Value: !GetAtt CodeArtifactDomain.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DomainArn"

  DomainOwner:
    Description: Domain owner (AWS Account ID)
    Value: !Ref AWS::AccountId
    Export:
      Name: !Sub "${AWS::StackName}-DomainOwner"

  # Repository Information
  NpmStoreRepositoryName:
    Description: NPM store repository name
    Value: !Ref NpmStoreRepository
    Export:
      Name: !Sub "${AWS::StackName}-NpmStoreRepository"

  NpmStoreRepositoryArn:
    Description: NPM store repository ARN
    Value: !GetAtt NpmStoreRepository.Arn
    Export:
      Name: !Sub "${AWS::StackName}-NpmStoreRepositoryArn"

  PypiStoreRepositoryName:
    Description: PyPI store repository name
    Value: !Ref PypiStoreRepository
    Export:
      Name: !Sub "${AWS::StackName}-PypiStoreRepository"

  PypiStoreRepositoryArn:
    Description: PyPI store repository ARN
    Value: !GetAtt PypiStoreRepository.Arn
    Export:
      Name: !Sub "${AWS::StackName}-PypiStoreRepositoryArn"

  TeamRepositoryName:
    Description: Team development repository name
    Value: !Ref TeamRepository
    Export:
      Name: !Sub "${AWS::StackName}-TeamRepository"

  TeamRepositoryArn:
    Description: Team development repository ARN
    Value: !GetAtt TeamRepository.Arn
    Export:
      Name: !Sub "${AWS::StackName}-TeamRepositoryArn"

  ProductionRepositoryName:
    Description: Production repository name
    Value: !Ref ProductionRepository
    Export:
      Name: !Sub "${AWS::StackName}-ProductionRepository"

  ProductionRepositoryArn:
    Description: Production repository ARN
    Value: !GetAtt ProductionRepository.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ProductionRepositoryArn"

  # Repository Endpoints
  TeamRepositoryNpmEndpoint:
    Description: Team repository npm endpoint
    Value: !Sub "https://${DomainName}-${AWS::AccountId}.d.codeartifact.${AWS::Region}.amazonaws.com/npm/${TeamRepositoryName}/"
    Export:
      Name: !Sub "${AWS::StackName}-TeamRepositoryNpmEndpoint"

  TeamRepositoryPypiEndpoint:
    Description: Team repository PyPI endpoint
    Value: !Sub "https://${DomainName}-${AWS::AccountId}.d.codeartifact.${AWS::Region}.amazonaws.com/pypi/${TeamRepositoryName}/simple/"
    Export:
      Name: !Sub "${AWS::StackName}-TeamRepositoryPypiEndpoint"

  ProductionRepositoryNpmEndpoint:
    Description: Production repository npm endpoint
    Value: !Sub "https://${DomainName}-${AWS::AccountId}.d.codeartifact.${AWS::Region}.amazonaws.com/npm/${ProductionRepositoryName}/"
    Export:
      Name: !Sub "${AWS::StackName}-ProductionRepositoryNpmEndpoint"

  ProductionRepositoryPypiEndpoint:
    Description: Production repository PyPI endpoint
    Value: !Sub "https://${DomainName}-${AWS::AccountId}.d.codeartifact.${AWS::Region}.amazonaws.com/pypi/${ProductionRepositoryName}/simple/"
    Export:
      Name: !Sub "${AWS::StackName}-ProductionRepositoryPypiEndpoint"

  # IAM Role Information (only when roles are created)
  DeveloperRoleArn:
    Condition: ShouldCreateIAMRoles
    Description: Developer IAM role ARN
    Value: !GetAtt DeveloperRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DeveloperRoleArn"

  ProductionRoleArn:
    Condition: ShouldCreateIAMRoles
    Description: Production IAM role ARN
    Value: !GetAtt ProductionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ProductionRoleArn"

  # Quick Start Commands
  NpmLoginCommand:
    Description: Command to login npm to team repository
    Value: !Sub |
      aws codeartifact login --tool npm --domain ${DomainName} --domain-owner ${AWS::AccountId} --repository ${TeamRepositoryName}

  PipLoginCommand:
    Description: Command to login pip to team repository
    Value: !Sub |
      aws codeartifact login --tool pip --domain ${DomainName} --domain-owner ${AWS::AccountId} --repository ${TeamRepositoryName}

  GetAuthTokenCommand:
    Description: Command to get authorization token
    Value: !Sub |
      aws codeartifact get-authorization-token --domain ${DomainName} --domain-owner ${AWS::AccountId} --query authorizationToken --output text