# GraphQL Schema for Mobile Backend Services
# This schema defines the data model and API operations for a mobile social media application

# User model for storing user profile information
type User @aws_cognito_user_pools {
  id: ID!
  username: String!
  email: AWSEmail!
  firstName: String
  lastName: String
  profilePictureUrl: String
  bio: String
  phoneNumber: AWSPhone
  isVerified: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  posts: [Post] @connection(keyName: "byAuthor", fields: ["id"])
}

# Post model for storing user posts and content
type Post @aws_cognito_user_pools {
  id: ID!
  title: String!
  content: String!
  authorId: ID!
  author: User @connection(fields: ["authorId"])
  imageUrl: String
  videoUrl: String
  tags: [String]
  likes: Int
  shares: Int
  comments: [Comment] @connection(keyName: "byPost", fields: ["id"])
  status: PostStatus
  isPublic: Boolean
  location: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  version: Int
}

# Comment model for post comments
type Comment @aws_cognito_user_pools {
  id: ID!
  postId: ID!
  post: Post @connection(fields: ["postId"])
  authorId: ID!
  author: User @connection(fields: ["authorId"])
  content: String!
  parentCommentId: ID
  parentComment: Comment @connection(fields: ["parentCommentId"])
  replies: [Comment] @connection(keyName: "byParentComment", fields: ["id"])
  likes: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Like model for tracking post and comment likes
type Like @aws_cognito_user_pools {
  id: ID!
  userId: ID!
  user: User @connection(fields: ["userId"])
  postId: ID
  post: Post @connection(fields: ["postId"])
  commentId: ID
  comment: Comment @connection(fields: ["commentId"])
  createdAt: AWSDateTime!
}

# Follow model for user following relationships
type Follow @aws_cognito_user_pools {
  id: ID!
  followerId: ID!
  follower: User @connection(fields: ["followerId"])
  followingId: ID!
  following: User @connection(fields: ["followingId"])
  createdAt: AWSDateTime!
}

# Notification model for user notifications
type Notification @aws_cognito_user_pools {
  id: ID!
  userId: ID!
  user: User @connection(fields: ["userId"])
  type: NotificationType!
  title: String!
  message: String!
  relatedPostId: ID
  relatedPost: Post @connection(fields: ["relatedPostId"])
  relatedUserId: ID
  relatedUser: User @connection(fields: ["relatedUserId"])
  isRead: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

# Enums for various status types
enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  PENDING_REVIEW
  FLAGGED
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  POST_SHARED
  SYSTEM
}

# Input types for mutations
input CreateUserInput {
  username: String!
  email: AWSEmail!
  firstName: String
  lastName: String
  bio: String
  phoneNumber: AWSPhone
}

input UpdateUserInput {
  id: ID!
  username: String
  firstName: String
  lastName: String
  bio: String
  profilePictureUrl: String
  phoneNumber: AWSPhone
}

input CreatePostInput {
  title: String!
  content: String!
  authorId: ID!
  imageUrl: String
  videoUrl: String
  tags: [String]
  isPublic: Boolean
  location: String
}

input UpdatePostInput {
  id: ID!
  title: String
  content: String
  imageUrl: String
  videoUrl: String
  tags: [String]
  isPublic: Boolean
  location: String
  status: PostStatus
}

input DeletePostInput {
  id: ID!
}

input CreateCommentInput {
  postId: ID!
  authorId: ID!
  content: String!
  parentCommentId: ID
}

input UpdateCommentInput {
  id: ID!
  content: String!
}

input DeleteCommentInput {
  id: ID!
}

input CreateLikeInput {
  userId: ID!
  postId: ID
  commentId: ID
}

input DeleteLikeInput {
  id: ID!
}

input CreateFollowInput {
  followerId: ID!
  followingId: ID!
}

input DeleteFollowInput {
  id: ID!
}

input CreateNotificationInput {
  userId: ID!
  type: NotificationType!
  title: String!
  message: String!
  relatedPostId: ID
  relatedUserId: ID
}

input UpdateNotificationInput {
  id: ID!
  isRead: Boolean
}

# Query operations
type Query {
  # User queries
  getUser(id: ID!): User @aws_cognito_user_pools
  listUsers: [User] @aws_cognito_user_pools
  searchUsers(query: String!): [User] @aws_cognito_user_pools
  
  # Post queries
  getPost(id: ID!): Post @aws_cognito_user_pools
  listPosts: [Post] @aws_cognito_user_pools
  listPostsByAuthor(authorId: ID!): [Post] @aws_cognito_user_pools
  searchPosts(query: String!): [Post] @aws_cognito_user_pools
  getFeedPosts(userId: ID!, limit: Int, nextToken: String): PostConnection @aws_cognito_user_pools
  
  # Comment queries
  getComment(id: ID!): Comment @aws_cognito_user_pools
  listCommentsByPost(postId: ID!): [Comment] @aws_cognito_user_pools
  
  # Like queries
  getLike(id: ID!): Like @aws_cognito_user_pools
  listLikesByPost(postId: ID!): [Like] @aws_cognito_user_pools
  listLikesByUser(userId: ID!): [Like] @aws_cognito_user_pools
  
  # Follow queries
  getFollow(id: ID!): Follow @aws_cognito_user_pools
  listFollowers(userId: ID!): [Follow] @aws_cognito_user_pools
  listFollowing(userId: ID!): [Follow] @aws_cognito_user_pools
  
  # Notification queries
  getNotification(id: ID!): Notification @aws_cognito_user_pools
  listNotificationsByUser(userId: ID!): [Notification] @aws_cognito_user_pools
  getUnreadNotificationCount(userId: ID!): Int @aws_cognito_user_pools
}

# Mutation operations
type Mutation {
  # User mutations
  createUser(input: CreateUserInput!): User @aws_cognito_user_pools
  updateUser(input: UpdateUserInput!): User @aws_cognito_user_pools
  deleteUser(id: ID!): User @aws_cognito_user_pools
  
  # Post mutations
  createPost(input: CreatePostInput!): Post @aws_cognito_user_pools
  updatePost(input: UpdatePostInput!): Post @aws_cognito_user_pools
  deletePost(input: DeletePostInput!): Post @aws_cognito_user_pools
  
  # Comment mutations
  createComment(input: CreateCommentInput!): Comment @aws_cognito_user_pools
  updateComment(input: UpdateCommentInput!): Comment @aws_cognito_user_pools
  deleteComment(input: DeleteCommentInput!): Comment @aws_cognito_user_pools
  
  # Like mutations
  createLike(input: CreateLikeInput!): Like @aws_cognito_user_pools
  deleteLike(input: DeleteLikeInput!): Like @aws_cognito_user_pools
  
  # Follow mutations
  createFollow(input: CreateFollowInput!): Follow @aws_cognito_user_pools
  deleteFollow(input: DeleteFollowInput!): Follow @aws_cognito_user_pools
  
  # Notification mutations
  createNotification(input: CreateNotificationInput!): Notification @aws_cognito_user_pools
  updateNotification(input: UpdateNotificationInput!): Notification @aws_cognito_user_pools
  markAllNotificationsAsRead(userId: ID!): [Notification] @aws_cognito_user_pools
}

# Subscription operations for real-time updates
type Subscription {
  # Post subscriptions
  onCreatePost: Post @aws_subscribe(mutations: ["createPost"]) @aws_cognito_user_pools
  onUpdatePost: Post @aws_subscribe(mutations: ["updatePost"]) @aws_cognito_user_pools
  onDeletePost: Post @aws_subscribe(mutations: ["deletePost"]) @aws_cognito_user_pools
  
  # Comment subscriptions
  onCreateComment(postId: ID!): Comment @aws_subscribe(mutations: ["createComment"]) @aws_cognito_user_pools
  onUpdateComment: Comment @aws_subscribe(mutations: ["updateComment"]) @aws_cognito_user_pools
  onDeleteComment: Comment @aws_subscribe(mutations: ["deleteComment"]) @aws_cognito_user_pools
  
  # Like subscriptions
  onCreateLike: Like @aws_subscribe(mutations: ["createLike"]) @aws_cognito_user_pools
  onDeleteLike: Like @aws_subscribe(mutations: ["deleteLike"]) @aws_cognito_user_pools
  
  # Follow subscriptions
  onCreateFollow(followingId: ID!): Follow @aws_subscribe(mutations: ["createFollow"]) @aws_cognito_user_pools
  onDeleteFollow: Follow @aws_subscribe(mutations: ["deleteFollow"]) @aws_cognito_user_pools
  
  # Notification subscriptions
  onCreateNotification(userId: ID!): Notification @aws_subscribe(mutations: ["createNotification"]) @aws_cognito_user_pools
  onUpdateNotification(userId: ID!): Notification @aws_subscribe(mutations: ["updateNotification"]) @aws_cognito_user_pools
}

# Connection types for pagination
type PostConnection {
  items: [Post]
  nextToken: String
}

type CommentConnection {
  items: [Comment]
  nextToken: String
}

type NotificationConnection {
  items: [Notification]
  nextToken: String
}

# Custom scalar types (provided by AWS AppSync)
scalar AWSDateTime
scalar AWSEmail
scalar AWSPhone
scalar AWSJSON
scalar AWSTimestamp