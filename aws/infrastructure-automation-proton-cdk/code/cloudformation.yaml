AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure Automation with AWS Proton and CDK - Complete deployment template for self-service infrastructure platform'

# =================================================================
# METADATA
# =================================================================
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Project Configuration"
        Parameters:
          - ProjectName
          - Environment
      - Label:
          default: "Template Configuration"
        Parameters:
          - EnvironmentTemplateName
          - ServiceTemplateName
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcCidr
          - CreateVpcResources
      - Label:
          default: "CDK Configuration"
        Parameters:
          - CdkVersion
          - NodejsVersion
      - Label:
          default: "S3 Configuration"
        Parameters:
          - CreateS3Bucket
          - S3BucketName
    ParameterLabels:
      ProjectName:
        default: "Project Name"
      Environment:
        default: "Environment"
      EnvironmentTemplateName:
        default: "Environment Template Name"
      ServiceTemplateName:
        default: "Service Template Name"
      VpcCidr:
        default: "VPC CIDR Block"
      CreateVpcResources:
        default: "Create VPC Resources"
      CdkVersion:
        default: "CDK Version"
      NodejsVersion:
        default: "Node.js Version"
      CreateS3Bucket:
        default: "Create S3 Bucket"
      S3BucketName:
        default: "S3 Bucket Name"

# =================================================================
# PARAMETERS
# =================================================================
Parameters:
  ProjectName:
    Type: String
    Description: 'Name of the project for resource naming and tagging'
    Default: 'proton-demo'
    MinLength: 3
    MaxLength: 50
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    ConstraintDescription: 'Must begin with a letter and contain only alphanumeric characters and hyphens'

  Environment:
    Type: String
    Description: 'Environment name for resource tagging and naming'
    Default: 'dev'
    AllowedValues:
      - 'dev'
      - 'staging'
      - 'prod'
    ConstraintDescription: 'Must be dev, staging, or prod'

  EnvironmentTemplateName:
    Type: String
    Description: 'Name for the Proton environment template'
    Default: 'web-app-env'
    MinLength: 3
    MaxLength: 100
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    ConstraintDescription: 'Must begin with a letter and contain only alphanumeric characters and hyphens'

  ServiceTemplateName:
    Type: String
    Description: 'Name for the Proton service template'
    Default: 'web-app-svc'
    MinLength: 3
    MaxLength: 100
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    ConstraintDescription: 'Must begin with a letter and contain only alphanumeric characters and hyphens'

  VpcCidr:
    Type: String
    Description: 'CIDR block for the VPC'
    Default: '10.0.0.0/16'
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$'
    ConstraintDescription: 'Must be a valid IPv4 CIDR range'

  CreateVpcResources:
    Type: String
    Description: 'Whether to create VPC resources for demonstration'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  CdkVersion:
    Type: String
    Description: 'AWS CDK version to use'
    Default: '2.0.0'
    AllowedPattern: '^[0-9]+\.[0-9]+\.[0-9]+$'
    ConstraintDescription: 'Must be a valid semantic version (e.g., 2.0.0)'

  NodejsVersion:
    Type: String
    Description: 'Node.js version for CDK development'
    Default: '18'
    AllowedValues:
      - '16'
      - '18'
      - '20'

  CreateS3Bucket:
    Type: String
    Description: 'Whether to create S3 bucket for template storage'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  S3BucketName:
    Type: String
    Description: 'S3 bucket name for template storage (leave empty for auto-generated name)'
    Default: ''
    AllowedPattern: '^$|^[a-z0-9][a-z0-9-]{1,61}[a-z0-9]$'
    ConstraintDescription: 'Must be a valid S3 bucket name or empty for auto-generation'

# =================================================================
# CONDITIONS
# =================================================================
Conditions:
  CreateVpc: !Equals [!Ref CreateVpcResources, 'true']
  CreateS3: !Equals [!Ref CreateS3Bucket, 'true']
  AutoGenerateS3Name: !Equals [!Ref S3BucketName, '']
  UseCustomS3Name: !Not [!Equals [!Ref S3BucketName, '']]

# =================================================================
# RESOURCES
# =================================================================
Resources:
  # =================================================================
  # IAM ROLES AND POLICIES
  # =================================================================
  
  # Proton Service Role
  ProtonServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-ProtonServiceRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: proton.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSProtonFullAccess
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
      Policies:
        - PolicyName: ProtonAdditionalPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:*'
                  - 'ec2:*'
                  - 'logs:*'
                  - 'iam:PassRole'
                  - 'iam:CreateRole'
                  - 'iam:AttachRolePolicy'
                  - 'iam:DetachRolePolicy'
                  - 'iam:DeleteRole'
                  - 'iam:GetRole'
                  - 'iam:ListRoles'
                  - 'iam:TagRole'
                  - 'iam:UntagRole'
                Resource: '*'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Proton Service Role'

  # CDK Execution Role
  CdkExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-CdkExecutionRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
      Policies:
        - PolicyName: CdkExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:*'
                  - 'organizations:DescribeOrganization'
                  - 'account:GetContactInformation'
                Resource: '*'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'CDK Execution Role'

  # =================================================================
  # S3 BUCKET FOR TEMPLATE STORAGE
  # =================================================================
  
  ProtonTemplatesBucket:
    Type: AWS::S3::Bucket
    Condition: CreateS3
    Properties:
      BucketName: !If
        - AutoGenerateS3Name
        - !Sub '${ProjectName}-templates-${AWS::AccountId}-${Environment}'
        - !Ref S3BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: 's3:ObjectCreated:*'
            CloudWatchConfiguration:
              LogGroupName: !Ref ProtonTemplatesBucketLogGroup
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Proton Templates Storage'

  # S3 Bucket Policy
  ProtonTemplatesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: CreateS3
    Properties:
      Bucket: !Ref ProtonTemplatesBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowProtonServiceAccess
            Effect: Allow
            Principal:
              Service: proton.amazonaws.com
            Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
            Resource: !Sub '${ProtonTemplatesBucket}/*'
          - Sid: AllowProtonServiceList
            Effect: Allow
            Principal:
              Service: proton.amazonaws.com
            Action:
              - 's3:ListBucket'
            Resource: !Ref ProtonTemplatesBucket
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Ref ProtonTemplatesBucket
              - !Sub '${ProtonTemplatesBucket}/*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  # =================================================================
  # CLOUDWATCH LOGS
  # =================================================================
  
  ProtonTemplatesBucketLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: CreateS3
    Properties:
      LogGroupName: !Sub '/aws/s3/${ProjectName}-templates-${Environment}'
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'S3 Bucket Logs'

  ProtonLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/proton/${ProjectName}-${Environment}'
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Proton Service Logs'

  # =================================================================
  # VPC RESOURCES (OPTIONAL DEMONSTRATION)
  # =================================================================
  
  # VPC
  DemoVpc:
    Type: AWS::EC2::VPC
    Condition: CreateVpc
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc-${Environment}'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Demo VPC for Proton templates'

  # Internet Gateway
  DemoInternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVpc
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-igw-${Environment}'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Attach Internet Gateway to VPC
  DemoVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateVpc
    Properties:
      VpcId: !Ref DemoVpc
      InternetGatewayId: !Ref DemoInternetGateway

  # Public Subnet 1
  DemoPublicSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateVpc
    Properties:
      VpcId: !Ref DemoVpc
      CidrBlock: !Select [0, !Cidr [!Ref VpcCidr, 4, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet-1-${Environment}'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Type
          Value: 'Public'

  # Public Subnet 2
  DemoPublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateVpc
    Properties:
      VpcId: !Ref DemoVpc
      CidrBlock: !Select [1, !Cidr [!Ref VpcCidr, 4, 8]]
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet-2-${Environment}'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Type
          Value: 'Public'

  # Private Subnet 1
  DemoPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateVpc
    Properties:
      VpcId: !Ref DemoVpc
      CidrBlock: !Select [2, !Cidr [!Ref VpcCidr, 4, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-subnet-1-${Environment}'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Type
          Value: 'Private'

  # Private Subnet 2
  DemoPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateVpc
    Properties:
      VpcId: !Ref DemoVpc
      CidrBlock: !Select [3, !Cidr [!Ref VpcCidr, 4, 8]]
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-subnet-2-${Environment}'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Type
          Value: 'Private'

  # NAT Gateway EIP
  DemoNatGatewayEip:
    Type: AWS::EC2::EIP
    Condition: CreateVpc
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-nat-eip-${Environment}'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # NAT Gateway
  DemoNatGateway:
    Type: AWS::EC2::NatGateway
    Condition: CreateVpc
    Properties:
      AllocationId: !GetAtt DemoNatGatewayEip.AllocationId
      SubnetId: !Ref DemoPublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-nat-gateway-${Environment}'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Public Route Table
  DemoPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpc
    Properties:
      VpcId: !Ref DemoVpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-rt-${Environment}'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Public Route to Internet Gateway
  DemoPublicRoute:
    Type: AWS::EC2::Route
    Condition: CreateVpc
    DependsOn: DemoVpcGatewayAttachment
    Properties:
      RouteTableId: !Ref DemoPublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref DemoInternetGateway

  # Associate Public Subnets with Public Route Table
  DemoPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpc
    Properties:
      SubnetId: !Ref DemoPublicSubnet1
      RouteTableId: !Ref DemoPublicRouteTable

  DemoPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpc
    Properties:
      SubnetId: !Ref DemoPublicSubnet2
      RouteTableId: !Ref DemoPublicRouteTable

  # Private Route Table
  DemoPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpc
    Properties:
      VpcId: !Ref DemoVpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-rt-${Environment}'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Private Route to NAT Gateway
  DemoPrivateRoute:
    Type: AWS::EC2::Route
    Condition: CreateVpc
    Properties:
      RouteTableId: !Ref DemoPrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref DemoNatGateway

  # Associate Private Subnets with Private Route Table
  DemoPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpc
    Properties:
      SubnetId: !Ref DemoPrivateSubnet1
      RouteTableId: !Ref DemoPrivateRouteTable

  DemoPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpc
    Properties:
      SubnetId: !Ref DemoPrivateSubnet2
      RouteTableId: !Ref DemoPrivateRouteTable

  # =================================================================
  # ECS CLUSTER (DEMONSTRATION)
  # =================================================================
  
  DemoEcsCluster:
    Type: AWS::ECS::Cluster
    Condition: CreateVpc
    Properties:
      ClusterName: !Sub '${ProjectName}-cluster-${Environment}'
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Configuration:
        ExecuteCommandConfiguration:
          LogConfiguration:
            CloudWatchLogGroupName: !Ref ProtonLogGroup
          Logging: OVERRIDE
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: 'Demo ECS Cluster for Proton services'

  # =================================================================
  # SYSTEMS MANAGER PARAMETERS
  # =================================================================
  
  ProtonServiceRoleArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/${ProjectName}/${Environment}/proton/service-role-arn'
      Type: String
      Value: !GetAtt ProtonServiceRole.Arn
      Description: 'ARN of the Proton service role'
      Tags:
        Project: !Ref ProjectName
        Environment: !Ref Environment
        Purpose: 'Proton Configuration'

  S3BucketNameParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateS3
    Properties:
      Name: !Sub '/${ProjectName}/${Environment}/proton/templates-bucket'
      Type: String
      Value: !Ref ProtonTemplatesBucket
      Description: 'Name of the S3 bucket for Proton templates'
      Tags:
        Project: !Ref ProjectName
        Environment: !Ref Environment
        Purpose: 'Proton Configuration'

  VpcIdParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateVpc
    Properties:
      Name: !Sub '/${ProjectName}/${Environment}/vpc/vpc-id'
      Type: String
      Value: !Ref DemoVpc
      Description: 'ID of the demo VPC'
      Tags:
        Project: !Ref ProjectName
        Environment: !Ref Environment
        Purpose: 'VPC Configuration'

  PublicSubnetIdsParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateVpc
    Properties:
      Name: !Sub '/${ProjectName}/${Environment}/vpc/public-subnet-ids'
      Type: StringList
      Value: !Sub '${DemoPublicSubnet1},${DemoPublicSubnet2}'
      Description: 'IDs of the public subnets'
      Tags:
        Project: !Ref ProjectName
        Environment: !Ref Environment
        Purpose: 'VPC Configuration'

  PrivateSubnetIdsParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateVpc
    Properties:
      Name: !Sub '/${ProjectName}/${Environment}/vpc/private-subnet-ids'
      Type: StringList
      Value: !Sub '${DemoPrivateSubnet1},${DemoPrivateSubnet2}'
      Description: 'IDs of the private subnets'
      Tags:
        Project: !Ref ProjectName
        Environment: !Ref Environment
        Purpose: 'VPC Configuration'

  EcsClusterNameParameter:
    Type: AWS::SSM::Parameter
    Condition: CreateVpc
    Properties:
      Name: !Sub '/${ProjectName}/${Environment}/ecs/cluster-name'
      Type: String
      Value: !Ref DemoEcsCluster
      Description: 'Name of the ECS cluster'
      Tags:
        Project: !Ref ProjectName
        Environment: !Ref Environment
        Purpose: 'ECS Configuration'

# =================================================================
# OUTPUTS
# =================================================================
Outputs:
  # Project Information
  ProjectName:
    Description: 'Name of the project'
    Value: !Ref ProjectName
    Export:
      Name: !Sub '${AWS::StackName}-ProjectName'

  Environment:
    Description: 'Environment name'
    Value: !Ref Environment
    Export:
      Name: !Sub '${AWS::StackName}-Environment'

  # IAM Roles
  ProtonServiceRoleArn:
    Description: 'ARN of the Proton service role'
    Value: !GetAtt ProtonServiceRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ProtonServiceRoleArn'

  CdkExecutionRoleArn:
    Description: 'ARN of the CDK execution role'
    Value: !GetAtt CdkExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CdkExecutionRoleArn'

  # S3 Bucket
  ProtonTemplatesBucketName:
    Condition: CreateS3
    Description: 'Name of the S3 bucket for Proton templates'
    Value: !Ref ProtonTemplatesBucket
    Export:
      Name: !Sub '${AWS::StackName}-TemplatesBucketName'

  ProtonTemplatesBucketArn:
    Condition: CreateS3
    Description: 'ARN of the S3 bucket for Proton templates'
    Value: !GetAtt ProtonTemplatesBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TemplatesBucketArn'

  # VPC Resources
  VpcId:
    Condition: CreateVpc
    Description: 'ID of the demo VPC'
    Value: !Ref DemoVpc
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'

  VpcCidr:
    Condition: CreateVpc
    Description: 'CIDR block of the demo VPC'
    Value: !Ref VpcCidr
    Export:
      Name: !Sub '${AWS::StackName}-VpcCidr'

  PublicSubnetIds:
    Condition: CreateVpc
    Description: 'IDs of the public subnets'
    Value: !Sub '${DemoPublicSubnet1},${DemoPublicSubnet2}'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetIds'

  PrivateSubnetIds:
    Condition: CreateVpc
    Description: 'IDs of the private subnets'
    Value: !Sub '${DemoPrivateSubnet1},${DemoPrivateSubnet2}'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetIds'

  # ECS Cluster
  EcsClusterName:
    Condition: CreateVpc
    Description: 'Name of the ECS cluster'
    Value: !Ref DemoEcsCluster
    Export:
      Name: !Sub '${AWS::StackName}-EcsClusterName'

  EcsClusterArn:
    Condition: CreateVpc
    Description: 'ARN of the ECS cluster'
    Value: !GetAtt DemoEcsCluster.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EcsClusterArn'

  # Template Names
  EnvironmentTemplateName:
    Description: 'Name for the environment template'
    Value: !Ref EnvironmentTemplateName
    Export:
      Name: !Sub '${AWS::StackName}-EnvironmentTemplateName'

  ServiceTemplateName:
    Description: 'Name for the service template'
    Value: !Ref ServiceTemplateName
    Export:
      Name: !Sub '${AWS::StackName}-ServiceTemplateName'

  # Log Groups
  ProtonLogGroupName:
    Description: 'Name of the Proton log group'
    Value: !Ref ProtonLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-ProtonLogGroupName'

  # CLI Commands for Next Steps
  NextStepsCommands:
    Description: 'Commands to run after stack deployment'
    Value: !Sub |
      # Set environment variables
      export AWS_REGION=${AWS::Region}
      export AWS_ACCOUNT_ID=${AWS::AccountId}
      export PROJECT_NAME=${ProjectName}
      export ENVIRONMENT=${Environment}
      export PROTON_ROLE_ARN=${ProtonServiceRole.Arn}
      ${CreateS3}export TEMPLATES_BUCKET=${ProtonTemplatesBucket}
      ${CreateVpc}export VPC_ID=${DemoVpc}
      ${CreateVpc}export CLUSTER_NAME=${DemoEcsCluster}
      
      # Next steps:
      # 1. Create and upload environment template to S3
      # 2. Register environment template with Proton
      # 3. Create service template
      # 4. Deploy environments and services