AWSTemplateFormatVersion: '2010-09-09'
Description: 'Comprehensive Database Backup and Point-in-Time Recovery Strategy with Amazon RDS, AWS Backup, and Cross-Region Replication'

# Template Metadata
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Database Configuration"
        Parameters:
          - DatabaseInstanceClass
          - DatabaseEngine
          - DatabaseUsername
          - DatabasePassword
          - AllocatedStorage
          - StorageType
      - Label:
          default: "Backup Configuration"
        Parameters:
          - BackupRetentionPeriod
          - PreferredBackupWindow
          - PreferredMaintenanceWindow
          - DailyBackupRetentionDays
          - WeeklyBackupRetentionDays
          - ColdStorageTransitionDays
      - Label:
          default: "Cross-Region Disaster Recovery"
        Parameters:
          - EnableCrossRegionReplication
          - DisasterRecoveryRegion
          - CrossRegionBackupRetentionPeriod
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - SubnetIds
          - AllowedCidrBlocks
      - Label:
          default: "Monitoring and Alerts"
        Parameters:
          - NotificationEmail
          - EnableDetailedMonitoring
    ParameterLabels:
      DatabaseInstanceClass:
        default: "RDS Instance Class"
      DatabaseEngine:
        default: "Database Engine"
      DatabaseUsername:
        default: "Master Username"
      DatabasePassword:
        default: "Master Password"

# Input Parameters
Parameters:
  # Database Configuration
  DatabaseInstanceClass:
    Type: String
    Default: db.t3.micro
    Description: RDS instance class for the database
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t3.large
      - db.t3.xlarge
      - db.t3.2xlarge
      - db.m5.large
      - db.m5.xlarge
      - db.m5.2xlarge
      - db.m5.4xlarge
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge
      - db.r5.4xlarge

  DatabaseEngine:
    Type: String
    Default: mysql
    Description: Database engine type
    AllowedValues:
      - mysql
      - postgres
      - mariadb
      - oracle-ee
      - oracle-se2
      - sqlserver-ex
      - sqlserver-web
      - sqlserver-se
      - sqlserver-ee

  DatabaseUsername:
    Type: String
    Default: admin
    Description: Master username for the database
    MinLength: 1
    MaxLength: 16
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters

  DatabasePassword:
    Type: String
    NoEcho: true
    Description: Master password for the database
    MinLength: 8
    MaxLength: 128
    AllowedPattern: '[a-zA-Z0-9!@#$%^&*()_+=-]*'
    ConstraintDescription: Must contain 8-128 characters with letters, numbers, and special characters

  AllocatedStorage:
    Type: Number
    Default: 20
    MinValue: 20
    MaxValue: 65536
    Description: Initial database storage size in GB

  StorageType:
    Type: String
    Default: gp2
    Description: Storage type for the database
    AllowedValues:
      - gp2
      - gp3
      - io1
      - io2

  # Backup Configuration
  BackupRetentionPeriod:
    Type: Number
    Default: 7
    MinValue: 1
    MaxValue: 35
    Description: Number of days to retain automated backups

  PreferredBackupWindow:
    Type: String
    Default: '03:00-04:00'
    Description: Preferred backup window (UTC)
    AllowedPattern: '^([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9]$'

  PreferredMaintenanceWindow:
    Type: String
    Default: 'sun:04:00-sun:05:00'
    Description: Preferred maintenance window (UTC)
    AllowedPattern: '^(sun|mon|tue|wed|thu|fri|sat):[0-2][0-9]:[0-5][0-9]-(sun|mon|tue|wed|thu|fri|sat):[0-2][0-9]:[0-5][0-9]$'

  DailyBackupRetentionDays:
    Type: Number
    Default: 30
    MinValue: 1
    MaxValue: 365
    Description: Retention period for daily backups in AWS Backup

  WeeklyBackupRetentionDays:
    Type: Number
    Default: 90
    MinValue: 1
    MaxValue: 365
    Description: Retention period for weekly backups in AWS Backup

  ColdStorageTransitionDays:
    Type: Number
    Default: 7
    MinValue: 1
    MaxValue: 365
    Description: Days after which backups transition to cold storage

  # Cross-Region Disaster Recovery
  EnableCrossRegionReplication:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable cross-region backup replication for disaster recovery

  DisasterRecoveryRegion:
    Type: String
    Default: us-west-2
    Description: AWS region for disaster recovery backup replication
    AllowedValues:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - eu-west-1
      - eu-west-2
      - eu-central-1
      - ap-southeast-1
      - ap-southeast-2
      - ap-northeast-1

  CrossRegionBackupRetentionPeriod:
    Type: Number
    Default: 14
    MinValue: 1
    MaxValue: 35
    Description: Retention period for cross-region automated backups

  # Network Configuration
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the database will be deployed

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet IDs for the database subnet group (minimum 2 subnets in different AZs)

  AllowedCidrBlocks:
    Type: CommaDelimitedList
    Default: '10.0.0.0/16'
    Description: CIDR blocks allowed to access the database

  # Monitoring and Alerts
  NotificationEmail:
    Type: String
    Description: Email address for backup failure notifications
    AllowedPattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    ConstraintDescription: Must be a valid email address

  EnableDetailedMonitoring:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable detailed monitoring for RDS instance

# Conditional Logic
Conditions:
  EnableCrossRegionReplicationCondition: !Equals [!Ref EnableCrossRegionReplication, 'true']
  EnableDetailedMonitoringCondition: !Equals [!Ref EnableDetailedMonitoring, 'true']
  IsMySQL: !Equals [!Ref DatabaseEngine, 'mysql']
  IsPostgreSQL: !Equals [!Ref DatabaseEngine, 'postgres']
  IsOracle: !Or [!Equals [!Ref DatabaseEngine, 'oracle-ee'], !Equals [!Ref DatabaseEngine, 'oracle-se2']]
  IsSQLServer: !Or [!Equals [!Ref DatabaseEngine, 'sqlserver-ex'], !Equals [!Ref DatabaseEngine, 'sqlserver-web'], !Equals [!Ref DatabaseEngine, 'sqlserver-se'], !Equals [!Ref DatabaseEngine, 'sqlserver-ee']]

# AWS Resources
Resources:
  # KMS Key for Backup Encryption
  BackupKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for RDS backup encryption
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow AWS Backup Service
            Effect: Allow
            Principal:
              Service: backup.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
              - kms:CreateGrant
              - kms:DescribeKey
            Resource: '*'
          - Sid: Allow RDS Service
            Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
              - kms:CreateGrant
              - kms:DescribeKey
            Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-backup-kms-key'
        - Key: Environment
          Value: Production
        - Key: Purpose
          Value: RDS Backup Encryption

  # KMS Key Alias
  BackupKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${AWS::StackName}-rds-backup-key'
      TargetKeyId: !Ref BackupKMSKey

  # Database Subnet Group
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database instance
      SubnetIds: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-db-subnet-group'
        - Key: Environment
          Value: Production

  # Database Security Group
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database instance
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !If [IsMySQL, 3306, !If [IsPostgreSQL, 5432, !If [IsOracle, 1521, 1433]]]
          ToPort: !If [IsMySQL, 3306, !If [IsPostgreSQL, 5432, !If [IsOracle, 1521, 1433]]]
          CidrIp: !Select [0, !Ref AllowedCidrBlocks]
          Description: Database access from allowed CIDR blocks
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-database-sg'
        - Key: Environment
          Value: Production

  # RDS Database Instance
  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub '${AWS::StackName}-production-db'
      DBInstanceClass: !Ref DatabaseInstanceClass
      Engine: !Ref DatabaseEngine
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      AllocatedStorage: !Ref AllocatedStorage
      StorageType: !Ref StorageType
      StorageEncrypted: true
      KmsKeyId: !Ref BackupKMSKey
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      BackupRetentionPeriod: !Ref BackupRetentionPeriod
      PreferredBackupWindow: !Ref PreferredBackupWindow
      PreferredMaintenanceWindow: !Ref PreferredMaintenanceWindow
      CopyTagsToSnapshot: true
      DeleteAutomatedBackups: false
      MonitoringInterval: !If [EnableDetailedMonitoringCondition, 60, 0]
      MonitoringRoleArn: !If [EnableDetailedMonitoringCondition, !GetAtt EnhancedMonitoringRole.Arn, !Ref 'AWS::NoValue']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-production-database'
        - Key: Environment
          Value: Production
        - Key: BackupRequired
          Value: 'true'
        - Key: DisasterRecovery
          Value: 'true'

  # Enhanced Monitoring Role (conditional)
  EnhancedMonitoringRole:
    Type: AWS::IAM::Role
    Condition: EnableDetailedMonitoringCondition
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: monitoring.rds.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-enhanced-monitoring-role'

  # IAM Role for AWS Backup Service
  BackupServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-backup-service-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: backup.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-backup-service-role'
        - Key: Environment
          Value: Production

  # AWS Backup Vault
  BackupVault:
    Type: AWS::Backup::BackupVault
    Properties:
      BackupVaultName: !Sub '${AWS::StackName}-backup-vault'
      EncryptionKeyArn: !GetAtt BackupKMSKey.Arn
      BackupVaultTags:
        Name: !Sub '${AWS::StackName}-backup-vault'
        Environment: Production
        Purpose: RDS Backup Storage

  # Backup Vault Access Policy
  BackupVaultAccessPolicy:
    Type: AWS::Backup::BackupVaultAccessPolicy
    Properties:
      BackupVaultName: !Ref BackupVault
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCrossAccountAccess
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - backup:DescribeBackupVault
              - backup:DescribeRecoveryPoint
              - backup:ListRecoveryPointsByBackupVault
            Resource: '*'

  # Backup Plan
  BackupPlan:
    Type: AWS::Backup::BackupPlan
    Properties:
      BackupPlan:
        BackupPlanName: !Sub '${AWS::StackName}-backup-plan'
        BackupPlanRule:
          # Daily Backup Rule
          - RuleName: DailyBackups
            TargetBackupVault: !Ref BackupVault
            ScheduleExpression: 'cron(0 5 ? * * *)'
            StartWindowMinutes: 60
            CompletionWindowMinutes: 120
            Lifecycle:
              DeleteAfterDays: !Ref DailyBackupRetentionDays
              MoveToColdStorageAfterDays: !Ref ColdStorageTransitionDays
            RecoveryPointTags:
              Environment: Production
              BackupType: Automated
              Frequency: Daily
            CopyActions: !If
              - EnableCrossRegionReplicationCondition
              - - DestinationBackupVaultArn: !Sub 'arn:aws:backup:${DisasterRecoveryRegion}:${AWS::AccountId}:backup-vault:${AWS::StackName}-backup-vault-dr'
                  Lifecycle:
                    DeleteAfterDays: !Ref DailyBackupRetentionDays
              - !Ref 'AWS::NoValue'
          # Weekly Backup Rule
          - RuleName: WeeklyBackups
            TargetBackupVault: !Ref BackupVault
            ScheduleExpression: 'cron(0 3 ? * SUN *)'
            StartWindowMinutes: 60
            CompletionWindowMinutes: 180
            Lifecycle:
              DeleteAfterDays: !Ref WeeklyBackupRetentionDays
              MoveToColdStorageAfterDays: 14
            RecoveryPointTags:
              Environment: Production
              BackupType: Weekly
              Frequency: Weekly
      BackupPlanTags:
        Name: !Sub '${AWS::StackName}-backup-plan'
        Environment: Production

  # Backup Selection
  BackupSelection:
    Type: AWS::Backup::BackupSelection
    Properties:
      BackupPlanId: !Ref BackupPlan
      BackupSelection:
        SelectionName: !Sub '${AWS::StackName}-backup-selection'
        IamRoleArn: !GetAtt BackupServiceRole.Arn
        Resources:
          - !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${DatabaseInstance}'
        Conditions:
          StringEquals:
            'aws:ResourceTag/Environment': ['Production']
            'aws:ResourceTag/BackupRequired': ['true']

  # SNS Topic for Backup Notifications
  BackupNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-backup-notifications'
      DisplayName: RDS Backup Notifications
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-backup-notifications'
        - Key: Environment
          Value: Production

  # SNS Topic Subscription
  BackupNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref BackupNotificationTopic
      Endpoint: !Ref NotificationEmail

  # CloudWatch Alarm for Backup Failures
  BackupFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-backup-failures'
      AlarmDescription: Alert when RDS backup jobs fail
      MetricName: NumberOfBackupJobsFailed
      Namespace: AWS/Backup
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref BackupNotificationTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-backup-failure-alarm'
        - Key: Environment
          Value: Production

  # CloudWatch Alarm for Database CPU
  DatabaseCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-database-cpu-high'
      AlarmDescription: Alert when database CPU utilization is high
      MetricName: CPUUtilization
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref DatabaseInstance
      AlarmActions:
        - !Ref BackupNotificationTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-database-cpu-alarm'
        - Key: Environment
          Value: Production

  # CloudWatch Alarm for Database Storage Space
  DatabaseStorageSpaceAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-database-storage-low'
      AlarmDescription: Alert when database free storage space is low
      MetricName: FreeStorageSpace
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 2147483648  # 2GB in bytes
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref DatabaseInstance
      AlarmActions:
        - !Ref BackupNotificationTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-database-storage-alarm'
        - Key: Environment
          Value: Production

  # Custom Resource for Cross-Region Backup Replication (if enabled)
  CrossRegionBackupReplication:
    Type: AWS::CloudFormation::CustomResource
    Condition: EnableCrossRegionReplicationCondition
    Properties:
      ServiceToken: !GetAtt CrossRegionBackupFunction.Arn
      DatabaseInstanceArn: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${DatabaseInstance}'
      DestinationRegion: !Ref DisasterRecoveryRegion
      KmsKeyId: !Ref BackupKMSKey
      BackupRetentionPeriod: !Ref CrossRegionBackupRetentionPeriod

  # Lambda Function for Cross-Region Backup Setup
  CrossRegionBackupFunction:
    Type: AWS::Lambda::Function
    Condition: EnableCrossRegionReplicationCondition
    Properties:
      FunctionName: !Sub '${AWS::StackName}-cross-region-backup'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt CrossRegionBackupRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          
          def lambda_handler(event, context):
              try:
                  if event['RequestType'] == 'Create':
                      # Enable cross-region automated backup replication
                      rds_client = boto3.client('rds', region_name=event['ResourceProperties']['DestinationRegion'])
                      
                      response = rds_client.start_db_instance_automated_backups_replication(
                          SourceDBInstanceArn=event['ResourceProperties']['DatabaseInstanceArn'],
                          BackupRetentionPeriod=int(event['ResourceProperties']['BackupRetentionPeriod']),
                          KmsKeyId=event['ResourceProperties']['KmsKeyId']
                      )
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'ReplicationId': response['DBInstanceAutomatedBackup']['DBInstanceAutomatedBackupsArn']
                      })
                  
                  elif event['RequestType'] == 'Delete':
                      # Stop cross-region automated backup replication
                      rds_client = boto3.client('rds', region_name=event['ResourceProperties']['DestinationRegion'])
                      
                      rds_client.stop_db_instance_automated_backups_replication(
                          SourceDBInstanceArn=event['ResourceProperties']['DatabaseInstanceArn']
                      )
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-cross-region-backup-function'
        - Key: Environment
          Value: Production

  # IAM Role for Cross-Region Backup Lambda
  CrossRegionBackupRole:
    Type: AWS::IAM::Role
    Condition: EnableCrossRegionReplicationCondition
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CrossRegionBackupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:StartDBInstanceAutomatedBackupsReplication
                  - rds:StopDBInstanceAutomatedBackupsReplication
                  - rds:DescribeDBInstanceAutomatedBackups
                  - kms:Decrypt
                  - kms:GenerateDataKey
                  - kms:CreateGrant
                  - kms:DescribeKey
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-cross-region-backup-role'
        - Key: Environment
          Value: Production

# Template Outputs
Outputs:
  # Database Information
  DatabaseInstanceId:
    Description: RDS database instance identifier
    Value: !Ref DatabaseInstance
    Export:
      Name: !Sub '${AWS::StackName}-database-instance-id'

  DatabaseEndpoint:
    Description: RDS database endpoint
    Value: !GetAtt DatabaseInstance.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-database-endpoint'

  DatabasePort:
    Description: RDS database port
    Value: !GetAtt DatabaseInstance.Endpoint.Port
    Export:
      Name: !Sub '${AWS::StackName}-database-port'

  DatabaseArn:
    Description: RDS database instance ARN
    Value: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${DatabaseInstance}'
    Export:
      Name: !Sub '${AWS::StackName}-database-arn'

  # Backup Configuration
  BackupVaultName:
    Description: AWS Backup vault name
    Value: !Ref BackupVault
    Export:
      Name: !Sub '${AWS::StackName}-backup-vault-name'

  BackupVaultArn:
    Description: AWS Backup vault ARN
    Value: !GetAtt BackupVault.BackupVaultArn
    Export:
      Name: !Sub '${AWS::StackName}-backup-vault-arn'

  BackupPlanId:
    Description: AWS Backup plan ID
    Value: !Ref BackupPlan
    Export:
      Name: !Sub '${AWS::StackName}-backup-plan-id'

  BackupPlanArn:
    Description: AWS Backup plan ARN
    Value: !GetAtt BackupPlan.BackupPlanArn
    Export:
      Name: !Sub '${AWS::StackName}-backup-plan-arn'

  # Security and Encryption
  BackupKMSKeyId:
    Description: KMS key ID for backup encryption
    Value: !Ref BackupKMSKey
    Export:
      Name: !Sub '${AWS::StackName}-backup-kms-key-id'

  BackupKMSKeyArn:
    Description: KMS key ARN for backup encryption
    Value: !GetAtt BackupKMSKey.Arn
    Export:
      Name: !Sub '${AWS::StackName}-backup-kms-key-arn'

  DatabaseSecurityGroupId:
    Description: Database security group ID
    Value: !Ref DatabaseSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-database-security-group-id'

  # Monitoring and Notifications
  BackupNotificationTopicArn:
    Description: SNS topic ARN for backup notifications
    Value: !Ref BackupNotificationTopic
    Export:
      Name: !Sub '${AWS::StackName}-backup-notification-topic-arn'

  BackupFailureAlarmName:
    Description: CloudWatch alarm name for backup failures
    Value: !Ref BackupFailureAlarm
    Export:
      Name: !Sub '${AWS::StackName}-backup-failure-alarm-name'

  # Cross-Region Disaster Recovery
  DisasterRecoveryRegion:
    Description: Disaster recovery region
    Value: !Ref DisasterRecoveryRegion
    Export:
      Name: !Sub '${AWS::StackName}-disaster-recovery-region'

  CrossRegionReplicationEnabled:
    Description: Cross-region replication status
    Value: !Ref EnableCrossRegionReplication
    Export:
      Name: !Sub '${AWS::StackName}-cross-region-replication-enabled'

  # Service Roles
  BackupServiceRoleArn:
    Description: IAM role ARN for AWS Backup service
    Value: !GetAtt BackupServiceRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-backup-service-role-arn'

  # Point-in-Time Recovery Information
  LatestRestorableTime:
    Description: Latest restorable time (updated by RDS)
    Value: !GetAtt DatabaseInstance.LatestRestorableTime
    Export:
      Name: !Sub '${AWS::StackName}-latest-restorable-time'

  # Backup Retention Configuration
  BackupRetentionPeriod:
    Description: Automated backup retention period (days)
    Value: !Ref BackupRetentionPeriod
    Export:
      Name: !Sub '${AWS::StackName}-backup-retention-period'

  DailyBackupRetentionDays:
    Description: Daily backup retention period (days)
    Value: !Ref DailyBackupRetentionDays
    Export:
      Name: !Sub '${AWS::StackName}-daily-backup-retention-days'

  WeeklyBackupRetentionDays:
    Description: Weekly backup retention period (days)
    Value: !Ref WeeklyBackupRetentionDays
    Export:
      Name: !Sub '${AWS::StackName}-weekly-backup-retention-days'

  # Quick Access Commands
  RestoreCommandExample:
    Description: Example AWS CLI command for point-in-time recovery
    Value: !Sub |
      aws rds restore-db-instance-to-point-in-time \
        --source-db-instance-identifier ${DatabaseInstance} \
        --target-db-instance-identifier ${DatabaseInstance}-restored \
        --restore-time $(aws rds describe-db-instances --db-instance-identifier ${DatabaseInstance} --query 'DBInstances[0].LatestRestorableTime' --output text)

  BackupListCommand:
    Description: AWS CLI command to list backup recovery points
    Value: !Sub |
      aws backup list-recovery-points-by-backup-vault \
        --backup-vault-name ${BackupVault} \
        --query 'RecoveryPoints[*].[RecoveryPointArn,Status,CreationDate]' \
        --output table