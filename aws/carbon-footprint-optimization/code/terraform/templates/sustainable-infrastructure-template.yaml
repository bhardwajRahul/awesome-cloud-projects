AWSTemplateFormatVersion: '2010-09-09'
Description: 'Sustainable infrastructure template with carbon-optimized resources for ${project_name}'

Parameters:
  EnvironmentType:
    Type: String
    Default: ${environment}
    AllowedValues: [production, staging, development]
    Description: Environment type for resource sizing and sustainability optimization

  ProjectName:
    Type: String
    Default: ${project_name}
    Description: Name of the project for resource tagging and identification

  EnableCarbonOptimization:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable carbon optimization features and monitoring

Mappings:
  # Instance type mapping optimized for sustainability
  SustainableInstanceTypes:
    production:
      ComputeInstanceType: m6g.large     # ARM Graviton2 for efficiency
      DatabaseInstanceType: db.r6g.large # ARM Graviton2 for RDS
      CacheInstanceType: cache.r6g.large # ARM Graviton2 for ElastiCache
    staging:
      ComputeInstanceType: m6g.medium    # ARM Graviton2 for efficiency
      DatabaseInstanceType: db.t4g.medium # ARM Graviton2 burstable
      CacheInstanceType: cache.t4g.medium # ARM Graviton2 burstable
    development:
      ComputeInstanceType: t4g.small     # ARM Graviton2 burstable
      DatabaseInstanceType: db.t4g.small # ARM Graviton2 burstable
      CacheInstanceType: cache.t4g.micro # ARM Graviton2 micro

  # Regional carbon intensity mapping for sustainability decisions
  RegionalCarbonIntensity:
    us-east-1:
      CarbonScore: 'medium'     # Virginia - mixed energy sources
      RecommendedUsage: 'general'
    us-west-2:
      CarbonScore: 'low'        # Oregon - high renewable content
      RecommendedUsage: 'preferred'
    eu-central-1:
      CarbonScore: 'medium'     # Frankfurt - mixed energy sources
      RecommendedUsage: 'general'
    ca-central-1:
      CarbonScore: 'low'        # Canada - high renewable content
      RecommendedUsage: 'preferred'

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, production]
  EnableMonitoring: !Equals [!Ref EnableCarbonOptimization, 'true']
  UseHighEfficiencyStorage: !Or [!Equals [!Ref EnvironmentType, production], !Equals [!Ref EnvironmentType, staging]]

Resources:
  # VPC with optimized configuration for sustainability
  SustainableVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-sustainable-vpc'
        - Key: SustainabilityOptimized
          Value: 'true'
        - Key: CarbonFootprintTracking
          Value: 'enabled'
        - Key: Environment
          Value: !Ref EnvironmentType

  # Internet Gateway for sustainable VPC
  SustainableInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-sustainable-igw'
        - Key: SustainabilityOptimized
          Value: 'true'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SustainableVPC
      InternetGatewayId: !Ref SustainableInternetGateway

  # Public subnet with sustainability tagging
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SustainableVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet'
        - Key: SustainabilityOptimized
          Value: 'true'

  # Private subnet for backend resources
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SustainableVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-subnet'
        - Key: SustainabilityOptimized
          Value: 'true'

  # Route table for public subnet
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SustainableVPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-rt'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SustainableInternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Security group with least privilege access
  SustainableSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for sustainable compute resources
      VpcId: !Ref SustainableVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: 'HTTP access'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: 'HTTPS access'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-sustainable-sg'
        - Key: SustainabilityOptimized
          Value: 'true'

  # Sustainable compute instance with Graviton processor
  SustainableComputeInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !FindInMap [SustainableInstanceTypes, !Ref EnvironmentType, ComputeInstanceType]
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2}}'
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SustainableSecurityGroup
      IamInstanceProfile: !Ref SustainableInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          
          # Configure for maximum energy efficiency
          echo 'powersave' | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
          
          # Install CloudWatch agent for carbon footprint monitoring
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/arm64/latest/amazon-cloudwatch-agent.rpm
          rpm -U ./amazon-cloudwatch-agent.rpm
          
          # Install AWS CLI v2 for ARM64
          curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          
          # Configure sustainability monitoring
          cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'
          {
            "metrics": {
              "namespace": "${ProjectName}/Sustainability",
              "metrics_collected": {
                "cpu": {
                  "measurement": ["cpu_usage_idle", "cpu_usage_iowait"],
                  "metrics_collection_interval": 300
                },
                "disk": {
                  "measurement": ["used_percent"],
                  "metrics_collection_interval": 300,
                  "resources": ["*"]
                },
                "mem": {
                  "measurement": ["mem_used_percent"],
                  "metrics_collection_interval": 300
                }
              }
            }
          }
          EOF
          
          # Start CloudWatch agent
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
            -a fetch-config -m ec2 -s \
            -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json

      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-sustainable-instance'
        - Key: SustainabilityOptimized
          Value: 'true'
        - Key: CarbonFootprintTracking
          Value: 'enabled'
        - Key: ProcessorType
          Value: 'ARM-Graviton2'
        - Key: Environment
          Value: !Ref EnvironmentType

  # IAM role for sustainable compute instance
  SustainableInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: SustainabilityMetrics
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace': !Sub '${ProjectName}/Sustainability'

  SustainableInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref SustainableInstanceRole

  # Efficient storage with Intelligent Tiering
  EfficientStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-efficient-storage-${AWS::AccountId}'
      IntelligentTieringConfigurations:
        - Id: OptimizeStorage
          Status: Enabled
          OptionalFields:
            - BucketKeyStatus
          Prefix: 'data/'
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIA
            Status: Enabled
            TransitionInDays: 30
            StorageClass: STANDARD_IA
          - Id: TransitionToGlacier
            Status: Enabled
            TransitionInDays: 90
            StorageClass: GLACIER
          - Id: TransitionToDeepArchive
            Status: !If [UseHighEfficiencyStorage, Enabled, Disabled]
            TransitionInDays: 365
            StorageClass: DEEP_ARCHIVE
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-efficient-storage'
        - Key: SustainabilityOptimized
          Value: 'true'
        - Key: StorageOptimization
          Value: 'intelligent-tiering'

  # Application Load Balancer for efficient traffic distribution
  SustainableLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: IsProduction
    Properties:
      Name: !Sub '${ProjectName}-sustainable-alb'
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet
        - !Ref PrivateSubnet
      SecurityGroups:
        - !Ref SustainableSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-sustainable-alb'
        - Key: SustainabilityOptimized
          Value: 'true'

  # CloudWatch Dashboard for sustainability monitoring
  SustainabilityDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: EnableMonitoring
    Properties:
      DashboardName: !Sub '${ProjectName}-Sustainability-Metrics'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["${ProjectName}/Sustainability", "CPUUtilization", "InstanceId", "${SustainableComputeInstance}"],
                  ["AWS/EC2", "CPUUtilization", "InstanceId", "${SustainableComputeInstance}"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Sustainable Instance CPU Utilization",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/S3", "BucketSizeBytes", "BucketName", "${EfficientStorage}", "StorageType", "StandardStorage"],
                  ["AWS/S3", "BucketSizeBytes", "BucketName", "${EfficientStorage}", "StorageType", "StandardIAStorage"]
                ],
                "view": "timeSeries",
                "stacked": true,
                "region": "${AWS::Region}",
                "title": "Storage Efficiency Metrics",
                "period": 86400
              }
            }
          ]
        }

Outputs:
  VPCId:
    Description: ID of the sustainable VPC
    Value: !Ref SustainableVPC
    Export:
      Name: !Sub '${ProjectName}-sustainable-vpc-id'

  ComputeInstanceId:
    Description: ID of the sustainable compute instance
    Value: !Ref SustainableComputeInstance
    Export:
      Name: !Sub '${ProjectName}-sustainable-instance-id'

  StorageBucketName:
    Description: Name of the efficient storage bucket
    Value: !Ref EfficientStorage
    Export:
      Name: !Sub '${ProjectName}-efficient-storage-name'

  LoadBalancerDNS:
    Condition: IsProduction
    Description: DNS name of the sustainable load balancer
    Value: !GetAtt SustainableLoadBalancer.DNSName
    Export:
      Name: !Sub '${ProjectName}-sustainable-alb-dns'

  SustainabilityDashboardURL:
    Condition: EnableMonitoring
    Description: URL to the sustainability monitoring dashboard
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${SustainabilityDashboard}'

  CarbonOptimizationSummary:
    Description: Summary of carbon optimization features implemented
    Value: !Sub |
      Sustainability Features Enabled:
      - ARM Graviton2 processors for ${FindInMap [SustainableInstanceTypes, !Ref EnvironmentType, ComputeInstanceType]} instances
      - S3 Intelligent Tiering for automatic storage optimization
      - CloudWatch monitoring for carbon footprint tracking
      - Energy-efficient CPU governor configuration
      - Least privilege security group configuration
      - Environment: ${EnvironmentType}
      - Carbon tracking enabled: ${EnableCarbonOptimization}