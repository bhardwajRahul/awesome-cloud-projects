## Request template for updateBlogPost mutation
## This template updates an existing blog post with authorization check

## Set the updated timestamp
#set($updatedAt = $util.time.nowISO8601())

{
    "version": "2017-02-28",
    "operation": "UpdateItem",
    
    ## Primary key
    "key": {
        "id": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)
    },
    
    ## Update expression - only update fields that are provided
    "update": {
        "expression": "SET updatedAt = :updatedAt",
        "expressionValues": {
            ":updatedAt": $util.dynamodb.toDynamoDBJson($updatedAt)
        }
    },
    
    ## Condition expression - only allow author to update their own posts
    "condition": {
        "expression": "author = :author",
        "expressionValues": {
            ":author": $util.dynamodb.toDynamoDBJson($ctx.identity.username)
        }
    }
}

## Dynamically build the update expression based on provided fields
#set($updateExpression = "SET updatedAt = :updatedAt")
#set($expressionValues = {})
$util.qr($expressionValues.put(":updatedAt", $util.dynamodb.toDynamoDBJson($updatedAt)))

## Add title if provided
#if($ctx.args.input.title)
    #set($updateExpression = "$updateExpression, title = :title")
    $util.qr($expressionValues.put(":title", $util.dynamodb.toDynamoDBJson($ctx.args.input.title)))
#end

## Add content if provided
#if($ctx.args.input.content)
    #set($updateExpression = "$updateExpression, content = :content")
    $util.qr($expressionValues.put(":content", $util.dynamodb.toDynamoDBJson($ctx.args.input.content)))
#end

## Add tags if provided
#if($ctx.args.input.tags)
    #set($updateExpression = "$updateExpression, tags = :tags")
    $util.qr($expressionValues.put(":tags", $util.dynamodb.toDynamoDBJson($ctx.args.input.tags)))
#end

## Add published if provided
#if($ctx.args.input.published != $util.defaultIfNull($ctx.args.input.published, null))
    #set($updateExpression = "$updateExpression, published = :published")
    $util.qr($expressionValues.put(":published", $util.dynamodb.toDynamoDBJson($ctx.args.input.published)))
#end

## Add author condition
$util.qr($expressionValues.put(":author", $util.dynamodb.toDynamoDBJson($ctx.identity.username)))

## Override the default structure with dynamic values
{
    "version": "2017-02-28",
    "operation": "UpdateItem",
    "key": {
        "id": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)
    },
    "update": {
        "expression": "$updateExpression",
        "expressionValues": $util.toJson($expressionValues)
    },
    "condition": {
        "expression": "author = :author",
        "expressionValues": {
            ":author": $util.dynamodb.toDynamoDBJson($ctx.identity.username)
        }
    }
}