AWSTemplateFormatVersion: '2010-09-09'
Description: 'Document Processing Pipeline with Amazon Textract and Step Functions - Automated document processing solution with intelligent text extraction and workflow orchestration'

# Parameters for customization
Parameters:
  BucketSuffix:
    Type: String
    Default: ''
    Description: 'Suffix for S3 bucket names to ensure uniqueness (leave blank for auto-generated)'
    MaxLength: 10
    AllowedPattern: '^[a-z0-9-]*$'
    ConstraintDescription: 'Must contain only lowercase letters, numbers, and hyphens'

  NotificationEmail:
    Type: String
    Default: ''
    Description: 'Email address for processing notifications (optional)'
    AllowedPattern: '^$|^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    ConstraintDescription: 'Must be a valid email address or empty'

  EnableLogging:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: 'Enable CloudWatch logging for Step Functions'

  RetentionPeriod:
    Type: Number
    Default: 30
    MinValue: 1
    MaxValue: 365
    Description: 'Number of days to retain processed documents and results'

# Conditions for optional resources
Conditions:
  HasBucketSuffix: !Not [!Equals [!Ref BucketSuffix, '']]
  HasNotificationEmail: !Not [!Equals [!Ref NotificationEmail, '']]
  EnableCloudWatchLogging: !Equals [!Ref EnableLogging, 'true']

# Resources
Resources:
  # S3 Bucket for Document Input
  DocumentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 
        - 'document-processing-${Suffix}'
        - Suffix: !If 
          - HasBucketSuffix
          - !Ref BucketSuffix
          - !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]]]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldDocuments
            Status: Enabled
            ExpirationInDays: !Ref RetentionPeriod
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ProcessingTriggerFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .pdf
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ProcessingTriggerFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .jpg
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ProcessingTriggerFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .jpeg
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ProcessingTriggerFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .png
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ProcessingTriggerFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .tiff
    DependsOn: ProcessingTriggerPermission

  # S3 Bucket for Processing Results
  ResultsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 
        - 'processing-results-${Suffix}'
        - Suffix: !If 
          - HasBucketSuffix
          - !Ref BucketSuffix
          - !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]]]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldResults
            Status: Enabled
            ExpirationInDays: !Ref RetentionPeriod

  # DynamoDB Table for Job Tracking
  DocumentProcessingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DocumentProcessingJobs
      AttributeDefinitions:
        - AttributeName: JobId
          AttributeType: S
        - AttributeName: Status
          AttributeType: S
        - AttributeName: ProcessedAt
          AttributeType: S
      KeySchema:
        - AttributeName: JobId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: Status
              KeyType: HASH
            - AttributeName: ProcessedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Application
          Value: DocumentProcessing
        - Key: Purpose
          Value: JobTracking

  # SNS Topic for Notifications
  ProcessingNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: DocumentProcessingNotifications
      DisplayName: Document Processing Pipeline Notifications
      KmsMasterKeyId: alias/aws/sns

  # SNS Subscription for Email Notifications
  ProcessingNotificationSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasNotificationEmail
    Properties:
      Protocol: email
      TopicArn: !Ref ProcessingNotificationTopic
      Endpoint: !Ref NotificationEmail

  # CloudWatch Log Group for Step Functions
  StepFunctionsLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: EnableCloudWatchLogging
    Properties:
      LogGroupName: !Sub '/aws/stepfunctions/${AWS::StackName}-DocumentProcessing'
      RetentionInDays: 14

  # IAM Role for Step Functions
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-StepFunctionsExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: DocumentProcessingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Textract permissions
              - Effect: Allow
                Action:
                  - textract:AnalyzeDocument
                  - textract:DetectDocumentText
                  - textract:GetDocumentAnalysis
                  - textract:GetDocumentTextDetection
                  - textract:StartDocumentAnalysis
                  - textract:StartDocumentTextDetection
                Resource: '*'
              # S3 permissions
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub '${DocumentBucket}/*'
                  - !Sub '${ResultsBucket}/*'
              # DynamoDB permissions
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt DocumentProcessingTable.Arn
                  - !Sub '${DocumentProcessingTable.Arn}/index/*'
              # SNS permissions
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref ProcessingNotificationTopic
              # CloudWatch Logs permissions
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutLogEvents
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: '*'

  # Step Functions State Machine
  DocumentProcessingStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${AWS::StackName}-DocumentProcessingPipeline'
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      StateMachineType: STANDARD
      LoggingConfiguration: !If
        - EnableCloudWatchLogging
        - Level: ALL
          IncludeExecutionData: true
          Destinations:
            - CloudWatchLogsLogGroup:
                LogGroupArn: !GetAtt StepFunctionsLogGroup.Arn
        - !Ref 'AWS::NoValue'
      DefinitionString: !Sub |
        {
          "Comment": "Document processing pipeline with Amazon Textract and Step Functions",
          "StartAt": "RecordJobStart",
          "States": {
            "RecordJobStart": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:putItem",
              "Parameters": {
                "TableName": "${DocumentProcessingTable}",
                "Item": {
                  "JobId": {
                    "S.$": "$.jobId"
                  },
                  "Status": {
                    "S": "STARTED"
                  },
                  "DocumentKey": {
                    "S.$": "$.key"
                  },
                  "Bucket": {
                    "S.$": "$.bucket"
                  },
                  "StartedAt": {
                    "S.$": "$$.State.EnteredTime"
                  }
                }
              },
              "Next": "ProcessDocument",
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "ProcessingFailed"
                }
              ]
            },
            "ProcessDocument": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.requiresAnalysis",
                  "BooleanEquals": true,
                  "Next": "AnalyzeDocument"
                }
              ],
              "Default": "DetectText"
            },
            "AnalyzeDocument": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:textract:analyzeDocument",
              "Parameters": {
                "Document": {
                  "S3Object": {
                    "Bucket.$": "$.bucket",
                    "Name.$": "$.key"
                  }
                },
                "FeatureTypes": ["TABLES", "FORMS", "SIGNATURES", "LAYOUT"]
              },
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed", "Textract.ThrottlingException"],
                  "IntervalSeconds": 5,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                },
                {
                  "ErrorEquals": ["Textract.InvalidParameterException"],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 1
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "ProcessingFailed",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "StoreResults"
            },
            "DetectText": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:textract:detectDocumentText",
              "Parameters": {
                "Document": {
                  "S3Object": {
                    "Bucket.$": "$.bucket",
                    "Name.$": "$.key"
                  }
                }
              },
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed", "Textract.ThrottlingException"],
                  "IntervalSeconds": 5,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                },
                {
                  "ErrorEquals": ["Textract.InvalidParameterException"],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 1
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "Next": "ProcessingFailed",
                  "ResultPath": "$.error"
                }
              ],
              "Next": "StoreResults"
            },
            "StoreResults": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:s3:putObject",
              "Parameters": {
                "Bucket": "${ResultsBucket}",
                "Key.$": "States.Format('{}/results.json', $.jobId)",
                "Body.$": "$",
                "ContentType": "application/json",
                "ServerSideEncryption": "AES256"
              },
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ],
              "Next": "UpdateJobStatus"
            },
            "UpdateJobStatus": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:putItem",
              "Parameters": {
                "TableName": "${DocumentProcessingTable}",
                "Item": {
                  "JobId": {
                    "S.$": "$.jobId"
                  },
                  "Status": {
                    "S": "COMPLETED"
                  },
                  "DocumentKey": {
                    "S.$": "$.key"
                  },
                  "Bucket": {
                    "S.$": "$.bucket"
                  },
                  "ProcessedAt": {
                    "S.$": "$$.State.EnteredTime"
                  },
                  "ResultsLocation": {
                    "S.$": "States.Format('s3://${ResultsBucket}/{}/results.json', $.jobId)"
                  },
                  "ProcessingType": {
                    "S.$": "States.Format('{}', $.requiresAnalysis)"
                  }
                }
              },
              "Next": "SendNotification"
            },
            "SendNotification": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:sns:publish",
              "Parameters": {
                "TopicArn": "${ProcessingNotificationTopic}",
                "Message.$": "States.Format('Document processing completed successfully for job: {}\\nDocument: {}\\nResults: s3://${ResultsBucket}/{}/results.json', $.jobId, $.key, $.jobId)",
                "Subject": "Document Processing Complete"
              },
              "End": true
            },
            "ProcessingFailed": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:putItem",
              "Parameters": {
                "TableName": "${DocumentProcessingTable}",
                "Item": {
                  "JobId": {
                    "S.$": "$.jobId"
                  },
                  "Status": {
                    "S": "FAILED"
                  },
                  "DocumentKey": {
                    "S.$": "$.key"
                  },
                  "Bucket": {
                    "S.$": "$.bucket"
                  },
                  "FailedAt": {
                    "S.$": "$$.State.EnteredTime"
                  },
                  "ErrorMessage": {
                    "S.$": "States.Format('{}', $.error.Cause)"
                  }
                }
              },
              "Next": "NotifyFailure"
            },
            "NotifyFailure": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:sns:publish",
              "Parameters": {
                "TopicArn": "${ProcessingNotificationTopic}",
                "Message.$": "States.Format('Document processing failed for job: {}\\nDocument: {}\\nError: {}', $.jobId, $.key, $.error.Cause)",
                "Subject": "Document Processing Failed"
              },
              "End": true
            }
          }
        }

  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-LambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StepFunctionsExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource: !Ref DocumentProcessingStateMachine
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'

  # Lambda Function for Triggering Step Functions
  ProcessingTriggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-DocumentProcessingTrigger'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref DocumentProcessingStateMachine
      Code:
        ZipFile: |
          import json
          import boto3
          import uuid
          import os
          from urllib.parse import unquote_plus
          
          stepfunctions = boto3.client('stepfunctions')
          
          def lambda_handler(event, context):
              """
              Lambda function to trigger Step Functions workflow when documents are uploaded to S3
              """
              try:
                  for record in event['Records']:
                      # Extract S3 event details
                      bucket = record['s3']['bucket']['name']
                      key = unquote_plus(record['s3']['object']['key'])
                      
                      # Skip processing if file is in a system folder
                      if key.startswith('_') or '/.aws' in key:
                          continue
                      
                      # Determine processing type based on file characteristics
                      requires_analysis = (
                          key.lower().endswith(('.pdf', '.tiff', '.tif')) or 
                          'form' in key.lower() or 
                          'invoice' in key.lower() or
                          'receipt' in key.lower()
                      )
                      
                      # Generate unique job ID
                      job_id = str(uuid.uuid4())
                      
                      # Prepare input for Step Functions
                      input_data = {
                          'bucket': bucket,
                          'key': key,
                          'jobId': job_id,
                          'requiresAnalysis': requires_analysis,
                          'timestamp': context.aws_request_id
                      }
                      
                      # Start Step Functions execution
                      response = stepfunctions.start_execution(
                          stateMachineArn=os.environ['STATE_MACHINE_ARN'],
                          name=f'doc-processing-{job_id}',
                          input=json.dumps(input_data)
                      )
                      
                      print(f'Started processing job {job_id} for document {key}')
                      print(f'Execution ARN: {response["executionArn"]}')
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Processing started successfully')
                  }
                  
              except Exception as e:
                  print(f'Error processing S3 event: {str(e)}')
                  raise e

  # Lambda Permission for S3 to invoke function
  ProcessingTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProcessingTriggerFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 
        - 'arn:aws:s3:::document-processing-${Suffix}'
        - Suffix: !If 
          - HasBucketSuffix
          - !Ref BucketSuffix
          - !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]]]

  # CloudWatch Dashboard for Monitoring
  ProcessingDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${AWS::StackName}-DocumentProcessing'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/StepFunctions", "ExecutionsSucceeded", "StateMachineArn", "${DocumentProcessingStateMachine}"],
                  [".", "ExecutionsFailed", ".", "."],
                  [".", "ExecutionsStarted", ".", "."]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Step Functions Executions"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", "FunctionName", "${ProcessingTriggerFunction}"],
                  [".", "Errors", ".", "."],
                  [".", "Duration", ".", "."]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Function Metrics"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/S3", "BucketSizeBytes", "BucketName", "${DocumentBucket}", "StorageType", "StandardStorage"],
                  [".", "NumberOfObjects", ".", ".", ".", "AllStorageTypes"]
                ],
                "period": 86400,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "S3 Storage Metrics"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${DocumentProcessingTable}"],
                  [".", "ConsumedWriteCapacityUnits", ".", "."]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "DynamoDB Consumption"
              }
            }
          ]
        }

# Outputs
Outputs:
  DocumentBucketName:
    Description: 'S3 bucket name for document uploads'
    Value: !Ref DocumentBucket
    Export:
      Name: !Sub '${AWS::StackName}-DocumentBucket'

  ResultsBucketName:
    Description: 'S3 bucket name for processing results'
    Value: !Ref ResultsBucket
    Export:
      Name: !Sub '${AWS::StackName}-ResultsBucket'

  StateMachineArn:
    Description: 'ARN of the Step Functions state machine'
    Value: !Ref DocumentProcessingStateMachine
    Export:
      Name: !Sub '${AWS::StackName}-StateMachineArn'

  DynamoDBTableName:
    Description: 'DynamoDB table name for job tracking'
    Value: !Ref DocumentProcessingTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTable'

  SNSTopicArn:
    Description: 'ARN of the SNS topic for notifications'
    Value: !Ref ProcessingNotificationTopic
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopic'

  LambdaFunctionArn:
    Description: 'ARN of the Lambda trigger function'
    Value: !GetAtt ProcessingTriggerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'

  CloudWatchDashboardURL:
    Description: 'URL to the CloudWatch dashboard'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${AWS::StackName}-DocumentProcessing'

  QuickStartCommand:
    Description: 'Command to upload a test document'
    Value: !Sub 'aws s3 cp your-document.pdf s3://${DocumentBucket}/'

  ProcessingResultsCommand:
    Description: 'Command to list processing results'
    Value: !Sub 'aws s3 ls s3://${ResultsBucket}/ --recursive'

  JobStatusCommand:
    Description: 'Command to check job status in DynamoDB'
    Value: !Sub 'aws dynamodb scan --table-name ${DocumentProcessingTable} --select "ALL_ATTRIBUTES" --max-items 5'