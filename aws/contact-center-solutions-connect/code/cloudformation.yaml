AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon Connect Custom Contact Center Solution - Complete infrastructure for cloud-based contact center with call recording, analytics, and agent management'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Contact Center Configuration"
        Parameters:
          - ConnectInstanceAlias
          - EnableOutboundCalling
          - EnableCallRecording
          - EnableContactLens
      - Label:
          default: "Storage Configuration"
        Parameters:
          - S3BucketPrefix
          - CallRecordingRetentionDays
          - ChatTranscriptRetentionDays
      - Label:
          default: "Agent Configuration"
        Parameters:
          - AdminUserName
          - AdminPassword
          - AgentUserName
          - AgentPassword
          - AfterContactWorkTimeLimit
      - Label:
          default: "Queue Configuration"
        Parameters:
          - QueueName
          - MaxContactsInQueue
          - QueueDescription
      - Label:
          default: "Monitoring Configuration"
        Parameters:
          - EnableCloudWatchDashboard
          - CreateCloudWatchAlarms
      - Label:
          default: "Tagging"
        Parameters:
          - Environment
          - ProjectName
          - CostCenter
    ParameterLabels:
      ConnectInstanceAlias:
        default: "Connect Instance Alias"
      EnableOutboundCalling:
        default: "Enable Outbound Calling"
      EnableCallRecording:
        default: "Enable Call Recording"
      EnableContactLens:
        default: "Enable Contact Lens Analytics"
      S3BucketPrefix:
        default: "S3 Bucket Name Prefix"
      AdminUserName:
        default: "Administrator Username"
      AdminPassword:
        default: "Administrator Password"
      AgentUserName:
        default: "Agent Username"
      AgentPassword:
        default: "Agent Password"

Parameters:
  # Contact Center Configuration
  ConnectInstanceAlias:
    Type: String
    Description: 'Unique alias for the Amazon Connect instance (3-62 characters, alphanumeric and hyphens only)'
    MinLength: 3
    MaxLength: 62
    AllowedPattern: '^[a-zA-Z0-9\-]+$'
    ConstraintDescription: 'Must be 3-62 characters with only alphanumeric characters and hyphens'
    Default: 'contact-center-demo'

  EnableOutboundCalling:
    Type: String
    Description: 'Enable outbound calling capabilities for agents'
    AllowedValues: [true, false]
    Default: true

  EnableCallRecording:
    Type: String
    Description: 'Enable automatic call recording for compliance and quality assurance'
    AllowedValues: [true, false]
    Default: true

  EnableContactLens:
    Type: String
    Description: 'Enable Contact Lens for AI-powered conversation analytics (additional costs apply)'
    AllowedValues: [true, false]
    Default: true

  # Storage Configuration
  S3BucketPrefix:
    Type: String
    Description: 'Prefix for S3 bucket names (will be combined with account ID and random suffix)'
    MinLength: 3
    MaxLength: 20
    AllowedPattern: '^[a-z0-9\-]+$'
    ConstraintDescription: 'Must be lowercase alphanumeric with hyphens only'
    Default: 'connect-recordings'

  CallRecordingRetentionDays:
    Type: Number
    Description: 'Number of days to retain call recordings in S3'
    MinValue: 7
    MaxValue: 2555  # 7 years
    Default: 2555

  ChatTranscriptRetentionDays:
    Type: Number
    Description: 'Number of days to retain chat transcripts in S3'
    MinValue: 7
    MaxValue: 2555  # 7 years
    Default: 2555

  # Agent Configuration
  AdminUserName:
    Type: String
    Description: 'Username for the Connect administrator account'
    MinLength: 3
    MaxLength: 20
    AllowedPattern: '^[a-zA-Z0-9\-\_]+$'
    Default: 'connect-admin'

  AdminPassword:
    Type: String
    Description: 'Password for the Connect administrator account (8-64 characters)'
    MinLength: 8
    MaxLength: 64
    NoEcho: true
    AllowedPattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
    ConstraintDescription: 'Must contain at least 8 characters with uppercase, lowercase, number, and special character'
    Default: 'TempPass123!'

  AgentUserName:
    Type: String
    Description: 'Username for the customer service agent account'
    MinLength: 3
    MaxLength: 20
    AllowedPattern: '^[a-zA-Z0-9\-\_]+$'
    Default: 'service-agent-01'

  AgentPassword:
    Type: String
    Description: 'Password for the customer service agent account (8-64 characters)'
    MinLength: 8
    MaxLength: 64
    NoEcho: true
    AllowedPattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
    ConstraintDescription: 'Must contain at least 8 characters with uppercase, lowercase, number, and special character'
    Default: 'AgentPass123!'

  AfterContactWorkTimeLimit:
    Type: Number
    Description: 'Time limit in seconds for after-contact work (0-7200 seconds)'
    MinValue: 0
    MaxValue: 7200
    Default: 180

  # Queue Configuration
  QueueName:
    Type: String
    Description: 'Name for the customer service queue'
    MinLength: 1
    MaxLength: 127
    Default: 'CustomerService'

  MaxContactsInQueue:
    Type: Number
    Description: 'Maximum number of contacts that can be in the queue'
    MinValue: 1
    MaxValue: 1000
    Default: 50

  QueueDescription:
    Type: String
    Description: 'Description for the customer service queue'
    MaxLength: 250
    Default: 'Main customer service queue for general inquiries'

  # Monitoring Configuration
  EnableCloudWatchDashboard:
    Type: String
    Description: 'Create CloudWatch dashboard for contact center monitoring'
    AllowedValues: [true, false]
    Default: true

  CreateCloudWatchAlarms:
    Type: String
    Description: 'Create CloudWatch alarms for key contact center metrics'
    AllowedValues: [true, false]
    Default: true

  # Tagging
  Environment:
    Type: String
    Description: 'Environment designation for resource tagging'
    AllowedValues: ['Development', 'Testing', 'Staging', 'Production']
    Default: 'Development'

  ProjectName:
    Type: String
    Description: 'Project name for resource tagging'
    MinLength: 1
    MaxLength: 50
    Default: 'ContactCenter'

  CostCenter:
    Type: String
    Description: 'Cost center for billing and resource tracking'
    MinLength: 1
    MaxLength: 20
    Default: 'CustomerService'

Conditions:
  # Conditional resource creation based on parameters
  ShouldEnableCallRecording: !Equals [!Ref EnableCallRecording, 'true']
  ShouldEnableContactLens: !Equals [!Ref EnableContactLens, 'true']
  ShouldCreateDashboard: !Equals [!Ref EnableCloudWatchDashboard, 'true']
  ShouldCreateAlarms: !Equals [!Ref CreateCloudWatchAlarms, 'true']
  IsProduction: !Equals [!Ref Environment, 'Production']

Resources:
  # Random ID generation for unique resource naming
  RandomIdGenerator:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt RandomIdFunction.Arn
      Region: !Ref AWS::Region

  # Lambda function to generate random IDs for unique naming
  RandomIdFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter

  RandomIdFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt RandomIdFunctionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import random
          import string
          import cfnresponse
          
          def handler(event, context):
              try:
                  if event['RequestType'] == 'Delete':
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  
                  # Generate 6-character random suffix
                  random_id = ''.join(random.choices(string.ascii_lowercase + string.digits, k=6))
                  
                  response_data = {
                      'RandomId': random_id
                  }
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter

  # S3 Bucket for call recordings and chat transcripts
  CallRecordingsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${S3BucketPrefix}-${AWS::AccountId}-${RandomIdGenerator.RandomId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: CallRecordingsLifecycle
            Status: Enabled
            Prefix: call-recordings/
            ExpirationInDays: !Ref CallRecordingRetentionDays
          - Id: ChatTranscriptsLifecycle
            Status: Enabled
            Prefix: chat-transcripts/
            ExpirationInDays: !Ref ChatTranscriptRetentionDays
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref S3AccessLogGroup
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-CallRecordings'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: Purpose
          Value: 'Amazon Connect call recordings and transcripts'

  # S3 Bucket Policy for Amazon Connect access
  CallRecordingsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CallRecordingsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AmazonConnectCallRecordingAccess
            Effect: Allow
            Principal:
              Service: connect.amazonaws.com
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource: !Sub '${CallRecordingsBucket}/*'
            Condition:
              StringEquals:
                's3:ExistingObjectTag/AWSConnectInstanceId': !Ref ConnectInstance
          - Sid: AmazonConnectBucketAccess
            Effect: Allow
            Principal:
              Service: connect.amazonaws.com
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Ref CallRecordingsBucket

  # CloudWatch Log Group for S3 access logging
  S3AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/s3/${ProjectName}-connect-recordings'
      RetentionInDays: 30
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter

  # Amazon Connect Instance
  ConnectInstance:
    Type: AWS::Connect::Instance
    Properties:
      InstanceAlias: !Sub '${ConnectInstanceAlias}-${RandomIdGenerator.RandomId}'
      IdentityManagementType: CONNECT_MANAGED
      InboundCallsEnabled: true
      OutboundCallsEnabled: !Ref EnableOutboundCalling
      Attributes:
        ContactflowLogs: true
        ContactLens: !If [ShouldEnableContactLens, true, false]
        InboundCalls: true
        OutboundCalls: !Ref EnableOutboundCalling
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-ConnectInstance'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter

  # Instance Storage Configuration for Call Recordings
  CallRecordingStorageConfig:
    Type: AWS::Connect::InstanceStorageConfig
    Condition: ShouldEnableCallRecording
    Properties:
      InstanceArn: !GetAtt ConnectInstance.Arn
      ResourceType: CALL_RECORDINGS
      StorageType: S3
      S3Config:
        BucketName: !Ref CallRecordingsBucket
        BucketPrefix: call-recordings/
        EncryptionConfig:
          EncryptionType: KMS
          KeyId: alias/aws/s3

  # Instance Storage Configuration for Chat Transcripts
  ChatTranscriptStorageConfig:
    Type: AWS::Connect::InstanceStorageConfig
    Properties:
      InstanceArn: !GetAtt ConnectInstance.Arn
      ResourceType: CHAT_TRANSCRIPTS
      StorageType: S3
      S3Config:
        BucketName: !Ref CallRecordingsBucket
        BucketPrefix: chat-transcripts/
        EncryptionConfig:
          EncryptionType: KMS
          KeyId: alias/aws/s3

  # Hours of Operation (24/7 for this demo)
  HoursOfOperation:
    Type: AWS::Connect::HoursOfOperation
    Properties:
      InstanceArn: !GetAtt ConnectInstance.Arn
      Name: '24x7Operations'
      Description: '24 hours a day, 7 days a week operations'
      TimeZone: 'UTC'
      Config:
        - Day: MONDAY
          StartTime: {Hours: 0, Minutes: 0}
          EndTime: {Hours: 23, Minutes: 59}
        - Day: TUESDAY
          StartTime: {Hours: 0, Minutes: 0}
          EndTime: {Hours: 23, Minutes: 59}
        - Day: WEDNESDAY
          StartTime: {Hours: 0, Minutes: 0}
          EndTime: {Hours: 23, Minutes: 59}
        - Day: THURSDAY
          StartTime: {Hours: 0, Minutes: 0}
          EndTime: {Hours: 23, Minutes: 59}
        - Day: FRIDAY
          StartTime: {Hours: 0, Minutes: 0}
          EndTime: {Hours: 23, Minutes: 59}
        - Day: SATURDAY
          StartTime: {Hours: 0, Minutes: 0}
          EndTime: {Hours: 23, Minutes: 59}
        - Day: SUNDAY
          StartTime: {Hours: 0, Minutes: 0}
          EndTime: {Hours: 23, Minutes: 59}
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-24x7Operations'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter

  # Customer Service Queue
  CustomerServiceQueue:
    Type: AWS::Connect::Queue
    Properties:
      InstanceArn: !GetAtt ConnectInstance.Arn
      Name: !Ref QueueName
      Description: !Ref QueueDescription
      HoursOfOperationArn: !Ref HoursOfOperation
      MaxContacts: !Ref MaxContactsInQueue
      Status: ENABLED
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${QueueName}'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: Purpose
          Value: 'CustomerService'

  # Routing Profile for Customer Service Agents
  AgentRoutingProfile:
    Type: AWS::Connect::RoutingProfile
    Properties:
      InstanceArn: !GetAtt ConnectInstance.Arn
      Name: 'CustomerServiceAgents'
      Description: 'Routing profile for customer service representatives'
      DefaultOutboundQueueArn: !Ref CustomerServiceQueue
      QueueConfigs:
        - QueueArn: !Ref CustomerServiceQueue
          Channel: VOICE
          Priority: 1
          Delay: 0
      MediaConcurrencies:
        - Channel: VOICE
          Concurrency: 1
        - Channel: CHAT
          Concurrency: 3
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-AgentRoutingProfile'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter

  # Get default security profiles for users
  AdminSecurityProfile:
    Type: AWS::Connect::SecurityProfile
    Properties:
      InstanceArn: !GetAtt ConnectInstance.Arn
      SecurityProfileName: 'ConnectAdmin'
      Description: 'Full administrative access to Amazon Connect'
      Permissions:
        - 'BasicAgentAccess'
        - 'OutboundCallAccess'
        - 'AccessMetrics'
        - 'UserManagement'
        - 'RoutingPolicyAccess'
        - 'ContactFlowAccess'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-AdminSecurityProfile'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter

  AgentSecurityProfile:
    Type: AWS::Connect::SecurityProfile
    Properties:
      InstanceArn: !GetAtt ConnectInstance.Arn
      SecurityProfileName: 'CustomerServiceAgent'
      Description: 'Standard agent access for customer service'
      Permissions:
        - 'BasicAgentAccess'
        - 'OutboundCallAccess'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-AgentSecurityProfile'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter

  # Administrator User
  ConnectAdminUser:
    Type: AWS::Connect::User
    Properties:
      InstanceArn: !GetAtt ConnectInstance.Arn
      Username: !Ref AdminUserName
      Password: !Ref AdminPassword
      IdentityInfo:
        FirstName: 'Connect'
        LastName: 'Administrator'
        Email: !Sub 'admin@${ProjectName}.example.com'
      PhoneConfig:
        PhoneType: SOFT_PHONE
        AutoAccept: false
        AfterContactWorkTimeLimit: !Ref AfterContactWorkTimeLimit
        DeskPhoneNumber: ''
      SecurityProfileArns:
        - !Ref AdminSecurityProfile
      RoutingProfileArn: !Ref AgentRoutingProfile
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-AdminUser'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: Role
          Value: 'Administrator'

  # Agent User
  ConnectAgentUser:
    Type: AWS::Connect::User
    Properties:
      InstanceArn: !GetAtt ConnectInstance.Arn
      Username: !Ref AgentUserName
      Password: !Ref AgentPassword
      IdentityInfo:
        FirstName: 'Service'
        LastName: 'Agent'
        Email: !Sub 'agent@${ProjectName}.example.com'
      PhoneConfig:
        PhoneType: SOFT_PHONE
        AutoAccept: true
        AfterContactWorkTimeLimit: !Ref AfterContactWorkTimeLimit
        DeskPhoneNumber: ''
      SecurityProfileArns:
        - !Ref AgentSecurityProfile
      RoutingProfileArn: !Ref AgentRoutingProfile
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-AgentUser'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter
        - Key: Role
          Value: 'Agent'

  # Contact Flow for customer service routing
  CustomerServiceContactFlow:
    Type: AWS::Connect::ContactFlow
    Properties:
      InstanceArn: !GetAtt ConnectInstance.Arn
      Name: 'CustomerServiceFlow'
      Type: CONTACT_FLOW
      Description: 'Main customer service contact flow with recording and queue transfer'
      Content: !Sub |
        {
          "Version": "2019-10-30",
          "StartAction": "12345678-1234-1234-1234-123456789012",
          "Metadata": {
            "entryPointPosition": {"x": 20, "y": 20},
            "snapToGrid": false,
            "ActionMetadata": {
              "12345678-1234-1234-1234-123456789012": {"position": {"x": 178, "y": 52}},
              "87654321-4321-4321-4321-210987654321": {"position": {"x": 392, "y": 154}},
              "11111111-2222-3333-4444-555555555555": {"position": {"x": 626, "y": 154}}
            }
          },
          "Actions": [
            {
              "Identifier": "12345678-1234-1234-1234-123456789012",
              "Type": "MessageParticipant",
              "Parameters": {
                "Text": "Thank you for calling ${ProjectName} customer service. Please wait while we connect you to an available agent."
              },
              "Transitions": {
                "NextAction": "87654321-4321-4321-4321-210987654321"
              }
            },
            {
              "Identifier": "87654321-4321-4321-4321-210987654321", 
              "Type": "SetRecordingBehavior",
              "Parameters": {
                "RecordingBehaviorOption": "${EnableCallRecording}",
                "RecordingParticipantOption": "Both"
              },
              "Transitions": {
                "NextAction": "11111111-2222-3333-4444-555555555555"
              }
            },
            {
              "Identifier": "11111111-2222-3333-4444-555555555555",
              "Type": "TransferToQueue",
              "Parameters": {
                "QueueId": "${CustomerServiceQueue}"
              },
              "Transitions": {}
            }
          ]
        }
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-CustomerServiceFlow'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter

  # CloudWatch Dashboard for Contact Center Monitoring
  ContactCenterDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: ShouldCreateDashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-ContactCenter-${RandomIdGenerator.RandomId}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Connect", "ContactsReceived", "InstanceId", "${ConnectInstance}"],
                  [".", "ContactsHandled", ".", "."],
                  [".", "ContactsAbandoned", ".", "."],
                  [".", "ContactsQueued", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Contact Volume Metrics",
                "period": 300,
                "stat": "Sum"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Connect", "AgentsOnline", "InstanceId", "${ConnectInstance}"],
                  [".", "AgentsAvailable", ".", "."],
                  [".", "AgentsOnCall", ".", "."],
                  [".", "AgentsAfterContactWork", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Agent Status Metrics",
                "period": 300,
                "stat": "Average"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Connect", "AverageQueueTime", "InstanceId", "${ConnectInstance}", "QueueName", "${QueueName}"],
                  [".", "AverageHoldTime", ".", ".", ".", "."],
                  [".", "AverageHandleTime", ".", ".", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Queue Performance Metrics",
                "period": 300,
                "stat": "Average"
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Connect", "ServiceLevel", "InstanceId", "${ConnectInstance}", "QueueName", "${QueueName}"],
                  [".", "AbandonRate", ".", ".", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Service Level Metrics",
                "period": 300,
                "stat": "Average",
                "yAxis": {
                  "left": {
                    "min": 0,
                    "max": 100
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 16,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/S3", "NumberOfObjects", "BucketName", "${CallRecordingsBucket}", "StorageType", "AllStorageTypes"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Call Recordings Storage",
                "period": 3600,
                "stat": "Average"
              }
            }
          ]
        }

  # CloudWatch Alarms for Critical Metrics
  HighAbandonRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ShouldCreateAlarms
    Properties:
      AlarmName: !Sub '${ProjectName}-HighAbandonRate-${RandomIdGenerator.RandomId}'
      AlarmDescription: 'Alert when abandon rate exceeds 10%'
      MetricName: AbandonRate
      Namespace: AWS/Connect
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref ConnectInstance
        - Name: QueueName
          Value: !Ref QueueName
      AlarmActions:
        - !Ref ContactCenterSNSTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter

  LongQueueTimeAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: ShouldCreateAlarms
    Properties:
      AlarmName: !Sub '${ProjectName}-LongQueueTime-${RandomIdGenerator.RandomId}'
      AlarmDescription: 'Alert when average queue time exceeds 60 seconds'
      MetricName: AverageQueueTime
      Namespace: AWS/Connect
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 60
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref ConnectInstance
        - Name: QueueName
          Value: !Ref QueueName
      AlarmActions:
        - !Ref ContactCenterSNSTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter

  # SNS Topic for Alarm Notifications
  ContactCenterSNSTopic:
    Type: AWS::SNS::Topic
    Condition: ShouldCreateAlarms
    Properties:
      TopicName: !Sub '${ProjectName}-ContactCenter-Alerts-${RandomIdGenerator.RandomId}'
      DisplayName: 'Contact Center Alerts'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter

  # CloudWatch Log Group for Connect Logs
  ConnectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/connect/${ProjectName}-${RandomIdGenerator.RandomId}'
      RetentionInDays: !If [IsProduction, 365, 30]
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: CostCenter
          Value: !Ref CostCenter

Outputs:
  # Connect Instance Information
  ConnectInstanceId:
    Description: 'Amazon Connect Instance ID'
    Value: !Ref ConnectInstance
    Export:
      Name: !Sub '${AWS::StackName}-ConnectInstanceId'

  ConnectInstanceArn:
    Description: 'Amazon Connect Instance ARN'
    Value: !GetAtt ConnectInstance.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ConnectInstanceArn'

  ConnectInstanceAlias:
    Description: 'Amazon Connect Instance Alias'
    Value: !Sub '${ConnectInstanceAlias}-${RandomIdGenerator.RandomId}'
    Export:
      Name: !Sub '${AWS::StackName}-ConnectInstanceAlias'

  ConnectLoginURL:
    Description: 'Amazon Connect Agent Login URL'
    Value: !Sub 'https://${ConnectInstanceAlias}-${RandomIdGenerator.RandomId}.my.connect.aws/'
    Export:
      Name: !Sub '${AWS::StackName}-ConnectLoginURL'

  # Storage Information
  CallRecordingsBucketName:
    Description: 'S3 Bucket for call recordings and chat transcripts'
    Value: !Ref CallRecordingsBucket
    Export:
      Name: !Sub '${AWS::StackName}-CallRecordingsBucket'

  CallRecordingsBucketArn:
    Description: 'S3 Bucket ARN for call recordings and chat transcripts'
    Value: !GetAtt CallRecordingsBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CallRecordingsBucketArn'

  # Queue Information
  CustomerServiceQueueId:
    Description: 'Customer Service Queue ID'
    Value: !Ref CustomerServiceQueue
    Export:
      Name: !Sub '${AWS::StackName}-CustomerServiceQueueId'

  CustomerServiceQueueArn:
    Description: 'Customer Service Queue ARN'
    Value: !Ref CustomerServiceQueue
    Export:
      Name: !Sub '${AWS::StackName}-CustomerServiceQueueArn'

  # User Information
  AdminUserId:
    Description: 'Connect Administrator User ID'
    Value: !Ref ConnectAdminUser
    Export:
      Name: !Sub '${AWS::StackName}-AdminUserId'

  AgentUserId:
    Description: 'Connect Agent User ID'
    Value: !Ref ConnectAgentUser
    Export:
      Name: !Sub '${AWS::StackName}-AgentUserId'

  # Contact Flow Information
  ContactFlowId:
    Description: 'Customer Service Contact Flow ID'
    Value: !Ref CustomerServiceContactFlow
    Export:
      Name: !Sub '${AWS::StackName}-ContactFlowId'

  ContactFlowArn:
    Description: 'Customer Service Contact Flow ARN'
    Value: !Ref CustomerServiceContactFlow
    Export:
      Name: !Sub '${AWS::StackName}-ContactFlowArn'

  # Routing Profile Information
  AgentRoutingProfileId:
    Description: 'Agent Routing Profile ID'
    Value: !Ref AgentRoutingProfile
    Export:
      Name: !Sub '${AWS::StackName}-AgentRoutingProfileId'

  AgentRoutingProfileArn:
    Description: 'Agent Routing Profile ARN'
    Value: !Ref AgentRoutingProfile
    Export:
      Name: !Sub '${AWS::StackName}-AgentRoutingProfileArn'

  # Monitoring Information
  CloudWatchDashboard:
    Condition: ShouldCreateDashboard
    Description: 'CloudWatch Dashboard URL for contact center monitoring'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-ContactCenter-${RandomIdGenerator.RandomId}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudWatchDashboard'

  SNSTopicArn:
    Condition: ShouldCreateAlarms
    Description: 'SNS Topic ARN for contact center alerts'
    Value: !Ref ContactCenterSNSTopic
    Export:
      Name: !Sub '${AWS::StackName}-SNSTopicArn'

  # Cost Estimation
  EstimatedMonthlyCost:
    Description: 'Estimated monthly cost for minimal usage (1 agent, 100 minutes/day)'
    Value: 'Approximately $50-150/month (varies by usage and region)'

  # Next Steps
  NextStepsDocumentation:
    Description: 'Documentation link for next steps'
    Value: 'https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-get-started.html'

  # Important Notes
  ImportantNotes:
    Description: 'Important configuration notes'
    Value: 'After deployment: 1) Claim a phone number in Connect console, 2) Associate number with contact flow, 3) Test agent login, 4) Configure SNS topic subscription for alerts'