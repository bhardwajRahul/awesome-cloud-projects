# ==============================================================================
# TERRAFORM VARIABLES EXAMPLE CONFIGURATION
# ==============================================================================
# This file provides example values for all configurable variables in the
# network performance optimization solution. Copy this file to terraform.tfvars
# and customize the values for your specific deployment requirements.
#
# Usage:
#   1. Copy this file: cp terraform.tfvars.example terraform.tfvars
#   2. Edit terraform.tfvars with your specific values
#   3. Run: terraform plan -var-file="terraform.tfvars"
#   4. Apply: terraform apply -var-file="terraform.tfvars"
# ==============================================================================

# ------------------------------------------------------------------------------
# PROJECT AND LOCATION CONFIGURATION
# ------------------------------------------------------------------------------

# Your Google Cloud Project ID where resources will be created
# Replace with your actual project ID
project_id = "my-network-optimization-project"

# Primary region for resource deployment
# Choose a region close to your users for optimal performance
region = "us-central1"

# Secondary region for multi-region testing and redundancy
# Should be in a different geographical area from the primary region
secondary_region = "us-west1"

# Environment designation for resource organization and cost tracking
# Options: "dev", "staging", "production", "test"
environment = "production"

# ------------------------------------------------------------------------------
# NETWORK CONFIGURATION
# ------------------------------------------------------------------------------

# CIDR block for the primary subnet
# Ensure this doesn't conflict with existing networks
primary_subnet_cidr = "10.0.1.0/24"

# CIDR block for the secondary subnet
# Must be different from primary subnet CIDR
secondary_subnet_cidr = "10.0.2.0/24"

# VPC Flow Logs sampling rate (0.0 to 1.0)
# Higher values provide more data but increase costs
# 0.1 = 10% sampling, 1.0 = 100% sampling
vpc_flow_logs_sampling = 0.1

# Maximum Transmission Unit for the VPC network
# Standard Ethernet MTU is 1500, jumbo frames can be up to 8896
network_mtu = 1500

# ------------------------------------------------------------------------------
# MONITORING AND ALERTING CONFIGURATION
# ------------------------------------------------------------------------------

# Email address for receiving network performance alerts
# Replace with your actual email address
notification_email = "network-admin@yourcompany.com"

# Network latency threshold in milliseconds
# Alerts will be triggered when latency exceeds this value
latency_threshold_ms = 100

# Network throughput threshold in bytes per second
# Used for performance monitoring and optimization triggers
throughput_threshold_bps = 1000000  # 1 MB/s

# Enable detailed monitoring with higher frequency metrics
# Set to false to reduce monitoring costs
enable_detailed_monitoring = true

# Duration in seconds for alert auto-closure
# Alerts will automatically close after this time if conditions are resolved
alert_auto_close_duration = 1800  # 30 minutes

# ------------------------------------------------------------------------------
# CLOUD FUNCTION CONFIGURATION
# ------------------------------------------------------------------------------

# Memory allocation for Cloud Functions
# Options: "128Mi", "256Mi", "512Mi", "1Gi", "2Gi", "4Gi", "8Gi"
function_memory = "512Mi"

# Maximum execution time for Cloud Functions in seconds
# Maximum allowed is 540 seconds (9 minutes)
function_timeout_seconds = 300

# Maximum number of concurrent function instances
# Higher values allow more parallel processing but increase costs
function_max_instances = 10

# Minimum number of function instances to keep warm
# Reduces cold start latency but increases baseline costs
function_min_instances = 1

# ------------------------------------------------------------------------------
# SCHEDULING AND AUTOMATION CONFIGURATION
# ------------------------------------------------------------------------------

# Cron schedule for periodic network analysis (UTC timezone)
# Examples:
#   "0 */6 * * *"    - Every 6 hours
#   "0 */4 * * *"    - Every 4 hours
#   "0 */12 * * *"   - Every 12 hours
#   "0 0 * * *"      - Daily at midnight
analysis_schedule = "0 */6 * * *"

# Cron schedule for daily network health reports (UTC timezone)
# Examples:
#   "0 9 * * *"      - Daily at 9 AM UTC
#   "0 17 * * *"     - Daily at 5 PM UTC
#   "0 6 * * 1"      - Weekly on Monday at 6 AM UTC
report_schedule = "0 9 * * *"

# Enable or disable Cloud Scheduler jobs
# Set to false to disable automated scheduling
enable_scheduler_jobs = true

# ------------------------------------------------------------------------------
# PUB/SUB MESSAGING CONFIGURATION
# ------------------------------------------------------------------------------

# Message retention duration in seconds
# Messages older than this will be automatically deleted
# 604800 = 7 days, 86400 = 1 day, 259200 = 3 days
message_retention_duration = 604800

# Maximum time for message acknowledgment in seconds
# Subscribers must acknowledge messages within this time
subscription_ack_deadline = 60

# Maximum delivery attempts before sending to dead letter queue
# Higher values provide more retry opportunities but may delay error detection
dead_letter_max_attempts = 5

# ------------------------------------------------------------------------------
# COMPUTE INSTANCE CONFIGURATION
# ------------------------------------------------------------------------------

# Machine type for network test instances
# Options: "e2-micro", "e2-small", "e2-medium", "e2-standard-2", "n2-standard-2"
test_instance_machine_type = "e2-medium"

# Boot disk size for test instances in GB
# Minimum is 10 GB, increase if additional software is needed
test_instance_disk_size = 10

# Boot disk type for test instances
# Options: "pd-standard", "pd-ssd", "pd-balanced"
test_instance_disk_type = "pd-standard"

# ------------------------------------------------------------------------------
# CONNECTIVITY TEST CONFIGURATION
# ------------------------------------------------------------------------------

# External IP address for connectivity testing
# Default uses Google DNS for reliable external connectivity testing
external_test_ip = "8.8.8.8"

# Port number for external connectivity testing
# 53 = DNS, 80 = HTTP, 443 = HTTPS, 22 = SSH
external_test_port = 53

# Protocol for external connectivity testing
# Options: "TCP", "UDP", "ICMP"
external_test_protocol = "UDP"

# ------------------------------------------------------------------------------
# SECURITY AND ACCESS CONFIGURATION
# ------------------------------------------------------------------------------

# Enable OS Login for secure instance access
# Recommended for production environments
enable_os_login = true

# Enable private Google access for subnets
# Allows access to Google services without external IPs
enable_private_ip_google_access = true

# Enable uniform bucket-level access for Cloud Storage
# Provides consistent IAM-based access control
enable_uniform_bucket_level_access = true

# ------------------------------------------------------------------------------
# COST OPTIMIZATION CONFIGURATION
# ------------------------------------------------------------------------------

# Number of days after which to delete storage objects
# Helps control storage costs for function source code and logs
storage_lifecycle_age_days = 30

# Enable versioning for Cloud Storage buckets
# Improves recovery options but increases storage costs
enable_bucket_versioning = true

# ------------------------------------------------------------------------------
# RESOURCE LABELING AND ORGANIZATION
# ------------------------------------------------------------------------------

# Additional labels for resource organization and cost tracking
# Add any custom labels your organization requires
additional_labels = {
  cost_center    = "infrastructure"
  team          = "network-ops"
  project       = "network-optimization"
  business_unit = "engineering"
}

# Identifier for resource creation tracking
# Useful for governance and audit purposes
created_by = "terraform"

# ==============================================================================
# ENVIRONMENT-SPECIFIC CONFIGURATIONS
# ==============================================================================

# Development Environment Example:
# -------------------------------
# environment = "dev"
# function_memory = "256Mi"
# function_max_instances = 3
# enable_detailed_monitoring = false
# vpc_flow_logs_sampling = 0.05
# analysis_schedule = "0 */12 * * *"  # Every 12 hours

# Staging Environment Example:
# ---------------------------
# environment = "staging"
# function_memory = "512Mi"
# function_max_instances = 5
# enable_detailed_monitoring = true
# vpc_flow_logs_sampling = 0.1
# analysis_schedule = "0 */8 * * *"   # Every 8 hours

# Production Environment Example:
# ------------------------------
# environment = "production"
# function_memory = "1Gi"
# function_max_instances = 20
# enable_detailed_monitoring = true
# vpc_flow_logs_sampling = 0.2
# analysis_schedule = "0 */4 * * *"   # Every 4 hours
# function_min_instances = 2          # Keep instances warm

# ==============================================================================
# COST ESTIMATION NOTES
# ==============================================================================
"""
Estimated Monthly Costs (USD) - These are approximate and vary by usage:

Base Infrastructure:
- VPC and Subnets: Free (within quotas)
- Network Connectivity Hub: $0-50 depending on usage
- Compute Instances (e2-medium): ~$50-100 for 2 instances running continuously

Monitoring and Logging:
- Cloud Monitoring: ~$10-30 (depends on metrics volume)
- VPC Flow Logs: ~$20-100 (depends on sampling rate and traffic volume)
- Cloud Logging: ~$10-25 (depends on log volume)

Automation Services:
- Cloud Functions: ~$5-20 (depends on invocation frequency and execution time)
- Pub/Sub: ~$5-15 (depends on message volume)
- Cloud Scheduler: ~$1-5 (minimal cost for cron jobs)

Storage:
- Cloud Storage: ~$2-10 (function source code and data)

Total Estimated Range: $100-300/month

Cost Optimization Tips:
1. Reduce VPC Flow Logs sampling rate for lower costs
2. Use e2-micro instances for development environments
3. Disable detailed monitoring in non-production environments
4. Adjust function memory allocation based on actual usage
5. Set appropriate lifecycle policies for storage cleanup
6. Monitor usage with Cloud Billing alerts
"""