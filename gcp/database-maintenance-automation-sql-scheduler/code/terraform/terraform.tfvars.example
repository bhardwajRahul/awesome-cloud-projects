# =============================================================================
# TERRAFORM VARIABLES EXAMPLE - Database Maintenance Automation
# =============================================================================
# Copy this file to terraform.tfvars and customize the values for your
# specific deployment. This file contains example values for all configurable
# variables in the database maintenance automation infrastructure.
# =============================================================================

# =============================================================================
# PROJECT CONFIGURATION (REQUIRED)
# =============================================================================

# Your Google Cloud Project ID
project_id = "my-project-id"

# Google Cloud region for resource deployment
region = "us-central1"

# Google Cloud zone within the region
zone = "us-central1-a"

# Environment label for resource organization
environment = "development"

# =============================================================================
# CLOUD SQL DATABASE CONFIGURATION
# =============================================================================

# Database instance tier (machine type)
# Options: db-f1-micro, db-g1-small, db-n1-standard-1, db-n1-standard-2, etc.
db_tier = "db-f1-micro"

# Initial disk size in GB (will auto-resize as needed)
db_disk_size = 20

# Database user password (minimum 8 characters)
# SECURITY NOTE: Use a strong password and consider using environment variables
db_password = "SecurePassword123!"

# =============================================================================
# CLOUD SCHEDULER CONFIGURATION
# =============================================================================

# Cron schedule for daily maintenance (in UTC)
# Default: "0 2 * * *" (2 AM EST / 7 AM UTC daily)
maintenance_schedule = "0 2 * * *"

# Cron schedule for performance monitoring
# Default: "0 */6 * * *" (every 6 hours)
monitoring_schedule = "0 */6 * * *"

# Timezone for scheduler jobs
timezone = "America/New_York"

# =============================================================================
# MONITORING AND ALERTING CONFIGURATION
# =============================================================================

# Email address for monitoring alerts (leave empty to disable)
alert_email = "admin@example.com"

# CPU utilization threshold for alerts (0.0-1.0)
cpu_alert_threshold = 0.8

# Connection count threshold for alerts
connection_alert_threshold = 80

# =============================================================================
# CLOUD FUNCTION CONFIGURATION
# =============================================================================

# Memory allocation for Cloud Function (MB)
# Options: 128, 256, 512, 1024, 2048, 4096, 8192
function_memory = 256

# Function timeout in seconds (max 540)
function_timeout = 540

# Function runtime environment
# Options: python38, python39, python310, python311
function_runtime = "python39"

# =============================================================================
# STORAGE CONFIGURATION
# =============================================================================

# Cloud Storage bucket location (leave empty to use region)
bucket_location = ""

# Number of days to retain maintenance logs
log_retention_days = 365

# Days after which logs transition to Nearline storage
nearline_transition_days = 30

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Enable deletion protection for Cloud SQL instance
enable_deletion_protection = false

# Authorized networks for Cloud SQL access
# SECURITY NOTE: Restrict to specific IP ranges in production
authorized_networks = [
  {
    name  = "office-network"
    value = "203.0.113.0/24"
  },
  {
    name  = "vpn-access"
    value = "198.51.100.0/24"
  }
]

# Require SSL connections to database
require_ssl = false

# =============================================================================
# ADVANCED CONFIGURATION
# =============================================================================

# Number of automated backups to retain
backup_retention_count = 7

# Day of week for maintenance window (1=Monday, 7=Sunday)
maintenance_window_day = 7

# Hour of day for maintenance window (0-23, UTC)
maintenance_window_hour = 3

# Enable Cloud SQL Query Insights
enable_query_insights = true

# Maximum retry attempts for failed scheduler jobs
scheduler_retry_count = 3

# =============================================================================
# FEATURE FLAGS
# =============================================================================

# Enable creation of Cloud Monitoring dashboard
enable_monitoring_dashboard = true

# Enable creation of monitoring alert policies
enable_alerting_policies = true

# Enable separate performance monitoring scheduler job
enable_performance_monitoring = true

# Enable versioning for Cloud Storage bucket
enable_bucket_versioning = true

# =============================================================================
# ADDITIONAL LABELS
# =============================================================================

# Additional labels to apply to all resources
additional_labels = {
  team        = "database-team"
  cost_center = "engineering"
  project     = "database-automation"
}

# =============================================================================
# EXAMPLE CONFIGURATIONS FOR DIFFERENT ENVIRONMENTS
# =============================================================================

# DEVELOPMENT ENVIRONMENT
# - Minimal resources for cost efficiency
# - Relaxed security for easier access
# - Shorter retention periods
#
# db_tier = "db-f1-micro"
# db_disk_size = 10
# log_retention_days = 30
# enable_deletion_protection = false
# authorized_networks = [{ name = "allow-all", value = "0.0.0.0/0" }]

# STAGING ENVIRONMENT  
# - Mid-tier resources for realistic testing
# - Moderate security controls
# - Medium retention periods
#
# db_tier = "db-g1-small"
# db_disk_size = 20
# log_retention_days = 90
# enable_deletion_protection = false
# require_ssl = true

# PRODUCTION ENVIRONMENT
# - High-performance resources
# - Strict security controls
# - Long retention periods
# - Deletion protection enabled
#
# db_tier = "db-n1-standard-1"
# db_disk_size = 100
# log_retention_days = 2555  # 7 years
# enable_deletion_protection = true
# require_ssl = true
# authorized_networks = [
#   { name = "production-vpc", value = "10.0.0.0/16" },
#   { name = "admin-access", value = "203.0.113.0/24" }
# ]

# =============================================================================
# DEPLOYMENT NOTES
# =============================================================================

# 1. Copy this file to terraform.tfvars:
#    cp terraform.tfvars.example terraform.tfvars

# 2. Edit terraform.tfvars with your specific values:
#    - Update project_id with your Google Cloud project
#    - Set a secure db_password
#    - Configure alert_email for notifications
#    - Adjust resource sizes based on your needs

# 3. Initialize and apply Terraform:
#    terraform init
#    terraform plan
#    terraform apply

# 4. Verify deployment:
#    - Check Cloud SQL instance in Console
#    - Test Cloud Function execution
#    - Verify Cloud Scheduler jobs are enabled
#    - Review monitoring dashboard

# 5. Security considerations:
#    - Never commit terraform.tfvars to version control
#    - Use Google Secret Manager for sensitive values in production
#    - Regularly rotate database passwords
#    - Review and audit authorized_networks settings