# Google Cloud Infrastructure Manager Configuration
# Recipe: Architecting Distributed Edge Computing Networks with Cloud CDN and Compute Engine
# This configuration deploys a globally distributed edge computing architecture
# with Cloud CDN, regional Compute Engine clusters, and intelligent load balancing

apiVersion: blueprints.cloud.google.com/v1alpha1
kind: BlueprintMetadata
metadata:
  name: distributed-edge-computing-networks
  description: "Global edge computing architecture with Cloud CDN and multi-regional Compute Engine clusters"
  labels:
    recipe-id: "e7f8a3d2"
    category: "networking"
    difficulty: "200"

# Template configuration with parameterized values
template:
  # Global project and network configuration
  project_id: ${project_id}
  network_name: ${network_name}
  
  # Regional deployment configuration
  regions:
    - name: "us-central1"
      zone: "us-central1-a"
      subnet_cidr: "10.1.0.0/16"
    - name: "europe-west1"
      zone: "europe-west1-b"
      subnet_cidr: "10.2.0.0/16"
    - name: "asia-southeast1"
      zone: "asia-southeast1-a"
      subnet_cidr: "10.3.0.0/16"
  
  # DNS and domain configuration
  domain_name: ${domain_name}
  
  # Instance configuration
  machine_type: "e2-standard-2"
  min_replicas: 2
  max_replicas: 5
  target_cpu_utilization: 0.7

# Required APIs for the edge computing infrastructure
apis:
  - compute.googleapis.com
  - dns.googleapis.com
  - storage.googleapis.com
  - logging.googleapis.com
  - monitoring.googleapis.com

resources:
  # Global VPC Network for edge computing infrastructure
  - name: edge-network
    type: gcp-types/compute-v1:networks
    properties:
      name: ${network_name}
      routingConfig:
        routingMode: GLOBAL
      autoCreateSubnetworks: false
    metadata:
      description: "Global VPC network providing foundational connectivity for distributed edge computing"

  # Regional subnets for edge computing clusters
  - name: subnet-us-central1
    type: gcp-types/compute-v1:subnetworks
    properties:
      name: ${network_name}-us-central1
      network: $(ref.edge-network.selfLink)
      region: us-central1
      ipCidrRange: "10.1.0.0/16"
      privateIpGoogleAccess: true
    metadata:
      description: "Regional subnet for US Central edge computing cluster"
    dependsOn:
      - edge-network

  - name: subnet-europe-west1
    type: gcp-types/compute-v1:subnetworks
    properties:
      name: ${network_name}-europe-west1
      network: $(ref.edge-network.selfLink)
      region: europe-west1
      ipCidrRange: "10.2.0.0/16"
      privateIpGoogleAccess: true
    metadata:
      description: "Regional subnet for Europe West edge computing cluster"
    dependsOn:
      - edge-network

  - name: subnet-asia-southeast1
    type: gcp-types/compute-v1:subnetworks
    properties:
      name: ${network_name}-asia-southeast1
      network: $(ref.edge-network.selfLink)
      region: asia-southeast1
      ipCidrRange: "10.3.0.0/16"
      privateIpGoogleAccess: true
    metadata:
      description: "Regional subnet for Asia Southeast edge computing cluster"
    dependsOn:
      - edge-network

  # Firewall rules for secure edge traffic
  - name: firewall-allow-web
    type: gcp-types/compute-v1:firewalls
    properties:
      name: ${network_name}-allow-web
      network: $(ref.edge-network.selfLink)
      allowed:
        - IPProtocol: tcp
          ports: ["80", "443", "8080"]
      sourceRanges: ["0.0.0.0/0"]
      targetTags: ["edge-server"]
    metadata:
      description: "Allow HTTP/HTTPS traffic for edge services"
    dependsOn:
      - edge-network

  - name: firewall-allow-health-check
    type: gcp-types/compute-v1:firewalls
    properties:
      name: ${network_name}-allow-health-check
      network: $(ref.edge-network.selfLink)
      allowed:
        - IPProtocol: tcp
          ports: ["80", "443", "8080"]
      sourceRanges: ["130.211.0.0/22", "35.191.0.0/16"]
      targetTags: ["edge-server"]
    metadata:
      description: "Allow health check traffic from Google Cloud Load Balancing"
    dependsOn:
      - edge-network

  - name: firewall-allow-internal
    type: gcp-types/compute-v1:firewalls
    properties:
      name: ${network_name}-allow-internal
      network: $(ref.edge-network.selfLink)
      allowed:
        - IPProtocol: tcp
          ports: ["1-65535"]
        - IPProtocol: udp
          ports: ["1-65535"]
        - IPProtocol: icmp
      sourceRanges: ["10.0.0.0/8"]
      targetTags: ["edge-server"]
    metadata:
      description: "Allow internal communication between edge nodes"
    dependsOn:
      - edge-network

  # Cloud Storage buckets for static content origins
  - name: origin-storage-us-central1
    type: gcp-types/storage-v1:buckets
    properties:
      name: edge-origin-us-central1-${random_suffix}
      location: us-central1
      storageClass: STANDARD
      uniformBucketLevelAccess:
        enabled: true
      iamConfiguration:
        uniformBucketLevelAccess:
          enabled: true
    metadata:
      description: "Origin storage bucket for US Central region static content"

  - name: origin-storage-europe-west1
    type: gcp-types/storage-v1:buckets
    properties:
      name: edge-origin-europe-west1-${random_suffix}
      location: europe-west1
      storageClass: STANDARD
      uniformBucketLevelAccess:
        enabled: true
      iamConfiguration:
        uniformBucketLevelAccess:
          enabled: true
    metadata:
      description: "Origin storage bucket for Europe West region static content"

  - name: origin-storage-asia-southeast1
    type: gcp-types/storage-v1:buckets
    properties:
      name: edge-origin-asia-southeast1-${random_suffix}
      location: asia-southeast1
      storageClass: STANDARD
      uniformBucketLevelAccess:
        enabled: true
      iamConfiguration:
        uniformBucketLevelAccess:
          enabled: true
    metadata:
      description: "Origin storage bucket for Asia Southeast region static content"

  # IAM policy for public read access to storage buckets
  - name: storage-iam-us-central1
    type: gcp-types/storage-v1:buckets/setIamPolicy
    properties:
      bucket: $(ref.origin-storage-us-central1.name)
      policy:
        bindings:
          - role: roles/storage.objectViewer
            members:
              - allUsers
    dependsOn:
      - origin-storage-us-central1

  - name: storage-iam-europe-west1
    type: gcp-types/storage-v1:buckets/setIamPolicy
    properties:
      bucket: $(ref.origin-storage-europe-west1.name)
      policy:
        bindings:
          - role: roles/storage.objectViewer
            members:
              - allUsers
    dependsOn:
      - origin-storage-europe-west1

  - name: storage-iam-asia-southeast1
    type: gcp-types/storage-v1:buckets/setIamPolicy
    properties:
      bucket: $(ref.origin-storage-asia-southeast1.name)
      policy:
        bindings:
          - role: roles/storage.objectViewer
            members:
              - allUsers
    dependsOn:
      - origin-storage-asia-southeast1

  # Instance templates for edge computing nodes
  - name: instance-template-us-central1
    type: gcp-types/compute-v1:instanceTemplates
    properties:
      name: edge-template-us-central1-${random_suffix}
      properties:
        machineType: ${machine_type}
        networkInterfaces:
          - network: $(ref.edge-network.selfLink)
            subnetwork: $(ref.subnet-us-central1.selfLink)
            # No external IP for security (using Private Google Access)
        disks:
          - boot: true
            initializeParams:
              sourceImage: projects/ubuntu-os-cloud/global/images/family/ubuntu-2404-lts
              diskType: pd-standard
              diskSizeGb: 20
        tags:
          items: ["edge-server"]
        serviceAccounts:
          - email: default
            scopes:
              - https://www.googleapis.com/auth/cloud-platform
        metadata:
          items:
            - key: startup-script
              value: |
                #!/bin/bash
                # Edge computing node initialization script
                apt-get update
                apt-get install -y nginx curl
                
                # Configure nginx for edge processing
                cat > /var/www/html/index.html << 'EOF'
                <!DOCTYPE html>
                <html>
                <head>
                  <title>Edge Node - $(hostname)</title>
                  <style>
                    body { font-family: Arial, sans-serif; margin: 40px; }
                    .container { max-width: 800px; margin: 0 auto; }
                    .info { background: #f0f0f0; padding: 20px; border-radius: 5px; }
                  </style>
                </head>
                <body>
                  <div class="container">
                    <h1>üåê Edge Computing Node</h1>
                    <div class="info">
                      <p><strong>Server:</strong> $(hostname)</p>
                      <p><strong>Region:</strong> $(curl -s "http://metadata.google.internal/computeMetadata/v1/instance/zone" -H "Metadata-Flavor: Google" | cut -d/ -f4)</p>
                      <p><strong>Timestamp:</strong> $(date)</p>
                      <p><strong>Service:</strong> Processing dynamic content at the edge</p>
                      <p><strong>Load Balancer:</strong> Google Cloud Global Load Balancer</p>
                      <p><strong>CDN:</strong> Cloud CDN enabled for static content</p>
                    </div>
                  </div>
                </body>
                </html>
                EOF
                
                # Start and enable nginx
                systemctl start nginx
                systemctl enable nginx
                
                # Configure nginx for health checks
                echo "server {
                  listen 80;
                  location /health {
                    access_log off;
                    return 200 \"healthy\\n\";
                    add_header Content-Type text/plain;
                  }
                }" > /etc/nginx/sites-available/health
                ln -s /etc/nginx/sites-available/health /etc/nginx/sites-enabled/
                systemctl reload nginx
    metadata:
      description: "Instance template for US Central edge computing cluster"
    dependsOn:
      - edge-network
      - subnet-us-central1

  - name: instance-template-europe-west1
    type: gcp-types/compute-v1:instanceTemplates
    properties:
      name: edge-template-europe-west1-${random_suffix}
      properties:
        machineType: ${machine_type}
        networkInterfaces:
          - network: $(ref.edge-network.selfLink)
            subnetwork: $(ref.subnet-europe-west1.selfLink)
        disks:
          - boot: true
            initializeParams:
              sourceImage: projects/ubuntu-os-cloud/global/images/family/ubuntu-2404-lts
              diskType: pd-standard
              diskSizeGb: 20
        tags:
          items: ["edge-server"]
        serviceAccounts:
          - email: default
            scopes:
              - https://www.googleapis.com/auth/cloud-platform
        metadata:
          items:
            - key: startup-script
              value: |
                #!/bin/bash
                apt-get update
                apt-get install -y nginx curl
                cat > /var/www/html/index.html << 'EOF'
                <!DOCTYPE html>
                <html>
                <head>
                  <title>Edge Node - $(hostname)</title>
                  <style>
                    body { font-family: Arial, sans-serif; margin: 40px; }
                    .container { max-width: 800px; margin: 0 auto; }
                    .info { background: #f0f0f0; padding: 20px; border-radius: 5px; }
                  </style>
                </head>
                <body>
                  <div class="container">
                    <h1>üåê Edge Computing Node</h1>
                    <div class="info">
                      <p><strong>Server:</strong> $(hostname)</p>
                      <p><strong>Region:</strong> $(curl -s "http://metadata.google.internal/computeMetadata/v1/instance/zone" -H "Metadata-Flavor: Google" | cut -d/ -f4)</p>
                      <p><strong>Timestamp:</strong> $(date)</p>
                      <p><strong>Service:</strong> Processing dynamic content at the edge</p>
                      <p><strong>Load Balancer:</strong> Google Cloud Global Load Balancer</p>
                      <p><strong>CDN:</strong> Cloud CDN enabled for static content</p>
                    </div>
                  </div>
                </body>
                </html>
                EOF
                systemctl start nginx
                systemctl enable nginx
                echo "server {
                  listen 80;
                  location /health {
                    access_log off;
                    return 200 \"healthy\\n\";
                    add_header Content-Type text/plain;
                  }
                }" > /etc/nginx/sites-available/health
                ln -s /etc/nginx/sites-available/health /etc/nginx/sites-enabled/
                systemctl reload nginx
    metadata:
      description: "Instance template for Europe West edge computing cluster"
    dependsOn:
      - edge-network
      - subnet-europe-west1

  - name: instance-template-asia-southeast1
    type: gcp-types/compute-v1:instanceTemplates
    properties:
      name: edge-template-asia-southeast1-${random_suffix}
      properties:
        machineType: ${machine_type}
        networkInterfaces:
          - network: $(ref.edge-network.selfLink)
            subnetwork: $(ref.subnet-asia-southeast1.selfLink)
        disks:
          - boot: true
            initializeParams:
              sourceImage: projects/ubuntu-os-cloud/global/images/family/ubuntu-2404-lts
              diskType: pd-standard
              diskSizeGb: 20
        tags:
          items: ["edge-server"]
        serviceAccounts:
          - email: default
            scopes:
              - https://www.googleapis.com/auth/cloud-platform
        metadata:
          items:
            - key: startup-script
              value: |
                #!/bin/bash
                apt-get update
                apt-get install -y nginx curl
                cat > /var/www/html/index.html << 'EOF'
                <!DOCTYPE html>
                <html>
                <head>
                  <title>Edge Node - $(hostname)</title>
                  <style>
                    body { font-family: Arial, sans-serif; margin: 40px; }
                    .container { max-width: 800px; margin: 0 auto; }
                    .info { background: #f0f0f0; padding: 20px; border-radius: 5px; }
                  </style>
                </head>
                <body>
                  <div class="container">
                    <h1>üåê Edge Computing Node</h1>
                    <div class="info">
                      <p><strong>Server:</strong> $(hostname)</p>
                      <p><strong>Region:</strong> $(curl -s "http://metadata.google.internal/computeMetadata/v1/instance/zone" -H "Metadata-Flavor: Google" | cut -d/ -f4)</p>
                      <p><strong>Timestamp:</strong> $(date)</p>
                      <p><strong>Service:</strong> Processing dynamic content at the edge</p>
                      <p><strong>Load Balancer:</strong> Google Cloud Global Load Balancer</p>
                      <p><strong>CDN:</strong> Cloud CDN enabled for static content</p>
                    </div>
                  </div>
                </body>
                </html>
                EOF
                systemctl start nginx
                systemctl enable nginx
                echo "server {
                  listen 80;
                  location /health {
                    access_log off;
                    return 200 \"healthy\\n\";
                    add_header Content-Type text/plain;
                  }
                }" > /etc/nginx/sites-available/health
                ln -s /etc/nginx/sites-available/health /etc/nginx/sites-enabled/
                systemctl reload nginx
    metadata:
      description: "Instance template for Asia Southeast edge computing cluster"
    dependsOn:
      - edge-network
      - subnet-asia-southeast1

  # Managed instance groups for auto-scaling edge compute clusters
  - name: instance-group-us-central1
    type: gcp-types/compute-v1:instanceGroupManagers
    properties:
      name: edge-group-us-central1
      zone: us-central1-a
      instanceTemplate: $(ref.instance-template-us-central1.selfLink)
      targetSize: ${min_replicas}
      autoHealingPolicies:
        - healthCheck: $(ref.health-check.selfLink)
          initialDelaySec: 300
    metadata:
      description: "Managed instance group for US Central edge computing cluster"
    dependsOn:
      - instance-template-us-central1
      - health-check

  - name: instance-group-europe-west1
    type: gcp-types/compute-v1:instanceGroupManagers
    properties:
      name: edge-group-europe-west1
      zone: europe-west1-b
      instanceTemplate: $(ref.instance-template-europe-west1.selfLink)
      targetSize: ${min_replicas}
      autoHealingPolicies:
        - healthCheck: $(ref.health-check.selfLink)
          initialDelaySec: 300
    metadata:
      description: "Managed instance group for Europe West edge computing cluster"
    dependsOn:
      - instance-template-europe-west1
      - health-check

  - name: instance-group-asia-southeast1
    type: gcp-types/compute-v1:instanceGroupManagers
    properties:
      name: edge-group-asia-southeast1
      zone: asia-southeast1-a
      instanceTemplate: $(ref.instance-template-asia-southeast1.selfLink)
      targetSize: ${min_replicas}
      autoHealingPolicies:
        - healthCheck: $(ref.health-check.selfLink)
          initialDelaySec: 300
    metadata:
      description: "Managed instance group for Asia Southeast edge computing cluster"
    dependsOn:
      - instance-template-asia-southeast1
      - health-check

  # Autoscalers for dynamic capacity management
  - name: autoscaler-us-central1
    type: gcp-types/compute-v1:autoscalers
    properties:
      name: edge-autoscaler-us-central1
      zone: us-central1-a
      target: $(ref.instance-group-us-central1.selfLink)
      autoscalingPolicy:
        minNumReplicas: ${min_replicas}
        maxNumReplicas: ${max_replicas}
        cpuUtilization:
          utilizationTarget: ${target_cpu_utilization}
        coolDownPeriodSec: 90
    metadata:
      description: "Autoscaler for US Central edge computing cluster"
    dependsOn:
      - instance-group-us-central1

  - name: autoscaler-europe-west1
    type: gcp-types/compute-v1:autoscalers
    properties:
      name: edge-autoscaler-europe-west1
      zone: europe-west1-b
      target: $(ref.instance-group-europe-west1.selfLink)
      autoscalingPolicy:
        minNumReplicas: ${min_replicas}
        maxNumReplicas: ${max_replicas}
        cpuUtilization:
          utilizationTarget: ${target_cpu_utilization}
        coolDownPeriodSec: 90
    metadata:
      description: "Autoscaler for Europe West edge computing cluster"
    dependsOn:
      - instance-group-europe-west1

  - name: autoscaler-asia-southeast1
    type: gcp-types/compute-v1:autoscalers
    properties:
      name: edge-autoscaler-asia-southeast1
      zone: asia-southeast1-a
      target: $(ref.instance-group-asia-southeast1.selfLink)
      autoscalingPolicy:
        minNumReplicas: ${min_replicas}
        maxNumReplicas: ${max_replicas}
        cpuUtilization:
          utilizationTarget: ${target_cpu_utilization}
        coolDownPeriodSec: 90
    metadata:
      description: "Autoscaler for Asia Southeast edge computing cluster"
    dependsOn:
      - instance-group-asia-southeast1

  # Health check for backend services
  - name: health-check
    type: gcp-types/compute-v1:healthChecks
    properties:
      name: edge-health-check
      type: HTTP
      httpHealthCheck:
        port: 80
        requestPath: "/health"
      checkIntervalSec: 10
      timeoutSec: 5
      healthyThreshold: 2
      unhealthyThreshold: 3
    metadata:
      description: "Health check for edge computing backend services"

  # Backend service with Cloud CDN enabled
  - name: backend-service
    type: gcp-types/compute-v1:backendServices
    properties:
      name: edge-backend-${random_suffix}
      protocol: HTTP
      healthChecks:
        - $(ref.health-check.selfLink)
      loadBalancingScheme: EXTERNAL_MANAGED
      # Enable Cloud CDN with advanced caching policies
      enableCDN: true
      cdnPolicy:
        cacheMode: CACHE_ALL_STATIC
        defaultTtl: 3600
        maxTtl: 86400
        clientTtl: 1800
        negativeCaching: true
        negativeCachingPolicy:
          - code: 404
            ttl: 60
          - code: 500
            ttl: 10
      backends:
        - group: $(ref.instance-group-us-central1.instanceGroup)
          balancingMode: UTILIZATION
          maxUtilization: 0.8
          capacityScaler: 1.0
        - group: $(ref.instance-group-europe-west1.instanceGroup)
          balancingMode: UTILIZATION
          maxUtilization: 0.8
          capacityScaler: 1.0
        - group: $(ref.instance-group-asia-southeast1.instanceGroup)
          balancingMode: UTILIZATION
          maxUtilization: 0.8
          capacityScaler: 1.0
    metadata:
      description: "Global backend service with Cloud CDN enabled for edge computing"
    dependsOn:
      - health-check
      - instance-group-us-central1
      - instance-group-europe-west1
      - instance-group-asia-southeast1

  # Global static IP address
  - name: global-ip
    type: gcp-types/compute-v1:globalAddresses
    properties:
      name: edge-global-ip
      ipVersion: IPV4
    metadata:
      description: "Global static IP address for edge computing load balancer"

  # URL map for request routing
  - name: url-map
    type: gcp-types/compute-v1:urlMaps
    properties:
      name: edge-url-map
      defaultService: $(ref.backend-service.selfLink)
    metadata:
      description: "URL map for edge computing request routing"
    dependsOn:
      - backend-service

  # Target HTTP proxy
  - name: target-proxy
    type: gcp-types/compute-v1:targetHttpProxies
    properties:
      name: edge-http-proxy
      urlMap: $(ref.url-map.selfLink)
    metadata:
      description: "Target HTTP proxy for edge computing load balancer"
    dependsOn:
      - url-map

  # Global forwarding rule
  - name: forwarding-rule
    type: gcp-types/compute-v1:globalForwardingRules
    properties:
      name: edge-forwarding-rule
      IPAddress: $(ref.global-ip.address)
      target: $(ref.target-proxy.selfLink)
      portRange: "80"
      loadBalancingScheme: EXTERNAL_MANAGED
    metadata:
      description: "Global forwarding rule for edge computing traffic"
    dependsOn:
      - global-ip
      - target-proxy

  # Cloud DNS managed zone
  - name: dns-zone
    type: gcp-types/dns-v1:managedZones
    properties:
      name: edge-zone
      dnsName: ${domain_name}.
      description: "Edge computing network DNS zone"
      visibility: public
    metadata:
      description: "DNS managed zone for edge computing domain"

  # DNS A record pointing to global load balancer
  - name: dns-a-record
    type: gcp-types/dns-v1:resourceRecordSets
    properties:
      name: ${domain_name}.
      managedZone: $(ref.dns-zone.name)
      type: A
      ttl: 300
      rrdatas:
        - $(ref.global-ip.address)
    metadata:
      description: "DNS A record for edge computing domain"
    dependsOn:
      - dns-zone
      - global-ip

  # DNS CNAME record for www subdomain
  - name: dns-cname-record
    type: gcp-types/dns-v1:resourceRecordSets
    properties:
      name: www.${domain_name}.
      managedZone: $(ref.dns-zone.name)
      type: CNAME
      ttl: 300
      rrdatas:
        - ${domain_name}.
    metadata:
      description: "DNS CNAME record for www subdomain"
    dependsOn:
      - dns-zone

# Template parameters for customization
parameters:
  project_id:
    type: string
    description: "Google Cloud project ID for deployment"
    pattern: "^[a-z][a-z0-9-]{4,28}[a-z0-9]$"
  
  network_name:
    type: string
    description: "Name for the VPC network"
    default: "edge-network"
    pattern: "^[a-z][a-z0-9-]{0,62}$"
  
  domain_name:
    type: string
    description: "Domain name for the edge computing service"
    default: "edge-example.com"
    pattern: "^[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$"
  
  random_suffix:
    type: string
    description: "Random suffix for unique resource names"
    pattern: "^[a-z0-9]{6}$"
  
  machine_type:
    type: string
    description: "Machine type for edge computing instances"
    default: "e2-standard-2"
    enum: ["e2-standard-2", "e2-standard-4", "n1-standard-2", "n1-standard-4"]
  
  min_replicas:
    type: integer
    description: "Minimum number of instances per region"
    default: 2
    minimum: 1
    maximum: 10
  
  max_replicas:
    type: integer
    description: "Maximum number of instances per region"
    default: 5
    minimum: 2
    maximum: 100
  
  target_cpu_utilization:
    type: number
    description: "Target CPU utilization for autoscaling (0.0-1.0)"
    default: 0.7
    minimum: 0.1
    maximum: 1.0

# Output values for verification and integration
outputs:
  global_ip_address:
    description: "Global static IP address for the load balancer"
    value: $(ref.global-ip.address)
  
  dns_nameservers:
    description: "DNS nameservers for domain configuration"
    value: $(ref.dns-zone.nameServers)
  
  backend_service_name:
    description: "Name of the global backend service"
    value: $(ref.backend-service.name)
  
  network_name:
    description: "Name of the created VPC network"
    value: $(ref.edge-network.name)
  
  storage_buckets:
    description: "Names of the created storage buckets"
    value:
      us_central1: $(ref.origin-storage-us-central1.name)
      europe_west1: $(ref.origin-storage-europe-west1.name)
      asia_southeast1: $(ref.origin-storage-asia-southeast1.name)
  
  instance_groups:
    description: "Names of the managed instance groups"
    value:
      us_central1: $(ref.instance-group-us-central1.name)
      europe_west1: $(ref.instance-group-europe-west1.name)
      asia_southeast1: $(ref.instance-group-asia-southeast1.name)
  
  domain_name:
    description: "Configured domain name for the edge service"
    value: ${domain_name}

# Deployment notes and best practices
metadata:
  deployment_notes: |
    This Infrastructure Manager configuration deploys a comprehensive edge computing
    architecture using Google Cloud's global infrastructure. The deployment includes:
    
    - Global VPC network with regional subnets
    - Multi-regional Compute Engine clusters with autoscaling
    - Cloud CDN with advanced caching policies
    - Global load balancing with health checks
    - Cloud DNS for latency-based routing
    - Cloud Storage origins for static content
    
    Before deploying:
    1. Ensure all required APIs are enabled
    2. Configure appropriate IAM permissions
    3. Set the domain_name parameter to your actual domain
    4. Generate a random suffix for resource names
    
    After deployment:
    1. Configure your domain registrar with the provided nameservers
    2. Upload static content to the created storage buckets
    3. Monitor performance through Cloud Monitoring
    4. Configure alerting for health check failures
    
    Cost considerations:
    - Compute Engine instances will incur costs based on machine type and usage
    - Cloud CDN charges for cache egress and requests
    - Global load balancer has fixed and usage-based charges
    - Cloud Storage costs depend on data volume and requests
    
    Security recommendations:
    - Instances use Private Google Access (no external IPs)
    - Firewall rules implement least privilege access
    - Storage buckets use uniform bucket-level access
    - Health checks monitor instance availability
    
    Performance optimization:
    - CDN caching reduces origin load and improves response times
    - Autoscaling adapts to traffic patterns automatically
    - Global load balancing routes traffic to nearest healthy instances
    - Regional deployment minimizes latency for global users