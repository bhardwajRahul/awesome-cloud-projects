# Example Terraform variables for Immersive XR Content Delivery Platform
# Copy this file to terraform.tfvars and customize the values for your deployment

# =====================================
# REQUIRED VARIABLES
# =====================================

# Your Google Cloud Project ID
project_id = "your-gcp-project-id"

# Primary region for resources (choose based on your target audience)
region = "us-central1"  # Options: us-central1, us-east1, us-west1, europe-west1, asia-east1

# Primary zone for zonal resources
zone = "us-central1-a"  # Must be in the same region as above

# =====================================
# BASIC CONFIGURATION
# =====================================

# Prefix for resource names (helps with organization and avoid conflicts)
resource_prefix = "xr-platform"

# Environment identifier
environment = "dev"  # Options: dev, staging, prod

# =====================================
# XR STREAMING CONFIGURATION
# =====================================

# GPU configuration for XR rendering
xr_gpu_class = "T4"  # Options: T4 (cost-effective), V100 (high-performance), A100 (premium)
xr_gpu_count = 1     # Number of GPUs per instance (1-8, higher for demanding workloads)

# Session management
xr_session_timeout = 1800          # Session timeout in seconds (5-120 minutes)
xr_max_concurrent_sessions = 10    # Maximum concurrent XR sessions (adjust based on expected load)

# =====================================
# AUTOSCALING CONFIGURATION
# =====================================

# Enable automatic scaling based on demand
enable_autoscaling = true

# Scaling limits
autoscaling_min_capacity = 1       # Minimum instances (0 for cost optimization, 1+ for availability)
autoscaling_max_capacity = 5       # Maximum instances (scale based on expected peak load)
autoscaling_target_utilization = 70  # Target CPU utilization percentage for scaling decisions

# =====================================
# CONTENT DELIVERY (CDN) CONFIGURATION
# =====================================

# CDN caching behavior
cdn_cache_mode = "CACHE_ALL_STATIC"    # Options: CACHE_ALL_STATIC, USE_ORIGIN_HEADERS, FORCE_CACHE_ALL
cdn_default_ttl = 3600                 # Default cache time (1 hour)
cdn_max_ttl = 86400                    # Maximum cache time (24 hours)

# =====================================
# STORAGE CONFIGURATION
# =====================================

# Storage class for XR assets
storage_class = "STANDARD"  # Options: STANDARD (frequent access), NEARLINE (monthly), COLDLINE (quarterly), ARCHIVE (yearly)

# Storage features
enable_versioning = true      # Enable object versioning for asset management
bucket_public_access = true  # Allow public read access for static assets (required for CDN)

# =====================================
# SSL/TLS CONFIGURATION (OPTIONAL)
# =====================================

# Enable HTTPS with managed SSL certificates
enable_ssl = false

# Domain names for SSL certificate (only used if enable_ssl = true)
ssl_certificate_domains = [
  # "xr.example.com",
  # "www.xr.example.com"
]

# =====================================
# MONITORING AND LOGGING
# =====================================

# Enable comprehensive monitoring
enable_monitoring = true

# Enable access logging for load balancer
enable_access_logs = true

# Log retention period in days
log_retention_days = 30  # Options: 1-365 days

# =====================================
# RESOURCE LABELS
# =====================================

# Labels applied to all resources for organization and billing
labels = {
  project     = "xr-content-delivery"
  team        = "platform-engineering"
  environment = "dev"
  managed-by  = "terraform"
  cost-center = "innovation"
  owner       = "platform-team"
}

# =====================================
# API SERVICES
# =====================================

# Google Cloud APIs to enable (modify if you need additional services)
enable_apis = [
  "compute.googleapis.com",
  "storage.googleapis.com",
  "stream.googleapis.com",
  "networkservices.googleapis.com",
  "certificatemanager.googleapis.com",
  "monitoring.googleapis.com",
  "logging.googleapis.com",
  "cloudresourcemanager.googleapis.com",
  "iam.googleapis.com"
]

# =====================================
# DEPLOYMENT PROFILES
# =====================================

# Uncomment one of the following profile sections instead of individual settings above
# Each profile provides optimized settings for different use cases

## DEVELOPMENT PROFILE (Cost-optimized for testing)
# resource_prefix = "xr-dev"
# environment = "dev"
# xr_gpu_class = "T4"
# xr_gpu_count = 1
# xr_max_concurrent_sessions = 5
# autoscaling_min_capacity = 0
# autoscaling_max_capacity = 2
# storage_class = "STANDARD"
# enable_monitoring = true
# enable_ssl = false

## STAGING PROFILE (Balanced performance and cost)
# resource_prefix = "xr-staging"
# environment = "staging"
# xr_gpu_class = "T4"
# xr_gpu_count = 1
# xr_max_concurrent_sessions = 20
# autoscaling_min_capacity = 1
# autoscaling_max_capacity = 5
# storage_class = "STANDARD"
# enable_monitoring = true
# enable_ssl = true
# ssl_certificate_domains = ["staging-xr.example.com"]

## PRODUCTION PROFILE (High performance and availability)
# resource_prefix = "xr-prod"
# environment = "prod"
# xr_gpu_class = "V100"
# xr_gpu_count = 2
# xr_max_concurrent_sessions = 100
# autoscaling_min_capacity = 2
# autoscaling_max_capacity = 20
# autoscaling_target_utilization = 60
# storage_class = "STANDARD"
# enable_monitoring = true
# enable_ssl = true
# ssl_certificate_domains = ["xr.example.com", "www.xr.example.com"]
# log_retention_days = 90

# =====================================
# ADVANCED CONFIGURATION
# =====================================

# Uncomment and modify for advanced use cases

## Custom network configuration (if you have existing VPC)
# vpc_network = "projects/YOUR_PROJECT/global/networks/custom-vpc"
# vpc_subnet = "projects/YOUR_PROJECT/regions/us-central1/subnetworks/custom-subnet"

## Custom service account (if you want to use existing SA)
# existing_service_account = "existing-sa@your-project.iam.gserviceaccount.com"

## Custom monitoring configuration
# monitoring_notification_channels = [
#   "projects/YOUR_PROJECT/notificationChannels/CHANNEL_ID"
# ]

## Regional preferences for global resources
# global_load_balancer_regions = ["us-central1", "europe-west1", "asia-east1"]