# Infrastructure Manager Configuration for Weather-Aware HPC Scaling
# This configuration deploys a complete weather-aware HPC infrastructure using
# Google Maps Platform Weather API and Cluster Toolkit for intelligent scaling

# Imports required for the infrastructure
imports:
  - path: modules/network/vpc.yaml
    name: vpc_module
  - path: modules/storage/filestore.yaml
    name: filestore_module
  - path: modules/compute/cluster.yaml
    name: cluster_module
  - path: modules/functions/weather_processor.yaml
    name: weather_function_module
  - path: modules/monitoring/dashboard.yaml
    name: monitoring_module

# Template information
info:
  title: Weather-Aware HPC Infrastructure
  description: |
    Deploys a complete weather-aware HPC infrastructure that automatically scales
    compute resources based on real-time weather data from Google Maps Platform Weather API.
    Includes Cluster Toolkit for HPC management, Cloud Functions for weather processing,
    and comprehensive monitoring for weather-driven scaling decisions.
  version: 1.0.0
  author: Google Cloud Recipes

# Input parameters for customization
properties:
  # Project configuration
  project_id:
    type: string
    description: Google Cloud project ID for resource deployment
    pattern: ^[a-z][a-z0-9-]{4,28}[a-z0-9]$
  
  region:
    type: string
    description: Google Cloud region for resource deployment
    default: us-central1
    enum:
      - us-central1
      - us-east1
      - us-west1
      - europe-west1
      - asia-east1
  
  zone:
    type: string
    description: Google Cloud zone for compute resources
    default: us-central1-a
  
  # Network configuration
  network_name:
    type: string
    description: Name for the VPC network
    default: weather-hpc-network
  
  subnet_name:
    type: string
    description: Name for the subnet
    default: weather-hpc-subnet
  
  subnet_cidr:
    type: string
    description: CIDR block for the subnet
    default: 10.0.0.0/24
    pattern: ^(?:[0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}$
  
  # Cluster configuration
  cluster_name:
    type: string
    description: Name for the HPC cluster
    default: weather-hpc-cluster
  
  cluster_machine_type:
    type: string
    description: Machine type for compute nodes
    default: c2-standard-60
    enum:
      - c2-standard-30
      - c2-standard-60
      - c2-highcpu-32
      - c2-highmem-32
  
  max_node_count:
    type: integer
    description: Maximum number of compute nodes
    default: 10
    minimum: 1
    maximum: 100
  
  enable_spot_vms:
    type: boolean
    description: Enable spot VMs for cost optimization
    default: true
  
  # Storage configuration
  filestore_capacity:
    type: integer
    description: Filestore capacity in GB
    default: 1024
    minimum: 1024
    maximum: 65536
  
  filestore_tier:
    type: string
    description: Filestore service tier
    default: STANDARD
    enum:
      - STANDARD
      - PREMIUM
      - BASIC_HDD
      - BASIC_SSD
  
  # Weather API configuration
  weather_api_key:
    type: string
    description: Google Maps Platform Weather API key
    pattern: ^[A-Za-z0-9_-]+$
  
  weather_check_frequency:
    type: string
    description: Frequency for weather checks (cron format)
    default: "*/15 * * * *"
  
  storm_monitor_frequency:
    type: string
    description: Frequency for storm monitoring (cron format)
    default: "*/5 * * * *"
  
  # Monitoring configuration
  enable_monitoring:
    type: boolean
    description: Enable comprehensive monitoring dashboard
    default: true
  
  alert_threshold:
    type: number
    description: Scaling factor threshold for alerts
    default: 1.5
    minimum: 1.0
    maximum: 5.0

# Required parameters
required:
  - project_id
  - weather_api_key

# Resource definitions
resources:
  # Enable required APIs
  - name: enable-apis
    type: gcp-types/serviceusage-v1:services
    metadata:
      runtimePolicy:
        - CREATE
    properties:
      name: projects/$(ref.project_id)/services/compute.googleapis.com
      parent: projects/$(ref.project_id)
  
  - name: enable-storage-api
    type: gcp-types/serviceusage-v1:services
    metadata:
      dependsOn:
        - enable-apis
    properties:
      name: projects/$(ref.project_id)/services/storage.googleapis.com
      parent: projects/$(ref.project_id)
  
  - name: enable-functions-api
    type: gcp-types/serviceusage-v1:services
    metadata:
      dependsOn:
        - enable-apis
    properties:
      name: projects/$(ref.project_id)/services/cloudfunctions.googleapis.com
      parent: projects/$(ref.project_id)
  
  - name: enable-pubsub-api
    type: gcp-types/serviceusage-v1:services
    metadata:
      dependsOn:
        - enable-apis
    properties:
      name: projects/$(ref.project_id)/services/pubsub.googleapis.com
      parent: projects/$(ref.project_id)
  
  - name: enable-monitoring-api
    type: gcp-types/serviceusage-v1:services
    metadata:
      dependsOn:
        - enable-apis
    properties:
      name: projects/$(ref.project_id)/services/monitoring.googleapis.com
      parent: projects/$(ref.project_id)
  
  - name: enable-scheduler-api
    type: gcp-types/serviceusage-v1:services
    metadata:
      dependsOn:
        - enable-apis
    properties:
      name: projects/$(ref.project_id)/services/cloudscheduler.googleapis.com
      parent: projects/$(ref.project_id)
  
  - name: enable-weather-api
    type: gcp-types/serviceusage-v1:services
    metadata:
      dependsOn:
        - enable-apis
    properties:
      name: projects/$(ref.project_id)/services/weather.googleapis.com
      parent: projects/$(ref.project_id)
  
  # VPC Network for HPC cluster
  - name: weather-hpc-network
    type: compute.v1.network
    metadata:
      dependsOn:
        - enable-apis
    properties:
      name: $(ref.network_name)
      project: $(ref.project_id)
      autoCreateSubnetworks: false
      description: VPC network for weather-aware HPC cluster
  
  # Subnet for compute resources
  - name: weather-hpc-subnet
    type: compute.v1.subnetwork
    metadata:
      dependsOn:
        - weather-hpc-network
    properties:
      name: $(ref.subnet_name)
      project: $(ref.project_id)
      region: $(ref.region)
      network: $(ref.weather-hpc-network.selfLink)
      ipCidrRange: $(ref.subnet_cidr)
      description: Subnet for weather-aware HPC compute nodes
      enableFlowLogs: true
      logConfig:
        enable: true
        flowSampling: 0.5
        aggregationInterval: INTERVAL_10_MIN
  
  # Firewall rules for cluster communication
  - name: weather-hpc-firewall-ssh
    type: compute.v1.firewall
    metadata:
      dependsOn:
        - weather-hpc-network
    properties:
      name: $(ref.network_name)-allow-ssh
      project: $(ref.project_id)
      network: $(ref.weather-hpc-network.selfLink)
      description: Allow SSH access to cluster nodes
      sourceRanges:
        - 0.0.0.0/0
      allowed:
        - IPProtocol: tcp
          ports:
            - "22"
      targetTags:
        - weather-hpc-cluster
  
  - name: weather-hpc-firewall-internal
    type: compute.v1.firewall
    metadata:
      dependsOn:
        - weather-hpc-network
    properties:
      name: $(ref.network_name)-allow-internal
      project: $(ref.project_id)
      network: $(ref.weather-hpc-network.selfLink)
      description: Allow internal communication between cluster nodes
      sourceRanges:
        - $(ref.subnet_cidr)
      allowed:
        - IPProtocol: tcp
          ports:
            - "0-65535"
        - IPProtocol: udp
          ports:
            - "0-65535"
        - IPProtocol: icmp
      targetTags:
        - weather-hpc-cluster
  
  # Cloud Storage bucket for weather data
  - name: weather-data-bucket
    type: storage.v1.bucket
    metadata:
      dependsOn:
        - enable-storage-api
    properties:
      name: weather-data-$(ref.project_id)
      project: $(ref.project_id)
      location: $(ref.region)
      storageClass: STANDARD
      versioning:
        enabled: true
      lifecycle:
        rule:
          - action:
              type: Delete
            condition:
              age: 90
              isLive: false
          - action:
              type: SetStorageClass
              storageClass: COLDLINE
            condition:
              age: 30
              isLive: true
      labels:
        purpose: weather-data
        component: hpc-scaling
  
  # Filestore for shared cluster storage
  - name: weather-hpc-filestore
    type: gcp-types/file-v1:projects.locations.instances
    metadata:
      dependsOn:
        - weather-hpc-subnet
    properties:
      parent: projects/$(ref.project_id)/locations/$(ref.zone)
      instanceId: $(ref.cluster_name)-filestore
      instance:
        description: Shared storage for weather-aware HPC cluster
        tier: $(ref.filestore_tier)
        fileShares:
          - name: home
            capacityGb: $(ref.filestore_capacity)
            nfsExportOptions:
              - ipRanges:
                  - $(ref.subnet_cidr)
                accessMode: READ_WRITE
                squashMode: NO_ROOT_SQUASH
                anonUid: 1000
                anonGid: 1000
        networks:
          - network: $(ref.weather-hpc-network.name)
            modes:
              - MODE_IPV4
            reservedIpRange: 10.0.1.0/29
        labels:
          purpose: hpc-storage
          component: weather-scaling
  
  # Pub/Sub topic for scaling events
  - name: weather-scaling-topic
    type: pubsub.v1.topic
    metadata:
      dependsOn:
        - enable-pubsub-api
    properties:
      name: projects/$(ref.project_id)/topics/weather-scaling-events
      project: $(ref.project_id)
      labels:
        purpose: weather-scaling
        component: messaging
  
  # Pub/Sub subscription for scaling events
  - name: weather-scaling-subscription
    type: pubsub.v1.subscription
    metadata:
      dependsOn:
        - weather-scaling-topic
    properties:
      name: projects/$(ref.project_id)/subscriptions/weather-scaling-sub
      project: $(ref.project_id)
      topic: $(ref.weather-scaling-topic.name)
      ackDeadlineSeconds: 300
      messageRetentionDuration: 604800s  # 7 days
      retryPolicy:
        minimumBackoff: 10s
        maximumBackoff: 600s
      labels:
        purpose: weather-scaling
        component: messaging
  
  # Service account for weather processing function
  - name: weather-function-sa
    type: iam.v1.serviceAccount
    metadata:
      dependsOn:
        - enable-apis
    properties:
      accountId: weather-function-sa
      project: $(ref.project_id)
      displayName: Weather Function Service Account
      description: Service account for weather processing Cloud Function
  
  # IAM bindings for weather function service account
  - name: weather-function-sa-pubsub-binding
    type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
    metadata:
      dependsOn:
        - weather-function-sa
    properties:
      resource: $(ref.project_id)
      role: roles/pubsub.publisher
      member: serviceAccount:$(ref.weather-function-sa.email)
  
  - name: weather-function-sa-storage-binding
    type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
    metadata:
      dependsOn:
        - weather-function-sa
    properties:
      resource: $(ref.project_id)
      role: roles/storage.objectCreator
      member: serviceAccount:$(ref.weather-function-sa.email)
  
  - name: weather-function-sa-monitoring-binding
    type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
    metadata:
      dependsOn:
        - weather-function-sa
    properties:
      resource: $(ref.project_id)
      role: roles/monitoring.metricWriter
      member: serviceAccount:$(ref.weather-function-sa.email)
  
  # Cloud Function for weather processing
  - name: weather-processor-function
    type: gcp-types/cloudfunctions-v1:projects.locations.functions
    metadata:
      dependsOn:
        - enable-functions-api
        - weather-function-sa
        - weather-data-bucket
        - weather-scaling-topic
    properties:
      parent: projects/$(ref.project_id)/locations/$(ref.region)
      function:
        name: projects/$(ref.project_id)/locations/$(ref.region)/functions/weather-processor
        description: Processes weather data and triggers scaling decisions
        sourceArchiveUrl: gs://weather-data-$(ref.project_id)/function-source.zip
        entryPoint: weather_processor
        runtime: python39
        timeout: 300s
        availableMemoryMb: 512
        maxInstances: 10
        httpsTrigger: {}
        serviceAccountEmail: $(ref.weather-function-sa.email)
        environmentVariables:
          GCP_PROJECT: $(ref.project_id)
          PUBSUB_TOPIC: weather-scaling-events
          STORAGE_BUCKET: weather-data-$(ref.project_id)
          WEATHER_API_KEY: $(ref.weather_api_key)
        labels:
          purpose: weather-processing
          component: scaling-automation
  
  # Cloud Scheduler jobs for automated weather monitoring
  - name: weather-check-scheduler
    type: gcp-types/cloudscheduler-v1:projects.locations.jobs
    metadata:
      dependsOn:
        - enable-scheduler-api
        - weather-processor-function
    properties:
      parent: projects/$(ref.project_id)/locations/$(ref.region)
      job:
        name: projects/$(ref.project_id)/locations/$(ref.region)/jobs/weather-check-job
        description: Regular weather data collection and analysis
        schedule: $(ref.weather_check_frequency)
        timeZone: UTC
        httpTarget:
          uri: $(ref.weather-processor-function.httpsTrigger.url)
          httpMethod: GET
          oidcToken:
            serviceAccountEmail: $(ref.weather-function-sa.email)
        retryConfig:
          retryCount: 3
          maxRetryDuration: 300s
          minBackoffDuration: 5s
          maxBackoffDuration: 60s
  
  - name: storm-monitor-scheduler
    type: gcp-types/cloudscheduler-v1:projects.locations.jobs
    metadata:
      dependsOn:
        - enable-scheduler-api
        - weather-processor-function
    properties:
      parent: projects/$(ref.project_id)/locations/$(ref.region)
      job:
        name: projects/$(ref.project_id)/locations/$(ref.region)/jobs/storm-monitor-job
        description: Enhanced weather monitoring during severe weather events
        schedule: $(ref.storm_monitor_frequency)
        timeZone: UTC
        httpTarget:
          uri: $(ref.weather-processor-function.httpsTrigger.url)
          httpMethod: GET
          oidcToken:
            serviceAccountEmail: $(ref.weather-function-sa.email)
        retryConfig:
          retryCount: 5
          maxRetryDuration: 600s
          minBackoffDuration: 10s
          maxBackoffDuration: 120s
  
  # HPC Cluster Template Instance
  - name: cluster-template
    type: compute.v1.instanceTemplate
    metadata:
      dependsOn:
        - weather-hpc-subnet
        - weather-hpc-filestore
    properties:
      name: $(ref.cluster_name)-template
      project: $(ref.project_id)
      description: Instance template for weather-aware HPC cluster nodes
      properties:
        machineType: $(ref.cluster_machine_type)
        disks:
          - boot: true
            autoDelete: true
            initializeParams:
              sourceImage: projects/schedmd-slurm-public/global/images/family/schedmd-slurm-22-05-hpc-centos-7
              diskType: pd-ssd
              diskSizeGb: 100
        networkInterfaces:
          - subnetwork: $(ref.weather-hpc-subnet.selfLink)
            accessConfigs:
              - type: ONE_TO_ONE_NAT
                name: External NAT
        tags:
          items:
            - weather-hpc-cluster
            - slurm-compute
        metadata:
          items:
            - key: startup-script
              value: |
                #!/bin/bash
                # Mount shared Filestore
                mkdir -p /home
                mount -t nfs $(ref.weather-hpc-filestore.networks[0].ipAddresses[0]):/home /home
                echo "$(ref.weather-hpc-filestore.networks[0].ipAddresses[0]):/home /home nfs defaults 0 0" >> /etc/fstab
                
                # Install weather scaling agent dependencies
                yum update -y
                yum install -y python3 python3-pip
                pip3 install google-cloud-pubsub google-cloud-monitoring
                
                # Configure Slurm for weather-aware scaling
                echo "# Weather-aware scaling configuration" >> /etc/slurm/slurm.conf
                echo "NodeName=weather-compute-[1-$(ref.max_node_count)] CPUs=60 RealMemory=240000 State=CLOUD" >> /etc/slurm/slurm.conf
                echo "PartitionName=weather-compute Nodes=weather-compute-[1-$(ref.max_node_count)] Default=YES MaxTime=INFINITE State=UP" >> /etc/slurm/slurm.conf
                
                systemctl restart slurmd
        serviceAccounts:
          - email: default
            scopes:
              - https://www.googleapis.com/auth/cloud-platform
        scheduling:
          preemptible: $(ref.enable_spot_vms)
  
  # Managed Instance Group for auto-scaling
  - name: cluster-instance-group
    type: compute.v1.instanceGroupManager
    metadata:
      dependsOn:
        - cluster-template
    properties:
      name: $(ref.cluster_name)-ig
      project: $(ref.project_id)
      zone: $(ref.zone)
      description: Managed instance group for weather-aware HPC cluster
      baseInstanceName: weather-compute
      instanceTemplate: $(ref.cluster-template.selfLink)
      targetSize: 2
      autoHealingPolicies:
        - initialDelaySec: 300
          healthCheck: $(ref.cluster-health-check.selfLink)
      updatePolicy:
        type: PROACTIVE
        instanceRedistributionType: PROACTIVE
        maxSurge:
          fixed: 3
        maxUnavailable:
          fixed: 1
        minimalAction: REPLACE
        replacementMethod: SUBSTITUTE
  
  # Health check for cluster nodes
  - name: cluster-health-check
    type: compute.v1.healthCheck
    metadata:
      dependsOn:
        - weather-hpc-network
    properties:
      name: $(ref.cluster_name)-health-check
      project: $(ref.project_id)
      description: Health check for weather-aware HPC cluster nodes
      type: TCP
      tcpHealthCheck:
        port: 22
        portName: ssh
      checkIntervalSec: 60
      timeoutSec: 10
      healthyThreshold: 2
      unhealthyThreshold: 3
  
  # Autoscaler for weather-driven scaling
  - name: cluster-autoscaler
    type: compute.v1.autoscaler
    metadata:
      dependsOn:
        - cluster-instance-group
    properties:
      name: $(ref.cluster_name)-autoscaler
      project: $(ref.project_id)
      zone: $(ref.zone)
      description: Weather-aware autoscaler for HPC cluster
      target: $(ref.cluster-instance-group.selfLink)
      autoscalingPolicy:
        minNumReplicas: 1
        maxNumReplicas: $(ref.max_node_count)
        coolDownPeriodSec: 300
        cpuUtilization:
          utilizationTarget: 0.8
        customMetricUtilizations:
          - metric: custom.googleapis.com/weather/scaling_factor
            utilizationTarget: $(ref.alert_threshold)
            utilizationTargetType: GAUGE
        scaleInControl:
          maxScaledInReplicas:
            fixed: 3
          timeWindowSec: 600
        mode: ON
  
  # Cloud Monitoring Dashboard
  - name: weather-monitoring-dashboard
    type: gcp-types/monitoring-v1:projects.dashboards
    metadata:
      dependsOn:
        - enable-monitoring-api
      condition: $(ref.enable_monitoring)
    properties:
      parent: projects/$(ref.project_id)
      dashboard:
        displayName: Weather-Aware HPC Scaling Dashboard
        mosaicLayout:
          tiles:
            - width: 6
              height: 4
              widget:
                title: Weather Scaling Factor by Region
                xyChart:
                  dataSets:
                    - timeSeriesQuery:
                        timeSeriesFilter:
                          filter: 'metric.type="custom.googleapis.com/weather/scaling_factor"'
                          aggregation:
                            alignmentPeriod: 300s
                            perSeriesAligner: ALIGN_MEAN
                            crossSeriesReducer: REDUCE_MEAN
                            groupByFields:
                              - metric.label.region
                      plotType: LINE
                  timeshiftDuration: 0s
                  yAxis:
                    label: Scaling Factor
                    scale: LINEAR
            - width: 6
              height: 4
              widget:
                title: Cluster CPU Utilization
                xyChart:
                  dataSets:
                    - timeSeriesQuery:
                        timeSeriesFilter:
                          filter: 'metric.type="compute.googleapis.com/instance/cpu/utilization" AND resource.type="gce_instance"'
                          aggregation:
                            alignmentPeriod: 300s
                            perSeriesAligner: ALIGN_MEAN
                            crossSeriesReducer: REDUCE_MEAN
                      plotType: LINE
            - width: 6
              height: 4
              widget:
                title: Active Cluster Nodes
                xyChart:
                  dataSets:
                    - timeSeriesQuery:
                        timeSeriesFilter:
                          filter: 'metric.type="compute.googleapis.com/instance_group/size" AND resource.label.instance_group_name="$(ref.cluster_name)-ig"'
                          aggregation:
                            alignmentPeriod: 300s
                            perSeriesAligner: ALIGN_MEAN
                      plotType: LINE
            - width: 6
              height: 4
              widget:
                title: Weather Function Executions
                xyChart:
                  dataSets:
                    - timeSeriesQuery:
                        timeSeriesFilter:
                          filter: 'metric.type="cloudfunctions.googleapis.com/function/executions" AND resource.label.function_name="weather-processor"'
                          aggregation:
                            alignmentPeriod: 300s
                            perSeriesAligner: ALIGN_RATE
                            crossSeriesReducer: REDUCE_SUM
                      plotType: LINE
  
  # Alerting policy for extreme weather conditions
  - name: extreme-weather-alert
    type: gcp-types/monitoring-v1:projects.alertPolicies
    metadata:
      dependsOn:
        - enable-monitoring-api
      condition: $(ref.enable_monitoring)
    properties:
      parent: projects/$(ref.project_id)
      alertPolicy:
        displayName: Extreme Weather Scaling Alert
        documentation:
          content: |
            This alert triggers when weather conditions cause scaling factors to exceed safe thresholds.
            This indicates severe weather events that may require manual intervention or additional resources.
          mimeType: text/markdown
        conditions:
          - displayName: High Weather Scaling Factor
            conditionThreshold:
              filter: 'metric.type="custom.googleapis.com/weather/scaling_factor"'
              comparison: COMPARISON_GT
              thresholdValue: $(ref.alert_threshold)
              duration: 300s
              aggregations:
                - alignmentPeriod: 300s
                  perSeriesAligner: ALIGN_MEAN
                  crossSeriesReducer: REDUCE_MAX
        enabled: true
        combiner: OR
        notificationChannels: []

# Outputs for verification and integration
outputs:
  - name: project_id
    value: $(ref.project_id)
    description: Google Cloud project ID
  
  - name: network_name
    value: $(ref.weather-hpc-network.name)
    description: Name of the created VPC network
  
  - name: subnet_name
    value: $(ref.weather-hpc-subnet.name)
    description: Name of the created subnet
  
  - name: cluster_name
    value: $(ref.cluster_name)
    description: Name of the HPC cluster
  
  - name: weather_bucket_name
    value: $(ref.weather-data-bucket.name)
    description: Name of the weather data storage bucket
  
  - name: filestore_ip
    value: $(ref.weather-hpc-filestore.networks[0].ipAddresses[0])
    description: IP address of the Filestore instance
  
  - name: weather_function_url
    value: $(ref.weather-processor-function.httpsTrigger.url)
    description: URL of the weather processing Cloud Function
  
  - name: pubsub_topic_name
    value: $(ref.weather-scaling-topic.name)
    description: Name of the weather scaling Pub/Sub topic
  
  - name: instance_group_name
    value: $(ref.cluster-instance-group.name)
    description: Name of the managed instance group
  
  - name: dashboard_url
    value: https://console.cloud.google.com/monitoring/dashboards/custom/$(ref.weather-monitoring-dashboard.name)
    description: URL to the weather monitoring dashboard
    condition: $(ref.enable_monitoring)
  
  - name: scheduler_jobs
    value:
      - $(ref.weather-check-scheduler.name)
      - $(ref.storm-monitor-scheduler.name)
    description: Names of the created scheduler jobs
  
  - name: next_steps
    value: |
      1. Upload the weather processing function source code to gs://weather-data-$(ref.project_id)/function-source.zip
      2. Configure your Google Maps Platform Weather API key
      3. Submit test workloads to verify weather-aware scaling
      4. Monitor the dashboard for weather-driven scaling events
      5. Adjust scaling parameters based on workload requirements
    description: Next steps for completing the deployment