# Weather-Aware Infrastructure Scaling - Terraform Configuration Example
# Copy this file to terraform.tfvars and customize the values for your deployment

# =============================================================================
# REQUIRED VARIABLES
# =============================================================================

# Google Cloud Project ID
# Replace with your actual project ID
project_id = "your-project-id-here"

# Google Maps Platform Weather API Key
# Obtain from Google Cloud Console -> APIs & Services -> Credentials
weather_api_key = "your-weather-api-key-here"

# =============================================================================
# BASIC CONFIGURATION
# =============================================================================

# Google Cloud region and zone
region = "us-central1"
zone   = "us-central1-a"

# HPC cluster configuration
cluster_name         = "weather-hpc-cluster"
cluster_machine_type = "c2-standard-60"  # High-performance compute instances
cluster_max_nodes    = 20                # Maximum nodes for auto-scaling
cluster_min_nodes    = 2                 # Minimum nodes to maintain

# Enable spot instances for cost savings (60-91% discount)
enable_spot_instances = true

# =============================================================================
# STORAGE CONFIGURATION
# =============================================================================

# Filestore shared storage capacity in GB
filestore_capacity_gb = 1024  # 1 TB

# Filestore performance tier
# Options: STANDARD, PREMIUM, BASIC_HDD, BASIC_SSD
filestore_tier = "STANDARD"

# =============================================================================
# WEATHER MONITORING CONFIGURATION
# =============================================================================

# Weather monitoring locations
# Add or modify locations based on your geographic requirements
weather_monitoring_locations = [
  {
    name      = "us-east1"
    latitude  = 39.0458   # Virginia
    longitude = -76.6413
    region    = "us-east1"
  },
  {
    name      = "us-central1"
    latitude  = 41.2619   # Iowa
    longitude = -95.8608
    region    = "us-central1"
  },
  {
    name      = "us-west1"
    latitude  = 45.5152   # Oregon
    longitude = -122.6784
    region    = "us-west1"
  }
]

# Weather check schedules (cron format)
weather_check_schedule = "*/15 * * * *"  # Every 15 minutes
storm_monitor_schedule = "*/5 * * * *"   # Every 5 minutes during storms

# =============================================================================
# CLOUD FUNCTION CONFIGURATION
# =============================================================================

# Memory allocation for weather processing function
function_memory_mb = 512  # 512 MB

# Function timeout in seconds
function_timeout_seconds = 300  # 5 minutes

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Enable Identity-Aware Proxy for secure access
enable_iap = true

# Authorized networks for cluster access (when IAP is disabled)
# Use ["0.0.0.0/0"] for open access or specify your IP ranges
authorized_networks = ["0.0.0.0/0"]

# Network configuration
network_name = "weather-hpc-network"
subnet_cidr  = "10.0.0.0/24"

# Enable deletion protection for critical resources
deletion_protection = true

# =============================================================================
# COST MANAGEMENT
# =============================================================================

# Monthly budget in USD
budget_amount = 1000

# Budget alert thresholds (as percentages)
budget_alert_thresholds = [0.5, 0.8, 0.9, 1.0]  # 50%, 80%, 90%, 100%

# =============================================================================
# RESOURCE LABELING
# =============================================================================

# Labels for resource organization and cost tracking
labels = {
  environment = "production"
  application = "weather-aware-hpc"
  team        = "research"
  cost-center = "engineering"
  managed-by  = "terraform"
}

# =============================================================================
# ADVANCED CONFIGURATION (Optional)
# =============================================================================

# European locations example (uncomment and modify as needed)
# weather_monitoring_locations = [
#   {
#     name      = "europe-west1"
#     latitude  = 50.4501   # Belgium
#     longitude = 3.8196
#     region    = "europe-west1"
#   },
#   {
#     name      = "europe-west2"
#     latitude  = 51.5074   # United Kingdom
#     longitude = -0.1278
#     region    = "europe-west2"
#   },
#   {
#     name      = "europe-west3"
#     latitude  = 50.1109   # Germany
#     longitude = 8.6821
#     region    = "europe-west3"
#   }
# ]

# Asia Pacific locations example (uncomment and modify as needed)
# weather_monitoring_locations = [
#   {
#     name      = "asia-east1"
#     latitude  = 24.0518   # Taiwan
#     longitude = 120.5162
#     region    = "asia-east1"
#   },
#   {
#     name      = "asia-southeast1"
#     latitude  = 1.3521    # Singapore
#     longitude = 103.8198
#     region    = "asia-southeast1"
#   },
#   {
#     name      = "asia-northeast1"
#     latitude  = 35.6762   # Japan
#     longitude = 139.6503
#     region    = "asia-northeast1"
#   }
# ]

# High-performance cluster configuration example
# cluster_machine_type = "c2-standard-60"  # 60 vCPUs, 240 GB RAM
# cluster_max_nodes    = 50
# cluster_min_nodes    = 5
# enable_spot_instances = false  # Disable for critical workloads

# High-capacity storage configuration example
# filestore_capacity_gb = 2048   # 2 TB
# filestore_tier       = "PREMIUM"  # Higher performance

# Frequent monitoring configuration example
# weather_check_schedule = "*/10 * * * *"  # Every 10 minutes
# storm_monitor_schedule = "*/2 * * * *"   # Every 2 minutes

# High-memory function configuration example
# function_memory_mb      = 1024    # 1 GB
# function_timeout_seconds = 540     # 9 minutes

# Development environment configuration example
# labels = {
#   environment = "development"
#   application = "weather-aware-hpc"
#   team        = "research"
#   cost-center = "r-and-d"
#   managed-by  = "terraform"
# }
# budget_amount = 500
# deletion_protection = false

# =============================================================================
# CONFIGURATION NOTES
# =============================================================================

# 1. PROJECT SETUP:
#    - Ensure your Google Cloud project has billing enabled
#    - Enable required APIs (done automatically by Terraform)
#    - Set up appropriate IAM permissions

# 2. WEATHER API KEY:
#    - Create a project in Google Cloud Console
#    - Enable the Google Maps Platform Weather API
#    - Create an API key with appropriate restrictions

# 3. MACHINE TYPES:
#    - c2-standard-60: High-performance compute (60 vCPUs, 240 GB RAM)
#    - c2-standard-30: Medium performance (30 vCPUs, 120 GB RAM)
#    - n2-standard-32: Balanced performance (32 vCPUs, 128 GB RAM)
#    - n2-highmem-32: High memory (32 vCPUs, 256 GB RAM)

# 4. SPOT INSTANCES:
#    - Enable for 60-91% cost savings
#    - Disable for critical workloads requiring guaranteed availability

# 5. STORAGE TIERS:
#    - STANDARD: General purpose, good performance
#    - PREMIUM: High performance, higher cost
#    - BASIC_HDD: Lower cost, basic performance
#    - BASIC_SSD: Balanced cost and performance

# 6. MONITORING SCHEDULES:
#    - Use standard cron format (minute hour day month day_of_week)
#    - More frequent checks during storm seasons
#    - Balance between responsiveness and API costs

# 7. COST OPTIMIZATION:
#    - Use spot instances when possible
#    - Right-size machine types for workload requirements
#    - Configure appropriate auto-scaling limits
#    - Monitor and optimize based on actual usage

# 8. SECURITY:
#    - Enable IAP for secure access without VPN
#    - Use specific IP ranges instead of 0.0.0.0/0 when possible
#    - Enable deletion protection for production environments
#    - Regularly rotate API keys and secrets