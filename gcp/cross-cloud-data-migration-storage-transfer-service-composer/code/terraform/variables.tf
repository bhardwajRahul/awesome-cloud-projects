# ================================================================
# TERRAFORM VARIABLES CONFIGURATION
# ================================================================
#
# This file defines all input variables for the GCP Cross-Cloud Data Migration
# Infrastructure. Variables are organized by category and include validation
# rules, descriptions, and default values where appropriate.
#
# Categories:
# - Project Configuration
# - Network and Region Settings
# - Storage Configuration
# - Composer Environment Settings
# - Transfer Service Configuration
# - Monitoring and Alerting
# - Source Provider Configuration
#
# Author: Generated by Terraform Recipe Generator
# Version: 1.0
# ================================================================

# ================================================================
# PROJECT CONFIGURATION
# ================================================================

variable "project_id" {
  description = "The GCP project ID where resources will be created"
  type        = string

  validation {
    condition     = can(regex("^[a-z][a-z0-9-]*[a-z0-9]$", var.project_id))
    error_message = "Project ID must start with a letter, contain only lowercase letters, numbers, and hyphens, and end with a letter or number."
  }
}

variable "environment" {
  description = "Environment name (e.g., dev, staging, prod)"
  type        = string
  default     = "dev"

  validation {
    condition     = contains(["dev", "staging", "prod"], var.environment)
    error_message = "Environment must be one of: dev, staging, prod."
  }
}

# ================================================================
# NETWORK AND REGION SETTINGS
# ================================================================

variable "region" {
  description = "The GCP region where resources will be created"
  type        = string
  default     = "us-central1"

  validation {
    condition     = can(regex("^[a-z]+-[a-z0-9]+-[a-z0-9]+$", var.region))
    error_message = "Region must be a valid GCP region format (e.g., us-central1)."
  }
}

variable "zone" {
  description = "The GCP zone where Composer nodes will be created"
  type        = string
  default     = "us-central1-a"

  validation {
    condition     = can(regex("^[a-z]+-[a-z0-9]+-[a-z0-9]+$", var.zone))
    error_message = "Zone must be a valid GCP zone format (e.g., us-central1-a)."
  }
}

# ================================================================
# STORAGE CONFIGURATION
# ================================================================

variable "staging_bucket_name" {
  description = "Base name for the staging bucket (will be suffixed with random string)"
  type        = string
  default     = "migration-staging"

  validation {
    condition     = can(regex("^[a-z0-9][a-z0-9-]*[a-z0-9]$", var.staging_bucket_name))
    error_message = "Bucket name must start and end with a letter or number and contain only lowercase letters, numbers, and hyphens."
  }
}

variable "target_bucket_name" {
  description = "Base name for the target bucket (will be suffixed with random string)"
  type        = string
  default     = "migration-target"

  validation {
    condition     = can(regex("^[a-z0-9][a-z0-9-]*[a-z0-9]$", var.target_bucket_name))
    error_message = "Bucket name must start and end with a letter or number and contain only lowercase letters, numbers, and hyphens."
  }
}

variable "logs_bucket_name" {
  description = "Base name for the logs bucket (will be suffixed with random string)"
  type        = string
  default     = "migration-logs"

  validation {
    condition     = can(regex("^[a-z0-9][a-z0-9-]*[a-z0-9]$", var.logs_bucket_name))
    error_message = "Bucket name must start and end with a letter or number and contain only lowercase letters, numbers, and hyphens."
  }
}

# ================================================================
# COMPOSER ENVIRONMENT SETTINGS
# ================================================================

variable "composer_environment_name" {
  description = "Base name for the Cloud Composer environment (will be suffixed with random string)"
  type        = string
  default     = "data-migration-env"

  validation {
    condition     = can(regex("^[a-z][a-z0-9-]*[a-z0-9]$", var.composer_environment_name))
    error_message = "Composer environment name must start with a letter, contain only lowercase letters, numbers, and hyphens, and end with a letter or number."
  }
}

variable "composer_node_count" {
  description = "Number of nodes in the Cloud Composer environment"
  type        = number
  default     = 3

  validation {
    condition     = var.composer_node_count >= 3 && var.composer_node_count <= 10
    error_message = "Composer node count must be between 3 and 10."
  }
}

variable "composer_machine_type" {
  description = "Machine type for Cloud Composer nodes"
  type        = string
  default     = "n1-standard-1"

  validation {
    condition = contains([
      "n1-standard-1", "n1-standard-2", "n1-standard-4", "n1-standard-8",
      "n1-standard-16", "n1-standard-32", "n1-standard-64", "n1-standard-96",
      "n1-highmem-2", "n1-highmem-4", "n1-highmem-8", "n1-highmem-16",
      "n1-highmem-32", "n1-highmem-64", "n1-highmem-96",
      "n1-highcpu-2", "n1-highcpu-4", "n1-highcpu-8", "n1-highcpu-16",
      "n1-highcpu-32", "n1-highcpu-64", "n1-highcpu-96"
    ], var.composer_machine_type)
    error_message = "Machine type must be a valid GCP machine type."
  }
}

variable "composer_disk_size" {
  description = "Disk size in GB for Cloud Composer nodes"
  type        = number
  default     = 30

  validation {
    condition     = var.composer_disk_size >= 20 && var.composer_disk_size <= 500
    error_message = "Composer disk size must be between 20 and 500 GB."
  }
}

variable "composer_db_machine_type" {
  description = "Machine type for Cloud Composer database"
  type        = string
  default     = "db-n1-standard-2"

  validation {
    condition = contains([
      "db-n1-standard-2", "db-n1-standard-4", "db-n1-standard-8",
      "db-n1-standard-16", "db-n1-standard-32", "db-n1-standard-64",
      "db-n1-highmem-2", "db-n1-highmem-4", "db-n1-highmem-8",
      "db-n1-highmem-16", "db-n1-highmem-32", "db-n1-highmem-64"
    ], var.composer_db_machine_type)
    error_message = "Database machine type must be a valid GCP Cloud SQL machine type."
  }
}

variable "composer_web_server_machine_type" {
  description = "Machine type for Cloud Composer web server"
  type        = string
  default     = "composer-n1-webserver-2"

  validation {
    condition = contains([
      "composer-n1-webserver-2", "composer-n1-webserver-4", "composer-n1-webserver-8"
    ], var.composer_web_server_machine_type)
    error_message = "Web server machine type must be a valid Composer web server machine type."
  }
}

variable "enable_private_endpoint" {
  description = "Enable private endpoint for Cloud Composer environment"
  type        = bool
  default     = false
}

# ================================================================
# TRANSFER SERVICE CONFIGURATION
# ================================================================

variable "create_sample_transfer_job" {
  description = "Whether to create a sample transfer job (set to false for production)"
  type        = bool
  default     = false
}

variable "source_provider" {
  description = "Source cloud provider for data migration"
  type        = string
  default     = "aws"

  validation {
    condition     = contains(["aws", "azure", "gcp"], var.source_provider)
    error_message = "Source provider must be one of: aws, azure, gcp."
  }
}

variable "source_bucket_name" {
  description = "Name of the source bucket/container"
  type        = string
  default     = "your-source-bucket"
}

variable "source_path" {
  description = "Path within the source bucket to transfer from"
  type        = string
  default     = ""
}

variable "target_path" {
  description = "Path within the target bucket to transfer to"
  type        = string
  default     = ""
}

variable "transfer_job_status" {
  description = "Status of the transfer job"
  type        = string
  default     = "DISABLED"

  validation {
    condition     = contains(["ENABLED", "DISABLED"], var.transfer_job_status)
    error_message = "Transfer job status must be either ENABLED or DISABLED."
  }
}

# ================================================================
# AWS SOURCE CONFIGURATION
# ================================================================

variable "aws_access_key_id" {
  description = "AWS access key ID for source bucket access"
  type        = string
  default     = ""
  sensitive   = true
}

variable "aws_secret_access_key" {
  description = "AWS secret access key for source bucket access"
  type        = string
  default     = ""
  sensitive   = true
}

# ================================================================
# AZURE SOURCE CONFIGURATION
# ================================================================

variable "azure_storage_account" {
  description = "Azure storage account name for source data"
  type        = string
  default     = ""
}

variable "azure_container" {
  description = "Azure container name for source data"
  type        = string
  default     = ""
}

variable "azure_sas_token" {
  description = "Azure SAS token for source container access"
  type        = string
  default     = ""
  sensitive   = true
}

# ================================================================
# TRANSFER OPTIONS
# ================================================================

variable "max_time_elapsed_since_last_modification" {
  description = "Maximum time elapsed since last modification for objects to be transferred"
  type        = string
  default     = "86400s" # 24 hours
}

variable "exclude_prefixes" {
  description = "List of prefixes to exclude from transfer"
  type        = list(string)
  default     = []
}

variable "include_prefixes" {
  description = "List of prefixes to include in transfer"
  type        = list(string)
  default     = []
}

variable "overwrite_objects_already_existing_in_sink" {
  description = "Whether to overwrite objects that already exist in the sink"
  type        = bool
  default     = false
}

variable "delete_objects_unique_in_sink" {
  description = "Whether to delete objects that exist only in the sink"
  type        = bool
  default     = false
}

variable "delete_objects_from_source_after_transfer" {
  description = "Whether to delete objects from source after transfer"
  type        = bool
  default     = false
}

# ================================================================
# SCHEDULE CONFIGURATION
# ================================================================

variable "schedule_start_year" {
  description = "Year when the transfer job should start"
  type        = number
  default     = 2024

  validation {
    condition     = var.schedule_start_year >= 2024 && var.schedule_start_year <= 2030
    error_message = "Schedule start year must be between 2024 and 2030."
  }
}

variable "schedule_start_month" {
  description = "Month when the transfer job should start"
  type        = number
  default     = 1

  validation {
    condition     = var.schedule_start_month >= 1 && var.schedule_start_month <= 12
    error_message = "Schedule start month must be between 1 and 12."
  }
}

variable "schedule_start_day" {
  description = "Day when the transfer job should start"
  type        = number
  default     = 1

  validation {
    condition     = var.schedule_start_day >= 1 && var.schedule_start_day <= 31
    error_message = "Schedule start day must be between 1 and 31."
  }
}

variable "schedule_end_year" {
  description = "Year when the transfer job should end (optional)"
  type        = number
  default     = null
}

variable "schedule_end_month" {
  description = "Month when the transfer job should end (optional)"
  type        = number
  default     = null
}

variable "schedule_end_day" {
  description = "Day when the transfer job should end (optional)"
  type        = number
  default     = null
}

variable "schedule_start_hour" {
  description = "Hour when the transfer job should start (optional, 0-23)"
  type        = number
  default     = null

  validation {
    condition     = var.schedule_start_hour == null || (var.schedule_start_hour >= 0 && var.schedule_start_hour <= 23)
    error_message = "Schedule start hour must be between 0 and 23."
  }
}

variable "schedule_start_minute" {
  description = "Minute when the transfer job should start (optional, 0-59)"
  type        = number
  default     = null

  validation {
    condition     = var.schedule_start_minute == null || (var.schedule_start_minute >= 0 && var.schedule_start_minute <= 59)
    error_message = "Schedule start minute must be between 0 and 59."
  }
}

variable "schedule_repeat_interval" {
  description = "Repeat interval for the transfer job (e.g., 86400s for daily)"
  type        = string
  default     = "86400s"

  validation {
    condition     = can(regex("^[0-9]+s$", var.schedule_repeat_interval))
    error_message = "Schedule repeat interval must be in seconds format (e.g., 86400s)."
  }
}

# ================================================================
# MONITORING AND ALERTING
# ================================================================

variable "enable_monitoring_alerts" {
  description = "Enable monitoring alerts for the migration infrastructure"
  type        = bool
  default     = true
}

variable "alert_email" {
  description = "Email address for monitoring alerts"
  type        = string
  default     = ""

  validation {
    condition     = var.alert_email == "" || can(regex("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$", var.alert_email))
    error_message = "Alert email must be a valid email address or empty string."
  }
}

# ================================================================
# FEATURE FLAGS
# ================================================================

variable "enable_versioning" {
  description = "Enable versioning on storage buckets"
  type        = bool
  default     = true
}

variable "enable_lifecycle_rules" {
  description = "Enable lifecycle rules on storage buckets"
  type        = bool
  default     = true
}

variable "enable_uniform_bucket_level_access" {
  description = "Enable uniform bucket-level access on storage buckets"
  type        = bool
  default     = true
}

# ================================================================
# COST OPTIMIZATION
# ================================================================

variable "staging_bucket_lifecycle_age_days" {
  description = "Number of days after which objects in staging bucket are deleted"
  type        = number
  default     = 30

  validation {
    condition     = var.staging_bucket_lifecycle_age_days >= 1 && var.staging_bucket_lifecycle_age_days <= 365
    error_message = "Staging bucket lifecycle age must be between 1 and 365 days."
  }
}

variable "logs_bucket_lifecycle_age_days" {
  description = "Number of days after which logs are deleted"
  type        = number
  default     = 365

  validation {
    condition     = var.logs_bucket_lifecycle_age_days >= 30 && var.logs_bucket_lifecycle_age_days <= 2555 # ~7 years
    error_message = "Logs bucket lifecycle age must be between 30 and 2555 days."
  }
}

# ================================================================
# SECURITY CONFIGURATION
# ================================================================

variable "enable_bucket_encryption" {
  description = "Enable encryption on storage buckets"
  type        = bool
  default     = true
}

variable "kms_key_name" {
  description = "KMS key name for bucket encryption (optional)"
  type        = string
  default     = ""
}

# ================================================================
# ADVANCED CONFIGURATION
# ================================================================

variable "custom_labels" {
  description = "Additional labels to apply to all resources"
  type        = map(string)
  default     = {}

  validation {
    condition     = alltrue([for k, v in var.custom_labels : can(regex("^[a-z][a-z0-9-]*[a-z0-9]$", k))])
    error_message = "Label keys must start with a letter, contain only lowercase letters, numbers, and hyphens, and end with a letter or number."
  }
}

variable "enable_detailed_logging" {
  description = "Enable detailed logging for transfer operations"
  type        = bool
  default     = true
}

variable "pubsub_message_retention_duration" {
  description = "Message retention duration for Pub/Sub subscriptions"
  type        = string
  default     = "1209600s" # 14 days

  validation {
    condition     = can(regex("^[0-9]+s$", var.pubsub_message_retention_duration))
    error_message = "Message retention duration must be in seconds format (e.g., 1209600s)."
  }
}