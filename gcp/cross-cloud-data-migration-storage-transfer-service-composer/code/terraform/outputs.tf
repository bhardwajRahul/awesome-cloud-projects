# ================================================================
# TERRAFORM OUTPUTS CONFIGURATION
# ================================================================
#
# This file defines all output values for the GCP Cross-Cloud Data Migration
# Infrastructure. Outputs are organized by category and provide essential
# information for verification, integration, and operational use.
#
# Categories:
# - Project Information
# - Storage Infrastructure
# - Cloud Composer Environment
# - Transfer Service Configuration
# - Monitoring and Logging
# - IAM and Security
# - Network Configuration
# - Operational Information
#
# Author: Generated by Terraform Recipe Generator
# Version: 1.0
# ================================================================

# ================================================================
# PROJECT INFORMATION
# ================================================================

output "project_id" {
  description = "The GCP project ID where resources were created"
  value       = var.project_id
}

output "project_number" {
  description = "The GCP project number"
  value       = data.google_project.current.number
}

output "region" {
  description = "The GCP region where resources were created"
  value       = var.region
}

output "zone" {
  description = "The GCP zone where Composer nodes were created"
  value       = var.zone
}

output "environment" {
  description = "The environment name (dev, staging, prod)"
  value       = var.environment
}

output "random_suffix" {
  description = "The random suffix used for resource naming"
  value       = random_string.suffix.result
}

# ================================================================
# STORAGE INFRASTRUCTURE
# ================================================================

output "staging_bucket_name" {
  description = "Name of the staging bucket for temporary data processing"
  value       = google_storage_bucket.staging.name
}

output "staging_bucket_url" {
  description = "URL of the staging bucket"
  value       = google_storage_bucket.staging.url
}

output "staging_bucket_self_link" {
  description = "Self-link of the staging bucket"
  value       = google_storage_bucket.staging.self_link
}

output "target_bucket_name" {
  description = "Name of the target bucket for final migrated data"
  value       = google_storage_bucket.target.name
}

output "target_bucket_url" {
  description = "URL of the target bucket"
  value       = google_storage_bucket.target.url
}

output "target_bucket_self_link" {
  description = "Self-link of the target bucket"
  value       = google_storage_bucket.target.self_link
}

output "logs_bucket_name" {
  description = "Name of the logs bucket for storing migration logs"
  value       = google_storage_bucket.logs.name
}

output "logs_bucket_url" {
  description = "URL of the logs bucket"
  value       = google_storage_bucket.logs.url
}

output "logs_bucket_self_link" {
  description = "Self-link of the logs bucket"
  value       = google_storage_bucket.logs.self_link
}

# ================================================================
# CLOUD COMPOSER ENVIRONMENT
# ================================================================

output "composer_environment_name" {
  description = "Name of the Cloud Composer environment"
  value       = google_composer_environment.migration_orchestrator.name
}

output "composer_environment_id" {
  description = "ID of the Cloud Composer environment"
  value       = google_composer_environment.migration_orchestrator.id
}

output "composer_airflow_uri" {
  description = "URI of the Apache Airflow web UI"
  value       = google_composer_environment.migration_orchestrator.config[0].airflow_uri
  sensitive   = true
}

output "composer_gcs_bucket" {
  description = "Google Cloud Storage bucket associated with the Composer environment"
  value       = google_composer_environment.migration_orchestrator.config[0].dag_gcs_prefix
}

output "composer_node_count" {
  description = "Number of nodes in the Cloud Composer environment"
  value       = google_composer_environment.migration_orchestrator.config[0].node_count
}

output "composer_machine_type" {
  description = "Machine type of the Cloud Composer nodes"
  value       = google_composer_environment.migration_orchestrator.config[0].node_config[0].machine_type
}

output "composer_disk_size" {
  description = "Disk size of the Cloud Composer nodes"
  value       = google_composer_environment.migration_orchestrator.config[0].node_config[0].disk_size_gb
}

output "composer_environment_variables" {
  description = "Environment variables configured for the Composer environment"
  value = {
    STAGING_BUCKET           = google_storage_bucket.staging.name
    TARGET_BUCKET            = google_storage_bucket.target.name
    LOGS_BUCKET              = google_storage_bucket.logs.name
    PUBSUB_TOPIC             = google_pubsub_topic.transfer_notifications.name
    TRANSFER_SERVICE_ACCOUNT = google_service_account.transfer_service.email
    PROJECT_ID               = var.project_id
    REGION                   = var.region
  }
}

# ================================================================
# TRANSFER SERVICE CONFIGURATION
# ================================================================

output "transfer_service_account_email" {
  description = "Email address of the Storage Transfer Service account"
  value       = google_service_account.transfer_service.email
}

output "transfer_service_account_unique_id" {
  description = "Unique ID of the Storage Transfer Service account"
  value       = google_service_account.transfer_service.unique_id
}

output "storage_transfer_service_account_email" {
  description = "Email address of the Google Storage Transfer Service account"
  value       = data.google_storage_transfer_project_service_account.default.email
}

output "transfer_job_name" {
  description = "Name of the Storage Transfer job (if created)"
  value       = var.create_sample_transfer_job ? google_storage_transfer_job.cross_cloud_migration[0].name : null
}

output "transfer_job_status" {
  description = "Status of the Storage Transfer job"
  value       = var.transfer_job_status
}

output "transfer_job_creation_time" {
  description = "Creation time of the Storage Transfer job (if created)"
  value       = var.create_sample_transfer_job ? google_storage_transfer_job.cross_cloud_migration[0].creation_time : null
}

# ================================================================
# PUB/SUB MESSAGING
# ================================================================

output "pubsub_topic_name" {
  description = "Name of the Pub/Sub topic for transfer notifications"
  value       = google_pubsub_topic.transfer_notifications.name
}

output "pubsub_topic_id" {
  description = "ID of the Pub/Sub topic for transfer notifications"
  value       = google_pubsub_topic.transfer_notifications.id
}

output "pubsub_subscription_name" {
  description = "Name of the Pub/Sub subscription for transfer events"
  value       = google_pubsub_subscription.transfer_events.name
}

output "pubsub_subscription_id" {
  description = "ID of the Pub/Sub subscription for transfer events"
  value       = google_pubsub_subscription.transfer_events.id
}

# ================================================================
# MONITORING AND LOGGING
# ================================================================

output "storage_transfer_log_sink_name" {
  description = "Name of the log sink for Storage Transfer Service"
  value       = google_logging_project_sink.storage_transfer_sink.name
}

output "storage_transfer_log_sink_writer_identity" {
  description = "Writer identity for the Storage Transfer log sink"
  value       = google_logging_project_sink.storage_transfer_sink.writer_identity
}

output "composer_log_sink_name" {
  description = "Name of the log sink for Cloud Composer"
  value       = google_logging_project_sink.composer_sink.name
}

output "composer_log_sink_writer_identity" {
  description = "Writer identity for the Cloud Composer log sink"
  value       = google_logging_project_sink.composer_sink.writer_identity
}

output "monitoring_alert_policy_names" {
  description = "Names of the monitoring alert policies (if enabled)"
  value = var.enable_monitoring_alerts ? [
    google_monitoring_alert_policy.transfer_job_failures[0].name,
    google_monitoring_alert_policy.composer_health[0].name
  ] : []
}

output "notification_channel_id" {
  description = "ID of the email notification channel (if configured)"
  value       = var.alert_email != "" ? google_monitoring_notification_channel.email_alerts[0].id : null
}

# ================================================================
# IAM AND SECURITY
# ================================================================

output "iam_roles_assigned" {
  description = "IAM roles assigned to the transfer service account"
  value = [
    "roles/storagetransfer.admin",
    "roles/storage.admin"
  ]
}

output "bucket_iam_members" {
  description = "IAM members with access to storage buckets"
  value = {
    staging_bucket = google_storage_bucket_iam_member.staging_bucket_admin.member
    target_bucket  = google_storage_bucket_iam_member.target_bucket_admin.member
    logs_bucket    = google_storage_bucket_iam_member.logs_bucket_admin.member
  }
}

# ================================================================
# NETWORK CONFIGURATION
# ================================================================

output "composer_private_endpoint_enabled" {
  description = "Whether private endpoint is enabled for Composer"
  value       = var.enable_private_endpoint
}

output "composer_oauth_scopes" {
  description = "OAuth scopes configured for Composer nodes"
  value = [
    "https://www.googleapis.com/auth/cloud-platform",
    "https://www.googleapis.com/auth/pubsub",
    "https://www.googleapis.com/auth/storage-rw"
  ]
}

# ================================================================
# OPERATIONAL INFORMATION
# ================================================================

output "migration_pipeline_endpoints" {
  description = "Key endpoints for the migration pipeline"
  value = {
    airflow_ui       = google_composer_environment.migration_orchestrator.config[0].airflow_uri
    composer_dags    = google_composer_environment.migration_orchestrator.config[0].dag_gcs_prefix
    staging_bucket   = "gs://${google_storage_bucket.staging.name}"
    target_bucket    = "gs://${google_storage_bucket.target.name}"
    logs_bucket      = "gs://${google_storage_bucket.logs.name}"
    pubsub_topic     = google_pubsub_topic.transfer_notifications.id
    pubsub_subscription = google_pubsub_subscription.transfer_events.id
  }
  sensitive = true
}

output "deployment_commands" {
  description = "Useful commands for managing the deployment"
  value = {
    access_airflow_ui = "gcloud composer environments describe ${google_composer_environment.migration_orchestrator.name} --location ${var.region} --format='get(config.airflowUri)'"
    view_logs        = "gcloud logging read 'resource.type=\"storage_transfer_job\"' --limit 50 --format json"
    check_buckets    = "gsutil ls -L -b gs://${google_storage_bucket.staging.name} gs://${google_storage_bucket.target.name}"
    view_transfer_jobs = "gcloud transfer jobs list"
    monitor_pubsub   = "gcloud pubsub subscriptions pull ${google_pubsub_subscription.transfer_events.name} --auto-ack --limit=5"
  }
}

output "cost_optimization_info" {
  description = "Cost optimization information for the deployment"
  value = {
    staging_bucket_lifecycle_days = var.staging_bucket_lifecycle_age_days
    logs_bucket_lifecycle_days    = var.logs_bucket_lifecycle_age_days
    composer_node_count          = var.composer_node_count
    composer_machine_type        = var.composer_machine_type
    storage_classes = {
      staging = google_storage_bucket.staging.storage_class
      target  = google_storage_bucket.target.storage_class
      logs    = google_storage_bucket.logs.storage_class
    }
  }
}

# ================================================================
# CONFIGURATION SUMMARY
# ================================================================

output "configuration_summary" {
  description = "Summary of the deployed configuration"
  value = {
    project_id                    = var.project_id
    region                       = var.region
    environment                  = var.environment
    source_provider              = var.source_provider
    composer_environment_created = true
    transfer_job_created         = var.create_sample_transfer_job
    monitoring_enabled           = var.enable_monitoring_alerts
    private_endpoint_enabled     = var.enable_private_endpoint
    versioning_enabled           = var.enable_versioning
    lifecycle_rules_enabled      = var.enable_lifecycle_rules
    encryption_enabled           = var.enable_bucket_encryption
    detailed_logging_enabled     = var.enable_detailed_logging
  }
}

# ================================================================
# NEXT STEPS
# ================================================================

output "next_steps" {
  description = "Next steps for completing the migration setup"
  value = {
    "1_access_airflow" = "Access the Airflow UI using the airflow_uri output value"
    "2_upload_dags"    = "Upload your migration DAGs to the Composer environment"
    "3_configure_source" = "Configure source credentials and update transfer job configuration"
    "4_test_migration" = "Test the migration with a small dataset first"
    "5_monitor_alerts" = "Set up monitoring and alerts for production use"
    "6_schedule_jobs"  = "Schedule transfer jobs according to your requirements"
  }
}

# ================================================================
# TROUBLESHOOTING
# ================================================================

output "troubleshooting_commands" {
  description = "Commands for troubleshooting common issues"
  value = {
    check_composer_health = "gcloud composer environments describe ${google_composer_environment.migration_orchestrator.name} --location ${var.region} --format='get(state)'"
    view_composer_logs   = "gcloud logging read 'resource.type=\"gce_instance\" AND resource.labels.instance_name:\"${google_composer_environment.migration_orchestrator.name}\"' --limit 20"
    check_transfer_status = "gcloud transfer operations list --format='table(name,status,metadata.type)'"
    test_bucket_access   = "gsutil ls gs://${google_storage_bucket.staging.name}"
    check_pubsub_messages = "gcloud pubsub topics list-subscriptions ${google_pubsub_topic.transfer_notifications.name}"
  }
}

# ================================================================
# RESOURCE INVENTORY
# ================================================================

output "resource_inventory" {
  description = "Complete inventory of created resources"
  value = {
    storage_buckets = {
      staging = google_storage_bucket.staging.name
      target  = google_storage_bucket.target.name
      logs    = google_storage_bucket.logs.name
    }
    composer_environment = google_composer_environment.migration_orchestrator.name
    service_accounts = {
      transfer_service = google_service_account.transfer_service.email
    }
    pubsub_resources = {
      topic        = google_pubsub_topic.transfer_notifications.name
      subscription = google_pubsub_subscription.transfer_events.name
    }
    logging_sinks = {
      transfer_sink = google_logging_project_sink.storage_transfer_sink.name
      composer_sink = google_logging_project_sink.composer_sink.name
    }
    monitoring_policies = var.enable_monitoring_alerts ? {
      transfer_failures = google_monitoring_alert_policy.transfer_job_failures[0].name
      composer_health   = google_monitoring_alert_policy.composer_health[0].name
    } : {}
  }
}