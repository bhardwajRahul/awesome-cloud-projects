# Infrastructure Manager Configuration for Continuous Performance Optimization
# This configuration deploys a complete performance optimization system using:
# - Cloud Source Repositories for version control
# - Cloud Build Triggers for automated CI/CD
# - Cloud Run for scalable application hosting
# - Cloud Monitoring for performance alerting
# - Notification channels for automated responses

# Define deployment metadata
metadata:
  name: performance-optimization-system
  labels:
    purpose: continuous-performance-optimization
    component: devops-monitoring
    version: "1.0"

# Input variables for customization
imports:
  - name: project_id
    type: string
    description: "Google Cloud Project ID"
    required: true
  
  - name: region
    type: string
    description: "GCP region for resource deployment"
    default: "us-central1"
  
  - name: service_name
    type: string
    description: "Name for the Cloud Run service"
    default: "performance-app"
  
  - name: repository_name
    type: string
    description: "Name for the Cloud Source Repository"
    default: "app-performance-repo"
  
  - name: trigger_name
    type: string
    description: "Name for the Cloud Build trigger"
    default: "perf-optimization-trigger"
  
  - name: notification_email
    type: string
    description: "Email address for performance alerts"
    required: true
  
  - name: performance_threshold_seconds
    type: number
    description: "Response time threshold in seconds for alerts"
    default: 1.0
  
  - name: memory_threshold_percent
    type: number
    description: "Memory utilization threshold percentage for alerts"
    default: 80

# Define the infrastructure resources
resources:
  # Enable required Google Cloud APIs
  - name: enable-apis
    type: gcp-types/servicemanagement-v1:servicemanagement.services.enable
    properties:
      serviceName: cloudbuild.googleapis.com
      consumerId: project:$(ref.project_id)
    metadata:
      dependsOn: []

  - name: enable-monitoring-api
    type: gcp-types/servicemanagement-v1:servicemanagement.services.enable
    properties:
      serviceName: monitoring.googleapis.com
      consumerId: project:$(ref.project_id)
    metadata:
      dependsOn: []

  - name: enable-sourcerepo-api
    type: gcp-types/servicemanagement-v1:servicemanagement.services.enable
    properties:
      serviceName: sourcerepo.googleapis.com
      consumerId: project:$(ref.project_id)
    metadata:
      dependsOn: []

  - name: enable-run-api
    type: gcp-types/servicemanagement-v1:servicemanagement.services.enable
    properties:
      serviceName: run.googleapis.com
      consumerId: project:$(ref.project_id)
    metadata:
      dependsOn: []

  - name: enable-containerregistry-api
    type: gcp-types/servicemanagement-v1:servicemanagement.services.enable
    properties:
      serviceName: containerregistry.googleapis.com
      consumerId: project:$(ref.project_id)
    metadata:
      dependsOn: []

  # Create Cloud Source Repository for version control
  - name: performance-source-repo
    type: gcp-types/sourcerepo-v1:projects.repos
    properties:
      parent: projects/$(ref.project_id)
      repoId: $(ref.repository_name)
      name: projects/$(ref.project_id)/repos/$(ref.repository_name)
    metadata:
      dependsOn:
        - enable-sourcerepo-api
    annotations:
      description: "Source repository for performance optimization application"

  # Create Cloud Build Trigger for automated deployments
  - name: performance-build-trigger
    type: gcp-types/cloudbuild-v1:projects.triggers
    properties:
      parent: projects/$(ref.project_id)
      name: $(ref.trigger_name)
      description: "Automated performance optimization build trigger"
      disabled: false
      
      # Configure trigger source
      triggerTemplate:
        projectId: $(ref.project_id)
        repoName: $(ref.repository_name)
        branchName: ".*"
      
      # Build configuration
      build:
        # Build steps for performance optimization
        steps:
          # Build optimized container image
          - name: 'gcr.io/cloud-builders/docker'
            args: 
              - 'build'
              - '-t'
              - 'gcr.io/$(ref.project_id)/$(ref.service_name):$BUILD_ID'
              - '.'
            id: 'build-image'
          
          # Push image to Container Registry
          - name: 'gcr.io/cloud-builders/docker'
            args: 
              - 'push'
              - 'gcr.io/$(ref.project_id)/$(ref.service_name):$BUILD_ID'
            id: 'push-image'
            waitFor: ['build-image']
          
          # Deploy to Cloud Run with performance optimizations
          - name: 'gcr.io/cloud-builders/gcloud'
            args:
              - 'run'
              - 'deploy'
              - '$(ref.service_name)'
              - '--image=gcr.io/$(ref.project_id)/$(ref.service_name):$BUILD_ID'
              - '--region=$(ref.region)'
              - '--platform=managed'
              - '--allow-unauthenticated'
              - '--memory=512Mi'
              - '--cpu=1'
              - '--concurrency=80'
              - '--max-instances=10'
              - '--min-instances=1'
              - '--port=8080'
              - '--set-env-vars=NODE_ENV=production'
            id: 'deploy-service'
            waitFor: ['push-image']
          
          # Verify deployment with performance check
          - name: 'gcr.io/cloud-builders/curl'
            args:
              - '-f'
              - '-s'
              - '-o'
              - '/dev/null'
              - '-w'
              - 'Deploy verification: %{http_code} - Response time: %{time_total}s'
              - 'https://$(ref.service_name)-$(ref.region)-$(ref.project_id).a.run.app/health'
            id: 'verify-deployment'
            waitFor: ['deploy-service']
        
        # Build configuration options
        options:
          logging: CLOUD_LOGGING_ONLY
          machineType: 'E2_HIGHCPU_8'
        
        # Build timeout
        timeout: '600s'
        
        # Substitution variables
        substitutions:
          _SERVICE_NAME: $(ref.service_name)
          _REGION: $(ref.region)
    
    metadata:
      dependsOn:
        - enable-apis
        - performance-source-repo
    annotations:
      description: "Build trigger for automated performance optimization deployments"

  # Create notification channel for performance alerts
  - name: performance-notification-channel
    type: gcp-types/monitoring-v1:projects.notificationChannels
    properties:
      parent: projects/$(ref.project_id)
      type: "email"
      displayName: "Performance Optimization Alerts"
      description: "Email notifications for performance threshold breaches"
      labels:
        email_address: $(ref.notification_email)
      userLabels:
        purpose: "performance-optimization"
        component: "automated-alerts"
      enabled: true
    metadata:
      dependsOn:
        - enable-monitoring-api
    annotations:
      description: "Email notification channel for performance alerts"

  # Create webhook notification channel for automated build triggers
  - name: webhook-notification-channel
    type: gcp-types/monitoring-v1:projects.notificationChannels
    properties:
      parent: projects/$(ref.project_id)
      type: "webhook_tokenauth"
      displayName: "Performance Optimization Webhook"
      description: "Webhook to trigger performance optimization builds"
      labels:
        url: "https://cloudbuild.googleapis.com/v1/projects/$(ref.project_id)/triggers/$(ref.performance-build-trigger.name):webhook"
      userLabels:
        purpose: "performance-optimization"
        component: "automated-builds"
      enabled: true
    metadata:
      dependsOn:
        - enable-monitoring-api
        - performance-build-trigger
    annotations:
      description: "Webhook notification channel for automated build triggering"

  # Create alerting policy for high response time
  - name: high-response-time-policy
    type: gcp-types/monitoring-v1:projects.alertPolicies
    properties:
      parent: projects/$(ref.project_id)
      displayName: "High Response Time Alert"
      documentation:
        content: "Triggers performance optimization builds when response time exceeds $(ref.performance_threshold_seconds) seconds"
        mimeType: "text/markdown"
      
      # Alert conditions
      conditions:
        - displayName: "High Response Time Condition"
          conditionThreshold:
            filter: 'resource.type="cloud_run_revision" AND metric.type="run.googleapis.com/request_latencies"'
            comparison: "COMPARISON_GREATER_THAN"
            thresholdValue: $(ref.performance_threshold_seconds)
            duration: "300s"
            aggregations:
              - alignmentPeriod: "60s"
                perSeriesAligner: "ALIGN_MEAN"
                crossSeriesReducer: "REDUCE_MEAN"
                groupByFields:
                  - "resource.label.service_name"
      
      # Notification channels
      notificationChannels:
        - $(ref.performance-notification-channel.name)
        - $(ref.webhook-notification-channel.name)
      
      # Alert policy configuration
      combiner: "OR"
      enabled: true
      
      # Alert strategy
      alertStrategy:
        autoClose: "86400s"  # 24 hours
        notificationRateLimit:
          period: "300s"  # 5 minutes
    
    metadata:
      dependsOn:
        - enable-monitoring-api
        - performance-notification-channel
        - webhook-notification-channel
    annotations:
      description: "Alerting policy for high response time detection and automated optimization"

  # Create alerting policy for high memory usage
  - name: high-memory-usage-policy
    type: gcp-types/monitoring-v1:projects.alertPolicies
    properties:
      parent: projects/$(ref.project_id)
      displayName: "High Memory Usage Alert"
      documentation:
        content: "Triggers performance optimization builds when memory usage exceeds $(ref.memory_threshold_percent)%"
        mimeType: "text/markdown"
      
      # Alert conditions
      conditions:
        - displayName: "High Memory Usage Condition"
          conditionThreshold:
            filter: 'resource.type="cloud_run_revision" AND metric.type="run.googleapis.com/container/memory/utilizations"'
            comparison: "COMPARISON_GREATER_THAN"
            thresholdValue: $(ref.memory_threshold_percent)
            duration: "180s"
            aggregations:
              - alignmentPeriod: "60s"
                perSeriesAligner: "ALIGN_MEAN"
                crossSeriesReducer: "REDUCE_MEAN"
                groupByFields:
                  - "resource.label.service_name"
      
      # Notification channels
      notificationChannels:
        - $(ref.performance-notification-channel.name)
        - $(ref.webhook-notification-channel.name)
      
      # Alert policy configuration
      combiner: "OR"
      enabled: true
      
      # Alert strategy
      alertStrategy:
        autoClose: "86400s"  # 24 hours
        notificationRateLimit:
          period: "300s"  # 5 minutes
    
    metadata:
      dependsOn:
        - enable-monitoring-api
        - performance-notification-channel
        - webhook-notification-channel
    annotations:
      description: "Alerting policy for high memory usage detection and automated optimization"

  # Create a custom dashboard for performance monitoring
  - name: performance-dashboard
    type: gcp-types/monitoring-v1:projects.dashboards
    properties:
      parent: projects/$(ref.project_id)
      displayName: "Performance Optimization Dashboard"
      
      # Dashboard configuration
      mosaicLayout:
        tiles:
          # Response time chart
          - width: 6
            height: 4
            xPos: 0
            yPos: 0
            widget:
              title: "Cloud Run Response Time"
              xyChart:
                dataSets:
                  - timeSeriesQuery:
                      timeSeriesFilter:
                        filter: 'resource.type="cloud_run_revision" AND metric.type="run.googleapis.com/request_latencies"'
                        aggregation:
                          alignmentPeriod: "60s"
                          perSeriesAligner: "ALIGN_MEAN"
                          crossSeriesReducer: "REDUCE_MEAN"
                          groupByFields:
                            - "resource.label.service_name"
                    plotType: "LINE"
                    targetAxis: "Y1"
                yAxis:
                  label: "Response Time (seconds)"
                  scale: "LINEAR"
                timeshiftDuration: "0s"
                xAxis:
                  scale: "TIME"
          
          # Memory utilization chart
          - width: 6
            height: 4
            xPos: 6
            yPos: 0
            widget:
              title: "Cloud Run Memory Utilization"
              xyChart:
                dataSets:
                  - timeSeriesQuery:
                      timeSeriesFilter:
                        filter: 'resource.type="cloud_run_revision" AND metric.type="run.googleapis.com/container/memory/utilizations"'
                        aggregation:
                          alignmentPeriod: "60s"
                          perSeriesAligner: "ALIGN_MEAN"
                          crossSeriesReducer: "REDUCE_MEAN"
                          groupByFields:
                            - "resource.label.service_name"
                    plotType: "LINE"
                    targetAxis: "Y1"
                yAxis:
                  label: "Memory Utilization (%)"
                  scale: "LINEAR"
                timeshiftDuration: "0s"
                xAxis:
                  scale: "TIME"
          
          # Request count chart
          - width: 6
            height: 4
            xPos: 0
            yPos: 4
            widget:
              title: "Cloud Run Request Count"
              xyChart:
                dataSets:
                  - timeSeriesQuery:
                      timeSeriesFilter:
                        filter: 'resource.type="cloud_run_revision" AND metric.type="run.googleapis.com/request_count"'
                        aggregation:
                          alignmentPeriod: "60s"
                          perSeriesAligner: "ALIGN_RATE"
                          crossSeriesReducer: "REDUCE_SUM"
                          groupByFields:
                            - "resource.label.service_name"
                    plotType: "LINE"
                    targetAxis: "Y1"
                yAxis:
                  label: "Requests per Second"
                  scale: "LINEAR"
                timeshiftDuration: "0s"
                xAxis:
                  scale: "TIME"
          
          # Build history chart
          - width: 6
            height: 4
            xPos: 6
            yPos: 4
            widget:
              title: "Cloud Build Success Rate"
              xyChart:
                dataSets:
                  - timeSeriesQuery:
                      timeSeriesFilter:
                        filter: 'resource.type="build" AND metric.type="cloudbuild.googleapis.com/build/count"'
                        aggregation:
                          alignmentPeriod: "300s"
                          perSeriesAligner: "ALIGN_RATE"
                          crossSeriesReducer: "REDUCE_SUM"
                          groupByFields:
                            - "metric.label.status"
                    plotType: "STACKED_BAR"
                    targetAxis: "Y1"
                yAxis:
                  label: "Builds per 5 minutes"
                  scale: "LINEAR"
                timeshiftDuration: "0s"
                xAxis:
                  scale: "TIME"
    
    metadata:
      dependsOn:
        - enable-monitoring-api
    annotations:
      description: "Comprehensive dashboard for monitoring performance optimization metrics"

  # Create a log sink for performance metrics
  - name: performance-log-sink
    type: gcp-types/logging-v2:projects.sinks
    properties:
      parent: projects/$(ref.project_id)
      name: "performance-metrics-sink"
      description: "Log sink for performance metrics and build events"
      
      # Filter for performance-related logs
      filter: |
        (resource.type="cloud_run_revision" AND severity>=INFO) OR
        (resource.type="build" AND severity>=INFO) OR
        (logName="projects/$(ref.project_id)/logs/performance-metrics") OR
        (logName="projects/$(ref.project_id)/logs/performance-summary")
      
      # Destination for log export (Cloud Logging by default)
      destination: "logging.googleapis.com/projects/$(ref.project_id)/logs/performance-optimization"
      
      # Include children resources
      includeChildren: true
    
    metadata:
      dependsOn:
        - enable-monitoring-api
    annotations:
      description: "Log sink for centralized performance metrics collection"

# Define outputs for verification and integration
outputs:
  - name: source_repository_url
    value: "https://source.developers.google.com/p/$(ref.project_id)/r/$(ref.repository_name)"
    description: "URL to the Cloud Source Repository"

  - name: build_trigger_id
    value: $(ref.performance-build-trigger.id)
    description: "ID of the Cloud Build trigger"

  - name: build_trigger_name
    value: $(ref.performance-build-trigger.name)
    description: "Name of the Cloud Build trigger"

  - name: notification_channel_email
    value: $(ref.performance-notification-channel.name)
    description: "Email notification channel resource name"

  - name: notification_channel_webhook
    value: $(ref.webhook-notification-channel.name)
    description: "Webhook notification channel resource name"

  - name: response_time_policy_name
    value: $(ref.high-response-time-policy.name)
    description: "High response time alerting policy resource name"

  - name: memory_usage_policy_name
    value: $(ref.high-memory-usage-policy.name)
    description: "High memory usage alerting policy resource name"

  - name: dashboard_url
    value: "https://console.cloud.google.com/monitoring/dashboards/custom/$(ref.performance-dashboard.name)?project=$(ref.project_id)"
    description: "URL to the performance monitoring dashboard"

  - name: log_sink_name
    value: $(ref.performance-log-sink.name)
    description: "Performance metrics log sink resource name"

  - name: expected_service_url
    value: "https://$(ref.service_name)-$(ref.region)-$(ref.project_id).a.run.app"
    description: "Expected URL for the deployed Cloud Run service"

  - name: deployment_summary
    value: |
      Performance Optimization System Deployed Successfully!
      
      Components Created:
      - Cloud Source Repository: $(ref.repository_name)
      - Cloud Build Trigger: $(ref.trigger_name)
      - Email Notification Channel: $(ref.notification_email)
      - Webhook Notification Channel: Automated build triggering
      - Response Time Alert Policy: Threshold $(ref.performance_threshold_seconds)s
      - Memory Usage Alert Policy: Threshold $(ref.memory_threshold_percent)%
      - Performance Dashboard: Comprehensive monitoring
      - Log Sink: Centralized performance metrics
      
      Next Steps:
      1. Clone the source repository and add your application code
      2. Commit and push to trigger the initial build
      3. Monitor the dashboard for performance metrics
      4. Test the alerting system with load tests
      
      Repository URL: https://source.developers.google.com/p/$(ref.project_id)/r/$(ref.repository_name)
      Dashboard URL: https://console.cloud.google.com/monitoring/dashboards/custom/$(ref.performance-dashboard.name)?project=$(ref.project_id)
    description: "Complete deployment summary with next steps"