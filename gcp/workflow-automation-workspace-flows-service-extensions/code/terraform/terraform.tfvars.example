# Example Terraform Variables Configuration
# Copy this file to terraform.tfvars and customize the values for your deployment

# ===================================
# REQUIRED VARIABLES
# ===================================

# Google Cloud Project ID where resources will be created
project_id = "your-project-id-here"

# ===================================
# BASIC CONFIGURATION
# ===================================

# Google Cloud region for regional resources
region = "us-central1"

# Google Cloud zone for zonal resources
zone = "us-central1-a"

# Environment name (dev, staging, prod)
environment = "dev"

# Prefix for all resource names to ensure uniqueness
resource_name_prefix = "workflow-automation"

# ===================================
# STORAGE CONFIGURATION
# ===================================

# Location for the Cloud Storage bucket (multi-region or region)
# Options: "US", "EU", "ASIA", or specific regions like "us-central1"
storage_bucket_location = "US"

# Storage class for the Cloud Storage bucket
# Options: "STANDARD", "NEARLINE", "COLDLINE", "ARCHIVE"
storage_bucket_class = "STANDARD"

# ===================================
# CLOUD FUNCTIONS CONFIGURATION
# ===================================

# Memory allocation for Cloud Functions (in MB)
# Range: 128-8192 MB
function_memory = 512

# Timeout for Cloud Functions (in seconds)
# Range: 60-3600 seconds
function_timeout = 540

# ===================================
# PUB/SUB CONFIGURATION
# ===================================

# Message retention duration for Pub/Sub subscriptions
# Format: number followed by 's' for seconds (e.g., "604800s" = 7 days)
pubsub_message_retention_duration = "604800s"

# Acknowledgment deadline for Pub/Sub subscriptions (in seconds)
# Range: 10-600 seconds
pubsub_ack_deadline_seconds = 600

# Maximum delivery attempts for Pub/Sub dead letter policy
# Range: 1-100 attempts
max_delivery_attempts = 5

# ===================================
# INTEGRATION SETTINGS
# ===================================

# Google Workspace domain for integration (optional)
workspace_domain = "yourcompany.com"

# Email address for workflow notifications
notification_email = "admin@yourcompany.com"

# ===================================
# FEATURE FLAGS
# ===================================

# Enable Cloud Monitoring for the workflow solution
enable_monitoring = true

# Enable Cloud Logging for the workflow solution
enable_logging = true

# Enable dead letter queue for failed message processing
enable_dead_letter = true

# ===================================
# GOOGLE CLOUD APIS TO ENABLE
# ===================================

# List of Google Cloud APIs to enable
# You can customize this list based on your specific needs
enable_apis = [
  "cloudfunctions.googleapis.com",
  "pubsub.googleapis.com",
  "storage.googleapis.com",
  "serviceextensions.googleapis.com",
  "admin.googleapis.com",
  "cloudbuild.googleapis.com",
  "eventarc.googleapis.com",
  "run.googleapis.com",
  "monitoring.googleapis.com",
  "logging.googleapis.com"
]

# ===================================
# IAM ROLES FOR SERVICE ACCOUNT
# ===================================

# List of IAM roles to assign to the service account
# Customize based on your security requirements
service_account_roles = [
  "roles/cloudfunctions.developer",
  "roles/pubsub.editor",
  "roles/storage.objectAdmin",
  "roles/monitoring.metricWriter",
  "roles/logging.logWriter",
  "roles/eventarc.eventReceiver"
]

# ===================================
# RESOURCE LABELS
# ===================================

# Labels to apply to all resources for organization and cost tracking
labels = {
  environment    = "dev"
  project        = "workflow-automation"
  managed-by     = "terraform"
  solution       = "workspace-flows"
  team           = "platform-engineering"
  cost-center    = "engineering"
  owner          = "admin@yourcompany.com"
}

# ===================================
# ENVIRONMENT-SPECIFIC EXAMPLES
# ===================================

# Development Environment Example:
# environment = "dev"
# function_memory = 256
# enable_monitoring = true
# enable_logging = true
# max_delivery_attempts = 3

# Staging Environment Example:
# environment = "staging"
# function_memory = 512
# enable_monitoring = true
# enable_logging = true
# max_delivery_attempts = 5

# Production Environment Example:
# environment = "prod"
# function_memory = 1024
# function_timeout = 540
# enable_monitoring = true
# enable_logging = true
# enable_dead_letter = true
# pubsub_message_retention_duration = "2678400s"  # 31 days
# max_delivery_attempts = 5

# ===================================
# SECURITY CONSIDERATIONS
# ===================================

# For production deployments, consider:
# 1. Using a dedicated service account with minimal permissions
# 2. Implementing VPC Service Controls
# 3. Enabling audit logging
# 4. Using Cloud KMS for encryption
# 5. Setting up proper network security rules

# ===================================
# COST OPTIMIZATION
# ===================================

# For cost optimization, consider:
# 1. Adjusting function memory based on actual usage
# 2. Setting appropriate storage lifecycle policies
# 3. Using sustained use discounts
# 4. Monitoring and alerting on costs
# 5. Regular cleanup of unused resources