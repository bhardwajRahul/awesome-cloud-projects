# Infrastructure Manager Configuration for Multi-Cluster Service Mesh Governance
# This configuration deploys Anthos Service Mesh with Config Management across multiple GKE clusters
# providing enterprise-grade service mesh governance, security policies, and automated compliance

# Input parameters for customization
inputs:
  - name: project_id
    description: "Google Cloud project ID where resources will be created"
    type: string
    required: true
  
  - name: region
    description: "Primary region for resource deployment"
    type: string
    default: "us-central1"
  
  - name: zone
    description: "Primary zone for cluster deployment"
    type: string
    default: "us-central1-a"
  
  - name: prod_cluster_name
    description: "Name for the production GKE cluster"
    type: string
    default: "prod-cluster"
  
  - name: staging_cluster_name
    description: "Name for the staging GKE cluster"
    type: string
    default: "staging-cluster"
  
  - name: dev_cluster_name
    description: "Name for the development GKE cluster"
    type: string
    default: "dev-cluster"
  
  - name: artifact_registry_repo
    description: "Name for the Artifact Registry repository"
    type: string
    default: "secure-apps"
  
  - name: config_repo_name
    description: "Name for the source repository for config management"
    type: string
    default: "anthos-config-management"

# Resource configuration
resources:
  # Enable required Google Cloud APIs
  - name: enable-apis
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/${project_id}/services/container.googleapis.com
      parent: projects/${project_id}
    metadata:
      dependsOn: []
  
  - name: enable-mesh-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/${project_id}/services/mesh.googleapis.com
      parent: projects/${project_id}
    metadata:
      dependsOn: [enable-apis]
  
  - name: enable-gkehub-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/${project_id}/services/gkehub.googleapis.com
      parent: projects/${project_id}
    metadata:
      dependsOn: [enable-apis]
  
  - name: enable-sourcerepo-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/${project_id}/services/sourcerepo.googleapis.com
      parent: projects/${project_id}
    metadata:
      dependsOn: [enable-apis]
  
  - name: enable-binaryauth-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/${project_id}/services/binaryauthorization.googleapis.com
      parent: projects/${project_id}
    metadata:
      dependsOn: [enable-apis]
  
  - name: enable-artifactregistry-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/${project_id}/services/artifactregistry.googleapis.com
      parent: projects/${project_id}
    metadata:
      dependsOn: [enable-apis]

  # Artifact Registry for secure container images
  - name: artifact-registry
    type: gcp-types/artifactregistry-v1:projects.locations.repositories
    properties:
      parent: projects/${project_id}/locations/${region}
      repositoryId: ${artifact_registry_repo}
      repository:
        format: DOCKER
        description: "Secure container images repository for service mesh applications"
        dockerConfig:
          immutableTags: true
        labels:
          environment: "multi-env"
          purpose: "service-mesh"
    metadata:
      dependsOn: [enable-artifactregistry-api]

  # Source repository for Anthos Config Management
  - name: config-management-repo
    type: gcp-types/sourcerepo-v1:projects.repos
    properties:
      name: projects/${project_id}/repos/${config_repo_name}
      repo:
        name: projects/${project_id}/repos/${config_repo_name}
        size: "0"
        url: "https://source.developers.google.com/p/${project_id}/r/${config_repo_name}"
    metadata:
      dependsOn: [enable-sourcerepo-api]

  # Production GKE Cluster with enhanced security and service mesh readiness
  - name: production-cluster
    type: gcp-types/container-v1:projects.zones.clusters
    properties:
      parent: projects/${project_id}/locations/${zone}
      cluster:
        name: ${prod_cluster_name}
        description: "Production GKE cluster with Anthos Service Mesh"
        initialNodeCount: 3
        nodeConfig:
          machineType: e2-standard-4
          diskType: pd-ssd
          diskSizeGb: 100
          serviceAccount: default
          oauthScopes:
            - "https://www.googleapis.com/auth/cloud-platform"
          metadata:
            disable-legacy-endpoints: "true"
          labels:
            env: "production"
            mesh: "enabled"
          tags: ["production", "service-mesh"]
        masterAuth:
          clientCertificateConfig:
            issueClientCertificate: false
        loggingService: logging.googleapis.com/kubernetes
        monitoringService: monitoring.googleapis.com/kubernetes
        addonsConfig:
          networkPolicyConfig:
            disabled: false
          cloudRunConfig:
            disabled: false
        networkPolicy:
          enabled: true
          provider: CALICO
        ipAllocationPolicy:
          useIpAliases: true
          createSubnetwork: true
        workloadIdentityConfig:
          workloadPool: ${project_id}.svc.id.goog
        binaryAuthorization:
          enabled: true
          evaluationMode: PROJECT_SINGLETON_POLICY_ENFORCE
        shieldedNodes:
          enabled: true
        releaseChannel:
          channel: STABLE
        maintenancePolicy:
          window:
            dailyMaintenanceWindow:
              startTime: "02:00"
    metadata:
      dependsOn: [enable-apis]

  # Staging GKE Cluster with appropriate resource allocation
  - name: staging-cluster
    type: gcp-types/container-v1:projects.zones.clusters
    properties:
      parent: projects/${project_id}/locations/${zone}
      cluster:
        name: ${staging_cluster_name}
        description: "Staging GKE cluster with Anthos Service Mesh"
        initialNodeCount: 2
        nodeConfig:
          machineType: e2-standard-2
          diskType: pd-standard
          diskSizeGb: 50
          serviceAccount: default
          oauthScopes:
            - "https://www.googleapis.com/auth/cloud-platform"
          metadata:
            disable-legacy-endpoints: "true"
          labels:
            env: "staging"
            mesh: "enabled"
          tags: ["staging", "service-mesh"]
        masterAuth:
          clientCertificateConfig:
            issueClientCertificate: false
        loggingService: logging.googleapis.com/kubernetes
        monitoringService: monitoring.googleapis.com/kubernetes
        addonsConfig:
          networkPolicyConfig:
            disabled: false
        networkPolicy:
          enabled: true
          provider: CALICO
        ipAllocationPolicy:
          useIpAliases: true
          createSubnetwork: true
        workloadIdentityConfig:
          workloadPool: ${project_id}.svc.id.goog
        binaryAuthorization:
          enabled: true
          evaluationMode: PROJECT_SINGLETON_POLICY_ENFORCE
        shieldedNodes:
          enabled: true
        releaseChannel:
          channel: STABLE
    metadata:
      dependsOn: [enable-apis]

  # Development GKE Cluster with cost-optimized configuration
  - name: development-cluster
    type: gcp-types/container-v1:projects.zones.clusters
    properties:
      parent: projects/${project_id}/locations/${zone}
      cluster:
        name: ${dev_cluster_name}
        description: "Development GKE cluster with Anthos Service Mesh"
        initialNodeCount: 2
        nodeConfig:
          machineType: e2-standard-2
          diskType: pd-standard
          diskSizeGb: 50
          serviceAccount: default
          oauthScopes:
            - "https://www.googleapis.com/auth/cloud-platform"
          metadata:
            disable-legacy-endpoints: "true"
          labels:
            env: "development"
            mesh: "enabled"
          tags: ["development", "service-mesh"]
        masterAuth:
          clientCertificateConfig:
            issueClientCertificate: false
        loggingService: logging.googleapis.com/kubernetes
        monitoringService: monitoring.googleapis.com/kubernetes
        addonsConfig:
          networkPolicyConfig:
            disabled: false
        networkPolicy:
          enabled: true
          provider: CALICO
        ipAllocationPolicy:
          useIpAliases: true
          createSubnetwork: true
        workloadIdentityConfig:
          workloadPool: ${project_id}.svc.id.goog
        shieldedNodes:
          enabled: true
        releaseChannel:
          channel: STABLE
    metadata:
      dependsOn: [enable-apis]

  # Fleet membership for production cluster
  - name: prod-fleet-membership
    type: gcp-types/gkehub-v1:projects.locations.memberships
    properties:
      parent: projects/${project_id}/locations/global
      membershipId: prod-membership
      membership:
        description: "Production cluster fleet membership"
        endpoint:
          gkeCluster:
            resourceLink: projects/${project_id}/locations/${zone}/clusters/${prod_cluster_name}
        labels:
          env: "production"
          mesh: "enabled"
    metadata:
      dependsOn: [production-cluster, enable-gkehub-api]

  # Fleet membership for staging cluster
  - name: staging-fleet-membership
    type: gcp-types/gkehub-v1:projects.locations.memberships
    properties:
      parent: projects/${project_id}/locations/global
      membershipId: staging-membership
      membership:
        description: "Staging cluster fleet membership"
        endpoint:
          gkeCluster:
            resourceLink: projects/${project_id}/locations/${zone}/clusters/${staging_cluster_name}
        labels:
          env: "staging"
          mesh: "enabled"
    metadata:
      dependsOn: [staging-cluster, enable-gkehub-api]

  # Fleet membership for development cluster
  - name: dev-fleet-membership
    type: gcp-types/gkehub-v1:projects.locations.memberships
    properties:
      parent: projects/${project_id}/locations/global
      membershipId: dev-membership
      membership:
        description: "Development cluster fleet membership"
        endpoint:
          gkeCluster:
            resourceLink: projects/${project_id}/locations/${zone}/clusters/${dev_cluster_name}
        labels:
          env: "development"
          mesh: "enabled"
    metadata:
      dependsOn: [development-cluster, enable-gkehub-api]

  # Enable Service Mesh feature on the fleet
  - name: fleet-service-mesh-feature
    type: gcp-types/gkehub-v1:projects.locations.features
    properties:
      parent: projects/${project_id}/locations/global
      featureId: servicemesh
      feature:
        spec:
          multiclusteringress:
            configMembership: projects/${project_id}/locations/global/memberships/prod-membership
        labels:
          managed-by: "infrastructure-manager"
    metadata:
      dependsOn: [prod-fleet-membership, staging-fleet-membership, dev-fleet-membership, enable-mesh-api]

  # Apply managed service mesh to production cluster
  - name: prod-mesh-membership
    type: gcp-types/gkehub-v1:projects.locations.memberships
    properties:
      name: projects/${project_id}/locations/global/memberships/prod-membership
      membership:
        description: "Production cluster with managed service mesh"
        endpoint:
          gkeCluster:
            resourceLink: projects/${project_id}/locations/${zone}/clusters/${prod_cluster_name}
        labels:
          env: "production"
          mesh: "enabled"
        state:
          code: READY
    metadata:
      dependsOn: [fleet-service-mesh-feature]

  # Binary Authorization attestors for production
  - name: production-attestor
    type: gcp-types/binaryauthorization-v1:projects.attestors
    properties:
      parent: projects/${project_id}
      attestorId: production-attestor
      attestor:
        description: "Production environment attestor for container image verification"
        userOwnedGrafeasNote:
          noteReference: projects/${project_id}/notes/production-note
          publicKeys:
            - asciiArmoredPgpPublicKey: |
                -----BEGIN PGP PUBLIC KEY BLOCK-----
                # Placeholder for actual PGP public key
                # In practice, generate with: gpg --gen-key && gpg --armor --export
                -----END PGP PUBLIC KEY BLOCK-----
    metadata:
      dependsOn: [enable-binaryauth-api]

  # Binary Authorization attestor for staging
  - name: staging-attestor
    type: gcp-types/binaryauthorization-v1:projects.attestors
    properties:
      parent: projects/${project_id}
      attestorId: staging-attestor
      attestor:
        description: "Staging environment attestor for container image verification"
        userOwnedGrafeasNote:
          noteReference: projects/${project_id}/notes/staging-note
          publicKeys:
            - asciiArmoredPgpPublicKey: |
                -----BEGIN PGP PUBLIC KEY BLOCK-----
                # Placeholder for actual PGP public key
                # In practice, generate with: gpg --gen-key && gpg --armor --export
                -----END PGP PUBLIC KEY BLOCK-----
    metadata:
      dependsOn: [enable-binaryauth-api]

  # Binary Authorization policy configuration
  - name: binary-authorization-policy
    type: gcp-types/binaryauthorization-v1:projects.policy
    properties:
      name: projects/${project_id}/policy
      policy:
        description: "Binary Authorization policy for multi-cluster service mesh governance"
        globalPolicyEvaluationMode: ENABLE
        defaultAdmissionRule:
          evaluationMode: REQUIRE_ATTESTATION
          enforcementMode: ENFORCED_BLOCK_AND_AUDIT_LOG
          requireAttestationsBy:
            - projects/${project_id}/attestors/production-attestor
        clusterAdmissionRules:
          # Production cluster requires production attestor
          "${zone}.${prod_cluster_name}":
            evaluationMode: REQUIRE_ATTESTATION
            enforcementMode: ENFORCED_BLOCK_AND_AUDIT_LOG
            requireAttestationsBy:
              - projects/${project_id}/attestors/production-attestor
          # Staging cluster requires staging attestor
          "${zone}.${staging_cluster_name}":
            evaluationMode: REQUIRE_ATTESTATION
            enforcementMode: ENFORCED_BLOCK_AND_AUDIT_LOG
            requireAttestationsBy:
              - projects/${project_id}/attestors/staging-attestor
          # Development cluster allows more permissive policy
          "${zone}.${dev_cluster_name}":
            evaluationMode: ALWAYS_ALLOW
            enforcementMode: PERMISSIVE_ENFORCEMENT
        admissionWhitelistPatterns:
          # Allow Google-managed system images
          - namePattern: "gcr.io/google-containers/*"
          - namePattern: "gcr.io/google_containers/*"
          - namePattern: "k8s.gcr.io/*"
          - namePattern: "gke.gcr.io/*"
          - namePattern: "gcr.io/stackdriver-agents/*"
          - namePattern: "gcr.io/gke-release/*"
    metadata:
      dependsOn: [production-attestor, staging-attestor, production-cluster, staging-cluster, development-cluster]

  # Service account for Config Management operator
  - name: config-sync-service-account
    type: gcp-types/iam-v1:projects.serviceAccounts
    properties:
      name: projects/${project_id}/serviceAccounts/config-sync-sa@${project_id}.iam.gserviceaccount.com
      accountId: config-sync-sa
      serviceAccount:
        displayName: "Anthos Config Management Service Account"
        description: "Service account for Anthos Config Management operations"
    metadata:
      dependsOn: [enable-apis]

  # IAM binding for Config Management service account
  - name: config-sync-iam-binding
    type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
    properties:
      resource: ${project_id}
      role: roles/source.reader
      member: serviceAccount:config-sync-sa@${project_id}.iam.gserviceaccount.com
    metadata:
      dependsOn: [config-sync-service-account]

  # Enable Config Management feature on the fleet
  - name: fleet-config-management-feature
    type: gcp-types/gkehub-v1:projects.locations.features
    properties:
      parent: projects/${project_id}/locations/global
      featureId: configmanagement
      feature:
        spec:
          configmanagement:
            version: "1.15.0"
            configSync:
              sourceFormat: unstructured
              git:
                syncRepo: "https://source.developers.google.com/p/${project_id}/r/${config_repo_name}"
                syncBranch: master
                policyDir: config-root
                secretType: none
            policyController:
              enabled: true
              logDeniesEnabled: true
              referentialRulesEnabled: true
              monitoring:
                backends: ["prometheus"]
        labels:
          managed-by: "infrastructure-manager"
    metadata:
      dependsOn: [config-management-repo, prod-fleet-membership, staging-fleet-membership, dev-fleet-membership]

# Output values for reference and integration
outputs:
  - name: project_id
    description: "Google Cloud project ID"
    value: ${project_id}
  
  - name: region
    description: "Primary deployment region"
    value: ${region}
  
  - name: production_cluster_name
    description: "Name of the production GKE cluster"
    value: ${prod_cluster_name}
  
  - name: production_cluster_endpoint
    description: "Endpoint for the production GKE cluster"
    value: $(ref.production-cluster.endpoint)
  
  - name: staging_cluster_name
    description: "Name of the staging GKE cluster"
    value: ${staging_cluster_name}
  
  - name: staging_cluster_endpoint
    description: "Endpoint for the staging GKE cluster"
    value: $(ref.staging-cluster.endpoint)
  
  - name: development_cluster_name
    description: "Name of the development GKE cluster"
    value: ${dev_cluster_name}
  
  - name: development_cluster_endpoint
    description: "Endpoint for the development GKE cluster"
    value: $(ref.development-cluster.endpoint)
  
  - name: artifact_registry_url
    description: "URL of the Artifact Registry repository"
    value: ${region}-docker.pkg.dev/${project_id}/${artifact_registry_repo}
  
  - name: config_repo_url
    description: "URL of the configuration management repository"
    value: https://source.developers.google.com/p/${project_id}/r/${config_repo_name}
  
  - name: fleet_memberships
    description: "List of fleet membership names"
    value:
      - prod-membership
      - staging-membership
      - dev-membership
  
  - name: binary_authorization_attestors
    description: "List of Binary Authorization attestors"
    value:
      - production-attestor
      - staging-attestor
  
  - name: service_mesh_status
    description: "Service mesh feature status"
    value: "Enabled on fleet with automatic management"
  
  - name: config_management_status
    description: "Config Management feature status"
    value: "Enabled with GitOps from source repository"

# Metadata for Infrastructure Manager
metadata:
  version: "1.0.0"
  description: "Multi-cluster service mesh governance with Anthos Service Mesh and Config Management"
  author: "Google Cloud Infrastructure Manager"
  labels:
    environment: "multi-cluster"
    use-case: "service-mesh-governance"
    security-level: "enterprise"
    automation: "gitops"