# Google Cloud Infrastructure Manager Configuration
# Multi-Environment Application Deployment with Cloud Deploy and Cloud Build
# This configuration deploys GKE clusters, Cloud Deploy pipeline, and Cloud Build automation

# Enable required Google Cloud APIs
resources:
  # Enable Compute Engine API
  - name: compute-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/${PROJECT_ID}/services/compute.googleapis.com
      
  # Enable Google Kubernetes Engine API
  - name: container-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/${PROJECT_ID}/services/container.googleapis.com
      
  # Enable Cloud Deploy API
  - name: clouddeploy-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/${PROJECT_ID}/services/clouddeploy.googleapis.com
      
  # Enable Cloud Build API
  - name: cloudbuild-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/${PROJECT_ID}/services/cloudbuild.googleapis.com
      
  # Enable Artifact Registry API
  - name: artifactregistry-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/${PROJECT_ID}/services/artifactregistry.googleapis.com
      
  # Enable Cloud Resource Manager API
  - name: cloudresourcemanager-api
    type: gcp-types/serviceusage-v1:services
    properties:
      name: projects/${PROJECT_ID}/services/cloudresourcemanager.googleapis.com

  # Create Artifact Registry repository for container images
  - name: artifact-registry-repo
    type: gcp-types/artifactregistry-v1:projects.locations.repositories
    properties:
      parent: projects/${PROJECT_ID}/locations/${REGION}
      repositoryId: ${REPO_NAME}
      repository:
        format: DOCKER
        description: "Repository for multi-environment deployment demo"
        labels:
          environment: multi-env
          purpose: deployment-demo
    metadata:
      dependsOn:
        - artifactregistry-api

  # Create Cloud Storage bucket for deployment artifacts
  - name: deployment-artifacts-bucket
    type: gcp-types/storage-v1:buckets
    properties:
      name: ${BUCKET_NAME}
      location: ${REGION}
      storageClass: STANDARD
      versioning:
        enabled: true
      labels:
        environment: multi-env
        purpose: deployment-artifacts
      iamConfiguration:
        uniformBucketLevelAccess:
          enabled: true

  # Create Development GKE cluster
  - name: dev-cluster
    type: gcp-types/container-v1:projects.zones.clusters
    properties:
      parent: projects/${PROJECT_ID}/locations/${ZONE}
      cluster:
        name: ${CLUSTER_DEV}
        description: "Development environment GKE cluster"
        initialNodeCount: 2
        nodeConfig:
          machineType: e2-standard-2
          diskSizeGb: 100
          diskType: pd-ssd
          preemptible: false
          oauthScopes:
            - https://www.googleapis.com/auth/cloud-platform
          metadata:
            disable-legacy-endpoints: "true"
          labels:
            environment: development
            cluster-type: gke
        # Enable cluster addons
        addonsConfig:
          horizontalPodAutoscaling:
            disabled: false
          httpLoadBalancing:
            disabled: false
          networkPolicyConfig:
            disabled: false
        # Enable workload identity
        workloadIdentityConfig:
          workloadPool: ${PROJECT_ID}.svc.id.goog
        # Enable node management features
        nodeManagement:
          autoRepair: true
          autoUpgrade: true
        # Resource labels
        resourceLabels:
          environment: development
          managed-by: infrastructure-manager
    metadata:
      dependsOn:
        - container-api
        - compute-api

  # Create Staging GKE cluster
  - name: staging-cluster
    type: gcp-types/container-v1:projects.zones.clusters
    properties:
      parent: projects/${PROJECT_ID}/locations/${ZONE}
      cluster:
        name: ${CLUSTER_STAGE}
        description: "Staging environment GKE cluster"
        initialNodeCount: 2
        nodeConfig:
          machineType: e2-standard-2
          diskSizeGb: 100
          diskType: pd-ssd
          preemptible: false
          oauthScopes:
            - https://www.googleapis.com/auth/cloud-platform
          metadata:
            disable-legacy-endpoints: "true"
          labels:
            environment: staging
            cluster-type: gke
        # Enable cluster addons
        addonsConfig:
          horizontalPodAutoscaling:
            disabled: false
          httpLoadBalancing:
            disabled: false
          networkPolicyConfig:
            disabled: false
        # Enable workload identity
        workloadIdentityConfig:
          workloadPool: ${PROJECT_ID}.svc.id.goog
        # Enable node management features
        nodeManagement:
          autoRepair: true
          autoUpgrade: true
        # Resource labels
        resourceLabels:
          environment: staging
          managed-by: infrastructure-manager
    metadata:
      dependsOn:
        - container-api
        - compute-api

  # Create Production GKE cluster
  - name: production-cluster
    type: gcp-types/container-v1:projects.zones.clusters
    properties:
      parent: projects/${PROJECT_ID}/locations/${ZONE}
      cluster:
        name: ${CLUSTER_PROD}
        description: "Production environment GKE cluster"
        initialNodeCount: 3
        nodeConfig:
          machineType: e2-standard-4
          diskSizeGb: 100
          diskType: pd-ssd
          preemptible: false
          oauthScopes:
            - https://www.googleapis.com/auth/cloud-platform
          metadata:
            disable-legacy-endpoints: "true"
          labels:
            environment: production
            cluster-type: gke
        # Enable cluster addons with enhanced security
        addonsConfig:
          horizontalPodAutoscaling:
            disabled: false
          httpLoadBalancing:
            disabled: false
          networkPolicyConfig:
            disabled: false
        # Enable workload identity
        workloadIdentityConfig:
          workloadPool: ${PROJECT_ID}.svc.id.goog
        # Enable node management features
        nodeManagement:
          autoRepair: true
          autoUpgrade: true
        # Enhanced security for production
        masterAuth:
          clusterCaCertificate: ""
          username: ""
          password: ""
        # Resource labels
        resourceLabels:
          environment: production
          managed-by: infrastructure-manager
    metadata:
      dependsOn:
        - container-api
        - compute-api

  # Create Cloud Deploy delivery pipeline
  - name: delivery-pipeline
    type: gcp-types/clouddeploy-v1:projects.locations.deliveryPipelines
    properties:
      parent: projects/${PROJECT_ID}/locations/${REGION}
      deliveryPipelineId: ${PIPELINE_NAME}
      deliveryPipeline:
        description: "Multi-environment deployment pipeline for sample application"
        serialPipeline:
          stages:
            - targetId: dev-target
              profiles:
                - dev
            - targetId: staging-target
              profiles:
                - staging
            - targetId: prod-target
              profiles:
                - prod
        annotations:
          managed-by: infrastructure-manager
          environment: multi-env
    metadata:
      dependsOn:
        - clouddeploy-api
        - dev-cluster
        - staging-cluster
        - production-cluster

  # Create Cloud Deploy target for development
  - name: dev-target
    type: gcp-types/clouddeploy-v1:projects.locations.targets
    properties:
      parent: projects/${PROJECT_ID}/locations/${REGION}
      targetId: dev-target
      target:
        description: "Development environment target"
        gke:
          cluster: projects/${PROJECT_ID}/locations/${ZONE}/clusters/${CLUSTER_DEV}
        annotations:
          managed-by: infrastructure-manager
          environment: development
    metadata:
      dependsOn:
        - clouddeploy-api
        - dev-cluster

  # Create Cloud Deploy target for staging
  - name: staging-target
    type: gcp-types/clouddeploy-v1:projects.locations.targets
    properties:
      parent: projects/${PROJECT_ID}/locations/${REGION}
      targetId: staging-target
      target:
        description: "Staging environment target"
        gke:
          cluster: projects/${PROJECT_ID}/locations/${ZONE}/clusters/${CLUSTER_STAGE}
        requireApproval: false
        annotations:
          managed-by: infrastructure-manager
          environment: staging
    metadata:
      dependsOn:
        - clouddeploy-api
        - staging-cluster

  # Create Cloud Deploy target for production
  - name: prod-target
    type: gcp-types/clouddeploy-v1:projects.locations.targets
    properties:
      parent: projects/${PROJECT_ID}/locations/${REGION}
      targetId: prod-target
      target:
        description: "Production environment target"
        gke:
          cluster: projects/${PROJECT_ID}/locations/${ZONE}/clusters/${CLUSTER_PROD}
        requireApproval: true
        annotations:
          managed-by: infrastructure-manager
          environment: production
    metadata:
      dependsOn:
        - clouddeploy-api
        - production-cluster

  # Create Cloud Build trigger for automated deployments
  - name: deployment-trigger
    type: gcp-types/cloudbuild-v1:projects.triggers
    properties:
      parent: projects/${PROJECT_ID}
      name: deployment-trigger
      description: "Automated deployment trigger for multi-environment pipeline"
      # Trigger configuration - assumes GitHub repository
      github:
        owner: ${GITHUB_OWNER}
        name: ${GITHUB_REPO}
        push:
          branch: "^main$"
      # Build configuration file
      filename: cloudbuild.yaml
      # Substitution variables for the build
      substitutions:
        _REGION: ${REGION}
        _REPO_NAME: ${REPO_NAME}
        _PIPELINE_NAME: ${PIPELINE_NAME}
        _BUCKET_NAME: ${BUCKET_NAME}
      # Service account for build execution
      serviceAccount: projects/${PROJECT_ID}/serviceAccounts/${PROJECT_NUMBER}-compute@developer.gserviceaccount.com
    metadata:
      dependsOn:
        - cloudbuild-api
        - delivery-pipeline
        - artifact-registry-repo
        - deployment-artifacts-bucket

  # Grant Cloud Build service account access to Cloud Deploy
  - name: cloudbuild-clouddeploy-iam
    type: gcp-types/cloudresourcemanager-v1:projects.iamPolicyBinding
    properties:
      resource: ${PROJECT_ID}
      bindings:
        - role: roles/clouddeploy.releaser
          members:
            - serviceAccount:${PROJECT_NUMBER}@cloudbuild.gserviceaccount.com
    metadata:
      dependsOn:
        - cloudbuild-api
        - clouddeploy-api

  # Grant Cloud Build service account access to Artifact Registry
  - name: cloudbuild-artifactregistry-iam
    type: gcp-types/cloudresourcemanager-v1:projects.iamPolicyBinding
    properties:
      resource: ${PROJECT_ID}
      bindings:
        - role: roles/artifactregistry.writer
          members:
            - serviceAccount:${PROJECT_NUMBER}@cloudbuild.gserviceaccount.com
    metadata:
      dependsOn:
        - cloudbuild-api
        - artifactregistry-api

  # Grant Cloud Build service account access to Cloud Storage
  - name: cloudbuild-storage-iam
    type: gcp-types/cloudresourcemanager-v1:projects.iamPolicyBinding
    properties:
      resource: ${PROJECT_ID}
      bindings:
        - role: roles/storage.objectAdmin
          members:
            - serviceAccount:${PROJECT_NUMBER}@cloudbuild.gserviceaccount.com
    metadata:
      dependsOn:
        - cloudbuild-api
        - deployment-artifacts-bucket

  # Grant Compute Engine default service account access to Cloud Deploy
  - name: compute-clouddeploy-iam
    type: gcp-types/cloudresourcemanager-v1:projects.iamPolicyBinding
    properties:
      resource: ${PROJECT_ID}
      bindings:
        - role: roles/clouddeploy.releaser
          members:
            - serviceAccount:${PROJECT_NUMBER}-compute@developer.gserviceaccount.com
    metadata:
      dependsOn:
        - compute-api
        - clouddeploy-api

  # Create Cloud Monitoring notification channel for pipeline events
  - name: pipeline-notifications
    type: gcp-types/monitoring-v1:projects.notificationChannels
    properties:
      parent: projects/${PROJECT_ID}
      displayName: "Pipeline Notifications"
      type: email
      labels:
        email_address: ${NOTIFICATION_EMAIL}
      description: "Email notifications for deployment pipeline events"
      enabled: true

# Define input parameters for customization
imports:
  - path: variables.yaml
    name: variables

# Output values for verification and integration
outputs:
  - name: artifact_registry_repository
    description: "Artifact Registry repository URL"
    value: ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}
    
  - name: dev_cluster_name
    description: "Development cluster name"
    value: $(ref.dev-cluster.name)
    
  - name: staging_cluster_name
    description: "Staging cluster name"
    value: $(ref.staging-cluster.name)
    
  - name: prod_cluster_name
    description: "Production cluster name"
    value: $(ref.production-cluster.name)
    
  - name: pipeline_name
    description: "Cloud Deploy pipeline name"
    value: $(ref.delivery-pipeline.name)
    
  - name: storage_bucket
    description: "Cloud Storage bucket for artifacts"
    value: gs://${BUCKET_NAME}
    
  - name: deployment_trigger_name
    description: "Cloud Build trigger name"
    value: $(ref.deployment-trigger.name)

# Metadata for the deployment
metadata:
  version: "1.0"
  name: "multi-environment-deployment"
  description: "Infrastructure Manager configuration for multi-environment application deployment with Cloud Deploy and Cloud Build"
  labels:
    environment: multi-env
    solution: cloud-deploy-pipeline
    managed-by: infrastructure-manager