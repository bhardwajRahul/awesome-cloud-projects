# Infrastructure Manager Configuration for Real-Time Collaborative Applications
# Recipe: Real-Time Collaborative Applications with Firebase Realtime Database and Cloud Functions
# This configuration deploys the complete infrastructure for a collaborative document editing application

# Import required templates and modules
imports:
  # Cloud Functions template for serverless backend logic
  - path: templates/cloud-function.jinja
  # Firebase project configuration template  
  - path: templates/firebase-project.jinja
  # IAM bindings template for security
  - path: templates/iam-bindings.jinja

# Global configuration parameters
info:
  title: Real-Time Collaborative Application Infrastructure
  author: Infrastructure Manager Generator
  description: |
    Complete infrastructure deployment for a real-time collaborative application
    using Firebase Realtime Database, Cloud Functions, Firebase Auth, and Firebase Hosting.
    Supports multi-user document editing with real-time synchronization.
  version: "1.0"

# Define deployment parameters
properties:
  # Project configuration
  project:
    type: string
    description: Google Cloud Project ID for resource deployment
    default: "collab-app-${RANDOM}"
    pattern: "^[a-z][a-z0-9-]{4,28}[a-z0-9]$"
  
  # Regional deployment configuration
  region:
    type: string
    description: Primary region for Cloud Functions and other regional resources
    default: "us-central1"
    enum:
      - "us-central1"
      - "us-east1"
      - "us-west1"
      - "europe-west1"
      - "asia-northeast1"
  
  # Firebase database configuration
  databaseRegion:
    type: string
    description: Region for Firebase Realtime Database deployment
    default: "us-central1"
    enum:
      - "us-central1"
      - "europe-west1"
      - "asia-southeast1"
  
  # Application configuration
  appName:
    type: string
    description: Name for the collaborative application
    default: "collaborative-editor"
    pattern: "^[a-z][a-z0-9-]{2,30}[a-z0-9]$"
  
  # Security configuration
  enableAdvancedSecurity:
    type: boolean
    description: Enable advanced security features including App Check and enhanced monitoring
    default: true
  
  # Performance configuration
  functionMemory:
    type: integer
    description: Memory allocation for Cloud Functions (MB)
    default: 256
    enum: [128, 256, 512, 1024, 2048]
  
  # Environment configuration
  environment:
    type: string
    description: Deployment environment for resource tagging and configuration
    default: "development"
    enum: ["development", "staging", "production"]

# Main resource definitions
resources:
  # Enable required Google Cloud APIs
  - name: enable-firebase-api
    type: gcp-types/serviceusage-v1:projects.services
    properties:
      name: projects/{{ env["project"] }}/services/firebase.googleapis.com
      consumerId: projects/{{ env["project"] }}
    metadata:
      dependsOn: []
      description: Enable Firebase Management API for project configuration

  - name: enable-firestore-api
    type: gcp-types/serviceusage-v1:projects.services
    properties:
      name: projects/{{ env["project"] }}/services/firestore.googleapis.com
      consumerId: projects/{{ env["project"] }}
    metadata:
      dependsOn: []
      description: Enable Cloud Firestore API for database operations

  - name: enable-cloudfunctions-api
    type: gcp-types/serviceusage-v1:projects.services
    properties:
      name: projects/{{ env["project"] }}/services/cloudfunctions.googleapis.com
      consumerId: projects/{{ env["project"] }}
    metadata:
      dependsOn: []
      description: Enable Cloud Functions API for serverless compute

  - name: enable-storage-api
    type: gcp-types/serviceusage-v1:projects.services
    properties:
      name: projects/{{ env["project"] }}/services/storage.googleapis.com
      consumerId: projects/{{ env["project"] }}
    metadata:
      dependsOn: []
      description: Enable Cloud Storage API for function code storage

  - name: enable-cloudbuild-api
    type: gcp-types/serviceusage-v1:projects.services
    properties:
      name: projects/{{ env["project"] }}/services/cloudbuild.googleapis.com
      consumerId: projects/{{ env["project"] }}
    metadata:
      dependsOn: []
      description: Enable Cloud Build API for function deployment

  - name: enable-identitytoolkit-api
    type: gcp-types/serviceusage-v1:projects.services
    properties:
      name: projects/{{ env["project"] }}/services/identitytoolkit.googleapis.com
      consumerId: projects/{{ env["project"] }}
    metadata:
      dependsOn: []
      description: Enable Identity Toolkit API for Firebase Authentication

  # Firebase project configuration
  - name: firebase-project
    type: gcp-types/firebase-v1beta1:projects
    properties:
      projectId: {{ env["project"] }}
      displayName: {{ properties["appName"] }}-{{ properties["environment"] }}
      annotations:
        environment: {{ properties["environment"] }}
        managed-by: "infrastructure-manager"
        application: "collaborative-editor"
    metadata:
      dependsOn:
        - enable-firebase-api
      description: Initialize Firebase project with collaborative application configuration

  # Firebase Realtime Database instance
  - name: realtime-database
    type: gcp-types/firebase-v1beta1:projects.databases
    properties:
      parent: projects/{{ env["project"] }}
      databaseId: "default-rtdb"
      type: "REALTIME_DATABASE"
      state: "ACTIVE"
      locationId: {{ properties["databaseRegion"] }}
    metadata:
      dependsOn:
        - firebase-project
      description: |
        Create Firebase Realtime Database for real-time data synchronization.
        Provides automatic multi-client sync with offline support.

  # Firebase Authentication configuration
  - name: firebase-auth-config
    type: gcp-types/identitytoolkit-v1:projects.config
    properties:
      name: projects/{{ env["project"] }}/config
      signIn:
        email:
          enabled: true
          passwordRequired: true
        allowDuplicateEmails: false
        hashConfig:
          algorithm: "SCRYPT"
      notification:
        sendEmail:
          method: "DEFAULT"
      quota:
        signUpQuotaConfig:
          quota: 1000
          startTime: "2025-01-01T00:00:00Z"
          quotaDuration: "86400s"
      authorizedDomains:
        - "localhost"
        - "{{ env["project"] }}.web.app"
        - "{{ env["project"] }}.firebaseapp.com"
    metadata:
      dependsOn:
        - enable-identitytoolkit-api
        - firebase-project
      description: |
        Configure Firebase Authentication with email/password provider.
        Supports secure user management for collaborative access control.

  # Cloud Storage bucket for Cloud Functions source code
  - name: functions-source-bucket
    type: gcp-types/storage-v1:bucket
    properties:
      name: {{ env["project"] }}-functions-source
      location: {{ properties["region"] }}
      storageClass: "STANDARD"
      uniformBucketLevelAccess:
        enabled: true
      versioning:
        enabled: true
      lifecycle:
        rule:
          - action:
              type: "Delete"
            condition:
              age: 30
              numNewerVersions: 3
      labels:
        environment: {{ properties["environment"] }}
        component: "cloud-functions"
        managed-by: "infrastructure-manager"
    metadata:
      dependsOn:
        - enable-storage-api
      description: |
        Cloud Storage bucket for storing Cloud Functions source code.
        Includes versioning and lifecycle management for code artifacts.

  # IAM service account for Cloud Functions
  - name: functions-service-account
    type: gcp-types/iam-v1:projects.serviceAccounts
    properties:
      accountId: {{ properties["appName"] }}-functions-sa
      displayName: "Cloud Functions Service Account for Collaborative App"
      description: "Service account for Cloud Functions in collaborative application"
      project: {{ env["project"] }}
    metadata:
      dependsOn: []
      description: |
        Dedicated service account for Cloud Functions with least privilege access.
        Ensures secure execution of serverless business logic.

  # IAM bindings for Functions service account
  - name: functions-sa-firebase-admin
    type: gcp-types/cloudresourcemanager-v1:projects.iamPolicy
    properties:
      resource: {{ env["project"] }}
      policy:
        bindings:
          - role: "roles/firebase.admin"
            members:
              - serviceAccount:{{ reference("functions-service-account.email") }}
          - role: "roles/firebasedatabase.admin"
            members:
              - serviceAccount:{{ reference("functions-service-account.email") }}
          - role: "roles/firebase.authAdmin"
            members:
              - serviceAccount:{{ reference("functions-service-account.email") }}
    metadata:
      dependsOn:
        - functions-service-account
      description: |
        Grant Firebase admin permissions to Functions service account.
        Enables secure database operations and user management.

  # Cloud Function: Create Document
  - name: create-document-function
    type: gcp-types/cloudfunctions-v1:projects.locations.functions
    properties:
      location: projects/{{ env["project"] }}/locations/{{ properties["region"] }}
      function: createDocument
      sourceArchiveUrl: gs://{{ reference("functions-source-bucket.name") }}/functions-source.zip
      entryPoint: "createDocument"
      runtime: "nodejs20"
      availableMemoryMb: {{ properties["functionMemory"] }}
      timeout: "60s"
      serviceAccountEmail: {{ reference("functions-service-account.email") }}
      httpsTrigger: {}
      environmentVariables:
        FIREBASE_PROJECT_ID: {{ env["project"] }}
        NODE_ENV: {{ properties["environment"] }}
        FUNCTION_REGION: {{ properties["region"] }}
      labels:
        environment: {{ properties["environment"] }}
        component: "document-management"
        function-type: "create-document"
    metadata:
      dependsOn:
        - functions-source-bucket
        - functions-service-account
        - functions-sa-firebase-admin
        - enable-cloudfunctions-api
      description: |
        Cloud Function for creating new collaborative documents.
        Handles document initialization, owner assignment, and security setup.

  # Cloud Function: Add Collaborator
  - name: add-collaborator-function
    type: gcp-types/cloudfunctions-v1:projects.locations.functions
    properties:
      location: projects/{{ env["project"] }}/locations/{{ properties["region"] }}
      function: addCollaborator
      sourceArchiveUrl: gs://{{ reference("functions-source-bucket.name") }}/functions-source.zip
      entryPoint: "addCollaborator"
      runtime: "nodejs20"
      availableMemoryMb: {{ properties["functionMemory"] }}
      timeout: "60s"
      serviceAccountEmail: {{ reference("functions-service-account.email") }}
      httpsTrigger: {}
      environmentVariables:
        FIREBASE_PROJECT_ID: {{ env["project"] }}
        NODE_ENV: {{ properties["environment"] }}
        FUNCTION_REGION: {{ properties["region"] }}
      labels:
        environment: {{ properties["environment"] }}
        component: "collaboration-management"
        function-type: "add-collaborator"
    metadata:
      dependsOn:
        - functions-source-bucket
        - functions-service-account
        - functions-sa-firebase-admin
        - enable-cloudfunctions-api
      description: |
        Cloud Function for adding collaborators to documents.
        Manages user permissions and collaborative access control.

  # Cloud Function: Get User Documents
  - name: get-user-documents-function
    type: gcp-types/cloudfunctions-v1:projects.locations.functions
    properties:
      location: projects/{{ env["project"] }}/locations/{{ properties["region"] }}
      function: getUserDocuments
      sourceArchiveUrl: gs://{{ reference("functions-source-bucket.name") }}/functions-source.zip
      entryPoint: "getUserDocuments"
      runtime: "nodejs20"
      availableMemoryMb: {{ properties["functionMemory"] }}
      timeout: "60s"
      serviceAccountEmail: {{ reference("functions-service-account.email") }}
      httpsTrigger: {}
      environmentVariables:
        FIREBASE_PROJECT_ID: {{ env["project"] }}
        NODE_ENV: {{ properties["environment"] }}
        FUNCTION_REGION: {{ properties["region"] }}
      labels:
        environment: {{ properties["environment"] }}
        component: "document-listing"
        function-type: "get-user-documents"
    metadata:
      dependsOn:
        - functions-source-bucket
        - functions-service-account
        - functions-sa-firebase-admin
        - enable-cloudfunctions-api
      description: |
        Cloud Function for retrieving user's accessible documents.
        Provides secure document listing based on user permissions.

  # Cloud Function: Track Document Changes (Database Trigger)
  - name: track-document-changes-function
    type: gcp-types/cloudfunctions-v1:projects.locations.functions
    properties:
      location: projects/{{ env["project"] }}/locations/{{ properties["region"] }}
      function: trackDocumentChange
      sourceArchiveUrl: gs://{{ reference("functions-source-bucket.name") }}/functions-source.zip
      entryPoint: "trackDocumentChange"
      runtime: "nodejs20"
      availableMemoryMb: {{ properties["functionMemory"] }}
      timeout: "60s"
      serviceAccountEmail: {{ reference("functions-service-account.email") }}
      eventTrigger:
        eventType: "providers/firebase.database/eventTypes/ref.write"
        resource: "projects/_/instances/{{ env["project"] }}-default-rtdb/refs/documents/{documentId}/content"
      environmentVariables:
        FIREBASE_PROJECT_ID: {{ env["project"] }}
        NODE_ENV: {{ properties["environment"] }}
        FUNCTION_REGION: {{ properties["region"] }}
      labels:
        environment: {{ properties["environment"] }}
        component: "change-tracking"
        function-type: "database-trigger"
    metadata:
      dependsOn:
        - realtime-database
        - functions-source-bucket
        - functions-service-account
        - functions-sa-firebase-admin
        - enable-cloudfunctions-api
      description: |
        Cloud Function triggered by database writes for change tracking.
        Automatically updates timestamps and version numbers on document changes.

  # Firebase Hosting configuration
  - name: firebase-hosting-site
    type: gcp-types/firebase-v1beta1:projects.sites
    properties:
      parent: projects/{{ env["project"] }}
      siteId: {{ properties["appName"] }}-{{ properties["environment"] }}
      labels:
        environment: {{ properties["environment"] }}
        component: "web-hosting"
        managed-by: "infrastructure-manager"
    metadata:
      dependsOn:
        - firebase-project
      description: |
        Firebase Hosting site for the collaborative application frontend.
        Provides global CDN, SSL certificates, and serverless hosting.

  # Security monitoring configuration (if advanced security enabled)
  - name: security-monitoring
    type: gcp-types/logging-v2:projects.sinks
    properties:
      parent: projects/{{ env["project"] }}
      uniqueWriterIdentity: true
      sink:
        name: "collaborative-app-security-sink"
        destination: "logging.googleapis.com/projects/{{ env["project"] }}/logs/security-events"
        filter: |
          (resource.type="cloud_function" AND 
           (textPayload:"authentication" OR textPayload:"authorization" OR 
            textPayload:"security" OR severity>=ERROR)) OR
          (resource.type="firebase_domain" AND severity>=WARNING)
        description: "Security events monitoring for collaborative application"
    condition: {{ properties["enableAdvancedSecurity"] }}
    metadata:
      dependsOn:
        - create-document-function
        - add-collaborator-function
        - get-user-documents-function
        - track-document-changes-function
      description: |
        Security monitoring sink for tracking authentication and authorization events.
        Captures security-related logs for incident response and compliance.

# Output values for verification and integration
outputs:
  # Project information
  - name: project-id
    description: "Google Cloud Project ID for the collaborative application"
    value: {{ env["project"] }}
  
  - name: firebase-project-url
    description: "Firebase Console URL for project management"
    value: "https://console.firebase.google.com/project/{{ env["project"] }}"
  
  # Database configuration
  - name: database-url
    description: "Firebase Realtime Database URL for client configuration"
    value: "https://{{ env["project"] }}-default-rtdb.{{ properties["databaseRegion"] }}.firebasedatabase.app/"
  
  - name: database-region
    description: "Firebase Realtime Database deployment region"
    value: {{ properties["databaseRegion"] }}
  
  # Cloud Functions endpoints
  - name: create-document-function-url
    description: "HTTP trigger URL for document creation function"
    value: $(ref.create-document-function.httpsTrigger.url)
  
  - name: add-collaborator-function-url
    description: "HTTP trigger URL for adding collaborators function"
    value: $(ref.add-collaborator-function.httpsTrigger.url)
  
  - name: get-user-documents-function-url
    description: "HTTP trigger URL for retrieving user documents function"
    value: $(ref.get-user-documents-function.httpsTrigger.url)
  
  # Hosting configuration
  - name: hosting-url
    description: "Firebase Hosting URL for the application"
    value: "https://{{ properties["appName"] }}-{{ properties["environment"] }}.web.app"
  
  - name: hosting-custom-domain
    description: "Custom domain configuration endpoint"
    value: "https://console.firebase.google.com/project/{{ env["project"] }}/hosting/main"
  
  # Authentication configuration
  - name: auth-domain
    description: "Firebase Auth domain for client configuration"
    value: "{{ env["project"] }}.firebaseapp.com"
  
  # Service account information
  - name: functions-service-account-email
    description: "Service account email for Cloud Functions"
    value: $(ref.functions-service-account.email)
  
  # Storage information
  - name: functions-source-bucket-name
    description: "Cloud Storage bucket name for function source code"
    value: $(ref.functions-source-bucket.name)
  
  # Environment configuration
  - name: deployment-region
    description: "Primary deployment region for resources"
    value: {{ properties["region"] }}
  
  - name: environment
    description: "Deployment environment"
    value: {{ properties["environment"] }}
  
  # Security configuration
  - name: security-monitoring-enabled
    description: "Advanced security monitoring status"
    value: {{ properties["enableAdvancedSecurity"] }}

# Deployment metadata and configuration
metadata:
  version: "1.0"
  description: |
    Complete Infrastructure Manager configuration for a real-time collaborative application.
    Deploys Firebase Realtime Database, Cloud Functions, Authentication, and Hosting
    with comprehensive security and monitoring configurations.
  
  # Resource dependencies and deployment order
  dependsOn: []
  
  # Labels for resource management
  labels:
    application: "collaborative-editor"
    infrastructure: "firebase-serverless"
    managed-by: "infrastructure-manager"
    cost-center: "development"
  
  # Deployment validation rules
  validation:
    properties:
      project:
        pattern: "^[a-z][a-z0-9-]{4,28}[a-z0-9]$"
        description: "Project ID must follow Google Cloud naming conventions"
      
      appName:
        pattern: "^[a-z][a-z0-9-]{2,30}[a-z0-9]$"
        description: "Application name must use lowercase letters, numbers, and hyphens"
  
  # Post-deployment configuration steps
  postDeployment:
    - description: "Configure Firebase Security Rules for Realtime Database"
      action: "Deploy database security rules using Firebase CLI"
    
    - description: "Upload Cloud Functions source code"
      action: "Package and upload function code to Cloud Storage bucket"
    
    - description: "Configure Firebase Hosting"
      action: "Deploy frontend application to Firebase Hosting"
    
    - description: "Test real-time collaboration features"
      action: "Verify multi-user document editing and synchronization"