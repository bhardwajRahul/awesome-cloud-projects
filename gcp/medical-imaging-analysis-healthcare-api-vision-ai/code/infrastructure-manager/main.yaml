# Google Cloud Infrastructure Manager Configuration
# Medical Imaging Analysis with Cloud Healthcare API and Vision AI
# 
# This configuration deploys a complete medical imaging analysis pipeline including:
# - Healthcare API dataset with DICOM and FHIR stores
# - Cloud Storage for image staging and processing
# - Pub/Sub for event-driven processing
# - Cloud Functions for AI-powered image analysis
# - IAM service accounts with healthcare-appropriate permissions
# - Monitoring and logging infrastructure

apiVersion: blueprints.infra.google.com/v1alpha1
kind: Blueprint
metadata:
  name: medical-imaging-analysis
  description: "HIPAA-compliant medical imaging analysis pipeline with Healthcare API and Vision AI"
  labels:
    category: healthcare
    difficulty: "300"
    provider: gcp

spec:
  # Input variables for customization
  variables:
    - name: project_id
      description: "Google Cloud Project ID for the medical imaging system"
      type: string
      required: true
      
    - name: region
      description: "Primary region for healthcare resources"
      type: string
      default: "us-central1"
      
    - name: zone
      description: "Primary zone for compute resources"
      type: string
      default: "us-central1-a"
      
    - name: dataset_name
      description: "Name for the Healthcare API dataset"
      type: string
      default: "medical-imaging-dataset"
      
    - name: dicom_store_name
      description: "Name for the DICOM store"
      type: string
      default: "medical-dicom-store"
      
    - name: fhir_store_name
      description: "Name for the FHIR store"
      type: string
      default: "medical-fhir-store"
      
    - name: storage_bucket_prefix
      description: "Prefix for Cloud Storage bucket name"
      type: string
      default: "medical-imaging-bucket"
      
    - name: function_name
      description: "Name for the image processing Cloud Function"
      type: string
      default: "medical-image-processor"
      
    - name: service_account_name
      description: "Name for the service account"
      type: string
      default: "medical-imaging-sa"

  # Resource definitions
  resources:
    # Enable required Google Cloud APIs
    - name: enable-healthcare-api
      type: gcp-types/serviceusage-v1:projects.services
      properties:
        name: projects/$(ref.project_id.projectId)/services/healthcare.googleapis.com
        
    - name: enable-vision-api
      type: gcp-types/serviceusage-v1:projects.services
      properties:
        name: projects/$(ref.project_id.projectId)/services/vision.googleapis.com
        
    - name: enable-functions-api
      type: gcp-types/serviceusage-v1:projects.services
      properties:
        name: projects/$(ref.project_id.projectId)/services/cloudfunctions.googleapis.com
        
    - name: enable-storage-api
      type: gcp-types/serviceusage-v1:projects.services
      properties:
        name: projects/$(ref.project_id.projectId)/services/storage.googleapis.com
        
    - name: enable-pubsub-api
      type: gcp-types/serviceusage-v1:projects.services
      properties:
        name: projects/$(ref.project_id.projectId)/services/pubsub.googleapis.com
        
    - name: enable-cloudbuild-api
      type: gcp-types/serviceusage-v1:projects.services
      properties:
        name: projects/$(ref.project_id.projectId)/services/cloudbuild.googleapis.com
        
    - name: enable-logging-api
      type: gcp-types/serviceusage-v1:projects.services
      properties:
        name: projects/$(ref.project_id.projectId)/services/logging.googleapis.com
        
    - name: enable-monitoring-api
      type: gcp-types/serviceusage-v1:projects.services
      properties:
        name: projects/$(ref.project_id.projectId)/services/monitoring.googleapis.com

    # Generate unique suffix for resource names to avoid conflicts
    - name: random-suffix
      type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
      properties:
        resource: projects/$(ref.project_id.projectId)
        role: roles/owner
        member: deleted:user:invalid@example.com
      metadata:
        runtimePolicy:
          - CREATE
        randomSuffix: 6

    # Service Account for Medical Imaging Processing
    - name: medical-imaging-service-account
      type: gcp-types/iam-v1:projects.serviceAccounts
      properties:
        accountId: $(var.service_account_name)
        displayName: "Medical Imaging Analysis Service Account"
        description: "Service account for automated medical imaging analysis with Healthcare API and Vision AI"
        project: $(ref.project_id.projectId)
      depends_on:
        - enable-healthcare-api

    # IAM bindings for service account - Healthcare Dataset Admin
    - name: sa-healthcare-dataset-admin
      type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
      properties:
        resource: projects/$(ref.project_id.projectId)
        role: roles/healthcare.datasetAdmin
        member: serviceAccount:$(ref.medical-imaging-service-account.email)
      depends_on:
        - medical-imaging-service-account

    # IAM bindings for service account - ML Developer for Vision AI
    - name: sa-ml-developer
      type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
      properties:
        resource: projects/$(ref.project_id.projectId)
        role: roles/ml.developer
        member: serviceAccount:$(ref.medical-imaging-service-account.email)
      depends_on:
        - medical-imaging-service-account

    # IAM bindings for service account - Storage Object Admin
    - name: sa-storage-admin
      type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
      properties:
        resource: projects/$(ref.project_id.projectId)
        role: roles/storage.objectAdmin
        member: serviceAccount:$(ref.medical-imaging-service-account.email)
      depends_on:
        - medical-imaging-service-account

    # IAM bindings for service account - Cloud Functions Developer
    - name: sa-functions-developer
      type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
      properties:
        resource: projects/$(ref.project_id.projectId)
        role: roles/cloudfunctions.developer
        member: serviceAccount:$(ref.medical-imaging-service-account.email)
      depends_on:
        - medical-imaging-service-account

    # IAM bindings for service account - Pub/Sub Editor
    - name: sa-pubsub-editor
      type: gcp-types/cloudresourcemanager-v1:virtual.projects.iamMemberBinding
      properties:
        resource: projects/$(ref.project_id.projectId)
        role: roles/pubsub.editor
        member: serviceAccount:$(ref.medical-imaging-service-account.email)
      depends_on:
        - medical-imaging-service-account

    # Healthcare Dataset for HIPAA-compliant medical data storage
    - name: healthcare-dataset
      type: gcp-types/healthcare-v1:projects.locations.datasets
      properties:
        parent: projects/$(ref.project_id.projectId)/locations/$(var.region)
        datasetId: $(var.dataset_name)
        name: projects/$(ref.project_id.projectId)/locations/$(var.region)/datasets/$(var.dataset_name)
        location: $(var.region)
        timeZone: "UTC"
      depends_on:
        - enable-healthcare-api
        - sa-healthcare-dataset-admin
      metadata:
        description: "Healthcare dataset for secure medical imaging data storage and processing"

    # DICOM Store for medical imaging data with DICOMweb standard support
    - name: dicom-store
      type: gcp-types/healthcare-v1:projects.locations.datasets.dicomStores
      properties:
        parent: $(ref.healthcare-dataset.name)
        dicomStoreId: $(var.dicom_store_name)
        name: $(ref.healthcare-dataset.name)/dicomStores/$(var.dicom_store_name)
        # Enable notifications for automated processing
        notificationConfig:
          pubsubTopic: projects/$(ref.project_id.projectId)/topics/$(ref.medical-image-processing-topic.name)
        # Configure labels for medical compliance tracking
        labels:
          environment: "medical-imaging"
          compliance: "hipaa"
          data-type: "dicom"
      depends_on:
        - healthcare-dataset
        - medical-image-processing-topic
      metadata:
        description: "DICOM store for secure medical imaging data with automated processing triggers"

    # FHIR Store for medical analysis results and reports
    - name: fhir-store
      type: gcp-types/healthcare-v1:projects.locations.datasets.fhirStores
      properties:
        parent: $(ref.healthcare-dataset.name)
        fhirStoreId: $(var.fhir_store_name)
        name: $(ref.healthcare-dataset.name)/fhirStores/$(var.fhir_store_name)
        version: "R4"
        # Enable search for clinical queries
        enableUpdateCreate: true
        disableReferentialIntegrity: false
        # Configure labels for medical compliance tracking
        labels:
          environment: "medical-imaging"
          compliance: "hipaa"
          data-type: "fhir"
      depends_on:
        - healthcare-dataset
      metadata:
        description: "FHIR R4 store for medical analysis results and clinical data interoperability"

    # Cloud Storage bucket for medical image staging and processing
    - name: medical-imaging-bucket
      type: gcp-types/storage-v1:buckets
      properties:
        name: $(var.storage_bucket_prefix)-$(ref.random-suffix.outputs.randomSuffix)
        project: $(ref.project_id.projectId)
        location: $(var.region)
        storageClass: "STANDARD"
        # Enable versioning for data integrity and audit requirements
        versioning:
          enabled: true
        # Configure lifecycle management for cost optimization
        lifecycle:
          rule:
            - action:
                type: "Delete"
              condition:
                age: 90
                matchesStorageClass: ["STANDARD"]
            - action:
                type: "SetStorageClass"
                storageClass: "COLDLINE"
              condition:
                age: 30
                matchesStorageClass: ["STANDARD"]
        # Enable uniform bucket-level access for consistent security
        iamConfiguration:
          uniformBucketLevelAccess:
            enabled: true
        # Configure encryption for healthcare data protection
        encryption:
          defaultKmsKeyName: $(ref.medical-imaging-kms-key.name)
        # Set labels for compliance and cost tracking
        labels:
          environment: "medical-imaging"
          compliance: "hipaa"
          data-type: "medical-images"
      depends_on:
        - enable-storage-api
        - medical-imaging-kms-key
      metadata:
        description: "HIPAA-compliant storage bucket for medical imaging data with lifecycle management"

    # KMS key for medical data encryption
    - name: medical-imaging-kms-key
      type: gcp-types/cloudkms-v1:projects.locations.keyRings.cryptoKeys
      properties:
        parent: projects/$(ref.project_id.projectId)/locations/$(var.region)/keyRings/$(ref.medical-imaging-keyring.name)
        cryptoKeyId: "medical-imaging-key"
        purpose: "ENCRYPT_DECRYPT"
        # Configure key rotation for security best practices
        rotationPeriod: "7776000s"  # 90 days
        labels:
          environment: "medical-imaging"
          compliance: "hipaa"
      depends_on:
        - medical-imaging-keyring
      metadata:
        description: "KMS key for encrypting medical imaging data at rest"

    # KMS keyring for organizing encryption keys
    - name: medical-imaging-keyring
      type: gcp-types/cloudkms-v1:projects.locations.keyRings
      properties:
        parent: projects/$(ref.project_id.projectId)/locations/$(var.region)
        keyRingId: "medical-imaging-keyring"
      depends_on:
        - enable-healthcare-api
      metadata:
        description: "KMS keyring for medical imaging encryption keys"

    # Pub/Sub topic for event-driven medical image processing
    - name: medical-image-processing-topic
      type: gcp-types/pubsub-v1:projects.topics
      properties:
        name: projects/$(ref.project_id.projectId)/topics/medical-image-processing
        # Configure message retention for reliability
        messageRetentionDuration: "604800s"  # 7 days
        labels:
          environment: "medical-imaging"
          component: "event-processing"
      depends_on:
        - enable-pubsub-api
      metadata:
        description: "Pub/Sub topic for triggering medical image analysis workflows"

    # Pub/Sub subscription for Cloud Functions processing
    - name: medical-image-processing-subscription
      type: gcp-types/pubsub-v1:projects.subscriptions
      properties:
        name: projects/$(ref.project_id.projectId)/subscriptions/medical-image-processor-sub
        topic: $(ref.medical-image-processing-topic.name)
        # Configure appropriate acknowledgment deadline for image processing
        ackDeadlineSeconds: 600
        # Enable dead letter queue for failed processing
        deadLetterPolicy:
          deadLetterTopic: $(ref.medical-image-dlq-topic.name)
          maxDeliveryAttempts: 5
        # Configure retry policy for reliability
        retryPolicy:
          minimumBackoff: "10s"
          maximumBackoff: "600s"
        labels:
          environment: "medical-imaging"
          component: "event-processing"
      depends_on:
        - medical-image-processing-topic
        - medical-image-dlq-topic
      metadata:
        description: "Pub/Sub subscription for reliable medical image processing"

    # Dead letter queue for failed message processing
    - name: medical-image-dlq-topic
      type: gcp-types/pubsub-v1:projects.topics
      properties:
        name: projects/$(ref.project_id.projectId)/topics/medical-image-processing-dlq
        messageRetentionDuration: "2592000s"  # 30 days
        labels:
          environment: "medical-imaging"
          component: "error-handling"
      depends_on:
        - enable-pubsub-api
      metadata:
        description: "Dead letter queue for failed medical image processing messages"

    # Cloud Function for AI-powered medical image analysis
    - name: medical-image-processor-function
      type: gcp-types/cloudfunctions-v1:projects.locations.functions
      properties:
        location: projects/$(ref.project_id.projectId)/locations/$(var.region)
        function: $(var.function_name)
        # Configure function source code and runtime
        sourceArchiveUrl: "gs://$(ref.function-source-bucket.name)/medical-image-processor.zip"
        runtime: "python311"
        entryPoint: "process_medical_image"
        # Set appropriate timeout for image processing
        timeout: "540s"
        # Configure memory for AI processing workloads
        availableMemoryMb: 512
        # Set service account for secure access
        serviceAccountEmail: $(ref.medical-imaging-service-account.email)
        # Configure environment variables
        environmentVariables:
          PROJECT_ID: $(ref.project_id.projectId)
          DATASET_ID: $(var.dataset_name)
          DICOM_STORE_ID: $(var.dicom_store_name)
          FHIR_STORE_ID: $(var.fhir_store_name)
          REGION: $(var.region)
        # Configure Pub/Sub trigger
        eventTrigger:
          eventType: "providers/cloud.pubsub/eventTypes/topic.publish"
          resource: $(ref.medical-image-processing-topic.name)
        # Set labels for tracking and compliance
        labels:
          environment: "medical-imaging"
          component: "ai-processing"
          compliance: "hipaa"
      depends_on:
        - enable-functions-api
        - medical-imaging-service-account
        - medical-image-processing-topic
        - function-source-bucket
        - sa-healthcare-dataset-admin
        - sa-ml-developer
        - sa-storage-admin
        - sa-pubsub-editor
      metadata:
        description: "Cloud Function for AI-powered medical image analysis using Vision AI"

    # Cloud Storage bucket for function source code
    - name: function-source-bucket
      type: gcp-types/storage-v1:buckets
      properties:
        name: medical-imaging-function-source-$(ref.random-suffix.outputs.randomSuffix)
        project: $(ref.project_id.projectId)
        location: $(var.region)
        storageClass: "STANDARD"
        # Configure uniform bucket-level access
        iamConfiguration:
          uniformBucketLevelAccess:
            enabled: true
        labels:
          environment: "medical-imaging"
          component: "function-source"
      depends_on:
        - enable-storage-api
      metadata:
        description: "Storage bucket for Cloud Function source code"

    # Log-based metric for successful medical image processing
    - name: medical-image-processing-success-metric
      type: gcp-types/logging-v2:projects.metrics
      properties:
        parent: projects/$(ref.project_id.projectId)
        metricId: "medical_image_processing_success"
        description: "Metric tracking successful medical image processing events"
        filter: |
          resource.type="cloud_function"
          resource.labels.function_name="$(var.function_name)"
          "Successfully processed image"
        labelExtractors:
          function_name: "EXTRACT(resource.labels.function_name)"
        # Configure metric type for counter
        metricDescriptor:
          metricKind: "COUNTER"
          valueType: "INT64"
          displayName: "Medical Image Processing Success"
      depends_on:
        - enable-logging-api
        - medical-image-processor-function
      metadata:
        description: "Log-based metric for monitoring successful medical image processing"

    # Log-based metric for failed medical image processing
    - name: medical-image-processing-error-metric
      type: gcp-types/logging-v2:projects.metrics
      properties:
        parent: projects/$(ref.project_id.projectId)
        metricId: "medical_image_processing_errors"
        description: "Metric tracking failed medical image processing events"
        filter: |
          resource.type="cloud_function"
          resource.labels.function_name="$(var.function_name)"
          severity>=ERROR
        labelExtractors:
          function_name: "EXTRACT(resource.labels.function_name)"
          error_type: "EXTRACT(jsonPayload.error_type)"
        # Configure metric type for counter
        metricDescriptor:
          metricKind: "COUNTER"
          valueType: "INT64"
          displayName: "Medical Image Processing Errors"
      depends_on:
        - enable-logging-api
        - medical-image-processor-function
      metadata:
        description: "Log-based metric for monitoring failed medical image processing"

    # Alerting policy for medical image processing failures
    - name: medical-image-processing-alert-policy
      type: gcp-types/monitoring-v1:projects.alertPolicies
      properties:
        parent: projects/$(ref.project_id.projectId)
        displayName: "Medical Image Processing Failures"
        documentation:
          content: "Alert triggered when medical image processing experiences failures that could impact patient care delivery"
          mimeType: "text/markdown"
        # Configure alert conditions
        conditions:
          - displayName: "Function execution failures"
            conditionThreshold:
              filter: |
                resource.type="cloud_function"
                resource.label.function_name="$(var.function_name)"
                metric.type="cloudfunctions.googleapis.com/function/execution_count"
                metric.label.status!="ok"
              comparison: "COMPARISON_GT"
              thresholdValue: 0
              duration: "300s"
              aggregations:
                - alignmentPeriod: "300s"
                  perSeriesAligner: "ALIGN_RATE"
                  crossSeriesReducer: "REDUCE_SUM"
        # Configure notification channels (would need to be created separately)
        enabled: true
        # Configure auto-close duration
        alertStrategy:
          autoClose: "1800s"
      depends_on:
        - enable-monitoring-api
        - medical-image-processor-function
      metadata:
        description: "Monitoring alert for medical image processing failures"

    # Log sink for healthcare audit requirements
    - name: healthcare-audit-log-sink
      type: gcp-types/logging-v2:projects.sinks
      properties:
        parent: projects/$(ref.project_id.projectId)
        sinkId: "healthcare-audit-logs"
        description: "Log sink for healthcare audit and compliance requirements"
        destination: "storage.googleapis.com/$(ref.healthcare-audit-bucket.name)"
        # Filter for healthcare-related audit events
        filter: |
          (resource.type="healthcare_dataset" OR 
           resource.type="cloud_function" AND resource.labels.function_name="$(var.function_name)" OR
           resource.type="gcs_bucket" AND resource.labels.bucket_name="$(ref.medical-imaging-bucket.name)")
          AND (protoPayload.methodName:"healthcare" OR 
               protoPayload.methodName:"storage" OR
               severity>=WARNING)
        # Configure log entry format
        outputVersionFormat: "V2"
      depends_on:
        - enable-logging-api
        - healthcare-audit-bucket
        - medical-image-processor-function
        - medical-imaging-bucket
      metadata:
        description: "Log sink for healthcare compliance and audit trail"

    # Storage bucket for healthcare audit logs
    - name: healthcare-audit-bucket
      type: gcp-types/storage-v1:buckets
      properties:
        name: medical-imaging-audit-logs-$(ref.random-suffix.outputs.randomSuffix)
        project: $(ref.project_id.projectId)
        location: $(var.region)
        storageClass: "COLDLINE"
        # Configure lifecycle for long-term retention
        lifecycle:
          rule:
            - action:
                type: "SetStorageClass"
                storageClass: "ARCHIVE"
              condition:
                age: 365
                matchesStorageClass: ["COLDLINE"]
        # Enable uniform bucket-level access
        iamConfiguration:
          uniformBucketLevelAccess:
            enabled: true
        # Configure retention policy for compliance
        retentionPolicy:
          retentionPeriod: "2592000"  # 30 days minimum
        labels:
          environment: "medical-imaging"
          compliance: "hipaa-audit"
          data-type: "audit-logs"
      depends_on:
        - enable-storage-api
      metadata:
        description: "Long-term storage for healthcare audit logs and compliance"

  # Output values for verification and integration
  outputs:
    - name: project_id
      description: "Google Cloud Project ID"
      value: $(ref.project_id.projectId)
      
    - name: healthcare_dataset_name
      description: "Healthcare API dataset name"
      value: $(ref.healthcare-dataset.name)
      
    - name: dicom_store_name
      description: "DICOM store name for medical images"
      value: $(ref.dicom-store.name)
      
    - name: fhir_store_name
      description: "FHIR store name for analysis results"
      value: $(ref.fhir-store.name)
      
    - name: storage_bucket_name
      description: "Cloud Storage bucket for medical images"
      value: $(ref.medical-imaging-bucket.name)
      
    - name: pubsub_topic_name
      description: "Pub/Sub topic for image processing events"
      value: $(ref.medical-image-processing-topic.name)
      
    - name: function_name
      description: "Cloud Function for image analysis"
      value: $(ref.medical-image-processor-function.name)
      
    - name: service_account_email
      description: "Service account email for medical imaging processing"
      value: $(ref.medical-imaging-service-account.email)
      
    - name: kms_key_name
      description: "KMS key for medical data encryption"
      value: $(ref.medical-imaging-kms-key.name)
      
    - name: audit_bucket_name
      description: "Storage bucket for healthcare audit logs"
      value: $(ref.healthcare-audit-bucket.name)

  # Deployment metadata and configuration
  metadata:
    # Blueprint information
    version: "1.0"
    author: "Google Cloud Infrastructure Manager"
    created: "2025-01-12"
    
    # Compliance and security notes
    compliance:
      - "HIPAA-compliant healthcare data handling"
      - "Encryption at rest and in transit"
      - "Audit logging and monitoring"
      - "Least privilege access controls"
      
    # Cost optimization features
    cost_optimization:
      - "Storage lifecycle management"
      - "Coldline storage for audit logs"
      - "Serverless computing for cost efficiency"
      - "Resource labeling for cost tracking"
      
    # Security features
    security:
      - "KMS encryption for data at rest"
      - "Service account with minimal permissions"
      - "Uniform bucket-level access"
      - "Healthcare API compliance"
      - "Comprehensive audit logging"
      
    # Monitoring and alerting
    observability:
      - "Log-based metrics for processing events"
      - "Alerting for processing failures"
      - "Healthcare audit log sink"
      - "Performance monitoring"

    # Prerequisites and requirements
    prerequisites:
      - "Google Cloud Project with billing enabled"
      - "Healthcare API access approval"
      - "Appropriate IAM permissions"
      - "Cloud Function source code deployment"
      
    # Estimated costs (varies by usage)
    estimated_monthly_cost:
      description: "Estimated monthly cost for moderate usage"
      range: "$50-200 USD"
      factors:
        - "Healthcare API usage"
        - "Vision AI API calls"
        - "Cloud Function executions"
        - "Storage volume"
        - "Data transfer"