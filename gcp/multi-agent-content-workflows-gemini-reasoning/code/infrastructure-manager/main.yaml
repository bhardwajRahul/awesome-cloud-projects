# Infrastructure Manager Configuration for Multi-Agent Content Workflows with Gemini 2.5 Reasoning
# This configuration deploys a complete multi-agent content processing pipeline using
# Google Cloud Workflows, Vertex AI, Cloud Functions, and supporting services

imports:
  - path: https://storage.googleapis.com/cloud-foundation-blueprints/infrastructure-manager/storage/storage.jinja
    name: storage-template
  - path: https://storage.googleapis.com/cloud-foundation-blueprints/infrastructure-manager/iam/iam.jinja
    name: iam-template

info:
  title: Multi-Agent Content Intelligence Workflow
  author: Google Cloud Recipe Generator
  description: |
    Deploys a serverless multi-agent content processing pipeline that uses
    Gemini 2.5's reasoning capabilities to analyze text, images, and video content.
    The system automatically processes uploaded content through specialized AI agents
    and synthesizes insights using advanced reasoning.
  version: 1.0

required:
  - project_id
  - region
  - bucket_name_suffix

properties:
  # Core project configuration
  project_id:
    type: string
    description: Google Cloud Project ID for deployment
    pattern: ^[a-z][a-z0-9-]{4,28}[a-z0-9]$
  
  region:
    type: string
    description: Google Cloud region for resource deployment
    default: us-central1
    enum:
      - us-central1
      - us-east1
      - us-west1
      - europe-west1
      - asia-southeast1
  
  zone:
    type: string
    description: Google Cloud zone for zonal resources
    default: us-central1-a
  
  bucket_name_suffix:
    type: string
    description: Unique suffix for storage bucket naming
    pattern: ^[a-z0-9-]{3,10}$
    default: content-ai
  
  # Workflow configuration
  workflow_name:
    type: string
    description: Name for the Cloud Workflows instance
    default: content-analysis-workflow
    pattern: ^[a-z][a-z0-9-]{3,62}$
  
  function_name:
    type: string
    description: Name for the Cloud Function trigger
    default: content-trigger
    pattern: ^[a-z][a-z0-9-]{3,62}$
  
  # Service account configuration
  service_account_name:
    type: string
    description: Name for the content intelligence service account
    default: content-intelligence-sa
    pattern: ^[a-z][a-z0-9-]{3,28}$
  
  # Function runtime configuration
  function_memory:
    type: string
    description: Memory allocation for Cloud Function
    default: 512Mi
    enum: [128Mi, 256Mi, 512Mi, 1Gi, 2Gi]
  
  function_timeout:
    type: string
    description: Timeout for Cloud Function execution
    default: 540s
  
  # Vertex AI configuration
  gemini_model:
    type: string
    description: Gemini model version for reasoning engine
    default: gemini-2.5-pro
    enum:
      - gemini-2.5-pro
      - gemini-pro
      - gemini-pro-vision
  
  # Content processing configuration
  max_file_size_mb:
    type: integer
    description: Maximum file size for content processing (MB)
    default: 100
    minimum: 1
    maximum: 1000
  
  # Security and compliance
  enable_uniform_bucket_access:
    type: boolean
    description: Enable uniform bucket-level access for enhanced security
    default: true
  
  enable_versioning:
    type: boolean
    description: Enable object versioning for content bucket
    default: true
  
  retention_period_days:
    type: integer
    description: Retention period for processed content (days)
    default: 90
    minimum: 1
    maximum: 365

resources:
  # Google Cloud APIs activation
  enable_required_apis:
    type: gcp-types/serviceusage-v1:services
    properties:
      parent: projects/$(ref.project_id.value)
      service: aiplatform.googleapis.com
    metadata:
      dependsOn:
        - project_id
  
  enable_workflows_api:
    type: gcp-types/serviceusage-v1:services
    properties:
      parent: projects/$(ref.project_id.value)
      service: workflows.googleapis.com
    metadata:
      dependsOn:
        - project_id
  
  enable_functions_api:
    type: gcp-types/serviceusage-v1:services
    properties:
      parent: projects/$(ref.project_id.value)
      service: cloudfunctions.googleapis.com
    metadata:
      dependsOn:
        - project_id
  
  enable_storage_api:
    type: gcp-types/serviceusage-v1:services
    properties:
      parent: projects/$(ref.project_id.value)
      service: storage.googleapis.com
    metadata:
      dependsOn:
        - project_id
  
  enable_eventarc_api:
    type: gcp-types/serviceusage-v1:services
    properties:
      parent: projects/$(ref.project_id.value)
      service: eventarc.googleapis.com
    metadata:
      dependsOn:
        - project_id
  
  enable_run_api:
    type: gcp-types/serviceusage-v1:services
    properties:
      parent: projects/$(ref.project_id.value)
      service: run.googleapis.com
    metadata:
      dependsOn:
        - project_id
  
  enable_speech_api:
    type: gcp-types/serviceusage-v1:services
    properties:
      parent: projects/$(ref.project_id.value)
      service: speech.googleapis.com
    metadata:
      dependsOn:
        - project_id
  
  enable_vision_api:
    type: gcp-types/serviceusage-v1:services
    properties:
      parent: projects/$(ref.project_id.value)
      service: vision.googleapis.com
    metadata:
      dependsOn:
        - project_id

  # IAM Service Account for Content Intelligence
  content_intelligence_service_account:
    type: gcp-types/iam-v1:projects.serviceAccounts
    properties:
      accountId: $(ref.service_account_name.value)
      displayName: Content Intelligence Workflow Service Account
      description: Service account for multi-agent content analysis workflows
      serviceAccount:
        description: |
          Dedicated service account for the content intelligence workflow system.
          Provides necessary permissions for Vertex AI, Cloud Workflows, Storage,
          Vision API, and Speech-to-Text API operations.
    metadata:
      dependsOn:
        - enable_required_apis
        - enable_workflows_api

  # IAM Role Bindings for Service Account
  vertex_ai_user_binding:
    type: gcp-types/cloudresourcemanager-v1:projects.setIamPolicy
    properties:
      resource: $(ref.project_id.value)
      policy:
        bindings:
          - role: roles/aiplatform.user
            members:
              - serviceAccount:$(ref.content_intelligence_service_account.email)
    metadata:
      dependsOn:
        - content_intelligence_service_account

  workflows_invoker_binding:
    type: gcp-types/cloudresourcemanager-v1:projects.setIamPolicy
    properties:
      resource: $(ref.project_id.value)
      policy:
        bindings:
          - role: roles/workflows.invoker
            members:
              - serviceAccount:$(ref.content_intelligence_service_account.email)
    metadata:
      dependsOn:
        - content_intelligence_service_account

  storage_object_admin_binding:
    type: gcp-types/cloudresourcemanager-v1:projects.setIamPolicy
    properties:
      resource: $(ref.project_id.value)
      policy:
        bindings:
          - role: roles/storage.objectAdmin
            members:
              - serviceAccount:$(ref.content_intelligence_service_account.email)
    metadata:
      dependsOn:
        - content_intelligence_service_account

  speech_editor_binding:
    type: gcp-types/cloudresourcemanager-v1:projects.setIamPolicy
    properties:
      resource: $(ref.project_id.value)
      policy:
        bindings:
          - role: roles/speech.editor
            members:
              - serviceAccount:$(ref.content_intelligence_service_account.email)
    metadata:
      dependsOn:
        - content_intelligence_service_account

  vision_editor_binding:
    type: gcp-types/cloudresourcemanager-v1:projects.setIamPolicy
    properties:
      resource: $(ref.project_id.value)
      policy:
        bindings:
          - role: roles/vision.editor
            members:
              - serviceAccount:$(ref.content_intelligence_service_account.email)
    metadata:
      dependsOn:
        - content_intelligence_service_account

  # Cloud Storage Bucket for Content Processing
  content_processing_bucket:
    type: gcp-types/storage-v1:buckets
    properties:
      name: content-intelligence-$(ref.bucket_name_suffix.value)
      location: $(ref.region.value)
      storageClass: STANDARD
      uniformBucketLevelAccess:
        enabled: $(ref.enable_uniform_bucket_access.value)
      versioning:
        enabled: $(ref.enable_versioning.value)
      lifecycle:
        rule:
          - action:
              type: Delete
            condition:
              age: $(ref.retention_period_days.value)
          - action:
              type: SetStorageClass
              storageClass: NEARLINE
            condition:
              age: 30
      iamConfiguration:
        uniformBucketLevelAccess:
          enabled: $(ref.enable_uniform_bucket_access.value)
      labels:
        environment: production
        purpose: content-intelligence
        managed-by: infrastructure-manager
    metadata:
      dependsOn:
        - enable_storage_api

  # Cloud Workflows Definition for Multi-Agent Processing
  content_analysis_workflow:
    type: gcp-types/workflows-v1:projects.locations.workflows
    properties:
      parent: projects/$(ref.project_id.value)/locations/$(ref.region.value)
      workflowId: $(ref.workflow_name.value)
      workflow:
        description: |
          Multi-agent content processing workflow using Gemini 2.5 reasoning.
          Orchestrates text, image, and video analysis agents and synthesizes
          insights through advanced reasoning capabilities.
        labels:
          environment: production
          purpose: content-intelligence
          version: v1.0
        sourceContents: |
          # Multi-Agent Content Analysis Workflow
          main:
            params: [input]
            steps:
              - initialize:
                  assign:
                    - content_uri: ${input.content_uri}
                    - content_type: ${input.content_type}
                    - analysis_results: {}
              
              - determine_processing_agents:
                  switch:
                    - condition: ${content_type == "text"}
                      steps:
                        - process_text_content:
                            call: text_analysis_agent
                            args:
                              content_uri: ${content_uri}
                            result: text_result
                        - store_text_result:
                            assign:
                              - analysis_results.text: ${text_result}
                    
                    - condition: ${content_type == "image"}
                      steps:
                        - process_image_content:
                            call: image_analysis_agent
                            args:
                              content_uri: ${content_uri}
                            result: image_result
                        - store_image_result:
                            assign:
                              - analysis_results.image: ${image_result}
                    
                    - condition: ${content_type == "video"}
                      steps:
                        - process_video_content:
                            call: video_analysis_agent
                            args:
                              content_uri: ${content_uri}
                            result: video_result
                        - store_video_result:
                            assign:
                              - analysis_results.video: ${video_result}
                    
                    - condition: ${content_type == "multi_modal"}
                      steps:
                        - parallel_processing:
                            parallel:
                              branches:
                                - text_branch:
                                    steps:
                                      - process_text:
                                          call: text_analysis_agent
                                          args:
                                            content_uri: ${content_uri}
                                          result: text_result
                                - image_branch:
                                    steps:
                                      - process_image:
                                          call: image_analysis_agent
                                          args:
                                            content_uri: ${content_uri}
                                          result: image_result
                                - video_branch:
                                    steps:
                                      - process_video:
                                          call: video_analysis_agent
                                          args:
                                            content_uri: ${content_uri}
                                          result: video_result
                            result: parallel_results
                        - aggregate_results:
                            assign:
                              - analysis_results: ${parallel_results}
              
              - reasoning_synthesis:
                  call: gemini_reasoning_engine
                  args:
                    analysis_data: ${analysis_results}
                    content_uri: ${content_uri}
                  result: final_intelligence
              
              - store_results:
                  call: http.post
                  args:
                    url: ${"https://storage.googleapis.com/upload/storage/v1/b/content-intelligence-$(ref.bucket_name_suffix.value)/o"}
                    headers:
                      Authorization: ${"Bearer " + sys.get_env("GOOGLE_CLOUD_ACCESS_TOKEN")}
                      Content-Type: application/json
                    body:
                      name: ${"results/" + text.split(content_uri, "/")[-1] + "_analysis.json"}
                      data: ${base64.encode(json.encode(final_intelligence))}
              
              - return_results:
                  return: ${final_intelligence}

          # Text Analysis Agent Subworkflow
          text_analysis_agent:
            params: [content_uri]
            steps:
              - call_gemini_text:
                  call: http.post
                  args:
                    url: https://$(ref.region.value)-aiplatform.googleapis.com/v1/projects/$(ref.project_id.value)/locations/$(ref.region.value)/publishers/google/models/$(ref.gemini_model.value):generateContent
                    headers:
                      Authorization: ${"Bearer " + sys.get_env("GOOGLE_CLOUD_ACCESS_TOKEN")}
                      Content-Type: application/json
                    body:
                      contents:
                        - parts:
                          - text: |
                              Analyze this text content for:
                              1. Key themes and topics
                              2. Sentiment and emotional tone
                              3. Entity extraction (people, places, organizations)
                              4. Content categories and tags
                              5. Summary and key insights
                              6. Quality assessment and recommendations
                              
                              Content URI: ${content_uri}
                              
                              Provide detailed analysis with confidence scores.
                      generationConfig:
                        temperature: 0.2
                        topP: 0.8
                        maxOutputTokens: 2048
                  result: gemini_response
              - return_analysis:
                  return:
                    agent_type: "text_analyzer"
                    content_uri: ${content_uri}
                    analysis: ${gemini_response.body.candidates[0].content.parts[0].text}
                    confidence_score: 0.95

          # Image Analysis Agent Subworkflow
          image_analysis_agent:
            params: [content_uri]
            steps:
              - call_vision_api:
                  call: http.post
                  args:
                    url: https://vision.googleapis.com/v1/images:annotate
                    headers:
                      Authorization: ${"Bearer " + sys.get_env("GOOGLE_CLOUD_ACCESS_TOKEN")}
                      Content-Type: application/json
                    body:
                      requests:
                        - image:
                            source:
                              gcsImageUri: ${content_uri}
                          features:
                            - type: LABEL_DETECTION
                              maxResults: 20
                            - type: TEXT_DETECTION
                            - type: OBJECT_LOCALIZATION
                            - type: SAFE_SEARCH_DETECTION
                            - type: IMAGE_PROPERTIES
                  result: vision_response
              - enhance_with_gemini:
                  call: http.post
                  args:
                    url: https://$(ref.region.value)-aiplatform.googleapis.com/v1/projects/$(ref.project_id.value)/locations/$(ref.region.value)/publishers/google/models/$(ref.gemini_model.value):generateContent
                    headers:
                      Authorization: ${"Bearer " + sys.get_env("GOOGLE_CLOUD_ACCESS_TOKEN")}
                      Content-Type: application/json
                    body:
                      contents:
                        - parts:
                          - text: |
                              Analyze this image analysis data and provide comprehensive insights:
                              
                              Vision API Results: ${json.encode(vision_response.body)}
                              
                              Provide:
                              1. Scene understanding and context
                              2. Content categorization
                              3. Business relevance assessment
                              4. Quality and composition analysis
                              5. Actionable recommendations
                      generationConfig:
                        temperature: 0.3
                        topP: 0.8
                        maxOutputTokens: 1024
                  result: enhanced_analysis
              - return_analysis:
                  return:
                    agent_type: "image_analyzer"
                    content_uri: ${content_uri}
                    vision_data: ${vision_response.body}
                    enhanced_insights: ${enhanced_analysis.body.candidates[0].content.parts[0].text}
                    confidence_score: 0.88

          # Video Analysis Agent Subworkflow
          video_analysis_agent:
            params: [content_uri]
            steps:
              - extract_audio_transcript:
                  call: http.post
                  args:
                    url: https://speech.googleapis.com/v1/speech:longrunningrecognize
                    headers:
                      Authorization: ${"Bearer " + sys.get_env("GOOGLE_CLOUD_ACCESS_TOKEN")}
                      Content-Type: application/json
                    body:
                      config:
                        encoding: LINEAR16
                        sampleRateHertz: 16000
                        languageCode: en-US
                        enableAutomaticPunctuation: true
                        enableWordTimeOffsets: true
                      audio:
                        uri: ${content_uri}
                  result: speech_operation
              - analyze_with_gemini:
                  call: http.post
                  args:
                    url: https://$(ref.region.value)-aiplatform.googleapis.com/v1/projects/$(ref.project_id.value)/locations/$(ref.region.value)/publishers/google/models/$(ref.gemini_model.value):generateContent
                    headers:
                      Authorization: ${"Bearer " + sys.get_env("GOOGLE_CLOUD_ACCESS_TOKEN")}
                      Content-Type: application/json
                    body:
                      contents:
                        - parts:
                          - text: |
                              Analyze this video content based on audio transcript:
                              
                              Speech Operation: ${json.encode(speech_operation.body)}
                              
                              Provide:
                              1. Content themes and topics
                              2. Speaker sentiment and engagement
                              3. Key moments and highlights
                              4. Content structure analysis
                              5. Audience recommendations
                      generationConfig:
                        temperature: 0.3
                        topP: 0.8
                        maxOutputTokens: 1536
                  result: video_analysis
              - return_analysis:
                  return:
                    agent_type: "video_analyzer"
                    content_uri: ${content_uri}
                    transcript_data: ${speech_operation.body}
                    content_analysis: ${video_analysis.body.candidates[0].content.parts[0].text}
                    confidence_score: 0.82

          # Gemini 2.5 Reasoning Engine for Final Synthesis
          gemini_reasoning_engine:
            params: [analysis_data, content_uri]
            steps:
              - synthesize_intelligence:
                  call: http.post
                  args:
                    url: https://$(ref.region.value)-aiplatform.googleapis.com/v1/projects/$(ref.project_id.value)/locations/$(ref.region.value)/publishers/google/models/$(ref.gemini_model.value):generateContent
                    headers:
                      Authorization: ${"Bearer " + sys.get_env("GOOGLE_CLOUD_ACCESS_TOKEN")}
                      Content-Type: application/json
                    body:
                      contents:
                        - parts:
                          - text: |
                              As an advanced reasoning engine, synthesize the following multi-agent analysis results into comprehensive content intelligence:
                              
                              Agent Analysis Results: ${json.encode(analysis_data)}
                              Content URI: ${content_uri}
                              
                              Using advanced reasoning, provide:
                              1. COMPREHENSIVE SUMMARY: Unified understanding across all modalities
                              2. CROSS-MODAL INSIGHTS: Relationships between text, image, and video elements
                              3. BUSINESS INTELLIGENCE: Actionable insights for content strategy
                              4. CATEGORIZATION: Precise content categories with confidence scores
                              5. QUALITY ASSESSMENT: Content quality metrics and improvement recommendations
                              6. AUDIENCE ANALYSIS: Target audience identification and engagement strategies
                              7. COMPETITIVE ANALYSIS: Market positioning and differentiation opportunities
                              8. TREND IDENTIFICATION: Emerging patterns and trend alignment
                              9. RISK ASSESSMENT: Content risks and mitigation strategies
                              10. ACTIONABLE RECOMMENDATIONS: Specific next steps for content optimization
                              
                              Apply reasoning to identify patterns, contradictions, and emergent insights that individual agents might miss.
                              Provide confidence scores for each insight and explanation of reasoning process.
                      generationConfig:
                        temperature: 0.1
                        topP: 0.9
                        maxOutputTokens: 4096
                  result: reasoning_output
              - format_final_results:
                  assign:
                    - final_intelligence:
                        content_uri: ${content_uri}
                        timestamp: ${time.format(sys.now())}
                        agent_results: ${analysis_data}
                        reasoning_synthesis: ${reasoning_output.body.candidates[0].content.parts[0].text}
                        overall_confidence: 0.91
                        processing_status: "complete"
              - return_intelligence:
                  return: ${final_intelligence}
        serviceAccount: $(ref.content_intelligence_service_account.email)
    metadata:
      dependsOn:
        - enable_workflows_api
        - content_intelligence_service_account
        - content_processing_bucket

  # Cloud Function for Content Upload Trigger
  content_trigger_function:
    type: gcp-types/cloudfunctions-v1:projects.locations.functions
    properties:
      parent: projects/$(ref.project_id.value)/locations/$(ref.region.value)
      function:
        name: projects/$(ref.project_id.value)/locations/$(ref.region.value)/functions/$(ref.function_name.value)
        description: |
          Cloud Function that triggers the multi-agent content analysis workflow
          when new content is uploaded to the processing bucket.
        sourceArchiveUrl: gs://$(ref.content_processing_bucket.name)/function-source.zip
        entryPoint: trigger_content_analysis
        runtime: python311
        availableMemoryMb: $(ref.function_memory.value)
        timeout: $(ref.function_timeout.value)
        serviceAccountEmail: $(ref.content_intelligence_service_account.email)
        environmentVariables:
          WORKFLOW_NAME: $(ref.workflow_name.value)
          GCP_PROJECT: $(ref.project_id.value)
          FUNCTION_REGION: $(ref.region.value)
          BUCKET_NAME: $(ref.content_processing_bucket.name)
        eventTrigger:
          eventType: google.storage.object.finalize
          resource: projects/_/buckets/$(ref.content_processing_bucket.name)
        labels:
          environment: production
          purpose: content-intelligence
          function-type: trigger
    metadata:
      dependsOn:
        - enable_functions_api
        - content_intelligence_service_account
        - content_processing_bucket
        - content_analysis_workflow

  # Cloud Storage Bucket IAM for Function Access
  bucket_iam_policy:
    type: gcp-types/storage-v1:buckets.setIamPolicy
    properties:
      bucket: $(ref.content_processing_bucket.name)
      policy:
        bindings:
          - role: roles/storage.objectAdmin
            members:
              - serviceAccount:$(ref.content_intelligence_service_account.email)
          - role: roles/storage.legacyBucketReader
            members:
              - serviceAccount:$(ref.content_intelligence_service_account.email)
    metadata:
      dependsOn:
        - content_processing_bucket
        - content_intelligence_service_account

  # Cloud Monitoring Dashboard for System Observability
  monitoring_dashboard:
    type: gcp-types/monitoring-v1:projects.dashboards
    properties:
      parent: projects/$(ref.project_id.value)
      dashboard:
        displayName: Content Intelligence Workflow Dashboard
        dashboardFilters:
          - filterType: RESOURCE_LABEL
            labelKey: project_id
            stringValue: $(ref.project_id.value)
        gridLayout:
          columns: 12
          widgets:
            - title: Workflow Executions
              xyChart:
                dataSets:
                  - timeSeriesQuery:
                      timeSeriesFilter:
                        filter: resource.type="workflows.googleapis.com/Workflow"
                        aggregation:
                          alignmentPeriod: 60s
                          perSeriesAligner: ALIGN_RATE
                          crossSeriesReducer: REDUCE_SUM
                yAxis:
                  label: Executions/minute
                  scale: LINEAR
            - title: Function Invocations
              xyChart:
                dataSets:
                  - timeSeriesQuery:
                      timeSeriesFilter:
                        filter: resource.type="cloud_function"
                        aggregation:
                          alignmentPeriod: 60s
                          perSeriesAligner: ALIGN_RATE
                          crossSeriesReducer: REDUCE_SUM
                yAxis:
                  label: Invocations/minute
                  scale: LINEAR
            - title: Vertex AI API Calls
              xyChart:
                dataSets:
                  - timeSeriesQuery:
                      timeSeriesFilter:
                        filter: resource.type="consumed_api" AND resource.label.service="aiplatform.googleapis.com"
                        aggregation:
                          alignmentPeriod: 60s
                          perSeriesAligner: ALIGN_RATE
                          crossSeriesReducer: REDUCE_SUM
                yAxis:
                  label: API Calls/minute
                  scale: LINEAR
        labels:
          environment: production
          purpose: content-intelligence
    metadata:
      dependsOn:
        - content_analysis_workflow
        - content_trigger_function

# Outputs section providing key resource information
outputs:
  project_id:
    description: Google Cloud Project ID where resources are deployed
    value: $(ref.project_id.value)

  region:
    description: Google Cloud region where resources are deployed
    value: $(ref.region.value)

  content_bucket_name:
    description: Cloud Storage bucket name for content processing
    value: $(ref.content_processing_bucket.name)

  content_bucket_url:
    description: Cloud Storage bucket URL for content uploads
    value: gs://$(ref.content_processing_bucket.name)

  workflow_name:
    description: Cloud Workflows instance name for content analysis
    value: $(ref.content_analysis_workflow.name)

  workflow_url:
    description: Cloud Workflows console URL for monitoring
    value: https://console.cloud.google.com/workflows/workflow/$(ref.region.value)/$(ref.workflow_name.value)/executions?project=$(ref.project_id.value)

  function_name:
    description: Cloud Function name for content upload triggers
    value: $(ref.content_trigger_function.name)

  function_url:
    description: Cloud Function console URL for monitoring
    value: https://console.cloud.google.com/functions/details/$(ref.region.value)/$(ref.function_name.value)?project=$(ref.project_id.value)

  service_account_email:
    description: Service account email for content intelligence operations
    value: $(ref.content_intelligence_service_account.email)

  vertex_ai_endpoint:
    description: Vertex AI endpoint URL for Gemini model access
    value: https://$(ref.region.value)-aiplatform.googleapis.com

  monitoring_dashboard_url:
    description: Cloud Monitoring dashboard URL for system observability
    value: https://console.cloud.google.com/monitoring/dashboards/custom/$(ref.monitoring_dashboard.name)?project=$(ref.project_id.value)

  deployment_status:
    description: Deployment completion status
    value: "Multi-agent content intelligence workflow deployed successfully"

  next_steps:
    description: Next steps for using the deployed system
    value: |
      1. Upload content files to gs://$(ref.content_processing_bucket.name)/input/
      2. Monitor workflow executions at $(ref.workflow_url.value)
      3. Check processed results in gs://$(ref.content_processing_bucket.name)/results/
      4. View system metrics at $(ref.monitoring_dashboard_url.value)

  cost_optimization_tips:
    description: Tips for optimizing costs
    value: |
      - Monitor Vertex AI API usage and implement caching for repeated content
      - Use Cloud Storage lifecycle policies to manage content retention
      - Configure appropriate function memory and timeout settings
      - Review and optimize workflow execution patterns

  security_considerations:
    description: Important security considerations
    value: |
      - Service account follows least privilege principle
      - Uniform bucket-level access enabled for enhanced security
      - Content processing isolated to dedicated service account
      - API access restricted to authorized service accounts only