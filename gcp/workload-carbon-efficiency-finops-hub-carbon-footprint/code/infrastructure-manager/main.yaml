# Infrastructure Manager Configuration for Carbon Efficiency System
# This configuration deploys a complete carbon efficiency monitoring solution
# that integrates FinOps Hub 2.0 with Cloud Carbon Footprint monitoring

# Import the Terraform Google Cloud provider
terraform:
  required_version: ">= 1.0"
  required_providers:
    google:
      source: "hashicorp/google"
      version: "~> 5.0"
    google-beta:
      source: "hashicorp/google-beta"
      version: "~> 5.0"

# Input variables for customizable deployment
variables:
  project_id:
    description: "Google Cloud Project ID for carbon efficiency deployment"
    type: string
    
  region:
    description: "Primary region for resource deployment"
    type: string
    default: "us-central1"
    
  zone:
    description: "Primary zone for compute resources"
    type: string
    default: "us-central1-a"
    
  environment:
    description: "Environment designation (dev, staging, prod)"
    type: string
    default: "dev"
    
  notification_email:
    description: "Email address for carbon efficiency alerts"
    type: string
    default: ""
    
  enable_optimization_automation:
    description: "Enable automated optimization based on recommendations"
    type: bool
    default: false
    
  carbon_efficiency_threshold:
    description: "Threshold score below which alerts are triggered"
    type: number
    default: 70.0

# Configure the Google Cloud provider with project and region
provider "google":
  project = var.project_id
  region  = var.region

provider "google-beta":
  project = var.project_id
  region  = var.region

# Enable required Google Cloud APIs for carbon efficiency monitoring
resources:
  # Cloud Billing API for FinOps Hub access
  billing_api:
    type: google_project_service
    properties:
      project: ${var.project_id}
      service: cloudbilling.googleapis.com
      disable_dependent_services: true
      disable_on_destroy: false

  # Recommender API for optimization insights
  recommender_api:
    type: google_project_service
    properties:
      project: ${var.project_id}
      service: recommender.googleapis.com
      disable_dependent_services: true
      disable_on_destroy: false
    depends_on:
      - billing_api

  # Cloud Monitoring API for metrics and dashboards
  monitoring_api:
    type: google_project_service
    properties:
      project: ${var.project_id}
      service: monitoring.googleapis.com
      disable_dependent_services: true
      disable_on_destroy: false

  # Cloud Functions API for serverless automation
  functions_api:
    type: google_project_service
    properties:
      project: ${var.project_id}
      service: cloudfunctions.googleapis.com
      disable_dependent_services: true
      disable_on_destroy: false
    depends_on:
      - monitoring_api

  # Cloud Scheduler API for automated workflows
  scheduler_api:
    type: google_project_service
    properties:
      project: ${var.project_id}
      service: cloudscheduler.googleapis.com
      disable_dependent_services: true
      disable_on_destroy: false

  # Cloud Workflows API for orchestration
  workflows_api:
    type: google_project_service
    properties:
      project: ${var.project_id}
      service: workflows.googleapis.com
      disable_dependent_services: true
      disable_on_destroy: false
    depends_on:
      - scheduler_api

  # Pub/Sub API for event-driven automation
  pubsub_api:
    type: google_project_service
    properties:
      project: ${var.project_id}
      service: pubsub.googleapis.com
      disable_dependent_services: true
      disable_on_destroy: false

  # Cloud Build API for function deployment
  build_api:
    type: google_project_service
    properties:
      project: ${var.project_id}
      service: cloudbuild.googleapis.com
      disable_dependent_services: true
      disable_on_destroy: false

  # Service account for carbon efficiency monitoring with least privilege access
  carbon_efficiency_service_account:
    type: google_service_account
    properties:
      account_id: carbon-efficiency-sa
      display_name: "Carbon Efficiency Service Account"
      description: "Service account for carbon footprint and FinOps monitoring automation"
      project: ${var.project_id}
    depends_on:
      - billing_api

  # IAM binding for carbon footprint viewing permissions
  carbon_viewer_binding:
    type: google_project_iam_member
    properties:
      project: ${var.project_id}
      role: "roles/billing.carbonViewer"
      member: "serviceAccount:${carbon_efficiency_service_account.email}"
    depends_on:
      - carbon_efficiency_service_account

  # IAM binding for recommender access
  recommender_viewer_binding:
    type: google_project_iam_member
    properties:
      project: ${var.project_id}
      role: "roles/recommender.viewer"
      member: "serviceAccount:${carbon_efficiency_service_account.email}"
    depends_on:
      - carbon_efficiency_service_account

  # IAM binding for monitoring access
  monitoring_editor_binding:
    type: google_project_iam_member
    properties:
      project: ${var.project_id}
      role: "roles/monitoring.editor"
      member: "serviceAccount:${carbon_efficiency_service_account.email}"
    depends_on:
      - carbon_efficiency_service_account

  # IAM binding for Cloud Functions execution
  functions_invoker_binding:
    type: google_project_iam_member
    properties:
      project: ${var.project_id}
      role: "roles/cloudfunctions.invoker"
      member: "serviceAccount:${carbon_efficiency_service_account.email}"
    depends_on:
      - carbon_efficiency_service_account

  # Cloud Storage bucket for function source code
  function_source_bucket:
    type: google_storage_bucket
    properties:
      name: "${var.project_id}-carbon-efficiency-functions"
      location: ${var.region}
      uniform_bucket_level_access: true
      public_access_prevention: "enforced"
      versioning:
        enabled: true
      lifecycle_rule:
        - condition:
            age: 30
          action:
            type: "Delete"
    depends_on:
      - functions_api

  # Pub/Sub topic for carbon optimization events
  carbon_optimization_topic:
    type: google_pubsub_topic
    properties:
      name: "carbon-optimization"
      project: ${var.project_id}
      message_retention_duration: "604800s"  # 7 days
    depends_on:
      - pubsub_api

  # BigQuery dataset for carbon efficiency analytics (optional for advanced analysis)
  carbon_efficiency_dataset:
    type: google_bigquery_dataset
    properties:
      dataset_id: "carbon_efficiency"
      project: ${var.project_id}
      location: ${var.region}
      description: "Dataset for carbon efficiency and FinOps Hub analytics"
      default_table_expiration_ms: 2592000000  # 30 days
      access:
        - role: "OWNER"
          user_by_email: "${carbon_efficiency_service_account.email}"

  # Cloud Function for carbon efficiency correlation
  carbon_efficiency_correlator:
    type: google_cloudfunctions2_function
    properties:
      name: "carbon-efficiency-correlator"
      location: ${var.region}
      project: ${var.project_id}
      description: "Function to correlate FinOps Hub insights with carbon footprint data"
      
      build_config:
        runtime: "python39"
        entry_point: "correlate_carbon_efficiency"
        source:
          storage_source:
            bucket: ${function_source_bucket.name}
            object: "correlator-source.zip"
      
      service_config:
        max_instance_count: 10
        min_instance_count: 0
        available_memory: "512Mi"
        timeout_seconds: 300
        service_account_email: ${carbon_efficiency_service_account.email}
        environment_variables:
          BILLING_ACCOUNT_ID: "${data.google_billing_account.account.id}"
          CARBON_EFFICIENCY_THRESHOLD: "${var.carbon_efficiency_threshold}"
        
        ingress_settings: "ALLOW_INTERNAL_ONLY"
        all_traffic_on_latest_revision: true
    depends_on:
      - functions_api
      - carbon_efficiency_service_account
      - function_source_bucket

  # Cloud Function for optimization automation
  carbon_efficiency_optimizer:
    type: google_cloudfunctions2_function
    properties:
      name: "carbon-efficiency-optimizer"
      location: ${var.region}
      project: ${var.project_id}
      description: "Function to implement approved carbon efficiency optimizations"
      
      build_config:
        runtime: "python39"
        entry_point: "optimize_carbon_efficiency"
        source:
          storage_source:
            bucket: ${function_source_bucket.name}
            object: "optimizer-source.zip"
      
      service_config:
        max_instance_count: 5
        min_instance_count: 0
        available_memory: "1Gi"
        timeout_seconds: 540
        service_account_email: ${carbon_efficiency_service_account.email}
        environment_variables:
          OPTIMIZATION_ENABLED: "${var.enable_optimization_automation}"
          PROJECT_ID: "${var.project_id}"
        
        ingress_settings: "ALLOW_INTERNAL_ONLY"
        all_traffic_on_latest_revision: true

      event_trigger:
        trigger_region: ${var.region}
        event_type: "google.cloud.pubsub.topic.v1.messagePublished"
        pubsub_topic: ${carbon_optimization_topic.id}
        retry_policy: "RETRY_POLICY_RETRY"
    depends_on:
      - functions_api
      - carbon_optimization_topic
      - carbon_efficiency_service_account

  # Cloud Workflow for carbon efficiency automation
  carbon_efficiency_workflow:
    type: google_workflows_workflow
    properties:
      name: "carbon-efficiency-workflow"
      region: ${var.region}
      project: ${var.project_id}
      description: "Workflow for automated carbon efficiency monitoring and reporting"
      service_account: ${carbon_efficiency_service_account.email}
      source_contents: |
        main:
          params: [args]
          steps:
            - initialize:
                assign:
                  - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
                  - function_url: "https://${var.region}-${var.project_id}.cloudfunctions.net/carbon-efficiency-correlator"
            
            - collect_efficiency_data:
                call: http.post
                args:
                  url: ${function_url}
                  headers:
                    Content-Type: "application/json"
                  body:
                    action: "analyze_efficiency"
                    timestamp: ${sys.now()}
                result: efficiency_result
            
            - check_efficiency_score:
                switch:
                  - condition: ${efficiency_result.body.efficiency_score < var.carbon_efficiency_threshold}
                    next: generate_optimization_report
                  - condition: ${efficiency_result.body.efficiency_score >= var.carbon_efficiency_threshold}
                    next: log_healthy_status
            
            - generate_optimization_report:
                assign:
                  - report_data:
                      score: ${efficiency_result.body.efficiency_score}
                      recommendations_count: ${efficiency_result.body.recommendations_count}
                      status: "optimization_needed"
                      generated_at: ${sys.now()}
                next: store_report
            
            - log_healthy_status:
                assign:
                  - report_data:
                      score: ${efficiency_result.body.efficiency_score}
                      status: "healthy"
                      generated_at: ${sys.now()}
                next: store_report
            
            - store_report:
                call: googleapis.logging.v2.entries.write
                args:
                  body:
                    entries:
                      - logName: "projects/${project_id}/logs/carbon-efficiency-reports"
                        resource:
                          type: "global"
                        jsonPayload: ${report_data}
                        severity: "INFO"
                result: log_result
            
            - return_result:
                return: ${report_data}
    depends_on:
      - workflows_api
      - carbon_efficiency_correlator

  # Cloud Scheduler job for daily carbon efficiency analysis
  carbon_efficiency_scheduler:
    type: google_cloud_scheduler_job
    properties:
      name: "carbon-efficiency-scheduler"
      project: ${var.project_id}
      region: ${var.region}
      description: "Daily trigger for carbon efficiency workflow"
      schedule: "0 9 * * *"  # 9 AM daily
      time_zone: "UTC"
      
      http_target:
        http_method: "POST"
        uri: "https://workflowexecutions.googleapis.com/v1/projects/${var.project_id}/locations/${var.region}/workflows/carbon-efficiency-workflow/executions"
        headers:
          Content-Type: "application/json"
        body: '{"argument": "{\"trigger\": \"scheduled\"}"}'
        
        oidc_token:
          service_account_email: ${carbon_efficiency_service_account.email}
          audience: "https://workflowexecutions.googleapis.com/v1/projects/${var.project_id}/locations/${var.region}/workflows/carbon-efficiency-workflow/executions"
      
      retry_config:
        retry_count: 3
        max_retry_duration: "3600s"
        min_backoff_duration: "60s"
        max_backoff_duration: "300s"
    depends_on:
      - scheduler_api
      - carbon_efficiency_workflow

  # Cloud Monitoring alert policy for low carbon efficiency
  carbon_efficiency_alert_policy:
    type: google_monitoring_alert_policy
    properties:
      project: ${var.project_id}
      display_name: "Carbon Efficiency Alert"
      documentation:
        content: "Alert triggered when carbon efficiency score falls below threshold"
        mime_type: "text/markdown"
      
      conditions:
        - display_name: "Low Carbon Efficiency Score"
          condition_threshold:
            filter: 'metric.type="custom.googleapis.com/carbon_efficiency/score"'
            comparison: "COMPARISON_LESS_THAN"
            threshold_value: ${var.carbon_efficiency_threshold}
            duration: "300s"
            aggregations:
              - alignment_period: "60s"
                per_series_aligner: "ALIGN_MEAN"
      
      alert_strategy:
        auto_close: "1800s"
      
      combiner: "OR"
      enabled: true
      
      # Add notification channel if email is provided
      notification_channels: ${var.notification_email != "" ? [google_monitoring_notification_channel.email_channel[0].id] : []}
    depends_on:
      - monitoring_api

  # Email notification channel (conditional)
  email_notification_channel:
    type: google_monitoring_notification_channel
    count: ${var.notification_email != "" ? 1 : 0}
    properties:
      project: ${var.project_id}
      display_name: "Carbon Efficiency Email Alerts"
      type: "email"
      labels:
        email_address: ${var.notification_email}
      description: "Email notifications for carbon efficiency alerts"
    depends_on:
      - monitoring_api

  # Log sink for FinOps Hub insights to BigQuery
  finops_log_sink:
    type: google_logging_project_sink
    properties:
      name: "finops-hub-insights"
      project: ${var.project_id}
      destination: "bigquery.googleapis.com/projects/${var.project_id}/datasets/${carbon_efficiency_dataset.dataset_id}"
      filter: 'resource.type="global" AND jsonPayload.source="finops-hub"'
      unique_writer_identity: true
      bigquery_options:
        use_partitioned_tables: true
    depends_on:
      - carbon_efficiency_dataset

  # Custom metric descriptors for carbon efficiency tracking
  carbon_efficiency_metric:
    type: google_monitoring_metric_descriptor
    properties:
      project: ${var.project_id}
      type: "custom.googleapis.com/carbon_efficiency/score"
      metric_kind: "GAUGE"
      value_type: "DOUBLE"
      description: "Carbon efficiency score combining cost and environmental impact"
      display_name: "Carbon Efficiency Score"
      unit: "1"
      labels:
        - key: "resource_type"
          value_type: "STRING"
          description: "Type of resource being measured"
        - key: "optimization_opportunity"
          value_type: "STRING"
          description: "Primary optimization opportunity identified"
    depends_on:
      - monitoring_api

  # Optimization impact metric descriptor
  optimization_impact_metric:
    type: google_monitoring_metric_descriptor
    properties:
      project: ${var.project_id}
      type: "custom.googleapis.com/optimization/carbon_impact"
      metric_kind: "GAUGE"
      value_type: "DOUBLE"
      description: "Estimated carbon impact reduction from implemented optimizations"
      display_name: "Optimization Carbon Impact"
      unit: "kg"
      labels:
        - key: "optimization_type"
          value_type: "STRING"
          description: "Type of optimization applied"
        - key: "resource_category"
          value_type: "STRING"
          description: "Category of resources optimized"
    depends_on:
      - monitoring_api

# Data sources for external information
data:
  # Get the billing account for carbon footprint access
  google_billing_account:
    account:
      open: true

  # Get project information
  google_project:
    current: {}

# Output values for verification and integration
outputs:
  project_id:
    description: "Google Cloud Project ID"
    value: ${var.project_id}
    
  region:
    description: "Primary deployment region"
    value: ${var.region}
    
  service_account_email:
    description: "Email of the carbon efficiency service account"
    value: ${carbon_efficiency_service_account.email}
    
  correlator_function_url:
    description: "URL of the carbon efficiency correlator function"
    value: ${carbon_efficiency_correlator.service_config[0].uri}
    
  optimizer_function_name:
    description: "Name of the optimization function"
    value: ${carbon_efficiency_optimizer.name}
    
  workflow_name:
    description: "Name of the carbon efficiency workflow"
    value: ${carbon_efficiency_workflow.name}
    
  scheduler_job_name:
    description: "Name of the scheduler job for automation"
    value: ${carbon_efficiency_scheduler.name}
    
  pubsub_topic_name:
    description: "Name of the Pub/Sub topic for optimization events"
    value: ${carbon_optimization_topic.name}
    
  dataset_id:
    description: "BigQuery dataset ID for analytics"
    value: ${carbon_efficiency_dataset.dataset_id}
    
  alert_policy_name:
    description: "Name of the carbon efficiency alert policy"
    value: ${carbon_efficiency_alert_policy.display_name}
    
  finops_hub_url:
    description: "URL to access FinOps Hub console"
    value: "https://console.cloud.google.com/billing/finops"
    
  carbon_footprint_url:
    description: "URL to access Carbon Footprint console"
    value: "https://console.cloud.google.com/carbon"
    
  monitoring_dashboard_url:
    description: "URL to access Cloud Monitoring dashboards"
    value: "https://console.cloud.google.com/monitoring/dashboards"