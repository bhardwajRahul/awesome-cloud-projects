# ============================================================================
# Terraform Variables Configuration Example
# Real-Time Fleet Optimization with Cloud Fleet Routing API and Cloud Bigtable
# ============================================================================
# Copy this file to terraform.tfvars and customize the values for your deployment.
# This example provides production-ready configurations with security best practices.

# ============================================================================
# Core Project Configuration (REQUIRED)
# ============================================================================

# Google Cloud Project ID where resources will be deployed
project_id = "your-fleet-optimization-project"

# Primary region for resource deployment
region = "us-central1"

# Zone for Bigtable primary cluster
zone = "us-central1-a"

# Secondary region for disaster recovery
backup_region = "us-east1"

# Zone for Bigtable replica cluster (if replication enabled)
replica_zone = "us-east1-a"

# Environment designation (affects deletion protection and resource sizing)
environment = "production"  # Options: development, staging, production

# ============================================================================
# Cloud Bigtable Configuration
# ============================================================================

# Bigtable cluster autoscaling settings
bigtable_min_nodes = 3    # Minimum nodes for production workloads
bigtable_max_nodes = 10   # Maximum nodes for peak traffic

# Enable Bigtable replication for high availability (recommended for production)
enable_bigtable_replication = true

# Target CPU utilization for autoscaling (70% recommended)
bigtable_cpu_target = 70

# ============================================================================
# Cloud Functions Configuration
# ============================================================================

# Maximum number of function instances for auto-scaling
max_function_instances = 100

# Function execution timeout in seconds
function_timeout_seconds = 540

# ============================================================================
# Security and Access Configuration
# ============================================================================

# Allow public access to fleet management dashboard (false for internal-only)
dashboard_public_access = false

# Enable customer-managed encryption keys for data at rest
enable_kms_encryption = true

# IP addresses/CIDR blocks allowed to access fleet services
allowed_source_ips = [
  "10.0.0.0/8",      # Internal company network
  "192.168.1.0/24"   # VPN access
]

# ============================================================================
# Fleet Routing API Configuration
# ============================================================================

# Google Maps Platform API key (leave empty to manage separately)
# This should be set as an environment variable: TF_VAR_maps_api_key
maps_api_key = ""

# Enable real-time route optimization
enable_route_optimization = true

# Number of route optimization requests to process in a batch
optimization_batch_size = 50

# ============================================================================
# Data Management Configuration
# ============================================================================

# Number of days to retain historical traffic and location data
data_retention_days = 30

# Enable automated data cleanup jobs
enable_data_cleanup = true

# Frequency in hours for automated data backups
backup_frequency_hours = 24

# ============================================================================
# Monitoring and Alerting Configuration
# ============================================================================

# Enable Cloud Monitoring alerts
enable_monitoring_alerts = true

# Notification channel IDs for alerts (create these in Cloud Monitoring first)
alert_notification_channels = [
  # "projects/your-project/notificationChannels/123456789",
  # "projects/your-project/notificationChannels/987654321"
]

# Number of days to retain Cloud Function and system logs
log_retention_days = 7

# Enable debug-level logging (only for development)
enable_debug_logging = false

# ============================================================================
# Performance and Scaling Configuration
# ============================================================================

# Hours to retain Pub/Sub messages for replay capability
pubsub_message_retention_hours = 168  # 7 days

# Enable high availability features (multi-region deployment)
enable_high_availability = true

# ============================================================================
# Cost Optimization Configuration
# ============================================================================

# Use preemptible instances for non-critical workloads
use_preemptible_instances = false

# Enable committed use discounts for predictable workloads
enable_committed_use_discounts = true

# Storage class for Cloud Storage buckets
storage_class = "STANDARD"  # Options: STANDARD, NEARLINE, COLDLINE, ARCHIVE

# ============================================================================
# Development and Testing Configuration
# ============================================================================

# Deploy traffic simulation functions for testing
simulate_traffic_events = false

# Enable test data generation for development environments
test_data_generation = false

# ============================================================================
# Compliance and Governance Configuration
# ============================================================================

# Enable audit logging for compliance
enable_audit_logging = true

# Required data residency region for compliance (if different from primary)
data_residency_region = ""

# Number of days between automatic encryption key rotations
encryption_key_rotation_days = 90

# ============================================================================
# Resource Tagging and Organization
# ============================================================================

# Additional labels for all resources
resource_labels = {
  application    = "fleet-optimization"
  managed-by     = "terraform"
  team          = "logistics"
  environment   = "production"
  cost-center   = "logistics"
  owner         = "fleet-ops-team"
  compliance    = "gdpr-compliant"
}

# Cost center code for billing tracking
cost_center = "logistics"

# ============================================================================
# Network and Connectivity Configuration
# ============================================================================

# Existing VPC network name (leave empty to use default)
vpc_network_name = ""

# Existing subnet name (leave empty to use default)
subnet_name = ""

# Enable Private Google Access for secure API communication
enable_private_google_access = true

# ============================================================================
# Fleet-Specific Configuration
# ============================================================================

# Maximum number of vehicles in a single route optimization request
max_vehicles_per_optimization = 100

# Units for vehicle capacity measurement
vehicle_capacity_units = "kg"  # Options: kg, lbs, cubic_meters, cubic_feet, packages

# Default vehicle speed for route calculations when real-time data unavailable
default_vehicle_speed_kmh = 50

# Optimization objectives (in order of priority)
optimization_objectives = [
  "minimize_travel_time",
  "minimize_distance",
  "minimize_cost"
]

# ============================================================================
# Example Configurations for Different Environments
# ============================================================================

# Development Environment Example:
# environment = "development"
# bigtable_min_nodes = 1
# bigtable_max_nodes = 3
# enable_bigtable_replication = false
# max_function_instances = 10
# dashboard_public_access = true
# enable_debug_logging = true
# simulate_traffic_events = true
# test_data_generation = true

# Staging Environment Example:
# environment = "staging"
# bigtable_min_nodes = 2
# bigtable_max_nodes = 5
# enable_bigtable_replication = false
# max_function_instances = 20
# dashboard_public_access = false
# enable_debug_logging = false

# Production Environment Example:
# environment = "production"
# bigtable_min_nodes = 3
# bigtable_max_nodes = 10
# enable_bigtable_replication = true
# max_function_instances = 100
# dashboard_public_access = false
# enable_monitoring_alerts = true
# enable_audit_logging = true
# enable_high_availability = true

# ============================================================================
# Security Notes
# ============================================================================

# 1. API Keys: Store sensitive API keys as environment variables or in Secret Manager
#    Example: export TF_VAR_maps_api_key="your-maps-api-key"

# 2. Service Account: Ensure the Terraform service account has the following roles:
#    - Bigtable Admin
#    - Pub/Sub Admin
#    - Cloud Functions Admin
#    - Storage Admin
#    - KMS Admin
#    - Secret Manager Admin
#    - Service Usage Admin
#    - Project IAM Admin

# 3. Network Security: Configure VPC firewall rules to restrict access to fleet services

# 4. Data Encryption: Enable customer-managed encryption keys for sensitive data

# 5. Audit Logging: Enable audit logs for compliance and security monitoring

# ============================================================================
# Cost Optimization Notes
# ============================================================================

# 1. Bigtable: Start with minimum nodes and enable autoscaling
# 2. Functions: Use appropriate memory allocation based on workload
# 3. Storage: Use appropriate storage class based on access patterns
# 4. Monitoring: Set up budget alerts to track spending
# 5. Cleanup: Enable data lifecycle management to control storage costs

# ============================================================================
# Deployment Instructions
# ============================================================================

# 1. Copy this file to terraform.tfvars
# 2. Update the project_id and other required values
# 3. Configure authentication: gcloud auth application-default login
# 4. Initialize Terraform: terraform init
# 5. Plan deployment: terraform plan
# 6. Apply configuration: terraform apply
# 7. Verify deployment using the outputs and dashboard URL