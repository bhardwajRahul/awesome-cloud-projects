# Infrastructure Manager Configuration for Multi-Language Customer Support Automation
# This configuration deploys AI services for automated multilingual customer support
# including Speech-to-Text, Translation, Natural Language, Text-to-Speech, and orchestration

apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeNetwork
metadata:
  name: support-network
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  autoCreateSubnetworks: false
  description: "VPC network for multilingual customer support services"
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeSubnetwork
metadata:
  name: support-subnet
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  description: "Subnet for customer support infrastructure"
  ipCidrRange: "10.0.0.0/24"
  networkRef:
    name: support-network
  region: ${REGION}
  privateIpGoogleAccess: true
---
# Enable required APIs for AI services and infrastructure
apiVersion: serviceusage.cnrm.cloud.google.com/v1beta1
kind: Service
metadata:
  name: speech-api
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  serviceId: speech.googleapis.com
---
apiVersion: serviceusage.cnrm.cloud.google.com/v1beta1
kind: Service
metadata:
  name: translate-api
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  serviceId: translate.googleapis.com
---
apiVersion: serviceusage.cnrm.cloud.google.com/v1beta1
kind: Service
metadata:
  name: language-api
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  serviceId: language.googleapis.com
---
apiVersion: serviceusage.cnrm.cloud.google.com/v1beta1
kind: Service
metadata:
  name: texttospeech-api
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  serviceId: texttospeech.googleapis.com
---
apiVersion: serviceusage.cnrm.cloud.google.com/v1beta1
kind: Service
metadata:
  name: cloudfunctions-api
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  serviceId: cloudfunctions.googleapis.com
---
apiVersion: serviceusage.cnrm.cloud.google.com/v1beta1
kind: Service
metadata:
  name: workflows-api
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  serviceId: workflows.googleapis.com
---
apiVersion: serviceusage.cnrm.cloud.google.com/v1beta1
kind: Service
metadata:
  name: firestore-api
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  serviceId: firestore.googleapis.com
---
apiVersion: serviceusage.cnrm.cloud.google.com/v1beta1
kind: Service
metadata:
  name: monitoring-api
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  serviceId: monitoring.googleapis.com
---
apiVersion: serviceusage.cnrm.cloud.google.com/v1beta1
kind: Service
metadata:
  name: logging-api
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  serviceId: logging.googleapis.com
---
# Cloud Storage bucket for audio files and configurations
apiVersion: storage.cnrm.cloud.google.com/v1beta1
kind: StorageBucket
metadata:
  name: customer-support-audio-${RANDOM_SUFFIX}
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  location: ${REGION}
  storageClass: STANDARD
  versioning:
    enabled: true
  uniformBucketLevelAccess: true
  publicAccessPrevention: enforced
  lifecycleRule:
    - action:
        type: Delete
      condition:
        age: 30
        withState: ARCHIVED
    - action:
        type: SetStorageClass
        storageClass: NEARLINE
      condition:
        age: 7
  cors:
    - origin: ["*"]
      method: ["GET", "POST", "PUT"]
      responseHeader: ["Content-Type", "Access-Control-Allow-Origin"]
      maxAgeSeconds: 3600
---
# Firestore database for conversation storage
apiVersion: firestore.cnrm.cloud.google.com/v1beta1
kind: FirestoreDatabase
metadata:
  name: multilang-support-db
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  locationId: ${REGION}
  type: FIRESTORE_NATIVE
  concurrencyMode: OPTIMISTIC
  appEngineIntegrationMode: DISABLED
  pointInTimeRecoveryEnablement: POINT_IN_TIME_RECOVERY_ENABLED
  deleteProtectionState: DELETE_PROTECTION_DISABLED
---
# Service account for Cloud Functions with appropriate permissions
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMServiceAccount
metadata:
  name: multilang-processor-sa
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  displayName: "Multilingual Processor Service Account"
  description: "Service account for multilingual customer support processing function"
---
# IAM policy bindings for the service account
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: multilang-speech-access
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  member: serviceAccount:multilang-processor-sa@${PROJECT_ID}.iam.gserviceaccount.com
  role: roles/speech.editor
  resourceRef:
    apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
    kind: Project
    external: projects/${PROJECT_ID}
---
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: multilang-translate-access
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  member: serviceAccount:multilang-processor-sa@${PROJECT_ID}.iam.gserviceaccount.com
  role: roles/cloudtranslate.editor
  resourceRef:
    apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
    kind: Project
    external: projects/${PROJECT_ID}
---
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: multilang-language-access
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  member: serviceAccount:multilang-processor-sa@${PROJECT_ID}.iam.gserviceaccount.com
  role: roles/language.editor
  resourceRef:
    apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
    kind: Project
    external: projects/${PROJECT_ID}
---
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: multilang-tts-access
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  member: serviceAccount:multilang-processor-sa@${PROJECT_ID}.iam.gserviceaccount.com
  role: roles/texttospeech.editor
  resourceRef:
    apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
    kind: Project
    external: projects/${PROJECT_ID}
---
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: multilang-firestore-access
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  member: serviceAccount:multilang-processor-sa@${PROJECT_ID}.iam.gserviceaccount.com
  role: roles/datastore.user
  resourceRef:
    apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
    kind: Project
    external: projects/${PROJECT_ID}
---
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: multilang-storage-access
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  member: serviceAccount:multilang-processor-sa@${PROJECT_ID}.iam.gserviceaccount.com
  role: roles/storage.objectAdmin
  resourceRef:
    apiVersion: storage.cnrm.cloud.google.com/v1beta1
    kind: StorageBucket
    name: customer-support-audio-${RANDOM_SUFFIX}
---
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: multilang-logging-access
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  member: serviceAccount:multilang-processor-sa@${PROJECT_ID}.iam.gserviceaccount.com
  role: roles/logging.logWriter
  resourceRef:
    apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
    kind: Project
    external: projects/${PROJECT_ID}
---
# Cloud Function for AI service orchestration
apiVersion: cloudfunctions.cnrm.cloud.google.com/v1beta1
kind: CloudFunctionsFunction
metadata:
  name: multilang-processor-${RANDOM_SUFFIX}
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  region: ${REGION}
  description: "Processes customer audio through AI pipeline for multilingual support"
  runtime: python39
  availableMemoryMb: 512
  timeout: 60s
  entryPoint: process_customer_audio
  httpsTrigger: {}
  serviceAccountEmail: multilang-processor-sa@${PROJECT_ID}.iam.gserviceaccount.com
  environmentVariables:
    BUCKET_NAME: customer-support-audio-${RANDOM_SUFFIX}
    PROJECT_ID: ${PROJECT_ID}
    REGION: ${REGION}
  sourceArchiveUrl: gs://gcf-sources-${PROJECT_ID}/multilang-function.zip
  labels:
    environment: production
    application: customer-support
    component: ai-processor
---
# Cloud Workflows for complex support scenarios
apiVersion: workflows.cnrm.cloud.google.com/v1beta1
kind: WorkflowsWorkflow
metadata:
  name: support-workflow-${RANDOM_SUFFIX}
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  region: ${REGION}
  description: "Orchestrates complex customer support scenarios with AI processing"
  serviceAccount: multilang-processor-sa@${PROJECT_ID}.iam.gserviceaccount.com
  sourceContents: |
    main:
      params: [args]
      steps:
        - init:
            assign:
              - customer_id: ${args.customer_id}
              - audio_data: ${args.audio_data}
              - session_id: ${args.session_id}
        
        - process_audio:
            call: http.post
            args:
              url: https://${REGION}-${PROJECT_ID}.cloudfunctions.net/multilang-processor-${RANDOM_SUFFIX}
              body:
                customer_id: ${customer_id}
                audio_data: ${audio_data}
                session_id: ${session_id}
            result: processing_result
        
        - check_sentiment:
            switch:
              - condition: ${processing_result.body.sentiment_score < -0.5}
                next: escalate_to_human
              - condition: ${processing_result.body.sentiment_score > 0.5}
                next: send_satisfaction_survey
            next: log_interaction
        
        - escalate_to_human:
            call: sys.log
            args:
              data:
                message: "Escalating to human agent"
                customer_id: ${customer_id}
                session_id: ${session_id}
                urgency: "high"
                sentiment_score: ${processing_result.body.sentiment_score}
              severity: "WARNING"
            next: log_interaction
        
        - send_satisfaction_survey:
            call: sys.log
            args:
              data:
                message: "Sending satisfaction survey"
                customer_id: ${customer_id}
                session_id: ${session_id}
                language: ${processing_result.body.detected_language}
              severity: "INFO"
            next: log_interaction
        
        - log_interaction:
            call: sys.log
            args:
              data: ${processing_result.body}
              severity: "INFO"
        
        - return_response:
            return: ${processing_result.body}
  labels:
    environment: production
    application: customer-support
    component: workflow-orchestrator
---
# Log-based metrics for monitoring sentiment trends
apiVersion: logging.cnrm.cloud.google.com/v1beta1
kind: LoggingMetric
metadata:
  name: sentiment-score-metric
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  description: "Tracks customer sentiment scores from AI processing"
  filter: |
    resource.type="cloud_function"
    resource.labels.function_name="multilang-processor-${RANDOM_SUFFIX}"
    jsonPayload.sentiment_score exists
  valueExtractor: "EXTRACT(jsonPayload.sentiment_score)"
  metricDescriptor:
    displayName: "Customer Sentiment Score"
    metricKind: GAUGE
    valueType: DOUBLE
    unit: "1"
  labelExtractors:
    customer_id: "EXTRACT(jsonPayload.customer_id)"
    detected_language: "EXTRACT(jsonPayload.detected_language)"
---
apiVersion: logging.cnrm.cloud.google.com/v1beta1
kind: LoggingMetric
metadata:
  name: language-detection-metric
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  description: "Tracks detected languages from customer interactions"
  filter: |
    resource.type="cloud_function"
    resource.labels.function_name="multilang-processor-${RANDOM_SUFFIX}"
    jsonPayload.detected_language exists
  metricDescriptor:
    displayName: "Detected Languages"
    metricKind: GAUGE
    valueType: INT64
    unit: "1"
  labelExtractors:
    detected_language: "EXTRACT(jsonPayload.detected_language)"
---
# Monitoring alert policy for negative sentiment detection
apiVersion: monitoring.cnrm.cloud.google.com/v1beta1
kind: MonitoringAlertPolicy
metadata:
  name: high-negative-sentiment-alert
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  displayName: "High Negative Sentiment Alert"
  documentation:
    content: |
      This alert triggers when customer sentiment scores drop below -0.5,
      indicating frustrated customers requiring immediate attention.
    mimeType: text/markdown
  conditions:
    - displayName: "Negative sentiment threshold exceeded"
      conditionThreshold:
        filter: |
          resource.type="gce_instance"
          metric.type="logging.googleapis.com/user/sentiment-score-metric"
        comparison: COMPARISON_LESS_THAN
        thresholdValue: -0.5
        duration: 300s
        aggregations:
          - alignmentPeriod: 60s
            perSeriesAligner: ALIGN_MEAN
            crossSeriesReducer: REDUCE_MEAN
            groupByFields:
              - resource.labels.customer_id
  combiner: OR
  enabled: true
  alertStrategy:
    autoClose: 1800s
  severity: WARNING
---
# Cloud Monitoring dashboard for customer support metrics
apiVersion: monitoring.cnrm.cloud.google.com/v1beta1
kind: MonitoringDashboard
metadata:
  name: multilang-support-dashboard
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  displayName: "Multilingual Customer Support Dashboard"
  mosaicLayout:
    tiles:
      - width: 6
        height: 4
        widget:
          title: "Function Invocations per Minute"
          xyChart:
            dataSets:
              - timeSeriesQuery:
                  timeSeriesFilter:
                    filter: |
                      resource.type="cloud_function"
                      resource.labels.function_name="multilang-processor-${RANDOM_SUFFIX}"
                      metric.type="cloudfunctions.googleapis.com/function/executions"
                    aggregation:
                      alignmentPeriod: 60s
                      perSeriesAligner: ALIGN_RATE
                      crossSeriesReducer: REDUCE_SUM
                plotType: LINE
                targetAxis: Y1
            yAxis:
              label: "Executions/min"
              scale: LINEAR
      - width: 6
        height: 4
        xPos: 6
        widget:
          title: "Average Sentiment Score"
          xyChart:
            dataSets:
              - timeSeriesQuery:
                  timeSeriesFilter:
                    filter: |
                      metric.type="logging.googleapis.com/user/sentiment-score-metric"
                    aggregation:
                      alignmentPeriod: 300s
                      perSeriesAligner: ALIGN_MEAN
                      crossSeriesReducer: REDUCE_MEAN
                plotType: LINE
                targetAxis: Y1
            yAxis:
              label: "Sentiment Score"
              scale: LINEAR
            thresholds:
              - value: -0.2
                color: YELLOW
                direction: BELOW
              - value: -0.5
                color: RED
                direction: BELOW
      - width: 12
        height: 4
        yPos: 4
        widget:
          title: "Language Distribution"
          pieChart:
            dataSets:
              - timeSeriesQuery:
                  timeSeriesFilter:
                    filter: |
                      metric.type="logging.googleapis.com/user/language-detection-metric"
                    aggregation:
                      alignmentPeriod: 3600s
                      perSeriesAligner: ALIGN_SUM
                      crossSeriesReducer: REDUCE_SUM
                      groupByFields:
                        - metric.labels.detected_language
            chartType: DONUT
      - width: 6
        height: 4
        yPos: 8
        widget:
          title: "Function Execution Duration"
          xyChart:
            dataSets:
              - timeSeriesQuery:
                  timeSeriesFilter:
                    filter: |
                      resource.type="cloud_function"
                      resource.labels.function_name="multilang-processor-${RANDOM_SUFFIX}"
                      metric.type="cloudfunctions.googleapis.com/function/execution_times"
                    aggregation:
                      alignmentPeriod: 60s
                      perSeriesAligner: ALIGN_PERCENTILE_95
                      crossSeriesReducer: REDUCE_MEAN
                plotType: LINE
                targetAxis: Y1
            yAxis:
              label: "Duration (ms)"
              scale: LINEAR
      - width: 6
        height: 4
        xPos: 6
        yPos: 8
        widget:
          title: "Error Rate"
          xyChart:
            dataSets:
              - timeSeriesQuery:
                  timeSeriesFilter:
                    filter: |
                      resource.type="cloud_function"
                      resource.labels.function_name="multilang-processor-${RANDOM_SUFFIX}"
                      metric.type="cloudfunctions.googleapis.com/function/execution_count"
                      metric.labels.status!="ok"
                    aggregation:
                      alignmentPeriod: 60s
                      perSeriesAligner: ALIGN_RATE
                      crossSeriesReducer: REDUCE_SUM
                plotType: LINE
                targetAxis: Y1
            yAxis:
              label: "Errors/min"
              scale: LINEAR
            thresholds:
              - value: 1.0
                color: YELLOW
                direction: ABOVE
              - value: 5.0
                color: RED
                direction: ABOVE
---
# Firestore security rules for conversation data protection
apiVersion: firestore.cnrm.cloud.google.com/v1beta1
kind: FirestoreRulesFile
metadata:
  name: multilang-support-rules
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  content: |
    rules_version = '2';
    service cloud.firestore {
      match /databases/{database}/documents {
        // Allow authenticated read/write for conversations
        match /conversations/{conversationId} {
          allow read, write: if request.auth != null;
        }
        
        // Allow service accounts full access
        match /{document=**} {
          allow read, write: if request.auth.token.email.matches('.*@' + resource.data.project_id + '.iam.gserviceaccount.com');
        }
        
        // Deny all other access
        match /{document=**} {
          allow read, write: if false;
        }
      }
    }
---
# Notification channel for alerts (placeholder - requires external setup)
apiVersion: monitoring.cnrm.cloud.google.com/v1beta1
kind: MonitoringNotificationChannel
metadata:
  name: support-team-email
  namespace: default
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  type: email
  displayName: "Customer Support Team"
  description: "Email notifications for customer support alerts"
  labels:
    email_address: "support-team@example.com"
  enabled: true
---
# Labels for resource management and cost tracking
apiVersion: v1
kind: ConfigMap
metadata:
  name: resource-labels
  namespace: default
data:
  environment: "production"
  application: "multilingual-customer-support"
  team: "customer-success"
  cost-center: "support-operations"
  data-classification: "customer-data"
  compliance: "gdpr-compliant"