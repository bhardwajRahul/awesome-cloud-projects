# Multi-Region Traffic Optimization - Terraform Variables Example
# Copy this file to terraform.tfvars and customize the values for your deployment

# ============================================================================
# REQUIRED VARIABLES
# ============================================================================

# Your Google Cloud Project ID
project_id = "your-gcp-project-id-here"

# ============================================================================
# RESOURCE NAMING AND IDENTIFICATION
# ============================================================================

# Prefix for all resource names (helps avoid naming conflicts)
resource_prefix = "traffic-opt"

# Labels to apply to all resources (useful for cost tracking and organization)
labels = {
  environment = "production"
  project     = "traffic-optimization"
  managed-by  = "terraform"
  team        = "platform"
  cost-center = "engineering"
}

# ============================================================================
# REGIONAL CONFIGURATION
# ============================================================================

# Primary region (Americas) - serves North and South American traffic
primary_region = "us-central1"
primary_zone   = "us-central1-a"

# Secondary region (Europe) - serves European and African traffic  
secondary_region = "europe-west1"
secondary_zone   = "europe-west1-b"

# Tertiary region (Asia-Pacific) - serves Asian and Oceanian traffic
tertiary_region = "asia-southeast1"
tertiary_zone   = "asia-southeast1-a"

# VPC subnet CIDR ranges for each region
vpc_cidr_ranges = {
  us_subnet   = "10.1.0.0/24"    # US region subnet
  eu_subnet   = "10.2.0.0/24"    # Europe region subnet
  apac_subnet = "10.3.0.0/24"    # Asia-Pacific region subnet
}

# ============================================================================
# COMPUTE CONFIGURATION
# ============================================================================

# Virtual machine specifications
instance_machine_type = "e2-medium"     # Options: e2-micro, e2-small, e2-medium, e2-standard-2, e2-standard-4
instance_group_size   = 2               # Number of instances per region (1-10)

# Operating system configuration
instance_image_family  = "debian-11"    # OS image family
instance_image_project = "debian-cloud" # Project containing the OS image

# ============================================================================
# LOAD BALANCER AND PERFORMANCE CONFIGURATION
# ============================================================================

# Health check settings for backend monitoring
health_check_settings = {
  port                = 8080    # Port for health checks
  request_path        = "/"     # Health check endpoint path
  check_interval_sec  = 10      # Seconds between health checks
  timeout_sec         = 5       # Health check timeout
  healthy_threshold   = 2       # Consecutive successes to mark healthy
  unhealthy_threshold = 3       # Consecutive failures to mark unhealthy
}

# Backend service optimization settings
backend_service_settings = {
  capacity_scaler    = 1.0           # Backend capacity multiplier
  max_utilization    = 0.8           # Maximum backend utilization (0.0-1.0)
  balancing_mode     = "UTILIZATION" # Load balancing mode
  locality_lb_policy = "ROUND_ROBIN" # Traffic distribution policy
}

# ============================================================================
# CDN AND CACHING CONFIGURATION
# ============================================================================

# Cloud CDN settings for content acceleration
cdn_settings = {
  cache_mode       = "CACHE_ALL_STATIC" # CDN caching strategy
  default_ttl      = 3600               # Default cache TTL (seconds)
  max_ttl          = 86400              # Maximum cache TTL (seconds)
  client_ttl       = 3600               # Client cache TTL (seconds)
  compression      = true               # Enable dynamic compression
  negative_caching = true               # Cache error responses
}

# ============================================================================
# RESILIENCE AND RELIABILITY CONFIGURATION
# ============================================================================

# Circuit breaker settings for backend protection
circuit_breaker_settings = {
  max_requests         = 1000 # Maximum concurrent requests
  max_pending_requests = 100  # Maximum pending requests
  max_retries          = 3    # Maximum retry attempts
  max_connections      = 1000 # Maximum backend connections
}

# Outlier detection for automatic backend isolation
outlier_detection_settings = {
  consecutive_errors          = 5   # Errors before ejection
  consecutive_gateway_failure = 3   # Gateway failures before ejection
  interval_sec               = 30  # Detection interval (seconds)
  base_ejection_time_sec     = 30  # Base ejection time (seconds)
  max_ejection_percent       = 10  # Max backends to eject (percentage)
}

# ============================================================================
# MONITORING AND ALERTING CONFIGURATION
# ============================================================================

# Cloud Monitoring settings
monitoring_settings = {
  uptime_check_timeout     = "10s"  # Uptime check timeout
  uptime_check_period      = "60s"  # Uptime check frequency
  alert_latency_threshold  = 1.0    # Latency alert threshold (seconds)
  alert_duration           = "120s" # Alert condition duration
}

# ============================================================================
# FEATURE TOGGLES
# ============================================================================

# Enable or disable optional features
enable_apis                 = true # Auto-enable required GCP APIs
enable_network_intelligence = true # Enable Network Intelligence Center features
enable_monitoring          = true # Enable Cloud Monitoring features

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================

# Network access control
allowed_source_ranges = [
  "0.0.0.0/0"              # Allow from anywhere (default)
  # "10.0.0.0/8"           # Allow only from private networks
  # "172.16.0.0/12"        # Allow from private networks  
  # "192.168.0.0/16"       # Allow from private networks
  # "203.0.113.0/24"       # Allow from specific IP range
]

# SSL certificates for HTTPS (optional)
# Uncomment and configure if you have SSL certificates
ssl_certificates = [
  # "projects/your-project-id/global/sslCertificates/your-cert-name"
]

# ============================================================================
# EXAMPLE CONFIGURATIONS FOR DIFFERENT ENVIRONMENTS
# ============================================================================

# Development Environment Example:
# resource_prefix = "dev-traffic-opt"
# instance_machine_type = "e2-small"
# instance_group_size = 1
# enable_monitoring = false
# labels = {
#   environment = "development"
#   project     = "traffic-optimization"
#   managed-by  = "terraform"
# }

# Production Environment Example:
# resource_prefix = "prod-traffic-opt"
# instance_machine_type = "e2-standard-2"
# instance_group_size = 3
# enable_monitoring = true
# cdn_settings = {
#   cache_mode = "USE_ORIGIN_HEADERS"
#   default_ttl = 7200
#   max_ttl = 172800
#   client_ttl = 7200
#   compression = true
#   negative_caching = true
# }

# Cost-Optimized Example:
# instance_machine_type = "e2-micro"
# instance_group_size = 1
# enable_network_intelligence = false
# cdn_settings = {
#   default_ttl = 7200  # Longer cache times
#   max_ttl = 259200    # 3 days max cache
# }

# High-Performance Example:
# instance_machine_type = "e2-standard-4"
# instance_group_size = 4
# backend_service_settings = {
#   max_utilization = 0.6  # Lower utilization for better performance
# }
# circuit_breaker_settings = {
#   max_requests = 2000
#   max_connections = 2000
# }