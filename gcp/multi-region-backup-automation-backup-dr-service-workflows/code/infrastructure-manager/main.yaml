# Google Cloud Infrastructure Manager Configuration
# Multi-Region Backup Automation with Backup and DR Service and Cloud Workflows
# This configuration deploys an enterprise-grade backup automation system across multiple regions

# Configuration metadata
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: Config
metadata:
  name: multi-region-backup-automation
  annotations:
    config.kubernetes.io/local-config: "true"
spec:
  # Project configuration
  project: ${PROJECT_ID}
  location: us-central1

---
# Service Account for Backup Automation
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMServiceAccount
metadata:
  name: backup-automation-sa
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  displayName: "Backup Automation Service Account"
  description: "Service account for multi-region backup automation with Backup and DR Service"

---
# IAM Policy Binding - Backup and DR Admin Role
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: backup-automation-sa-backupdr-admin
spec:
  member: serviceAccount:backup-automation-sa@${PROJECT_ID}.iam.gserviceaccount.com
  role: roles/backupdr.admin
  resourceRef:
    apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
    kind: Project
    external: projects/${PROJECT_ID}

---
# IAM Policy Binding - Workflows Invoker Role
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: backup-automation-sa-workflows-invoker
spec:
  member: serviceAccount:backup-automation-sa@${PROJECT_ID}.iam.gserviceaccount.com
  role: roles/workflows.invoker
  resourceRef:
    apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
    kind: Project
    external: projects/${PROJECT_ID}

---
# IAM Policy Binding - Compute Instance Admin Role for backup operations
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: backup-automation-sa-compute-admin
spec:
  member: serviceAccount:backup-automation-sa@${PROJECT_ID}.iam.gserviceaccount.com
  role: roles/compute.instanceAdmin
  resourceRef:
    apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
    kind: Project
    external: projects/${PROJECT_ID}

---
# Primary Region Backup Vault (us-central1)
apiVersion: backupdr.cnrm.cloud.google.com/v1beta1
kind: BackupDRBackupVault
metadata:
  name: backup-vault-primary
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  location: us-central1
  description: "Primary backup vault for multi-region automation in us-central1"
  # Enforce minimum retention of 30 days for compliance
  backupMinimumEnforcedRetentionDuration: "2592000s" # 30 days in seconds
  # Enable versioning for backup immutability
  deletable: false
  # Optional: Configure access control
  labels:
    environment: "production"
    backup-tier: "primary"
    managed-by: "infrastructure-manager"

---
# Secondary Region Backup Vault (us-east1)
apiVersion: backupdr.cnrm.cloud.google.com/v1beta1
kind: BackupDRBackupVault
metadata:
  name: backup-vault-secondary
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  location: us-east1
  description: "Secondary backup vault for disaster recovery in us-east1"
  # Enforce minimum retention of 30 days for compliance
  backupMinimumEnforcedRetentionDuration: "2592000s" # 30 days in seconds
  # Enable versioning for backup immutability
  deletable: false
  # Optional: Configure access control
  labels:
    environment: "production"
    backup-tier: "secondary"
    managed-by: "infrastructure-manager"

---
# Sample Compute Instance for Backup Testing
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeInstance
metadata:
  name: backup-test-instance
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  zone: us-central1-a
  machineType: e2-medium
  description: "Test instance for demonstrating backup automation capabilities"
  
  # Boot disk configuration
  bootDisk:
    initializeParams:
      sourceImage: projects/debian-cloud/global/images/family/debian-12
      diskSizeGb: 20
      diskType: projects/${PROJECT_ID}/zones/us-central1-a/diskTypes/pd-standard
    autoDelete: true
    deviceName: "boot-disk"
  
  # Network interface configuration
  networkInterface:
    - network: projects/${PROJECT_ID}/global/networks/default
      accessConfig:
        - {} # Ephemeral external IP
  
  # Service account for the instance
  serviceAccount:
    email: backup-automation-sa@${PROJECT_ID}.iam.gserviceaccount.com
    scopes:
      - "https://www.googleapis.com/auth/cloud-platform"
  
  # Labels for backup policy automation
  labels:
    backup-policy: "critical"
    environment: "production"
    workload-type: "test-instance"
  
  # Metadata for backup scheduling
  metadata:
    backup-schedule: "daily"
    retention-days: "30"
    
  # Enable deletion protection for production workloads
  deletionProtection: false # Set to true for production

---
# Additional Persistent Disk for Testing
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeDisk
metadata:
  name: backup-test-data-disk
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  zone: us-central1-a
  type: projects/${PROJECT_ID}/zones/us-central1-a/diskTypes/pd-standard
  sizeGb: 10
  description: "Additional data disk for backup testing scenarios"
  
  # Labels for backup policy automation
  labels:
    backup-policy: "critical"
    environment: "production"
    disk-type: "data-disk"

---
# Attach Data Disk to Instance
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeAttachedDisk
metadata:
  name: backup-test-data-disk-attachment
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  diskRef:
    name: backup-test-data-disk
  instanceRef:
    name: backup-test-instance
  zone: us-central1-a
  deviceName: "data-disk"
  mode: "READ_WRITE"

---
# Cloud Workflow for Backup Orchestration
apiVersion: workflows.cnrm.cloud.google.com/v1beta1
kind: WorkflowsWorkflow
metadata:
  name: backup-workflow
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  region: us-central1
  description: "Multi-region backup orchestration workflow with error handling and retry logic"
  
  # Service account for workflow execution
  serviceAccount: backup-automation-sa@${PROJECT_ID}.iam.gserviceaccount.com
  
  # Workflow definition with comprehensive backup orchestration
  sourceContents: |
    # Multi-Region Backup Automation Workflow
    # Orchestrates backup operations across us-central1 and us-east1 regions
    main:
      params: [args]
      steps:
        - init:
            assign:
              - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
              - primary_region: "us-central1"
              - secondary_region: "us-east1"
              - backup_vault_primary: "backup-vault-primary"
              - backup_vault_secondary: "backup-vault-secondary"
              - instance_name: "backup-test-instance"
              - backup_type: ${default(map.get(args, "backup_type"), "scheduled")}
        
        - log_start:
            call: sys.log
            args:
              data: ${"Starting " + backup_type + " backup workflow at " + string(sys.now())}
              severity: "INFO"
        
        - create_primary_backup:
            try:
              call: create_backup
              args:
                project_id: ${project_id}
                region: ${primary_region}
                backup_vault: ${backup_vault_primary}
                instance_name: ${instance_name}
                zone: ${primary_region + "-a"}
              result: primary_backup_result
            except:
              as: e
              steps:
                - log_primary_error:
                    call: sys.log
                    args:
                      data: ${"Primary backup failed: " + string(e)}
                      severity: "ERROR"
                - fail_primary:
                    raise: ${e}
        
        - wait_for_primary_completion:
            call: sys.sleep
            args:
              seconds: 30
        
        - create_secondary_backup:
            try:
              call: create_cross_region_backup
              args:
                project_id: ${project_id}
                source_region: ${primary_region}
                target_region: ${secondary_region}
                backup_vault: ${backup_vault_secondary}
                source_backup: ${primary_backup_result.backup_id}
              result: secondary_backup_result
            except:
              as: e
              steps:
                - log_secondary_error:
                    call: sys.log
                    args:
                      data: ${"Secondary backup failed: " + string(e)}
                      severity: "WARNING"
                # Continue with primary backup even if secondary fails
                - assign_secondary_result:
                    assign:
                      - secondary_backup_result:
                          backup_id: "FAILED"
                          status: "FAILED"
                          error: ${string(e)}
        
        - validate_backups:
            call: validate_backup_integrity
            args:
              primary_backup: ${primary_backup_result}
              secondary_backup: ${secondary_backup_result}
            result: validation_result
        
        - log_results:
            call: sys.log
            args:
              data: ${"Backup workflow completed. Primary: " + primary_backup_result.backup_id + ", Secondary: " + secondary_backup_result.backup_id + ", Validation: " + validation_result.status}
              severity: "INFO"
        
        - return_results:
            return:
              workflow_execution_id: ${sys.get_env("GOOGLE_CLOUD_WORKFLOW_EXECUTION_ID")}
              timestamp: ${sys.now()}
              backup_type: ${backup_type}
              primary_backup: ${primary_backup_result}
              secondary_backup: ${secondary_backup_result}
              validation: ${validation_result}
              status: "SUCCESS"

    # Create backup plan and execute backup
    create_backup:
      params: [project_id, region, backup_vault, instance_name, zone]
      steps:
        - log_backup_start:
            call: sys.log
            args:
              data: ${"Creating backup for instance " + instance_name + " in region " + region}
              severity: "INFO"
        
        - generate_backup_plan_id:
            assign:
              - backup_plan_id: ${"plan-" + instance_name + "-" + string(int(sys.now()))}
        
        - create_backup_plan:
            try:
              call: http.post
              args:
                url: ${"https://backupdr.googleapis.com/v1/projects/" + project_id + "/locations/" + region + "/backupPlans"}
                auth:
                  type: OAuth2
                headers:
                  Content-Type: "application/json"
                body:
                  backupPlanId: ${backup_plan_id}
                  backupPlan:
                    description: ${"Automated backup plan for " + instance_name}
                    backupVault: ${"projects/" + project_id + "/locations/" + region + "/backupVaults/" + backup_vault}
                    resourceType: "compute.googleapis.com/Instance"
                    backupRules:
                      - backupRetentionDays: 30
                        ruleId: "daily-backup-rule"
                        standardSchedule:
                          scheduleExpression: "0 2 * * *"
                          timeZone: "America/New_York"
                timeout: 60
              result: backup_plan_response
            except:
              as: e
              steps:
                - log_plan_error:
                    call: sys.log
                    args:
                      data: ${"Failed to create backup plan: " + string(e)}
                      severity: "ERROR"
                - raise_plan_error:
                    raise: ${e}
        
        - return_backup_info:
            return:
              backup_id: ${backup_plan_response.body.name}
              backup_plan_id: ${backup_plan_id}
              status: "CREATED"
              region: ${region}
              creation_time: ${sys.now()}

    # Create cross-region backup copy
    create_cross_region_backup:
      params: [project_id, source_region, target_region, backup_vault, source_backup]
      steps:
        - log_copy_start:
            call: sys.log
            args:
              data: ${"Copying backup from " + source_region + " to " + target_region}
              severity: "INFO"
        
        - copy_backup:
            try:
              call: http.post
              args:
                url: ${"https://backupdr.googleapis.com/v1/" + source_backup + ":copy"}
                auth:
                  type: OAuth2
                headers:
                  Content-Type: "application/json"
                body:
                  destinationBackupVault: ${"projects/" + project_id + "/locations/" + target_region + "/backupVaults/" + backup_vault}
                  copyRule:
                    ruleId: "cross-region-copy"
                    retentionDays: 30
                timeout: 300
              result: copy_response
            except:
              as: e
              steps:
                - log_copy_error:
                    call: sys.log
                    args:
                      data: ${"Failed to copy backup: " + string(e)}
                      severity: "ERROR"
                - raise_copy_error:
                    raise: ${e}
        
        - return_copy_info:
            return:
              backup_id: ${copy_response.body.name}
              status: "COPIED"
              source_region: ${source_region}
              target_region: ${target_region}
              copy_time: ${sys.now()}

    # Validate backup integrity
    validate_backup_integrity:
      params: [primary_backup, secondary_backup]
      steps:
        - validate_primary:
            assign:
              - primary_valid: ${primary_backup.status == "CREATED"}
        
        - validate_secondary:
            assign:
              - secondary_valid: ${secondary_backup.status == "COPIED" or secondary_backup.status == "FAILED"}
        
        - determine_overall_status:
            assign:
              - overall_status: ${if(primary_valid and secondary_valid, "VALID", "INVALID")}
        
        - log_validation:
            call: sys.log
            args:
              data: ${"Backup validation completed. Primary: " + string(primary_valid) + ", Secondary: " + string(secondary_valid) + ", Overall: " + overall_status}
              severity: "INFO"
        
        - return_validation:
            return:
              status: ${overall_status}
              primary_valid: ${primary_valid}
              secondary_valid: ${secondary_valid}
              validation_time: ${sys.now()}

---
# Cloud Scheduler Job for Daily Backups
apiVersion: cloudscheduler.cnrm.cloud.google.com/v1beta1
kind: CloudSchedulerJob
metadata:
  name: backup-scheduler-daily
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  region: us-central1
  description: "Daily backup scheduler for multi-region automation (2 AM EST)"
  schedule: "0 2 * * *"
  timeZone: "America/New_York"
  
  # Retry configuration for reliability
  retryConfig:
    retryCount: 3
    maxRetryDuration: "300s"
    minBackoffDuration: "5s"
    maxBackoffDuration: "60s"
    maxDoublings: 3
  
  # HTTP target to invoke workflow
  httpTarget:
    uri: https://workflowexecutions.googleapis.com/v1/projects/${PROJECT_ID}/locations/us-central1/workflows/backup-workflow/executions
    httpMethod: POST
    headers:
      Content-Type: "application/json"
    body: '{"argument": "{\"backup_type\": \"scheduled\"}"}'
    
    # OAuth authentication
    oauthToken:
      serviceAccountEmail: backup-automation-sa@${PROJECT_ID}.iam.gserviceaccount.com
      scope: "https://www.googleapis.com/auth/cloud-platform"

---
# Cloud Scheduler Job for Weekly Validation
apiVersion: cloudscheduler.cnrm.cloud.google.com/v1beta1
kind: CloudSchedulerJob
metadata:
  name: backup-scheduler-validation
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  region: us-central1
  description: "Weekly backup validation scheduler (Sundays at 3 AM EST)"
  schedule: "0 3 * * 0"
  timeZone: "America/New_York"
  
  # Retry configuration for reliability
  retryConfig:
    retryCount: 2
    maxRetryDuration: "180s"
    minBackoffDuration: "10s"
    maxBackoffDuration: "30s"
    maxDoublings: 2
  
  # HTTP target to invoke workflow
  httpTarget:
    uri: https://workflowexecutions.googleapis.com/v1/projects/${PROJECT_ID}/locations/us-central1/workflows/backup-workflow/executions
    httpMethod: POST
    headers:
      Content-Type: "application/json"
    body: '{"argument": "{\"backup_type\": \"validation\"}"}'
    
    # OAuth authentication
    oauthToken:
      serviceAccountEmail: backup-automation-sa@${PROJECT_ID}.iam.gserviceaccount.com
      scope: "https://www.googleapis.com/auth/cloud-platform"

---
# Monitoring Alert Policy for Backup Failures
apiVersion: monitoring.cnrm.cloud.google.com/v1beta1
kind: MonitoringAlertPolicy
metadata:
  name: backup-workflow-failures
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  displayName: "Backup Workflow Failures"
  documentation:
    content: |
      This alert triggers when backup workflows fail execution.
      
      **Troubleshooting Steps:**
      1. Check workflow execution logs in Cloud Logging
      2. Verify service account permissions
      3. Validate backup vault accessibility
      4. Review resource quotas and limits
      
      **Escalation:** Contact the infrastructure team if failures persist.
    mimeType: "text/markdown"
  
  # Conditions for triggering alerts
  conditions:
    - displayName: "Workflow execution failure rate"
      conditionThreshold:
        filter: 'resource.type="workflows.googleapis.com/Workflow" AND resource.labels.workflow_id="backup-workflow"'
        comparison: "COMPARISON_GT"
        thresholdValue: 0
        duration: "60s"
        aggregations:
          - alignmentPeriod: "300s"
            perSeriesAligner: "ALIGN_RATE"
            crossSeriesReducer: "REDUCE_SUM"
            groupByFields:
              - "resource.labels.workflow_id"
  
  # Alert strategy configuration
  alertStrategy:
    autoClose: "604800s" # 7 days
  
  # Combiner for multiple conditions
  combiner: "OR"
  enabled: true
  
  # Notification channels (to be configured post-deployment)
  # notificationChannels: []

---
# Monitoring Dashboard for Backup Operations
apiVersion: monitoring.cnrm.cloud.google.com/v1beta1
kind: MonitoringDashboard
metadata:
  name: multi-region-backup-dashboard
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  displayName: "Multi-Region Backup Operations Dashboard"
  
  # Dashboard layout with multiple monitoring widgets
  mosaicLayout:
    tiles:
      # Workflow executions over time
      - width: 6
        height: 4
        widget:
          title: "Backup Workflow Executions"
          xyChart:
            dataSets:
              - timeSeriesQuery:
                  timeSeriesFilter:
                    filter: 'resource.type="workflows.googleapis.com/Workflow" AND resource.labels.workflow_id="backup-workflow"'
                    aggregation:
                      alignmentPeriod: "300s"
                      perSeriesAligner: "ALIGN_RATE"
                      crossSeriesReducer: "REDUCE_SUM"
                      groupByFields:
                        - "metric.labels.execution_status"
                plotType: "LINE"
                targetAxis: "Y1"
            timeshiftDuration: "0s"
            yAxis:
              label: "Executions per second"
              scale: "LINEAR"
            chartOptions:
              mode: "COLOR"
      
      # Backup vault storage utilization
      - width: 6
        height: 4
        xPos: 6
        widget:
          title: "Backup Vault Storage Utilization"
          xyChart:
            dataSets:
              - timeSeriesQuery:
                  timeSeriesFilter:
                    filter: 'resource.type="backupdr.googleapis.com/BackupVault"'
                    aggregation:
                      alignmentPeriod: "300s"
                      perSeriesAligner: "ALIGN_MEAN"
                      crossSeriesReducer: "REDUCE_SUM"
                      groupByFields:
                        - "resource.labels.location"
                plotType: "STACKED_AREA"
                targetAxis: "Y1"
            yAxis:
              label: "Storage Used (GB)"
              scale: "LINEAR"
      
      # Success rate scorecard
      - width: 3
        height: 3
        yPos: 4
        widget:
          title: "Backup Success Rate (24h)"
          scorecard:
            timeSeriesQuery:
              timeSeriesFilter:
                filter: 'resource.type="workflows.googleapis.com/Workflow" AND resource.labels.workflow_id="backup-workflow" AND metric.labels.execution_status="SUCCESS"'
                aggregation:
                  alignmentPeriod: "86400s"
                  perSeriesAligner: "ALIGN_RATE"
                  crossSeriesReducer: "REDUCE_SUM"
            sparkChartView:
              sparkChartType: "SPARK_LINE"
            gaugeView:
              lowerBound: 0.0
              upperBound: 1.0
      
      # Error rate scorecard
      - width: 3
        height: 3
        xPos: 3
        yPos: 4
        widget:
          title: "Backup Error Rate (24h)"
          scorecard:
            timeSeriesQuery:
              timeSeriesFilter:
                filter: 'resource.type="workflows.googleapis.com/Workflow" AND resource.labels.workflow_id="backup-workflow" AND metric.labels.execution_status="FAILED"'
                aggregation:
                  alignmentPeriod: "86400s"
                  perSeriesAligner: "ALIGN_RATE"
                  crossSeriesReducer: "REDUCE_SUM"
            sparkChartView:
              sparkChartType: "SPARK_BAR"
            gaugeView:
              lowerBound: 0.0
              upperBound: 0.1

---
# Log-based Metric for Workflow Success Rate
apiVersion: logging.cnrm.cloud.google.com/v1beta1
kind: LoggingMetric
metadata:
  name: backup-workflow-success-rate
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
spec:
  description: "Tracks success rate of backup workflow executions"
  filter: |
    resource.type="workflows.googleapis.com/Workflow"
    AND resource.labels.workflow_id="backup-workflow"
    AND jsonPayload.message=~"Backup workflow completed"
  
  # Metric configuration
  metricDescriptor:
    metricKind: "COUNTER"
    valueType: "INT64"
    displayName: "Backup Workflow Success Rate"
    description: "Number of successful backup workflow executions"
    
  # Extract labels from log entries
  labelExtractors:
    execution_status: "EXTRACT(jsonPayload.status)"
    backup_type: "EXTRACT(jsonPayload.backup_type)"
    region: "EXTRACT(jsonPayload.primary_backup.region)"

# Note: Additional monitoring and logging configurations can be added
# based on specific organizational requirements and compliance needs