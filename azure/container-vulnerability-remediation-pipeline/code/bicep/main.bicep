// ============================================================================
// Azure Container Registry Vulnerability Remediation Infrastructure
// ============================================================================
// This Bicep template deploys a complete container vulnerability remediation
// solution using Azure Container Registry, Azure DevOps, and Azure Monitor
// ============================================================================

targetScope = 'resourceGroup'

// Parameters
@description('Environment name (e.g., dev, staging, prod)')
@allowed(['dev', 'staging', 'prod'])
param environment string = 'dev'

@description('Location for all resources')
param location string = resourceGroup().location

@description('Base name for all resources')
@minLength(3)
@maxLength(15)
param baseName string = 'containersec'

@description('Container Registry SKU')
@allowed(['Basic', 'Standard', 'Premium'])
param acrSku string = 'Premium'

@description('Enable Microsoft Defender for Container Registries')
param enableDefender bool = true

@description('Enable content trust for container images')
param enableContentTrust bool = true

@description('Log Analytics workspace retention period in days')
@minValue(30)
@maxValue(730)
param logRetentionDays int = 90

@description('Enable Azure Policy for container security')
param enableContainerPolicies bool = true

@description('Tags to apply to all resources')
param tags object = {
  Environment: environment
  Purpose: 'Container Security'
  Solution: 'Vulnerability Remediation'
}

// Variables
var uniqueSuffix = uniqueString(resourceGroup().id)
var resourceNames = {
  acr: 'acr${baseName}${uniqueSuffix}'
  keyVault: 'kv-${baseName}-${uniqueSuffix}'
  logAnalytics: 'law-${baseName}-${environment}'
  actionGroup: 'ag-${baseName}-vulnerabilities'
  appInsights: 'ai-${baseName}-${environment}'
  storageAccount: 'st${baseName}${uniqueSuffix}'
  managedIdentity: 'mi-${baseName}-${environment}'
}

// ============================================================================
// MANAGED IDENTITY
// ============================================================================

resource managedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: resourceNames.managedIdentity
  location: location
  tags: tags
}

// ============================================================================
// STORAGE ACCOUNT FOR PIPELINE ARTIFACTS
// ============================================================================

resource storageAccount 'Microsoft.Storage/storageAccounts@2023-01-01' = {
  name: resourceNames.storageAccount
  location: location
  tags: tags
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
  properties: {
    accessTier: 'Hot'
    allowBlobPublicAccess: false
    allowSharedKeyAccess: false
    supportsHttpsTrafficOnly: true
    minimumTlsVersion: 'TLS1_2'
    networkAcls: {
      defaultAction: 'Allow'
    }
    encryption: {
      services: {
        blob: {
          enabled: true
          keyType: 'Account'
        }
        file: {
          enabled: true
          keyType: 'Account'
        }
      }
      keySource: 'Microsoft.Storage'
    }
  }
}

// Container for vulnerability reports
resource vulnerabilityReportsContainer 'Microsoft.Storage/storageAccounts/blobServices/containers@2023-01-01' = {
  name: '${storageAccount.name}/default/vulnerability-reports'
  properties: {
    publicAccess: 'None'
  }
}

// ============================================================================
// LOG ANALYTICS WORKSPACE
// ============================================================================

resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2023-09-01' = {
  name: resourceNames.logAnalytics
  location: location
  tags: tags
  properties: {
    sku: {
      name: 'PerGB2018'
    }
    retentionInDays: logRetentionDays
    features: {
      enableLogAccessUsingOnlyResourcePermissions: true
      disableLocalAuth: false
    }
  }
}

// ============================================================================
// APPLICATION INSIGHTS
// ============================================================================

resource applicationInsights 'Microsoft.Insights/components@2020-02-02' = {
  name: resourceNames.appInsights
  location: location
  tags: tags
  kind: 'web'
  properties: {
    Application_Type: 'web'
    WorkspaceResourceId: logAnalyticsWorkspace.id
    publicNetworkAccessForIngestion: 'Enabled'
    publicNetworkAccessForQuery: 'Enabled'
  }
}

// ============================================================================
// KEY VAULT
// ============================================================================

resource keyVault 'Microsoft.KeyVault/vaults@2023-07-01' = {
  name: resourceNames.keyVault
  location: location
  tags: tags
  properties: {
    sku: {
      family: 'A'
      name: 'standard'
    }
    tenantId: tenant().tenantId
    enabledForDeployment: true
    enabledForTemplateDeployment: true
    enabledForDiskEncryption: true
    enableRbacAuthorization: true
    enableSoftDelete: true
    softDeleteRetentionInDays: 90
    networkAcls: {
      defaultAction: 'Allow'
      bypass: 'AzureServices'
    }
    accessPolicies: []
  }
}

// ============================================================================
// AZURE CONTAINER REGISTRY
// ============================================================================

resource containerRegistry 'Microsoft.ContainerRegistry/registries@2023-11-01-preview' = {
  name: resourceNames.acr
  location: location
  tags: tags
  sku: {
    name: acrSku
  }
  identity: {
    type: 'SystemAssigned, UserAssigned'
    userAssignedIdentities: {
      '${managedIdentity.id}': {}
    }
  }
  properties: {
    adminUserEnabled: false
    anonymousPullEnabled: false
    dataEndpointEnabled: false
    encryption: {
      status: 'disabled'
    }
    networkRuleSet: {
      defaultAction: 'Allow'
      ipRules: []
      virtualNetworkRules: []
    }
    policies: {
      quarantinePolicy: {
        status: 'enabled'
      }
      trustPolicy: {
        status: enableContentTrust ? 'enabled' : 'disabled'
        type: 'Notary'
      }
      retentionPolicy: {
        status: 'enabled'
        days: 30
      }
      exportPolicy: {
        status: 'enabled'
      }
      azureADAuthenticationAsArmPolicy: {
        status: 'enabled'
      }
      softDeletePolicy: {
        status: 'enabled'
        retentionDays: 7
      }
    }
    publicNetworkAccess: 'Enabled'
    zoneRedundancy: 'Disabled'
  }
}

// Diagnostic settings for ACR
resource acrDiagnostics 'Microsoft.Insights/diagnosticSettings@2021-05-01-preview' = {
  name: 'acr-diagnostics'
  scope: containerRegistry
  properties: {
    workspaceId: logAnalyticsWorkspace.id
    logs: [
      {
        category: 'ContainerRegistryRepositoryEvents'
        enabled: true
        retentionPolicy: {
          enabled: true
          days: logRetentionDays
        }
      }
      {
        category: 'ContainerRegistryLoginEvents'
        enabled: true
        retentionPolicy: {
          enabled: true
          days: logRetentionDays
        }
      }
    ]
    metrics: [
      {
        category: 'AllMetrics'
        enabled: true
        retentionPolicy: {
          enabled: true
          days: logRetentionDays
        }
      }
    ]
  }
}

// ============================================================================
// RBAC ASSIGNMENTS
// ============================================================================

// ACR Pull role for managed identity
resource acrPullRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(containerRegistry.id, managedIdentity.id, 'AcrPull')
  scope: containerRegistry
  properties: {
    roleDefinitionId: subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d') // AcrPull
    principalId: managedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}

// ACR Push role for managed identity
resource acrPushRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(containerRegistry.id, managedIdentity.id, 'AcrPush')
  scope: containerRegistry
  properties: {
    roleDefinitionId: subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec') // AcrPush
    principalId: managedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}

// Key Vault Secrets User role for managed identity
resource keyVaultSecretsUserRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(keyVault.id, managedIdentity.id, 'KeyVaultSecretsUser')
  scope: keyVault
  properties: {
    roleDefinitionId: subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6') // Key Vault Secrets User
    principalId: managedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}

// Storage Blob Data Contributor role for managed identity
resource storageBlobDataContributorRoleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(storageAccount.id, managedIdentity.id, 'StorageBlobDataContributor')
  scope: storageAccount
  properties: {
    roleDefinitionId: subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe') // Storage Blob Data Contributor
    principalId: managedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}

// ============================================================================
// ACTION GROUP FOR ALERTS
// ============================================================================

resource actionGroup 'Microsoft.Insights/actionGroups@2023-01-01' = {
  name: resourceNames.actionGroup
  location: 'Global'
  tags: tags
  properties: {
    groupShortName: 'ContVuln'
    enabled: true
    emailReceivers: []
    smsReceivers: []
    webhookReceivers: []
    azureAppPushReceivers: []
    azureFunctionReceivers: []
    logicAppReceivers: []
    automationRunbookReceivers: []
    voiceReceivers: []
    armRoleReceivers: [
      {
        name: 'SecurityAdmins'
        roleId: subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd') // Security Admin
        useCommonAlertSchema: true
      }
    ]
    eventHubReceivers: []
    itsmReceivers: []
  }
}

// ============================================================================
// VULNERABILITY ALERTS
// ============================================================================

// Alert for critical vulnerabilities
resource criticalVulnerabilityAlert 'Microsoft.Insights/scheduledQueryRules@2023-03-15-preview' = {
  name: 'critical-vulnerability-alert'
  location: location
  tags: tags
  properties: {
    displayName: 'Critical Container Vulnerabilities Detected'
    description: 'Alert when critical vulnerabilities are found in container images'
    severity: 1
    enabled: true
    evaluationFrequency: 'PT5M'
    windowSize: 'PT5M'
    scopes: [
      logAnalyticsWorkspace.id
    ]
    criteria: {
      allOf: [
        {
          query: 'SecurityRecommendation | where RecommendationDisplayName contains "vulnerability" and RecommendationSeverity == "High" | summarize count() by bin(TimeGenerated, 5m)'
          timeAggregation: 'Total'
          dimensions: []
          operator: 'GreaterThan'
          threshold: 0
          failingPeriods: {
            numberOfEvaluationPeriods: 1
            minFailingPeriodsToAlert: 1
          }
        }
      ]
    }
    actions: {
      actionGroups: [
        actionGroup.id
      ]
    }
  }
}

// Alert for vulnerability trend analysis
resource vulnerabilityTrendAlert 'Microsoft.Insights/scheduledQueryRules@2023-03-15-preview' = {
  name: 'vulnerability-trend-alert'
  location: location
  tags: tags
  properties: {
    displayName: 'Container Vulnerability Trend Analysis'
    description: 'Alert when vulnerability count increases significantly'
    severity: 2
    enabled: true
    evaluationFrequency: 'PT1H'
    windowSize: 'PT1H'
    scopes: [
      logAnalyticsWorkspace.id
    ]
    criteria: {
      allOf: [
        {
          query: 'SecurityRecommendation | where RecommendationDisplayName contains "vulnerability" | summarize count() by bin(TimeGenerated, 1h) | where count_ > 10'
          timeAggregation: 'Total'
          dimensions: []
          operator: 'GreaterThan'
          threshold: 0
          failingPeriods: {
            numberOfEvaluationPeriods: 1
            minFailingPeriodsToAlert: 1
          }
        }
      ]
    }
    actions: {
      actionGroups: [
        actionGroup.id
      ]
    }
  }
}

// ============================================================================
// AZURE POLICY ASSIGNMENTS (CONDITIONAL)
// ============================================================================

// Built-in policy for container vulnerability assessment
resource vulnerabilityAssessmentPolicy 'Microsoft.Authorization/policyAssignments@2023-04-01' = if (enableContainerPolicies) {
  name: 'container-vulnerability-assessment'
  scope: resourceGroup()
  properties: {
    displayName: 'Container images should have vulnerability findings resolved'
    description: 'Container images should have vulnerability findings resolved to protect against security vulnerabilities'
    policyDefinitionId: subscriptionResourceId('Microsoft.Authorization/policyDefinitions', '5f0f936f-2f01-4bf5-b6be-d423792fa562')
    parameters: {
      effect: {
        value: 'AuditIfNotExists'
      }
    }
    nonComplianceMessages: [
      {
        message: 'Container images must have vulnerability findings resolved before deployment'
      }
    ]
  }
}

// Built-in policy for container registry encryption
resource registryEncryptionPolicy 'Microsoft.Authorization/policyAssignments@2023-04-01' = if (enableContainerPolicies) {
  name: 'container-registry-encryption'
  scope: resourceGroup()
  properties: {
    displayName: 'Container registries should be encrypted with customer-managed keys'
    description: 'Container registries should be encrypted with customer-managed keys to provide enhanced security'
    policyDefinitionId: subscriptionResourceId('Microsoft.Authorization/policyDefinitions', '5b9159ae-1701-4a6f-9a7a-aa9c8ddd0580')
    parameters: {
      effect: {
        value: 'Audit'
      }
    }
  }
}

// ============================================================================
// WORKBOOKS FOR MONITORING
// ============================================================================

resource vulnerabilityWorkbook 'Microsoft.Insights/workbooks@2023-06-01' = {
  name: guid(resourceGroup().id, 'vulnerability-workbook')
  location: location
  tags: tags
  kind: 'shared'
  properties: {
    displayName: 'Container Vulnerability Dashboard'
    description: 'Comprehensive dashboard for monitoring container vulnerabilities'
    category: 'workbook'
    serializedData: json({
      version: 'Notebook/1.0'
      items: [
        {
          type: 1
          content: {
            json: '## Container Vulnerability Monitoring Dashboard\n\nThis dashboard provides comprehensive monitoring of container vulnerabilities across your Azure Container Registry instances.'
          }
        }
        {
          type: 3
          content: {
            version: 'KqlItem/1.0'
            query: 'SecurityRecommendation\n| where RecommendationDisplayName contains "vulnerability"\n| summarize count() by RecommendationSeverity\n| render piechart'
            size: 1
            title: 'Vulnerability Distribution by Severity'
            timeContext: {
              durationMs: 86400000
            }
            queryType: 0
            resourceType: 'microsoft.operationalinsights/workspaces'
          }
        }
        {
          type: 3
          content: {
            version: 'KqlItem/1.0'
            query: 'SecurityRecommendation\n| where RecommendationDisplayName contains "vulnerability"\n| summarize count() by bin(TimeGenerated, 1h)\n| render timechart'
            size: 1
            title: 'Vulnerability Trends Over Time'
            timeContext: {
              durationMs: 604800000
            }
            queryType: 0
            resourceType: 'microsoft.operationalinsights/workspaces'
          }
        }
      ]
    })
  }
}

// ============================================================================
// OUTPUTS
// ============================================================================

@description('The name of the created Container Registry')
output containerRegistryName string = containerRegistry.name

@description('The login server of the Container Registry')
output containerRegistryLoginServer string = containerRegistry.properties.loginServer

@description('The resource ID of the Container Registry')
output containerRegistryId string = containerRegistry.id

@description('The name of the Key Vault')
output keyVaultName string = keyVault.name

@description('The URI of the Key Vault')
output keyVaultUri string = keyVault.properties.vaultUri

@description('The resource ID of the Key Vault')
output keyVaultId string = keyVault.id

@description('The name of the Log Analytics workspace')
output logAnalyticsWorkspaceName string = logAnalyticsWorkspace.name

@description('The workspace ID of the Log Analytics workspace')
output logAnalyticsWorkspaceId string = logAnalyticsWorkspace.properties.customerId

@description('The resource ID of the Log Analytics workspace')
output logAnalyticsWorkspaceResourceId string = logAnalyticsWorkspace.id

@description('The name of the managed identity')
output managedIdentityName string = managedIdentity.name

@description('The resource ID of the managed identity')
output managedIdentityId string = managedIdentity.id

@description('The client ID of the managed identity')
output managedIdentityClientId string = managedIdentity.properties.clientId

@description('The principal ID of the managed identity')
output managedIdentityPrincipalId string = managedIdentity.properties.principalId

@description('The name of the storage account')
output storageAccountName string = storageAccount.name

@description('The resource ID of the storage account')
output storageAccountId string = storageAccount.id

@description('The name of the Application Insights instance')
output applicationInsightsName string = applicationInsights.name

@description('The instrumentation key of Application Insights')
output applicationInsightsInstrumentationKey string = applicationInsights.properties.InstrumentationKey

@description('The connection string of Application Insights')
output applicationInsightsConnectionString string = applicationInsights.properties.ConnectionString

@description('The name of the action group')
output actionGroupName string = actionGroup.name

@description('The resource ID of the action group')
output actionGroupId string = actionGroup.id

@description('Environment configuration')
output environmentConfig object = {
  environment: environment
  location: location
  resourceGroupName: resourceGroup().name
  subscriptionId: subscription().subscriptionId
  tenantId: tenant().tenantId
}

@description('Resource names for reference')
output resourceNames object = resourceNames

@description('Security configuration status')
output securityConfig object = {
  defenderEnabled: enableDefender
  contentTrustEnabled: enableContentTrust
  containerPoliciesEnabled: enableContainerPolicies
  acrSku: acrSku
}