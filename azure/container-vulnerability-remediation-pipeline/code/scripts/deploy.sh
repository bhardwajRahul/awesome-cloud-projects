#!/bin/bash
set -e

# Azure Container Image Vulnerability Remediation - Deployment Script
# This script deploys the automated container image vulnerability remediation solution
# using Azure Container Registry, Azure DevOps, Azure Policy, and Azure Monitor

# Script Configuration
SCRIPT_VERSION="1.0.0"
SCRIPT_NAME="Azure Container Vulnerability Remediation Deployment"
LOG_FILE="/tmp/azure-container-security-deploy-$(date +%Y%m%d_%H%M%S).log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] ✅ $1${NC}" | tee -a "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] ⚠️  $1${NC}" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ❌ $1${NC}" | tee -a "$LOG_FILE"
}

# Error handling
handle_error() {
    log_error "Error occurred in line $1. Exiting."
    log_error "Check the log file at: $LOG_FILE"
    exit 1
}

trap 'handle_error $LINENO' ERR

# Display script header
echo "=============================================="
echo "$SCRIPT_NAME v$SCRIPT_VERSION"
echo "=============================================="
echo "Log file: $LOG_FILE"
echo ""

# Check prerequisites
check_prerequisites() {
    log "Checking prerequisites..."
    
    # Check if Azure CLI is installed
    if ! command -v az &> /dev/null; then
        log_error "Azure CLI is not installed. Please install it first."
        exit 1
    fi
    
    # Check if user is logged in to Azure
    if ! az account show &> /dev/null; then
        log_error "Not logged in to Azure. Please run 'az login' first."
        exit 1
    fi
    
    # Check if jq is installed
    if ! command -v jq &> /dev/null; then
        log_error "jq is not installed. Please install it first."
        exit 1
    fi
    
    # Check if openssl is installed
    if ! command -v openssl &> /dev/null; then
        log_error "openssl is not installed. Please install it first."
        exit 1
    fi
    
    # Check if Docker is installed
    if ! command -v docker &> /dev/null; then
        log_warning "Docker is not installed. Required for local image testing."
    fi
    
    log_success "Prerequisites check completed"
}

# Set default values and validate environment variables
set_default_values() {
    log "Setting default values and validating environment variables..."
    
    # Set default values if not provided
    export RESOURCE_GROUP="${RESOURCE_GROUP:-rg-container-security}"
    export LOCATION="${LOCATION:-eastus}"
    export ACR_NAME="${ACR_NAME:-acrcontainersec}"
    export KEYVAULT_NAME="${KEYVAULT_NAME:-kv-containersec}"
    export WORKSPACE_NAME="${WORKSPACE_NAME:-law-container-security}"
    export PROJECT_NAME="${PROJECT_NAME:-container-security-automation}"
    export SP_NAME="${SP_NAME:-sp-devops-container-security}"
    
    # Generate unique suffix for globally unique resource names
    RANDOM_SUFFIX=$(openssl rand -hex 3)
    export ACR_NAME="${ACR_NAME}${RANDOM_SUFFIX}"
    export KEYVAULT_NAME="${KEYVAULT_NAME}-${RANDOM_SUFFIX}"
    
    # Validate required environment variables
    if [[ -z "$RESOURCE_GROUP" ]]; then
        log_error "RESOURCE_GROUP environment variable is required"
        exit 1
    fi
    
    if [[ -z "$LOCATION" ]]; then
        log_error "LOCATION environment variable is required"
        exit 1
    fi
    
    log_success "Environment variables configured"
    log "Resource Group: $RESOURCE_GROUP"
    log "Location: $LOCATION"
    log "ACR Name: $ACR_NAME"
    log "Key Vault Name: $KEYVAULT_NAME"
    log "Workspace Name: $WORKSPACE_NAME"
}

# Create resource group and foundational resources
create_resource_group() {
    log "Creating resource group and foundational resources..."
    
    # Check if resource group already exists
    if az group show --name "$RESOURCE_GROUP" &> /dev/null; then
        log_warning "Resource group $RESOURCE_GROUP already exists. Skipping creation."
    else
        az group create \
            --name "$RESOURCE_GROUP" \
            --location "$LOCATION" \
            --tags purpose=security environment=demo
        log_success "Resource group created: $RESOURCE_GROUP"
    fi
    
    # Create Log Analytics workspace
    log "Creating Log Analytics workspace..."
    export WORKSPACE_ID=$(az monitor log-analytics workspace create \
        --resource-group "$RESOURCE_GROUP" \
        --workspace-name "$WORKSPACE_NAME" \
        --location "$LOCATION" \
        --query id --output tsv)
    
    log_success "Log Analytics workspace created: $WORKSPACE_NAME"
}

# Create Azure Container Registry with security features
create_container_registry() {
    log "Creating Azure Container Registry with advanced security features..."
    
    # Check if ACR already exists
    if az acr show --name "$ACR_NAME" &> /dev/null; then
        log_warning "Azure Container Registry $ACR_NAME already exists. Skipping creation."
    else
        az acr create \
            --resource-group "$RESOURCE_GROUP" \
            --name "$ACR_NAME" \
            --sku Premium \
            --location "$LOCATION" \
            --workspace "$WORKSPACE_ID"
        log_success "Azure Container Registry created: $ACR_NAME"
    fi
    
    # Enable Microsoft Defender for container registries
    log "Enabling Microsoft Defender for container registries..."
    az security auto-provisioning-setting update \
        --auto-provision "On" \
        --name "ContainerRegistry" || log_warning "Failed to enable auto-provisioning for container registry"
    
    # Enable content trust for signed images
    log "Enabling content trust for signed images..."
    az acr config content-trust update \
        --name "$ACR_NAME" \
        --status enabled || log_warning "Failed to enable content trust"
    
    log_success "Container Registry configured with security features"
}

# Configure Azure Key Vault for secure credential storage
create_key_vault() {
    log "Creating Azure Key Vault for secure credential storage..."
    
    # Check if Key Vault already exists
    if az keyvault show --name "$KEYVAULT_NAME" &> /dev/null; then
        log_warning "Key Vault $KEYVAULT_NAME already exists. Skipping creation."
    else
        az keyvault create \
            --name "$KEYVAULT_NAME" \
            --resource-group "$RESOURCE_GROUP" \
            --location "$LOCATION" \
            --enable-rbac-authorization true
        log_success "Key Vault created: $KEYVAULT_NAME"
    fi
    
    # Create service principal for Azure DevOps
    log "Creating service principal for Azure DevOps..."
    export SP_CREDENTIALS=$(az ad sp create-for-rbac \
        --name "$SP_NAME" \
        --role "Contributor" \
        --scopes "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/${RESOURCE_GROUP}" \
        --output json)
    
    if [[ $? -eq 0 ]]; then
        log_success "Service principal created: $SP_NAME"
        
        # Store service principal credentials in Key Vault
        log "Storing service principal credentials in Key Vault..."
        az keyvault secret set \
            --vault-name "$KEYVAULT_NAME" \
            --name "devops-sp-appid" \
            --value "$(echo $SP_CREDENTIALS | jq -r .appId)"
        
        az keyvault secret set \
            --vault-name "$KEYVAULT_NAME" \
            --name "devops-sp-password" \
            --value "$(echo $SP_CREDENTIALS | jq -r .password)"
        
        log_success "Service principal credentials stored in Key Vault"
    else
        log_error "Failed to create service principal"
        exit 1
    fi
}

# Deploy Azure Policy for container security compliance
deploy_azure_policy() {
    log "Deploying Azure Policy for container security compliance..."
    
    # Assign built-in policy for vulnerability assessment
    log "Assigning vulnerability assessment policy..."
    az policy assignment create \
        --name "container-vulnerability-assessment" \
        --display-name "Container images should have vulnerability findings resolved" \
        --policy "5f0f936f-2f01-4bf5-b6be-d423792fa562" \
        --scope "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/${RESOURCE_GROUP}" \
        --params '{
            "effect": {
                "value": "Deny"
            },
            "excludedImagePrefixes": {
                "value": ["mcr.microsoft.com", "docker.io/library"]
            }
        }' || log_warning "Failed to assign vulnerability assessment policy"
    
    # Create custom policy for image age compliance
    log "Creating custom policy for image age compliance..."
    az policy definition create \
        --name "container-image-age-limit" \
        --display-name "Container images must be rebuilt within 30 days" \
        --mode "All" \
        --rules '{
            "if": {
                "field": "type",
                "equals": "Microsoft.ContainerRegistry/registries/images"
            },
            "then": {
                "effect": "deny",
                "details": {
                    "message": "Container images older than 30 days must be rebuilt"
                }
            }
        }' || log_warning "Failed to create custom policy definition"
    
    log_success "Azure Policy deployment completed"
}

# Create Azure DevOps project and service connections
create_devops_project() {
    log "Creating Azure DevOps project and service connections..."
    
    # Install Azure DevOps extension if not already installed
    log "Installing Azure DevOps extension..."
    az extension add --name azure-devops --upgrade || log_warning "Failed to install/upgrade Azure DevOps extension"
    
    # Configure Azure DevOps defaults
    export AZURE_DEVOPS_ORG_URL="https://dev.azure.com/$(az account show --query user.name -o tsv | cut -d'@' -f1)"
    az devops configure --defaults organization="$AZURE_DEVOPS_ORG_URL" || log_warning "Failed to configure DevOps defaults"
    
    # Create new DevOps project
    log "Creating Azure DevOps project..."
    az devops project create \
        --name "$PROJECT_NAME" \
        --description "Automated container vulnerability remediation" \
        --visibility private || log_warning "Failed to create DevOps project or project already exists"
    
    # Create service connection to Azure
    log "Creating service connection to Azure..."
    export SERVICE_ENDPOINT_ID=$(az devops service-endpoint azurerm create \
        --azure-rm-service-principal-id "$(echo $SP_CREDENTIALS | jq -r .appId)" \
        --azure-rm-subscription-id "$(az account show --query id -o tsv)" \
        --azure-rm-subscription-name "$(az account show --query name -o tsv)" \
        --azure-rm-tenant-id "$(az account show --query tenantId -o tsv)" \
        --name "azure-container-security" \
        --project "$PROJECT_NAME" \
        --query id -o tsv) || log_warning "Failed to create service connection"
    
    log_success "Azure DevOps project and service connections created"
}

# Create vulnerability scanning pipeline
create_vulnerability_scanning_pipeline() {
    log "Creating vulnerability scanning pipeline..."
    
    # Create pipeline YAML for vulnerability scanning
    cat > vulnerability-scan-pipeline.yml << 'EOF'
trigger:
  branches:
    include:
    - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: container-security-vars

stages:
- stage: ScanImages
  displayName: 'Scan Container Images'
  jobs:
  - job: TrivyScan
    displayName: 'Trivy Vulnerability Scan'
    steps:
    - task: Docker@2
      displayName: 'Pull Image from ACR'
      inputs:
        containerRegistry: 'azure-container-security'
        command: 'pull'
        arguments: '$(ACR_NAME).azurecr.io/$(Build.Repository.Name):$(Build.BuildId)'
    
    - script: |
        # Install Trivy scanner
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/trivy.list
        sudo apt-get update && sudo apt-get install -y trivy
        
        # Run vulnerability scan
        trivy image --severity HIGH,CRITICAL \
                    --format json \
                    --output scan-results.json \
                    $(ACR_NAME).azurecr.io/$(Build.Repository.Name):$(Build.BuildId)
      displayName: 'Run Trivy Scan'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'scan-results.json'
        artifactName: 'vulnerability-report'
EOF
    
    # Create pipeline in Azure DevOps
    log "Creating vulnerability scanning pipeline in Azure DevOps..."
    az pipelines create \
        --name "vulnerability-scanning" \
        --description "Automated container vulnerability scanning" \
        --repository "$PROJECT_NAME" \
        --branch main \
        --yml-path vulnerability-scan-pipeline.yml \
        --project "$PROJECT_NAME" || log_warning "Failed to create vulnerability scanning pipeline"
    
    log_success "Vulnerability scanning pipeline created"
}

# Create remediation pipeline
create_remediation_pipeline() {
    log "Creating automated remediation pipeline with Copa..."
    
    # Create remediation pipeline YAML
    cat > remediation-pipeline.yml << 'EOF'
trigger: none  # Triggered by vulnerability detection

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: container-security-vars

stages:
- stage: RemediateVulnerabilities
  displayName: 'Patch Container Images'
  jobs:
  - job: CopaPatch
    displayName: 'Apply Security Patches with Copa'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'specific'
        project: '$(System.TeamProject)'
        pipeline: 'vulnerability-scanning'
        buildVersionToDownload: 'latest'
        downloadType: 'single'
        artifactName: 'vulnerability-report'
    
    - script: |
        # Install Copa for direct image patching
        wget https://github.com/project-copacetic/copacetic/releases/latest/download/copa_Linux_x86_64.tar.gz
        tar -xzf copa_Linux_x86_64.tar.gz
        sudo mv copa /usr/local/bin/
        
        # Install buildkit for Copa operations
        docker run --detach --rm --privileged \
                   --name buildkitd \
                   --entrypoint buildkitd \
                   moby/buildkit:latest
      displayName: 'Install Copa and Dependencies'
    
    - script: |
        # Parse vulnerabilities and generate patch
        export IMAGE_NAME="$(ACR_NAME).azurecr.io/$(Build.Repository.Name):$(Build.BuildId)"
        export PATCHED_TAG="${IMAGE_NAME}-patched-$(date +%Y%m%d%H%M%S)"
        
        # Apply patches using Copa
        copa patch -i ${IMAGE_NAME} \
                   -r vulnerability-report/scan-results.json \
                   -t ${PATCHED_TAG} \
                   --addr docker-container://buildkitd
        
        # Push patched image to registry
        docker push ${PATCHED_TAG}
      displayName: 'Patch Image with Copa'
    
    - task: AzureCLI@2
      displayName: 'Update Image Tags'
      inputs:
        azureSubscription: 'azure-container-security'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Tag patched image as latest
          az acr repository update \
              --name $(ACR_NAME) \
              --image $(Build.Repository.Name):latest \
              --delete-enabled false \
              --write-enabled false
EOF
    
    # Create remediation pipeline
    log "Creating remediation pipeline in Azure DevOps..."
    az pipelines create \
        --name "vulnerability-remediation" \
        --description "Automated container patching with Copa" \
        --repository "$PROJECT_NAME" \
        --branch main \
        --yml-path remediation-pipeline.yml \
        --project "$PROJECT_NAME" || log_warning "Failed to create remediation pipeline"
    
    log_success "Remediation pipeline created"
}

# Set up Azure Monitor alerts
setup_monitoring_alerts() {
    log "Setting up Azure Monitor alerts for vulnerability detection..."
    
    # Create action group for vulnerability alerts
    log "Creating action group for vulnerability alerts..."
    az monitor action-group create \
        --name "ag-container-vulnerabilities" \
        --resource-group "$RESOURCE_GROUP" \
        --short-name "ContVuln" \
        --action webhook "remediation-webhook" \
                "https://dev.azure.com/${AZURE_DEVOPS_ORG_URL}/_apis/pipelines/$(az pipelines show --name vulnerability-remediation --project ${PROJECT_NAME} --query id -o tsv)/runs?api-version=6.0" \
        || log_warning "Failed to create action group"
    
    # Create alert rule for high/critical vulnerabilities
    log "Creating alert rule for high/critical vulnerabilities..."
    az monitor metrics alert create \
        --name "container-critical-vulnerabilities" \
        --resource-group "$RESOURCE_GROUP" \
        --scopes "$WORKSPACE_ID" \
        --condition "avg SecurityRecommendation where RecommendationDisplayName == 'Container registry images should have vulnerability findings resolved' > 0" \
        --description "Critical vulnerabilities detected in container images" \
        --severity 1 \
        --action "ag-container-vulnerabilities" \
        || log_warning "Failed to create alert rule"
    
    # Create scheduled query for vulnerability trends
    log "Creating scheduled query for vulnerability trends..."
    az monitor scheduled-query create \
        --name "vulnerability-trend-analysis" \
        --resource-group "$RESOURCE_GROUP" \
        --scopes "$WORKSPACE_ID" \
        --condition "count > 10" \
        --query "ContainerRegistryVulnerabilityAssessment 
                | where Severity in ('High', 'Critical')
                | summarize count() by bin(TimeGenerated, 1h), ImageName" \
        --severity 2 \
        || log_warning "Failed to create scheduled query"
    
    log_success "Monitoring and alerting configured"
}

# Create validation and deployment pipeline
create_validation_pipeline() {
    log "Creating validation and deployment pipeline..."
    
    # Create validation and deployment pipeline
    cat > validation-deployment-pipeline.yml << 'EOF'
trigger: none  # Triggered after remediation

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: ValidatePatches
  displayName: 'Validate Patched Images'
  jobs:
  - job: SecurityValidation
    displayName: 'Security and Functional Testing'
    steps:
    - script: |
        # Re-scan patched image to verify remediation
        IMAGE_NAME="$(ACR_NAME).azurecr.io/$(Build.Repository.Name):latest-patched"
        
        trivy image --severity HIGH,CRITICAL \
                    --exit-code 1 \
                    ${IMAGE_NAME}
        
        if [ $? -eq 0 ]; then
          echo "✅ Image successfully patched - no critical vulnerabilities found"
        else
          echo "❌ Critical vulnerabilities still present"
          exit 1
        fi
      displayName: 'Verify Vulnerability Remediation'
    
    - task: Docker@2
      displayName: 'Run Functional Tests'
      inputs:
        command: 'run'
        arguments: '--rm $(ACR_NAME).azurecr.io/$(Build.Repository.Name):latest-patched /app/tests/run-tests.sh'

- stage: DeployToProduction
  displayName: 'Deploy to AKS'
  dependsOn: ValidatePatches
  condition: succeeded()
  jobs:
  - deployment: DeployPatchedImage
    displayName: 'Rolling Deployment to AKS'
    environment: 'production'
    strategy:
      canary:
        increments: [10, 50, 100]
        preDeploy:
          steps:
          - script: echo "Starting canary deployment"
        postRouteTraffic:
          steps:
          - script: |
              # Monitor error rates during canary
              kubectl logs -l app=$(Build.Repository.Name) --tail=100
EOF
    
    # Create the validation pipeline
    log "Creating validation pipeline in Azure DevOps..."
    az pipelines create \
        --name "validation-deployment" \
        --description "Validate and deploy patched containers" \
        --repository "$PROJECT_NAME" \
        --branch main \
        --yml-path validation-deployment-pipeline.yml \
        --project "$PROJECT_NAME" || log_warning "Failed to create validation pipeline"
    
    log_success "Validation and deployment pipeline created"
}

# Clean up temporary files
cleanup_temp_files() {
    log "Cleaning up temporary files..."
    
    # Remove pipeline YAML files
    rm -f vulnerability-scan-pipeline.yml
    rm -f remediation-pipeline.yml
    rm -f validation-deployment-pipeline.yml
    
    log_success "Temporary files cleaned up"
}

# Display deployment summary
display_summary() {
    log "=============================================="
    log "Deployment Summary"
    log "=============================================="
    log "Resource Group: $RESOURCE_GROUP"
    log "Azure Container Registry: $ACR_NAME"
    log "Key Vault: $KEYVAULT_NAME"
    log "Log Analytics Workspace: $WORKSPACE_NAME"
    log "Azure DevOps Project: $PROJECT_NAME"
    log "Service Principal: $SP_NAME"
    log "=============================================="
    log "Deployment completed successfully!"
    log "Log file: $LOG_FILE"
    log "=============================================="
}

# Main deployment function
main() {
    log "Starting Azure Container Vulnerability Remediation deployment..."
    
    check_prerequisites
    set_default_values
    create_resource_group
    create_container_registry
    create_key_vault
    deploy_azure_policy
    create_devops_project
    create_vulnerability_scanning_pipeline
    create_remediation_pipeline
    setup_monitoring_alerts
    create_validation_pipeline
    cleanup_temp_files
    display_summary
    
    log_success "Deployment completed successfully!"
}

# Execute main function
main "$@"