#!/bin/bash
set -e

# Azure Container Image Vulnerability Remediation - Cleanup Script
# This script removes all resources created for the container vulnerability remediation solution

# Script Configuration
SCRIPT_VERSION="1.0.0"
SCRIPT_NAME="Azure Container Vulnerability Remediation Cleanup"
LOG_FILE="/tmp/azure-container-security-cleanup-$(date +%Y%m%d_%H%M%S).log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] ✅ $1${NC}" | tee -a "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] ⚠️  $1${NC}" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ❌ $1${NC}" | tee -a "$LOG_FILE"
}

# Error handling
handle_error() {
    log_error "Error occurred in line $1. Continuing with cleanup..."
    log_error "Check the log file at: $LOG_FILE"
    # Don't exit on error during cleanup - continue with remaining cleanup
}

trap 'handle_error $LINENO' ERR

# Display script header
echo "=============================================="
echo "$SCRIPT_NAME v$SCRIPT_VERSION"
echo "=============================================="
echo "Log file: $LOG_FILE"
echo ""

# Check prerequisites
check_prerequisites() {
    log "Checking prerequisites..."
    
    # Check if Azure CLI is installed
    if ! command -v az &> /dev/null; then
        log_error "Azure CLI is not installed. Please install it first."
        exit 1
    fi
    
    # Check if user is logged in to Azure
    if ! az account show &> /dev/null; then
        log_error "Not logged in to Azure. Please run 'az login' first."
        exit 1
    fi
    
    # Check if jq is installed
    if ! command -v jq &> /dev/null; then
        log_error "jq is not installed. Please install it first."
        exit 1
    fi
    
    log_success "Prerequisites check completed"
}

# Set default values and validate environment variables
set_default_values() {
    log "Setting default values and validating environment variables..."
    
    # Set default values if not provided
    export RESOURCE_GROUP="${RESOURCE_GROUP:-rg-container-security}"
    export LOCATION="${LOCATION:-eastus}"
    export ACR_NAME="${ACR_NAME:-acrcontainersec}"
    export KEYVAULT_NAME="${KEYVAULT_NAME:-kv-containersec}"
    export WORKSPACE_NAME="${WORKSPACE_NAME:-law-container-security}"
    export PROJECT_NAME="${PROJECT_NAME:-container-security-automation}"
    export SP_NAME="${SP_NAME:-sp-devops-container-security}"
    
    # If environment variables don't include suffix, try to find resources with suffix
    if ! az group show --name "$RESOURCE_GROUP" &> /dev/null; then
        log_warning "Resource group $RESOURCE_GROUP not found. Attempting to find resources..."
        
        # Try to find resource groups with similar names
        FOUND_RG=$(az group list --query "[?starts_with(name, 'rg-container-security')].name" -o tsv | head -1)
        if [[ -n "$FOUND_RG" ]]; then
            export RESOURCE_GROUP="$FOUND_RG"
            log "Found resource group: $RESOURCE_GROUP"
        else
            log_warning "No matching resource group found. Some resources may not be deleted."
        fi
    fi
    
    log_success "Environment variables configured"
    log "Resource Group: $RESOURCE_GROUP"
    log "Location: $LOCATION"
    log "ACR Name: $ACR_NAME"
    log "Key Vault Name: $KEYVAULT_NAME"
    log "Workspace Name: $WORKSPACE_NAME"
}

# Confirm deletion
confirm_deletion() {
    log "=============================================="
    log "WARNING: This will permanently delete all resources!"
    log "=============================================="
    log "Resources to be deleted:"
    log "- Resource Group: $RESOURCE_GROUP"
    log "- All contained resources (ACR, Key Vault, Log Analytics, etc.)"
    log "- Azure DevOps Project: $PROJECT_NAME"
    log "- Service Principal: $SP_NAME"
    log "- Azure Policy assignments and definitions"
    log "- Monitoring alerts and action groups"
    log "=============================================="
    
    read -p "Are you sure you want to continue? (yes/no): " -r
    echo
    if [[ ! $REPLY =~ ^[Yy][Ee][Ss]$ ]]; then
        log "Cleanup cancelled by user"
        exit 0
    fi
    
    log "Proceeding with cleanup..."
}

# Remove Azure DevOps resources
remove_devops_resources() {
    log "Removing Azure DevOps resources..."
    
    # Install Azure DevOps extension if not already installed
    log "Installing Azure DevOps extension..."
    az extension add --name azure-devops --upgrade &> /dev/null || log_warning "Failed to install/upgrade Azure DevOps extension"
    
    # Configure Azure DevOps defaults
    export AZURE_DEVOPS_ORG_URL="https://dev.azure.com/$(az account show --query user.name -o tsv | cut -d'@' -f1)"
    az devops configure --defaults organization="$AZURE_DEVOPS_ORG_URL" &> /dev/null || log_warning "Failed to configure DevOps defaults"
    
    # Delete pipelines
    log "Deleting Azure DevOps pipelines..."
    PIPELINE_IDS=$(az pipelines list --project "$PROJECT_NAME" --query "[].id" -o tsv 2>/dev/null || echo "")
    if [[ -n "$PIPELINE_IDS" ]]; then
        echo "$PIPELINE_IDS" | while read -r pipeline_id; do
            if [[ -n "$pipeline_id" ]]; then
                az pipelines delete \
                    --id "$pipeline_id" \
                    --project "$PROJECT_NAME" \
                    --yes &> /dev/null || log_warning "Failed to delete pipeline: $pipeline_id"
            fi
        done
        log_success "Pipelines deleted"
    else
        log_warning "No pipelines found or project does not exist"
    fi
    
    # Delete project
    log "Deleting Azure DevOps project..."
    PROJECT_ID=$(az devops project show --project "$PROJECT_NAME" --query id -o tsv 2>/dev/null || echo "")
    if [[ -n "$PROJECT_ID" ]]; then
        az devops project delete \
            --id "$PROJECT_ID" \
            --yes &> /dev/null || log_warning "Failed to delete DevOps project"
        log_success "Azure DevOps project deleted"
    else
        log_warning "Azure DevOps project not found"
    fi
}

# Remove Azure Policy assignments
remove_policy_assignments() {
    log "Removing Azure Policy assignments..."
    
    # Remove policy assignments
    log "Removing vulnerability assessment policy assignment..."
    az policy assignment delete \
        --name "container-vulnerability-assessment" \
        --scope "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/${RESOURCE_GROUP}" \
        &> /dev/null || log_warning "Failed to remove policy assignment or assignment not found"
    
    # Delete custom policy definition
    log "Deleting custom policy definition..."
    az policy definition delete \
        --name "container-image-age-limit" \
        &> /dev/null || log_warning "Failed to delete policy definition or definition not found"
    
    log_success "Policy assignments removed"
}

# Remove monitoring resources
remove_monitoring_resources() {
    log "Removing monitoring resources..."
    
    # Delete alerts
    log "Deleting alert rules..."
    az monitor metrics alert delete \
        --name "container-critical-vulnerabilities" \
        --resource-group "$RESOURCE_GROUP" \
        &> /dev/null || log_warning "Failed to delete alert rule or rule not found"
    
    az monitor scheduled-query delete \
        --name "vulnerability-trend-analysis" \
        --resource-group "$RESOURCE_GROUP" \
        &> /dev/null || log_warning "Failed to delete scheduled query or query not found"
    
    # Delete action group
    log "Deleting action group..."
    az monitor action-group delete \
        --name "ag-container-vulnerabilities" \
        --resource-group "$RESOURCE_GROUP" \
        &> /dev/null || log_warning "Failed to delete action group or group not found"
    
    log_success "Monitoring resources deleted"
}

# Remove service principal
remove_service_principal() {
    log "Removing service principal..."
    
    # Try to find service principal by name
    SP_ID=$(az ad sp list --display-name "$SP_NAME" --query "[].id" -o tsv 2>/dev/null || echo "")
    if [[ -n "$SP_ID" ]]; then
        log "Found service principal: $SP_ID"
        az ad sp delete --id "$SP_ID" &> /dev/null || log_warning "Failed to delete service principal"
        log_success "Service principal deleted"
    else
        log_warning "Service principal not found"
    fi
}

# Remove resource group and all contained resources
remove_resource_group() {
    log "Removing resource group and all contained resources..."
    
    # Check if resource group exists
    if az group show --name "$RESOURCE_GROUP" &> /dev/null; then
        log "Deleting resource group: $RESOURCE_GROUP"
        log "This may take 5-10 minutes..."
        
        # Delete resource group and all contained resources
        az group delete \
            --name "$RESOURCE_GROUP" \
            --yes \
            --no-wait &> /dev/null || log_warning "Failed to initiate resource group deletion"
        
        log_success "Resource group deletion initiated: $RESOURCE_GROUP"
        log "Note: Complete deletion may take 5-10 minutes"
    else
        log_warning "Resource group $RESOURCE_GROUP not found"
    fi
}

# Verify cleanup
verify_cleanup() {
    log "Verifying cleanup..."
    
    # Check if resource group still exists
    if az group show --name "$RESOURCE_GROUP" &> /dev/null; then
        log_warning "Resource group still exists (deletion may be in progress)"
    else
        log_success "Resource group successfully deleted"
    fi
    
    # Check if service principal still exists
    SP_ID=$(az ad sp list --display-name "$SP_NAME" --query "[].id" -o tsv 2>/dev/null || echo "")
    if [[ -n "$SP_ID" ]]; then
        log_warning "Service principal still exists"
    else
        log_success "Service principal successfully deleted"
    fi
    
    # Check if policy assignments still exist
    POLICY_ASSIGNMENTS=$(az policy assignment list --query "[?name=='container-vulnerability-assessment'].id" -o tsv 2>/dev/null || echo "")
    if [[ -n "$POLICY_ASSIGNMENTS" ]]; then
        log_warning "Policy assignments still exist"
    else
        log_success "Policy assignments successfully removed"
    fi
    
    log_success "Cleanup verification completed"
}

# Clean up temporary files
cleanup_temp_files() {
    log "Cleaning up temporary files..."
    
    # Remove any temporary files that might exist
    rm -f vulnerability-scan-pipeline.yml
    rm -f remediation-pipeline.yml
    rm -f validation-deployment-pipeline.yml
    
    log_success "Temporary files cleaned up"
}

# Display cleanup summary
display_summary() {
    log "=============================================="
    log "Cleanup Summary"
    log "=============================================="
    log "The following resources have been deleted:"
    log "- Resource Group: $RESOURCE_GROUP"
    log "- Azure Container Registry: $ACR_NAME"
    log "- Key Vault: $KEYVAULT_NAME"
    log "- Log Analytics Workspace: $WORKSPACE_NAME"
    log "- Azure DevOps Project: $PROJECT_NAME"
    log "- Service Principal: $SP_NAME"
    log "- Azure Policy assignments and definitions"
    log "- Monitoring alerts and action groups"
    log "=============================================="
    log "Cleanup completed!"
    log "Log file: $LOG_FILE"
    log "=============================================="
    log ""
    log "Note: Some resources may take additional time to be fully deleted."
    log "You can verify complete deletion by checking the Azure portal."
}

# Main cleanup function
main() {
    log "Starting Azure Container Vulnerability Remediation cleanup..."
    
    check_prerequisites
    set_default_values
    confirm_deletion
    remove_devops_resources
    remove_policy_assignments
    remove_monitoring_resources
    remove_service_principal
    remove_resource_group
    verify_cleanup
    cleanup_temp_files
    display_summary
    
    log_success "Cleanup completed successfully!"
}

# Execute main function
main "$@"